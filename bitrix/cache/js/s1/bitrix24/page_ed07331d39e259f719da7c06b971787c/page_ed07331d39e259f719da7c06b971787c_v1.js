
; /* Start:"a:4:{s:4:"full";s:91:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js?16548424637131";s:6:"source";s:72:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.js";s:3:"min";s:76:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js";s:3:"map";s:76:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.map.js";}"*/
BX.namespace("Tasks.Component");BX.Tasks.Component.IframePopup=function(t){this.opts=BX.merge({},t);this.vars={skip:true,callbacks:{},resizeInterval:false,resizeLock:true,lastHeight:false};this.sys={scope:null};this.instances={win:false};this.ctrls={iframe:null,wrap:null,close:null};this.setCallbacks(t.callbacks);this.bindEvents()};BX.mergeEx(BX.Tasks.Component.IframePopup.prototype,{add:function(t){this.edit(0,t)},view:function(t){this.open("view",t)},edit:function(t,e){this.open("edit",t,{urlParams:e})},open:function(t,e,n){e=parseInt(e);if(isNaN(e)||e<0){return}n=n||{};var i=this.getPath(t,e,n.urlParams);if(BX.Bitrix24&&"PageSlider"in BX.Bitrix24){BX.Bitrix24.PageSlider.open(i)}else{this.toggleLoading(true);this.getWindow().show();this.getWindow().setBindElement(this.getWindowCoords());this.getWindow().adjustPosition();this.getIframe().src=i}},close:function(){this.getWindow().close()},bindEvents:function(){BX.bind(window,"resize",BX.throttle(this.onWindowResize,100,this));BX.addCustomEvent(window,"tasksIframeLoad",this.onContentLoaded.bind(this));BX.addCustomEvent(window,"tasksIframeUnload",this.onContentUnLoaded.bind(this))},bindInnerDocumentEvents:function(){var t=this.getContentDocument();if(t){BX.bind(t,"keydown",this.onInnerDocumentKeyDown.bind(this))}},getIframe:function(){if(this.ctrls.iframe===null){this.ctrls.iframe=BX.create("iframe",{attrs:{scrolling:"no",frameBorder:"0"}})}return this.ctrls.iframe},getWindow:function(){if(this.instances.win===false){this.instances.win=new BX.PopupWindow("tasks-iframe-popup",{top:0,left:0},{autoHide:false,closeByEsc:true,content:this.getIframeContainer(),overlay:true,lightShadow:false,closeIcon:true,contentNoPaddings:true,draggable:false,titleBar:true,events:{onPopupClose:BX.delegate(this.onPopupClose,this),onPopupShow:BX.delegate(this.onPopupOpen,this)}});this.ctrls.close=BX.create("div",{props:{className:"hidden"},attrs:{id:"tasks-popup-close",title:BX.message("TASKS_TIP_COMPONENT_TEMPLATE_CLOSE_WINDOW")},events:{click:BX.delegate(this.onCloseClicked,this)},children:[BX.create("span")]});BX.insertAfter(this.ctrls.close,BX("popup-window-overlay-tasks-iframe-popup"))}return this.instances.win},setTitle:function(t,e){var n="";if(t!=false){t=t=="view"?"VIEW":"EDIT";e=parseInt(e);if(isNaN(e)||e<=0){e=0}if(t=="EDIT"&&e==0){t="NEW"}n=BX.message("TASKS_TIP_COMPONENT_TEMPLATE_"+t+"_TASK_TITLE");if(e>0){n=n.replace("#TASK_ID#",e)}}this.getWindow().setTitleBar(n)},getPath:function(t,e,n){t=t=="view"?"view":"edit";e=parseInt(e);var i=this.opts.pathToTasks.replace("#task_id#",e);i=i+(i.indexOf("?")==-1?"?":"&")+"IFRAME=Y";if(BX.type.isPlainObject(n)){for(var s in n){i+="&"+s+"="+encodeURIComponent(n[s])}}i=i.replace("#action#",t);return i},getWindowCoords:function(){var t=BX.pos(this.getIframeContainer()).width;var e=BX.GetWindowSize().innerWidth;var n=BX.GetWindowScrollPos().scrollTop;return{left:Math.floor((e-t)/2),top:30+n}},getContentDocument:function(){var t=this.getIframe();var e=null;if(t.contentDocument){e=t.contentDocument}if(t.contentWindow){e=t.contentWindow.document}return e&&e.body?e:null},getIframeContainer:function(){if(this.ctrls.wrap===null){this.ctrls.wrap=this.ctrls.wrap=BX.create("div",{props:{className:"tasks-iframe-wrap loading fixedHeight"},attrs:{id:"tasks-iframe-wrap"},children:[this.getIframe()]})}return this.ctrls.wrap},getContentContainer:function(){var t=this.getContentDocument();if(t){return t.getElementById("tasks-content-outer")}return null},onCloseClicked:function(){this.getWindow().close()},onTaskGlobalEvent:function(t,e){if(BX.type.isNotEmptyString(t)){var n=t.toString().toUpperCase();e=e||{};e.task=e.task||{};e.options=e.options||{};var i=[];var s=parseInt(e.task.ID);if(n=="DELETE"&&!isNaN(s)&&s){i.push(e.task.ID)}else if(n=="ADD"||n=="UPDATE"){if(e.taskUgly){i.push(e.taskUgly)}else{return}}if(!e.options.STAY_AT_PAGE){this.close()}if(typeof this.vars.callbacks[n]!="undefined"&&this.vars.callbacks[n]!==false){var o=this.vars.callbacks[n];if(BX.type.isString(o)){o=BX.Tasks.deReference(o,window)}if(BX.type.isFunction(o)){o.apply(window,i)}}}},onContentLoaded:function(){var t=this.getContentDocument();if(t){var e=this.parseUrl(t.location.pathname);if(e){this.setTitle(e.action,e.taskId)}}this.toggleLoading(false);this.startMonitorContent();this.bindInnerDocumentEvents()},onContentUnLoaded:function(){this.setTitle(false);this.stopMonitorContent()},onPopupOpen:function(){BX.toggleClass(this.ctrls.close,"hidden");this.toggleLoading(true)},onPopupClose:function(){BX.toggleClass(this.ctrls.close,"hidden");this.lockHeight();this.stopMonitorContent();this.toggleLoading(true);this.vars.lastHeight=false;this.getIframe().src="about:blank"},onWindowResize:function(){if(this.getWindow().isShown()){this.getWindow().setBindElement(this.getWindowCoords())}},onContentResize:function(){if(this.getWindow().isShown()&&!this.vars.resizeLock){var t=this.getContentDocument();if(t){var e=this.getContentContainer();if(e){var n=e.offsetHeight;if(n!=this.vars.lastHeight){this.getIframeContainer().style.height=n+"px";this.vars.lastHeight=n;this.unLockHeight()}this.getWindow().popupContainer.style.marginBottom="40px";this.getWindow().resizeOverlay()}}}},onInnerDocumentKeyDown:function(t){if(BX.Tasks.Util.isEsc(t)){this.close()}},lockHeight:function(){this.toggleFixedHeight(true)},unLockHeight:function(){this.toggleFixedHeight(false)},toggleFixedHeight:function(t){BX[t?"addClass":"removeClass"](this.getIframeContainer(),"fixedHeight")},toggleLoading:function(t){BX[t?"addClass":"removeClass"](this.getIframeContainer(),"loading")},stopMonitorContent:function(){this.vars.resizeLock=true},startMonitorContent:function(){this.vars.resizeLock=false;if(this.vars.resizeInterval===false){this.vars.resizeInterval=setInterval(BX.proxy(this.onContentResize,this),300)}},setCallbacks:function(t){if(BX.type.isPlainObject(t)){BX.Tasks.each(t,function(t,e){if(t=="#SHOW_ADDED_TASK_DETAIL#"){return}if(t!==false&&(BX.type.isFunction(t)||BX.type.isNotEmptyString(t))){this.vars.callbacks[e]=t}}.bind(this))}},showCreateForm:function(){this.add()},parseUrl:function(t){var e=this.opts.pathToTasks;if(e){e=e.toLowerCase().replace("#action#","(view|edit){1}").replace("#task_id#","(\\d+)");var n=t.match(new RegExp(e));if(n&&BX.type.isArray(n)){var i=n[1]||false;var s=n[2]||false;if(i&&s){return{action:i,taskId:parseInt(s)}}}}return null},onTaskAdded:function(t,e,n,i,s){BX.onCustomEvent(this,"onTaskAdded",[t,e,n,i,s])},onTaskChanged:function(t,e,n,i,s){BX.onCustomEvent(this,"onTaskChanged",[t,e,n,i,s])},onTaskDeleted:function(t){BX.onCustomEvent(this,"onTaskDeleted",[t])}});BX.Tasks.Component.IframePopup.create=function(t){if(window.top!=window){return}if(typeof BX.Tasks.Singletons=="undefined"){BX.Tasks.Singletons={}}if(typeof BX.Tasks.Singletons.iframePopup=="undefined"){BX.Tasks.Singletons.iframePopup=new BX.Tasks.Component.IframePopup(t);window.taskIFramePopup=BX.Tasks.Singletons.iframePopup;window.BX.TasksIFrameInst=BX.Tasks.Singletons.iframePopup}else{BX.Tasks.Singletons.iframePopup.setCallbacks(t.callbacks)}return BX.Tasks.Singletons.iframePopup};
/* End */
;
; /* Start:"a:4:{s:4:"full";s:85:"/bitrix/components/bitrix/crm.company.menu/templates/.default/script.js?1654841755484";s:6:"source";s:71:"/bitrix/components/bitrix/crm.company.menu/templates/.default/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/

function company_delete(title, message, btnTitle, path)
{
	var d;
	d = new BX.CDialog({
		title: title,
		head: '',
		content: message,
		resizable: false,
		draggable: true,
		height: 70,
		width: 300
	});
	
	var _BTN = [	
		{
			title: btnTitle,
			id: 'crmOk',
			'action': function () 
			{
				window.location.href = path;
				BX.WindowManager.Get().Close();
			}
		},
		BX.CDialog.btnCancel
	];	
	d.ClearButtons();
	d.SetButtons(_BTN);
	d.Show();
}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:94:"/bitrix/components/bitrix/crm.interface.toolbar/templates/slider/script.min.js?165484177015450";s:6:"source";s:74:"/bitrix/components/bitrix/crm.interface.toolbar/templates/slider/script.js";s:3:"min";s:78:"/bitrix/components/bitrix/crm.interface.toolbar/templates/slider/script.min.js";s:3:"map";s:78:"/bitrix/components/bitrix/crm.interface.toolbar/templates/slider/script.map.js";}"*/
if(typeof BX.InterfaceToolBar==="undefined"){BX.InterfaceToolBar=function(){this._id="";this._settings=null;this._container=null;this._menuButton=null;this._menuPopup=null;this._isMenuOpened=false};BX.InterfaceToolBar.prototype={initialize:function(t,e){this._id=t;this._settings=e?e:BX.CrmParamBag.create(null);var n=this._container=BX(this.getSetting("containerId",""));if(n){var o=this.getSetting("menuButtonClassName");if(!BX.type.isNotEmptyString(o)){o=this.getSetting("moreButtonClassName","crm-setting-btn")}if(BX.type.isNotEmptyString(o)){this._menuButton=BX.findChild(n,{className:o},true,false);if(this._menuButton){BX.bind(this._menuButton,"click",BX.delegate(this.onMenuButtonClick,this))}}}},getId:function(){return this._id},getSetting:function(t,e){return this._settings.getParam(t,e)},prepareMenuItem:function(t){var e=/return\s+false(\s*;)?\s*$/;var n=/;\s*$/;var o=typeof t["SEPARATOR"]!=="undefined"?t["SEPARATOR"]:false;if(o){return{delimiter:true}}var i=typeof t["LINK"]!=="undefined"?t["LINK"]:"";var s=typeof t["ONCLICK"]!=="undefined"?t["ONCLICK"]:"";if(i!==""){var r='window.top.location.href = "'+i+'";';s=s!==""?r+" "+s:r}if(s!==""){if(!e.test(s)){if(!n.test(s)){s+=";"}s+=" return false;"}}var a={text:typeof t["TEXT"]!=="undefined"?t["TEXT"]:"",className:"menu-popup-item-none"};if(s!==""){a["onclick"]=s}if(BX.type.isArray(t["MENU"])){var u=[];for(var p=0,l=t["MENU"].length;p<l;p++){u.push(this.prepareMenuItem(t["MENU"][p]))}a["items"]=u}return a},openMenu:function(t){if(this._isMenuOpened){this.closeMenu();return}var e=this.getSetting("items",null);if(!BX.type.isArray(e)){return}var n=[];for(var o=0;o<e.length;o++){n.push(this.prepareMenuItem(e[o]))}BX.onCustomEvent(window,"Crm.InterfaceToolbar.MenuBuild",[this,{items:n}]);this._menuId=this._id.toLowerCase()+"_menu";BX.PopupMenu.show(this._menuId,this._menuButton,n,{autoHide:true,closeByEsc:true,offsetTop:0,offsetLeft:0,events:{onPopupShow:BX.delegate(this.onPopupShow,this),onPopupClose:BX.delegate(this.onPopupClose,this),onPopupDestroy:BX.delegate(this.onPopupDestroy,this)}});this._menuPopup=BX.PopupMenu.currentItem},closeMenu:function(){if(this._menuPopup){if(this._menuPopup.popupWindow){this._menuPopup.popupWindow.destroy()}}},onMenuButtonClick:function(t){this.openMenu()},onPopupShow:function(){this._isMenuOpened=true},onPopupClose:function(){this.closeMenu()},onPopupDestroy:function(){this._isMenuOpened=false;this._menuPopup=null;if(typeof BX.PopupMenu.Data[this._menuId]!=="undefined"){delete BX.PopupMenu.Data[this._menuId]}},onEditorConfigReset:function(){var t=BX.Crm.EntityEditor.getDefault();if(t){t.resetConfig()}}};BX.InterfaceToolBar.create=function(t,e){var n=new BX.InterfaceToolBar;n.initialize(t,e);return n}}if(typeof BX.InterfaceToolBarCommunicationButton==="undefined"){BX.InterfaceToolBarCommunicationButton=function(){this._id="";this._settings=[];this._button=null;this._ownerInfo=null;this._isMenuOpened=false;this._menuPopup=null;this._menuId="";this._data=null;this._isEnabled=false};BX.InterfaceToolBarCommunicationButton.prototype={initialize:function(t,e){this._id=t;this._settings=e?e:{};this._button=BX.prop.getElementNode(this._settings,"button");BX.bind(this._button,"click",BX.delegate(this.onButtonClick,this));this._ownerInfo=BX.prop.getObject(this._settings,"ownerInfo",{});this._data=BX.prop.getObject(this._settings,"data",{});this._isEnabled=this.hasData();BX.addCustomEvent(window,"onCrmEntityUpdate",BX.delegate(this.onCrmEntityUpdate,this))},getOwnerInfo:function(){return{ownerID:this._ownerInfo["ENTITY_ID"],ownerType:this._ownerInfo["ENTITY_TYPE_NAME"],ownerUrl:this._ownerInfo["SHOW_URL"],ownerTitle:this._ownerInfo["TITLE"]}},getOwnerTypeName:function(){return BX.prop.getString(this._ownerInfo,"ENTITY_TYPE_NAME","")},getOwnerId:function(){return BX.prop.getInteger(this._ownerInfo,"ENTITY_ID",0)},getMultifieldTypeName:function(){return""},hasData:function(){return BX.type.isPlainObject(this._data)&&Object.keys(this._data).length>0},isEnabled:function(){return this._isEnabled},enable:function(t){t=!!t;if(this._isEnabled===t){return}this._isEnabled=t;this.doEnable(this._isEnabled)},doEnable:function(t){},onButtonClick:function(t){},prepareMenuItem:function(t){},openMenu:function(){if(this._isMenuOpened){this.closeMenu();return}var t=[];for(var e in this._data){if(!this._data.hasOwnProperty(e)){continue}var n=this._data[e];for(var o=0;o<n.length;o++){t.push(this.prepareMenuItem(e,n[o]))}}this._menuId=this._id.toLowerCase()+"_menu";BX.PopupMenu.show(this._menuId,this._button,t,{offsetTop:0,offsetLeft:0,events:{onPopupShow:BX.delegate(this.onPopupShow,this),onPopupClose:BX.delegate(this.onPopupClose,this),onPopupDestroy:BX.delegate(this.onPopupDestroy,this)}});this._menuPopup=BX.PopupMenu.currentItem},closeMenu:function(){if(this._menuPopup){if(this._menuPopup.popupWindow){this._menuPopup.popupWindow.destroy()}}},onPopupShow:function(){this._isMenuOpened=true},onPopupClose:function(){this.closeMenu()},onPopupDestroy:function(){this._isMenuOpened=false;this._menuPopup=null;if(typeof BX.PopupMenu.Data[this._menuId]!=="undefined"){delete BX.PopupMenu.Data[this._menuId]}},onCrmEntityUpdate:function(t){var e=BX.prop.getObject(t,"entityInfo",{});if(this.getOwnerTypeName()!==BX.prop.getString(e,"typeName","")||this.getOwnerId()!==BX.prop.getInteger(e,"id",0)){return}var n=BX.prop.getObject(t,"entityData",{});this._data=BX.prop.getObject(BX.prop.getObject(n,"MULTIFIELD_DATA",{}),this.getMultifieldTypeName(),{});this.enable(this.hasData());this.processDataChange()},processDataChange:function(){}}}if(typeof BX.InterfaceToolBarPhoneButton==="undefined"){BX.InterfaceToolBarPhoneButton=function(){BX.InterfaceToolBarPhoneButton.superclass.constructor.apply(this);this._menuItems=null};BX.extend(BX.InterfaceToolBarPhoneButton,BX.InterfaceToolBarCommunicationButton);BX.InterfaceToolBarPhoneButton.prototype.getMessage=function(t){var e=BX.InterfaceToolBarPhoneButton.messages;return e.hasOwnProperty(t)?e[t]:t};BX.InterfaceToolBarPhoneButton.prototype.onButtonClick=function(t){if(!this.isEnabled()){return}var e=Object.keys(this._data);if(e.length===1){var n=e[0];var o=this._data[n];if(o.length===1){var i=n.split("_");if(i.length>=2){this.addCall(n,o[0]);return}}}this._menuItems=[];this.openMenu()};BX.InterfaceToolBarPhoneButton.prototype.prepareMenuItem=function(t,e){var n;var o;if(BX.type.isPlainObject(e)){n=BX.prop.getString(e,"COMPLEX_NAME","")+": "+BX.prop.getString(e,"VALUE_FORMATTED","");o=BX.prop.getString(e,"VALUE","")}else{n=e;o=e}var i=BX.InterfaceToolBarPhoneMenuItem.create({owner:this,entityKey:t,value:o,text:n});this._menuItems.push(i);return i.createMenuItem()};BX.InterfaceToolBarPhoneButton.prototype.addCall=function(t,e){if(typeof window.top["BXIM"]==="undefined"){window.alert(this.getMessage("telephonyNotSupported"));return}var n=t.split("_");if(n.length<2){return}var o=BX.type.stringToInt(n[0]);var i=BX.type.stringToInt(n[1]);var s=BX.prop.getInteger(this._ownerInfo,"ENTITY_TYPE_ID",0);var r=BX.prop.getInteger(this._ownerInfo,"ENTITY_ID",0);var a=BX.type.isPlainObject(e)?e["VALUE"]:e;var u={ENTITY_TYPE_NAME:BX.CrmEntityType.resolveName(o),ENTITY_ID:i,AUTO_FOLD:true};if(s!==o||r!==i){u["BINDINGS"]=[{OWNER_TYPE_NAME:BX.CrmEntityType.resolveName(s),OWNER_ID:r}]}window.top["BXIM"].phoneTo(a,u)};BX.InterfaceToolBarPhoneButton.prototype.getMultifieldTypeName=function(){return"PHONE"};BX.InterfaceToolBarPhoneButton.prototype.doEnable=function(t){if(t){BX.removeClass(this._button,"crm-contact-menu-call-icon-not-available");BX.addClass(this._button,"crm-contact-menu-call-icon")}else{BX.removeClass(this._button,"crm-contact-menu-call-icon");BX.addClass(this._button,"crm-contact-menu-call-icon-not-available")}};if(typeof BX.InterfaceToolBarPhoneButton.messages==="undefined"){BX.InterfaceToolBarPhoneButton.messages={}}BX.InterfaceToolBarPhoneButton.create=function(t,e){var n=new BX.InterfaceToolBarPhoneButton;n.initialize(t,e);return n}}if(typeof BX.InterfaceToolBarPhoneMenuItem==="undefined"){BX.InterfaceToolBarPhoneMenuItem=function(){this._settings={};this._entityKey="";this._value="";this._text=""};BX.InterfaceToolBarPhoneMenuItem.prototype={initialize:function(t){this._settings=t?t:{};this._owner=BX.prop.get(this._settings,"owner");this._entityKey=BX.prop.getString(this._settings,"entityKey","");this._value=BX.prop.getString(this._settings,"value","");this._text=BX.prop.getString(this._settings,"text","")},onSelect:function(){this._owner.addCall(this._entityKey,this._value)},createMenuItem:function(){return{text:this._text,onclick:BX.delegate(this.onSelect,this)}}};BX.InterfaceToolBarPhoneMenuItem.create=function(t){var e=new BX.InterfaceToolBarPhoneMenuItem;e.initialize(t);return e}}if(typeof BX.InterfaceToolBarMessengerButton==="undefined"){BX.InterfaceToolBarMessengerButton=function(){BX.InterfaceToolBarMessengerButton.superclass.constructor.apply(this);this._menuItems=null};BX.extend(BX.InterfaceToolBarMessengerButton,BX.InterfaceToolBarCommunicationButton);BX.InterfaceToolBarMessengerButton.prototype.getMessage=function(t){var e=BX.InterfaceToolBarMessengerButton.messages;return e.hasOwnProperty(t)?e[t]:t};BX.InterfaceToolBarMessengerButton.prototype.onButtonClick=function(t){var e=Object.keys(this._data);if(e.length===1){var n=e[0];var o=this._data[n];if(o.length===1){var i=n.split("_");if(i.length>=2){this.openChat(n,o[0]);return}}}this._menuItems=[];this.openMenu()};BX.InterfaceToolBarMessengerButton.prototype.prepareMenuItem=function(t,e){var n;var o;if(BX.type.isPlainObject(e)){o=BX.prop.getString(e,"VALUE","");var i=BX.prop.getString(e,"VALUE_TYPE","");if(i==="OPENLINE"){n=BX.prop.getString(e,"COMPLEX_NAME","")}else{n=BX.prop.getString(e,"COMPLEX_NAME","")+": "+BX.prop.getString(e,"VALUE_FORMATTED","")}}else{n=e;o=e}var s=BX.InterfaceToolBarMessengerMenuItem.create({owner:this,entityKey:t,value:o,text:n});this._menuItems.push(s);return s.createMenuItem()};BX.InterfaceToolBarMessengerButton.prototype.openChat=function(t,e){if(typeof window.top["BXIM"]==="undefined"){window.alert(this.getMessage("messagingNotSupported"));return}var n=BX.type.isPlainObject(e)?e["VALUE"]:e;window.top["BXIM"].openMessengerSlider(n,{RECENT:"N",MENU:"N"})};BX.InterfaceToolBarMessengerButton.prototype.getMultifieldTypeName=function(){return"IM"};BX.InterfaceToolBarMessengerButton.prototype.doEnable=function(t){if(t){BX.removeClass(this._button,"crm-contact-menu-im-icon-not-available");BX.addClass(this._button,"crm-contact-menu-im-icon")}else{BX.removeClass(this._button,"crm-contact-menu-im-icon");BX.addClass(this._button,"crm-contact-menu-im-icon-not-available")}};if(typeof BX.InterfaceToolBarMessengerButton.messages==="undefined"){BX.InterfaceToolBarMessengerButton.messages={}}BX.InterfaceToolBarMessengerButton.create=function(t,e){var n=new BX.InterfaceToolBarMessengerButton;n.initialize(t,e);return n}}if(typeof BX.InterfaceToolBarMessengerMenuItem==="undefined"){BX.InterfaceToolBarMessengerMenuItem=function(){this._settings={};this._entityKey="";this._value="";this._text=""};BX.InterfaceToolBarMessengerMenuItem.prototype={initialize:function(t){this._settings=t?t:{};this._owner=BX.prop.get(this._settings,"owner");this._entityKey=BX.prop.getString(this._settings,"entityKey","");this._value=BX.prop.getString(this._settings,"value","");this._text=BX.prop.getString(this._settings,"text","")},onSelect:function(){this._owner.openChat(this._entityKey,this._value)},createMenuItem:function(){return{text:this._text,onclick:BX.delegate(this.onSelect,this)}}};BX.InterfaceToolBarMessengerMenuItem.create=function(t){var e=new BX.InterfaceToolBarMessengerMenuItem;e.initialize(t);return e}}if(typeof BX.InterfaceToolBarEmailButton==="undefined"){BX.InterfaceToolBarEmailButton=function(){BX.InterfaceToolBarEmailButton.superclass.constructor.apply(this)};BX.extend(BX.InterfaceToolBarEmailButton,BX.InterfaceToolBarCommunicationButton);BX.InterfaceToolBarEmailButton.prototype.onButtonClick=function(t){if(this.isEnabled()){BX.CrmActivityEditor.addEmail(this.getOwnerInfo())}};BX.InterfaceToolBarEmailButton.prototype.getMultifieldTypeName=function(){return"EMAIL"};BX.InterfaceToolBarEmailButton.prototype.doEnable=function(t){if(t){BX.removeClass(this._button,"crm-contact-menu-mail-icon-not-available");BX.addClass(this._button,"crm-contact-menu-mail-icon")}else{BX.removeClass(this._button,"crm-contact-menu-mail-icon");BX.addClass(this._button,"crm-contact-menu-mail-icon-not-available")}};BX.InterfaceToolBarEmailButton.create=function(t,e){var n=new BX.InterfaceToolBarEmailButton;n.initialize(t,e);return n}}if(typeof BX.InterfaceToolBarRestAppButton==="undefined"){BX.InterfaceToolBarRestAppButton=function(){this._id="";this._settings=[];this._button=null;this._ownerInfo=null;this._isMenuOpened=false;this._menuPopup=null;this._menuId="";this._items=null};BX.InterfaceToolBarRestAppButton.prototype={initialize:function(t,e){this._id=t;this._settings=e?e:{};this._button=BX.prop.getElementNode(this._settings,"button");BX.bind(this._button,"click",BX.delegate(this.onButtonClick,this));this._ownerInfo=BX.prop.getObject(this._settings,"ownerInfo",{});var n=BX.prop.getObject(this._settings,"data",{});this._items=[];var o=BX.prop.getString(n,"PLACEMENT","");var i=BX.prop.getArray(n,"APP_INFOS",[]);for(var s=0,r=i.length;s<r;s++){var a=BX.InterfaceToolBarRestAppMenuItem.create({owner:this,placementCode:o,info:i[s]});this._items.push(a)}},getOwnerInfo:function(){return this._ownerInfo},onButtonClick:function(t){this.openMenu()},openMenu:function(){if(this._isMenuOpened){this.closeMenu();return}var t=[];for(var e=0,n=this._items.length;e<n;e++){t.push(this._items[e].createMenuItem())}this._menuId=this._id.toLowerCase()+"_menu";BX.PopupMenu.show(this._menuId,this._button,t,{offsetTop:0,offsetLeft:0,events:{onPopupShow:BX.delegate(this.onPopupShow,this),onPopupClose:BX.delegate(this.onPopupClose,this),onPopupDestroy:BX.delegate(this.onPopupDestroy,this)}});this._menuPopup=BX.PopupMenu.currentItem},closeMenu:function(){if(this._menuPopup){if(this._menuPopup.popupWindow){this._menuPopup.popupWindow.destroy()}}},onPopupShow:function(){this._isMenuOpened=true},onPopupClose:function(){this.closeMenu()},onPopupDestroy:function(){this._isMenuOpened=false;this._menuPopup=null;if(typeof BX.PopupMenu.Data[this._menuId]!=="undefined"){delete BX.PopupMenu.Data[this._menuId]}}};BX.InterfaceToolBarRestAppButton.create=function(t,e){var n=new BX.InterfaceToolBarRestAppButton;n.initialize(t,e);return n}}if(typeof BX.InterfaceToolBarRestAppMenuItem==="undefined"){BX.InterfaceToolBarRestAppMenuItem=function(){this._settings={};this._placementCode="";this._appInfo={}};BX.InterfaceToolBarRestAppMenuItem.prototype={initialize:function(t){this._settings=t?t:{};this._owner=BX.prop.get(this._settings,"owner");this._placementCode=BX.prop.getString(this._settings,"placementCode","");this._appInfo=BX.prop.getObject(this._settings,"info",{})},onSelect:function(){BX.rest.AppLayout.openApplication(BX.prop.getInteger(this._appInfo,"APP_ID"),{ID:BX.prop.getInteger(this._owner.getOwnerInfo(),"ENTITY_ID")},{PLACEMENT:this._placementCode,PLACEMENT_ID:BX.prop.getInteger(this._appInfo,"ID")})},createMenuItem:function(){return{text:BX.prop.getString(this._appInfo,"TITLE"),onclick:BX.delegate(this.onSelect,this)}}};BX.InterfaceToolBarRestAppMenuItem.create=function(t){var e=new BX.InterfaceToolBarRestAppMenuItem;e.initialize(t);return e}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:95:"/bitrix/components/bitrix/intranet.binding.menu/templates/.default/script.min.js?16548420241622";s:6:"source";s:76:"/bitrix/components/bitrix/intranet.binding.menu/templates/.default/script.js";s:3:"min";s:80:"/bitrix/components/bitrix/intranet.binding.menu/templates/.default/script.min.js";s:3:"map";s:80:"/bitrix/components/bitrix/intranet.binding.menu/templates/.default/script.map.js";}"*/
(function(){"use strict";BX.namespace("BX.Intranet.Binding.Menu");BX.Intranet.Binding.Menu=function(i,t,n){n=n||{};this.id=i||"intranet_binding_menu";this.idTop=this.id+"_top";this.items=t;this.menu=null;this.menuShowed=false;this.sections=n.sections||{};this.frequencyItem=n.frequencyItem||{};this.ajaxPath=n.ajaxPath||"";this.bindingId=n.bindingId||""};BX.Intranet.Binding.Menu.prototype={binding:function(){if(BX(this.id)){BX.bind(BX(this.id),"click",BX.delegate(this.clickMenuButton,this));if(BX(this.idTop)&&BX(this.idTop).getAttribute("href")==="#"){BX.bind(BX(this.idTop),"click",BX.delegate(this.clickMenuButton,this))}}},onItemClick:function(id,onclick){this.menu.close();if(BX.type.isString(onclick)){eval(onclick)}BX.ajax({url:this.ajaxPath,method:"POST",data:{action:"openingLog",payload:{bindingId:this.bindingId,menuItemId:id},sessid:BX.message("bitrix_sessid")},dataType:"json",onsuccess:function(i){}.bind(this)})},buildMenu:function(i){var t=[];for(var n=0,e=i.length;n<e;n++){i[n]["text"]=i[n]["text"];if(typeof i[n]["items"]!=="undefined"){i[n]["items"]=this.buildMenu(i[n]["items"])}else if(!i[n]["system"]){i[n]["onclick"]=this.onItemClick.bind(this,i[n]["id"],i[n]["onclick"])}t.push(i[n])}return t},clickMenuButton:function(i){if(!this.menu){this.menu=new BX.PopupMenuWindow(this.id,i.target===BX(this.idTop)?BX(this.idTop):BX(this.id),this.buildMenu(this.items),{autoHide:true,events:{onClose:function(){this.menuShowed=false}.bind(this)}})}if(this.menu){if(this.menuShowed){this.menu.close()}else{this.menuShowed=true;this.menu.show()}}BX.PreventDefault()}}})();
/* End */
;
; /* Start:"a:4:{s:4:"full";s:93:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js?165484176525930";s:6:"source";s:73:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.js";s:3:"min";s:77:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js";s:3:"map";s:77:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.map.js";}"*/
BX.namespace("BX.Crm");if(typeof BX.Crm.EntityDetailManager==="undefined"){BX.Crm.EntityDetailManager=function(){this._id="";this._settings={};this._container=null;this._entityTypeId=0;this._entityId=0;this._serviceUrl="";this._tabManager=null;this._overlay=null;this._pageUrlCopyButton=null;this._externalEventHandler=null;this._externalRequestData=null};BX.Crm.EntityDetailManager.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);this._settings=e?e:{};this._entityTypeId=BX.prop.getInteger(this._settings,"entityTypeId",0);this._entityId=BX.prop.getInteger(this._settings,"entityId",0);this._serviceUrl=BX.prop.getString(this._settings,"serviceUrl","");this._container=BX(BX.prop.get(this._settings,"containerId"));this._tabManager=BX.Crm.EntityDetailTabManager.create(this._id,{container:BX(BX.prop.get(this._settings,"tabContainerId")),menuId:BX.prop.get(this._settings,"tabMenuContainerId"),data:BX.prop.getArray(this._settings,"tabs")});if(this._entityId<=0){this._overlay=BX.create("div",{attrs:{className:"crm-entity-overlay"}});this._container.appendChild(this._overlay);if(window===window.top){this._overlay.style.position="absolute";this._overlay.style.top=this._overlay.style.left=this._overlay.style.right="-15px"}}this._pageUrlCopyButton=BX("page_url_copy_btn");if(this._pageUrlCopyButton){this._pageUrlCopyButton.title=this.getMessage("copyPageUrl");BX.bind(this._pageUrlCopyButton,"click",BX.delegate(this.onCopyCurrentPageUrl,this))}BX.addCustomEvent(window,"OpenEntityDetailTab",BX.delegate(this.onTabOpenRequest,this));this._externalRequestData={};this._externalEventHandler=BX.delegate(this.onExternalEvent,this);BX.addCustomEvent(window,"onLocalStorageSet",this._externalEventHandler);BX.addCustomEvent(window,"BX.Crm.EntityEditor:onFailedValidation",this.onFailedValidation.bind(this));this.doInitialize()},doInitialize:function(){},getId:function(){return this._id},getMessage:function(t){return BX.prop.getString(BX.Crm.EntityDetailManager.messages,t,t)},getEntityTypeId:function(){return this._entityTypeId},getEntityTypeName:function(){return BX.CrmEntityType.resolveName(this._entityTypeId)},getEntityId:function(){return this._entityId},getCurrentPageUrl:function(){return BX.util.remove_url_param(window.location.href,["IFRAME","IFRAME_TYPE"])},getEntityListUrl:function(t){return BX.prop.getString(BX.Crm.EntityDetailManager.entityListUrls,t,"")},getEntityCreateUrl:function(t){return BX.CrmEntityManager.getCurrent().getEntityCreateUrl(t)},prepareCreationUrlParams:function(t){},onCopyCurrentPageUrl:function(t){var e=this.getCurrentPageUrl();if(!BX.clipboard.copy(e)){return}var i=new BX.PopupWindow("crm_page_url_clipboard_copy",this._pageUrlCopyButton,{content:this.getMessage("pageUrlCopied"),darkMode:true,autoHide:true,zIndex:1e3,angle:true,offsetLeft:20,bindOptions:{position:"top"}});i.show();setTimeout(function(){i.close()},1500)},onTabOpenRequest:function(t){var e=this._tabManager.findItemById(t);if(e){this._tabManager.selectItem(e)}},processRemoval:function(){this._detetionConfirmDlgId="entity_details_deletion_confirm";var t=BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);if(!t){t=BX.Crm.ConfirmationDialog.create(this._detetionConfirmDlgId,{title:this.getMessage("deletionDialogTitle"),content:this.getMessage("deletionConfirmDialogContent")})}t.open().then(BX.delegate(this.onRemovalConfirm,this))},remove:function(){if(this._serviceUrl===""){throw"Crm.EntityDetailManager: The 'serviceUrl' parameter is not defined or empty."}var t=this._serviceUrl;var e=this.prepareAnalyticParams("delete",{});if(e){t=BX.util.add_url_param(t,e)}BX.ajax({url:t,method:"POST",dataType:"json",data:{ACTION:"DELETE",ACTION_ENTITY_TYPE_ID:this._entityTypeId,ACTION_ENTITY_ID:this._entityId},onsuccess:BX.delegate(this.onRemovalRequestSuccess,this)})},exclude:function(){if(this._serviceUrl===""){throw"Crm.EntityDetailManager: The 'serviceUrl' parameter is not defined or empty."}BX.ajax({url:this._serviceUrl,method:"POST",dataType:"json",data:{ACTION:"EXCLUDE",ACTION_ENTITY_TYPE_ID:this._entityTypeId,ACTION_ENTITY_ID:this._entityId},onsuccess:BX.delegate(this.onExclusionRequestSuccess,this)})},processExclusion:function(){this._exclusionConfirmDlgId="entity_details_exclusion_confirm";var t=BX.Crm.ConfirmationDialog.get(this._exclusionConfirmDlgId);if(!t){t=BX.Crm.ConfirmationDialog.create(this._exclusionConfirmDlgId,{title:this.getMessage("exclusionDialogTitle"),content:this.getMessage("exclusionConfirmDialogContent")+" <a href=\"javascript: top.BX.Helper.show('redirect=detail&code=7362845');\">"+this.getMessage("exclusionConfirmDialogContentHelp")+"</a>"})}t.open().then(BX.delegate(this.onExclusionConfirm,this))},createEntity:function(t,e){var i=("details_"+this.getEntityTypeName()+"_"+this.getEntityId()+"_"+BX.util.getRandomString(12)).toLowerCase();var n={external_context:i};this.prepareCreationUrlParams(n);var r=BX.prop.getObject(e,"urlParams",null);if(r){n=BX.mergeEx(n,r)}BX.CrmEntityManager.createEntity(t,{urlParams:n}).then(function(t){this._externalRequestData[i]={context:i,wnd:BX.prop.get(t,"wnd",null)}}.bind(this))},createQuote:function(){this.createEntity(BX.CrmEntityType.names.quote)},createOrder:function(){this.createEntity(BX.CrmEntityType.names.order)},createInvoice:function(){this.createEntity(BX.CrmEntityType.names.invoice)},createDeal:function(){this.createEntity(BX.CrmEntityType.names.deal)},onRemovalConfirm:function(t){if(BX.prop.getBoolean(t,"cancel",true)){return}this.remove()},onRemovalRequestSuccess:function(t){var e=BX.prop.getString(t,"ERROR","");if(e!==""){var i=BX.Crm.NotificationDialog.create("entity_details_deletion_error",{title:this.getMessage("deletionDialogTitle"),content:e});i.open();return}window.top.BX.UI.Notification.Center.notify({autoHideDelay:5e3,content:this.getMessage("deletionWarning"),actions:[{title:this.getMessage("goToDetails"),events:{click:function(t,e,i){e.close();var n=t.target.ownerDocument.defaultView;if(!n){n=window}if(n.BX.Helper){n.BX.Helper.show("redirect=detail&code=8969825")}}}}]});var n=BX.Crm.Page.getTopSlider();var r=null;if(n){r={sliderUrl:n.getUrl()}}BX.Crm.EntityEvent.fireDelete(this._entityTypeId,this._entityId,"",r);r["id"]=this._entityId;BX.onCustomEvent(window,BX.Crm.EntityEvent.names.delete,[r]);if(n){window.setTimeout(function(){n.close(true)},100)}else{var a=this.getEntityListUrl(BX.CrmEntityType.resolveName(this._entityTypeId));if(a!==""){window.location.href=a}}},onExclusionConfirm:function(t){if(BX.prop.getBoolean(t,"cancel",true)){return}this.exclude()},onExclusionRequestSuccess:function(t){var e=BX.prop.getString(t,"ERROR","");if(e!==""){var i=BX.Crm.NotificationDialog.create("entity_details_exclusion_error",{title:this.getMessage("exclusionDialogTitle"),content:e});i.open();return}var n=BX.Crm.Page.getTopSlider();var r=null;if(n){r={sliderUrl:n.getUrl()}}BX.Crm.EntityEvent.fireDelete(this._entityTypeId,this._entityId,"",r);if(n){window.setTimeout(function(){n.close(true)},100)}else{var a=this.getEntityListUrl(BX.CrmEntityType.resolveName(this._entityTypeId));if(a!==""){window.location.href=a}}},onExternalEvent:function(t){var e=BX.prop.getString(t,"key","");var i=BX.prop.getObject(t,"value",{});this.processExternalEvent(e,i);if(e===BX.Crm.EntityEvent.names.invalidate){var n=BX.prop.getInteger(i,"entityId",0);var r=BX.prop.getInteger(i,"entityTypeId",0);if(r===this.getEntityTypeId()&&n===this.getEntityId()){window.location.reload(true)}return}if(e!=="onCrmEntityCreate"){return}var a=BX.prop.getString(i,"context","");var o=BX.prop.getObject(this._externalRequestData,a,null);if(!o){return}delete this._externalRequestData[a];var s=BX.prop.get(o,"wnd",null);if(s){s.close()}},processExternalEvent:function(t,e){return false},prepareAnalyticParams:function(t,e){var i=typeof window.top.BX.Crm!=="undefined"&&typeof window.top.BX.Crm.AnalyticTracker!=="undefined"?window.top.BX.Crm.AnalyticTracker.getCurrent():null;if(!i){return null}var n=BX.prop.getObject(this._settings,"analyticParams",{});if(BX.type.isPlainObject(e)){n=BX.mergeEx(n,e)}return i.prepareEntityActionParams(t,this._entityTypeId,n)},onFailedValidation:function(t,e){if(typeof BX.Crm.EntityEditor==="undefined"||!(t instanceof BX.Crm.EntityEditor)||t.getEntityId()!==this.getEntityId()){return}var i=this._tabManager._items[0];if(i instanceof BX.Crm.EntityDetailTab&&!i.isActive()){i.setActive(true);for(var n=1,r=this._tabManager._items.length;n<r;n++){var a=this._tabManager._items[n];a.setActive(false)}var o=e.getTopmostField();if(o){setTimeout(function(){o.focus()},350)}}}};BX.Crm.EntityDetailManager.items={};BX.Crm.EntityDetailManager.get=function(t){return BX.type.isNotEmptyString(t)&&this.items.hasOwnProperty(t)?this.items[t]:null};if(typeof BX.Crm.EntityDetailManager.entityListUrls==="undefined"){BX.Crm.EntityDetailManager.entityListUrls={}}if(typeof BX.Crm.EntityDetailManager.messages==="undefined"){BX.Crm.EntityDetailManager.messages={}}BX.Crm.EntityDetailManager.create=function(t,e){var i=new BX.Crm.EntityDetailManager;i.initialize(t,e);this.items[i.getId()]=i;return i}}if(typeof BX.Crm.LeadDetailManager==="undefined"){BX.Crm.LeadDetailManager=function(){BX.Crm.LeadDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.LeadDetailManager,BX.Crm.EntityDetailManager);BX.Crm.LeadDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"Crm.EntityConverter.Converted",BX.delegate(this.onConversionComplete,this));BX.addCustomEvent(window,"Crm.EntityProgress.Saved",BX.delegate(this.onProgressSave,this));BX.addCustomEvent(window,"CrmCreateQuoteFromLead",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateOrderFromLead",BX.delegate(this.onCreateOrder,this))};BX.Crm.LeadDetailManager.prototype.processConversionCompletion=function(t){if(window.top!==window){window.setTimeout(function(){window.location.reload(true)},0);return}var e=BX.prop.getString(t,"redirectUrl","");if(e!==""&&!BX.prop.getBoolean(t,"isRedirected",false)){window.setTimeout(function(){window.location.replace(e)},0);t["isRedirected"]=true}};BX.Crm.LeadDetailManager.prototype.processStatusSave=function(t){var e=BX.prop.getString(t,"currentSemantics","");var i=BX.prop.getString(t,"previousSemantics","");if(i===e){return}if(i==="success"||e==="success"){window.setTimeout(function(){window.location.reload(true)},0)}};BX.Crm.LeadDetailManager.prototype.processExternalEvent=function(t,e){if(t!=="onCrmEntityConvert"){return false}if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return false}this.processConversionCompletion(e);return true};BX.Crm.LeadDetailManager.prototype.onConversionComplete=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}this.processConversionCompletion(e)};BX.Crm.LeadDetailManager.prototype.onProgressSave=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}this.processStatusSave(e)};BX.Crm.LeadDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.LeadDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.LeadDetailManager.prototype.prepareCreationUrlParams=function(t){t["lead_id"]=this.getEntityId()};BX.Crm.LeadDetailManager.create=function(t,e){var i=new BX.Crm.LeadDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.ContactDetailManager==="undefined"){BX.Crm.ContactDetailManager=function(){BX.Crm.ContactDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.ContactDetailManager,BX.Crm.EntityDetailManager);BX.Crm.ContactDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmCreateQuoteFromContact",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateInvoiceFromContact",BX.delegate(this.onCreateInvoice,this));BX.addCustomEvent(window,"CrmCreateDealFromContact",BX.delegate(this.onCreateDeal,this));BX.addCustomEvent(window,"CrmCreateOrderFromContact",BX.delegate(this.onCreateOrder,this))};BX.Crm.ContactDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.ContactDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.ContactDetailManager.prototype.onCreateInvoice=function(){this.createInvoice()};BX.Crm.ContactDetailManager.prototype.onCreateDeal=function(){this.createDeal()};BX.Crm.ContactDetailManager.prototype.prepareCreationUrlParams=function(t){t["contact_id"]=this.getEntityId()};BX.Crm.ContactDetailManager.create=function(t,e){var i=new BX.Crm.ContactDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.CompanyDetailManager==="undefined"){BX.Crm.CompanyDetailManager=function(){BX.Crm.CompanyDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.CompanyDetailManager,BX.Crm.EntityDetailManager);BX.Crm.CompanyDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmCreateQuoteFromCompany",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateInvoiceFromCompany",BX.delegate(this.onCreateInvoice,this));BX.addCustomEvent(window,"CrmCreateDealFromCompany",BX.delegate(this.onCreateDeal,this));BX.addCustomEvent(window,"CrmCreateOrderFromCompany",BX.delegate(this.onCreateOrder,this))};BX.Crm.CompanyDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.CompanyDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.CompanyDetailManager.prototype.onCreateInvoice=function(){this.createInvoice()};BX.Crm.CompanyDetailManager.prototype.onCreateDeal=function(){this.createDeal()};BX.Crm.CompanyDetailManager.prototype.prepareCreationUrlParams=function(t){t["company_id"]=this.getEntityId()};BX.Crm.CompanyDetailManager.create=function(t,e){var i=new BX.Crm.CompanyDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.DealRecurringDetailManager==="undefined"){BX.Crm.DealRecurringDetailManager=function(){BX.Crm.DealRecurringDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.DealRecurringDetailManager,BX.Crm.EntityDetailManager);BX.Crm.DealRecurringDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmDealRecurringExpose",BX.delegate(this.onExposeDeal,this))};BX.Crm.DealRecurringDetailManager.prototype.onExposeDeal=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.dealrecurring||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}window.setTimeout(function(){window.location.reload(true)},0)};BX.Crm.DealRecurringDetailManager.create=function(t,e){var i=new BX.Crm.DealRecurringDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.DealDetailManager==="undefined"){BX.Crm.DealDetailManager=function(){BX.Crm.DealDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.DealDetailManager,BX.Crm.EntityDetailManager);BX.Crm.DealDetailManager.prototype.doInitialize=function(){};BX.Crm.DealDetailManager.prototype.prepareCreationUrlParams=function(t){t["deal_id"]=this.getEntityId()};BX.Crm.DealDetailManager.create=function(t,e){var i=new BX.Crm.DealDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.OrderDetailManager==="undefined"){BX.Crm.OrderDetailManager=function(){BX.Crm.OrderDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.OrderDetailManager,BX.Crm.EntityDetailManager);BX.Crm.OrderDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"Crm.EntityProgress.Saved",BX.delegate(this.onProgressSave,this));BX.addCustomEvent(window,"Crm.EntityProgress.onSaveBefore",BX.delegate(this.onProgressSaveBefore,this));this._cancelReason=""};BX.Crm.OrderDetailManager.prototype.onProgressSave=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.order||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}var i=BX.prop.getObject(e,"requestData",{});var n=BX.prop.getString(i,"ERROR","");if(BX.type.isNotEmptyString(n)){var r=t.getStepById(BX.prop.getString(i,"STATUS_ID",""));if(r){var a=t.findStepInfoIndex(r.getId());if(a>=0){var o=t._stepInfos[a];t.adjustSteps(r.getIndex(),r.getBackgroundColor());t.setCurrentStep(o)}}var s=BX.Crm.NotificationDialog.create("entity_details_cancel_error",{title:BX.prop.getString(i,"ERROR_TITLE",""),content:n});s.open()}};BX.Crm.OrderDetailManager.prototype.onProgressSaveBefore=function(t,e){if(BX.prop.getString(e,"TYPE","")!==BX.CrmEntityType.names.order||BX.prop.getInteger(e,"ID",0)!==this.getEntityId()){return}var i=BX.CrmOrderStatusManager.current;if(BX.type.isPlainObject(i.saveParams)){var n=this.getEntityId();for(var r in i.saveParams){BX.CrmOrderStatusManager.statusInfoValues[n][r]=i.saveParams[r];e[r]=i.saveParams[r]}}e["STATE_SUCCESS"]=i.isSuccess?"Y":"N"};BX.Crm.OrderDetailManager.prototype.getMessage=function(t){var e=BX.Crm.OrderDetailManager.messages;return e.hasOwnProperty(t)?e[t]:BX.Crm.OrderDetailManager.superclass.getMessage.apply(this,arguments)};BX.Crm.OrderDetailManager.create=function(t,e){var i=new BX.Crm.OrderDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.EntityDetailFactory==="undefined"){BX.Crm.EntityDetailFactory={create:function(t,e){var i=BX.prop.getInteger(e,"entityTypeId",BX.CrmEntityType.enumeration.undefined);if(i===BX.CrmEntityType.enumeration.lead){return BX.Crm.LeadDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.dealrecurring){return BX.Crm.DealRecurringDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.deal){return BX.Crm.DealDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.contact){return BX.Crm.ContactDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.company){return BX.Crm.CompanyDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.order){return BX.Crm.OrderDetailManager.create(t,e)}return BX.Crm.EntityDetailManager.create(t,e)}}}if(typeof BX.Crm.EntityDetailTabManager==="undefined"){BX.Crm.EntityDetailTabManager=function(){this._id="";this._container=null;this._items=null};BX.Crm.EntityDetailTabManager.prototype={initialize:function(id,settings){this._id=BX.type.isNotEmptyString(id)?id:BX.util.getRandomString(4);settings=settings?settings:{};this._container=BX.prop.getElementNode(settings,"container");var tabsById={};BX.prop.getArray(settings,"data").forEach(function(t){if(!tabsById[t["id"]]){tabsById[t["id"]]=t}}.bind(this));var menuManager=BX.Main.interfaceButtonsManager.getById(BX.prop.getString(settings,"menuId"));var firstItem=null;this._items=[];menuManager.getAllItems().forEach(function(t){if(firstItem===null){firstItem=t}var e=tabsById[t.dataset.id];if(!e){return}this._items.push(BX.Crm.EntityDetailTab.create(e["id"],{manager:this,data:e,container:this._container.querySelector('[data-tab-id="'+e["id"]+'"]'),menuContainer:t}))}.bind(this));var activeItem=menuManager.getActive();if(activeItem["DATA_ID"]==="main"&&firstItem.dataset.id!==activeItem["DATA_ID"]){var script=BX.data(firstItem,"onclick");if(BX.type.isNotEmptyString(script)){eval(script)}}},getId:function(){return this._id},findItemById:function(t){for(var e=0,i=this._items.length;e<i;e++){var n=this._items[e];if(n.getId()===t){return n}}return null},selectItem:function(t){for(var e=0,i=this._items.length;e<i;e++){var n=this._items[e];n.setActive(n===t)}},processItemSelect:function(t){this.selectItem(t)}};BX.Crm.EntityDetailTabManager.items={};BX.Crm.EntityDetailTabManager.create=function(t,e){var i=new BX.Crm.EntityDetailTabManager;i.initialize(t,e);this.items[i.getId()]=i;return i}}if(typeof BX.Crm.EntityDetailTab==="undefined"){BX.Crm.EntityDetailTab=function(){this._id="";this._data={};this._manager=null;this._container=null;this._menuContainer=null;this.onMenuClick=this.onMenuClick.bind(this);this._isActive=false;this._isEnabled=false;this._loader=null};BX.Crm.EntityDetailTab.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);e=e?e:{};this._data=BX.prop.getObject(e,"data",{});this._manager=BX.prop.get(e,"manager",null);this._container=BX.prop.getElementNode(e,"container");this._menuContainer=BX.prop.getElementNode(e,"menuContainer");this._isActive=BX.prop.getBoolean(this._data,"active",false);this._isEnabled=BX.prop.getBoolean(this._data,"enabled",true);BX.addCustomEvent(this._manager.getId()+"_click_"+this._id,this.onMenuClick);var i=BX.prop.getObject(this._data,"loader",null);if(i){i["tabId"]=this._id;i["container"]=this._container;this._loader=BX.Crm.EditorTabLazyLoader.create(this._id,i)}},getId:function(){return this._id},isEnabled:function(){return this._isEnabled},isActive:function(){return this._isActive},setActive:function(t){t=!!t;if(this._isActive===t){return}this._isActive=t;if(this._isActive){if(this._loader&&!this._loader.isLoaded()){this._loader.load()}this.showTab()}else{this.hideTab()}},showTab:function(){BX.addClass(this._container,"crm-entity-section-tab-content-show");BX.removeClass(this._container,"crm-entity-section-tab-content-hide");BX.addClass(this._menuContainer,"crm-entity-section-tab-active");this._container.style.display="";this._container.style.position="absolute";this._container.style.top=0;this._container.style.left=0;this._container.style.width="100%";var t=new BX.easing({duration:350,start:{opacity:0,translateX:100},finish:{opacity:100,translateX:0},transition:BX.easing.makeEaseOut(BX.easing.transitions.quart),step:BX.delegate(function(t){this._container.style.opacity=t.opacity/100;this._container.style.transform="translateX("+t.translateX+"%)"},this),complete:BX.delegate(function(){BX.removeClass(this._container,"crm-entity-section-tab-content-show");this._container.style.cssText="";BX.onCustomEvent(window,"onEntityDetailsTabShow",[this])},this)});t.animate()},hideTab:function(){BX.addClass(this._container,"crm-entity-section-tab-content-hide");BX.removeClass(this._container,"crm-entity-section-tab-content-show");BX.removeClass(this._menuContainer,"crm-entity-section-tab-active");var t=new BX.easing({duration:350,start:{opacity:100},finish:{opacity:0},transition:BX.easing.makeEaseOut(BX.easing.transitions.quart),step:BX.delegate(function(t){this._container.style.opacity=t.opacity/100},this),complete:BX.delegate(function(){this._container.style.display="none";this._container.style.transform="translateX(100%)";this._container.style.opacity=0},this)});t.animate()},onMenuClick:function(){if(!this._isEnabled){return}if(this._loader&&!this._loader.isLoaded()){this._loader.load()}this._manager.processItemSelect(this)}};BX.Crm.EntityDetailTab.create=function(t,e){var i=new BX.Crm.EntityDetailTab;i.initialize(t,e);return i}}if(typeof BX.Crm.EditorTabLazyLoader==="undefined"){BX.Crm.EditorTabLazyLoader=function(){this._id="";this._settings={};this._container=null;this._serviceUrl="";this._tabId="";this._params={};this._isRequestRunning=false;this._isLoaded=false};BX.Crm.EditorTabLazyLoader.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:"crm_lf_disp_"+Math.random().toString().substring(2);this._settings=e?e:{};this._container=BX(BX.prop.get(this._settings,"container",""));if(!this._container){throw"Error: Could not find container."}this._tabId=BX.prop.getString(this._settings,"tabId","");if(this._tabId===""){throw"Error: Could not find tab id."}this._params=BX.prop.getObject(this._settings,"componentData",{});this._ajaxComponentActionParams=BX.prop.getObject(this._params,"ajaxComponentActionParams",{});this._useAjaxComponentAction=BX.type.isNotEmptyObject(this._ajaxComponentActionParams);if(this._useAjaxComponentAction){this._componentName=BX.prop.getString(this._ajaxComponentActionParams,"componentName","");if(this._componentName===""){throw"Error. Could not find component name."}this._actionName=BX.prop.getString(this._ajaxComponentActionParams,"actionName","");if(this._actionName===""){throw"Error. Could not find action name."}this._signedParameters=BX.prop.getString(this._ajaxComponentActionParams,"signedParameters","");if(this._signedParameters===""){throw"Error. Could not find signed parameters."}this._template=BX.prop.getString(this._params,"template","");if(this._template===""){throw"Error. Could not find template."}}else{this._serviceUrl=BX.prop.getString(this._settings,"serviceUrl","");if(this._serviceUrl===""){throw"Error. Could not find service url."}}},getId:function(){return this._id},isLoaded:function(){return this._isLoaded},load:function(){if(this._isLoaded){return}var t=this._params;t["TAB_ID"]=this._tabId;this._startRequest(t)},_startRequest:function(t){if(this._isRequestRunning){return false}this._isRequestRunning=true;if(this._useAjaxComponentAction){BX.ajax.runComponentAction(this._componentName,this._actionName,{signedParameters:this._signedParameters,data:{template:this._template}}).then(this._onRequestSuccess.bind(this),this._onRequestFailure.bind(this))}else{BX.ajax({url:this._serviceUrl,method:"POST",dataType:"html",data:{LOADER_ID:this._id,PARAMS:t},onsuccess:BX.delegate(this._onRequestSuccess,this),onfailure:BX.delegate(this._onRequestFailure,this)})}return true},_onRequestSuccess:function(t){this._isRequestRunning=false;if(this._useAjaxComponentAction){t=BX.prop.getObject(t,"data",{});t=BX.prop.getString(t,"html",null)}BX.html(this._container,t);this._isLoaded=true},_onRequestFailure:function(t){this._isRequestRunning=false;this._isLoaded=true}};BX.Crm.EditorTabLazyLoader.items={};BX.Crm.EditorTabLazyLoader.create=function(t,e){var i=new BX.Crm.EditorTabLazyLoader;i.initialize(t,e);this.items[i.getId()]=i;return i}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:89:"/bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js?1654841765707975";s:6:"source";s:72:"/bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
BX.namespace("BX.Crm");

//region EDITOR
if(typeof BX.Crm.EntityEditor === "undefined")
{
	BX.Crm.EntityEditor = function()
	{
		this._id = "";
		this._settings = {};

		this._entityTypeId = 0;
		this._entityId = 0;

		this._userFieldManager = null;
		this._dupControlManager = null;
		this._bizprocManager = null;
		this._attributeManager = null;

		this._container = null;
		this._buttonContainer = null;
		this._createSectionButton = null;
		this._configMenuButton = null;
		this._configIcon = null;

		this._pageTitle = null;
		this._pageTitleInput = null;
		this._buttonWrapper = null;
		this._editPageTitleButton = null;
		this._copyPageUrlButton = null;

		this._formElement = null;
		this._ajaxForm = null;
		this._afterFormSubmitHandler = BX.delegate(this.onAfterFormSubmit, this);
		this._cancelFormSubmitHandler = BX.delegate(this.onCancelFormSubmit, this);

		this._controllers = null;
		this._controls = null;
		this._activeControls = null;
		this._toolPanel = null;

		this._model = null;
		this._scheme = null;
		this._config = null;
		this._context = null;
		this._contextId = "";
		this._externalContextId = "";

		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._isNew = false;
		this._readOnly = false;
		this._haslayout = false;

		this._enableRequiredUserFieldCheck = true;
		this._enableAjaxForm = true;
		this._enableSectionEdit = false;
		this._enableSectionCreation = false;
		this._enableModeToggle = true;
		this._enableVisibilityPolicy = true;
		this._enablePageTitleControls = true;
		this._enableCommunicationControls = true;
		this._enableToolPanel = true;
		this._enableBottomPanel = true;
		this._enableFieldsContextMenu = true;
		this._enableExternalLayoutResolvers = false;
		this._showEmptyFields = false;

		this._serviceUrl = "";
		this._htmlEditorConfigs = null;

		this._areAvailableSchemeElementsChanged = false;
		this._availableSchemeElements = null;

		this._dragPlaceHolder = null;
		this._dragContainerController = null;
		this._dropHandler = BX.delegate(this.onDrop, this);

		this._pageTitleExternalClickHandler = BX.delegate(this.onPageTitleExternalClick, this);
		this._pageTitleKeyPressHandler = BX.delegate(this.onPageTitleKeyPress, this);

		this._modeChangeNotifier = null;
		this._controlChangeNotifier = null;

		this._validators = null;
		this._modeSwitch = null;
		this._delayedSaveHandle = 0;

		this._isEmbedded = false;
		this._isRequestRunning = false;
		this._isConfigMenuShown = false;
		this._isReleased = false;

		this._enableCloseConfirmation = true;
		this._closeConfirmationHandler = BX.delegate(this.onCloseConfirmButtonClick, this);
		this._cancelConfirmationHandler = BX.delegate(this.onCancelConfirmButtonClick, this);

		this._sliderOpenHandler = BX.delegate(this.onSliderOpen, this);
		this._sliderCloseHandler = BX.delegate(this.onSliderClose, this);
		this._entityUpdateHandler = BX.delegate(this.onEntityUpdate, this);

		this._helpWrapper = null;
		this._dragConfig = {};
	};
	BX.Crm.EntityEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._model = BX.prop.get(this._settings, "model", null);
			this._scheme = BX.prop.get(this._settings, "scheme", null);
			this._config = BX.prop.get(this._settings, "config", null);

			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
			this._entityTypeId = BX.prop.getInteger(this._settings, "entityTypeId", 0);
			this._entityId = BX.prop.getInteger(this._settings, "entityId", 0);
			this._isNew = this._entityId <= 0;

			this._isEmbedded = BX.prop.getBoolean(this._settings, "isEmbedded", false);

			var container = BX.prop.get(this._settings, "container");
			if(!BX.type.isElementNode(container))
			{
				container = BX(BX.prop.get(this._settings, "containerId"));
			}

			this._container = container;
			if(!BX.type.isElementNode(container))
			{
				throw "Crm.EntityEditor: Could not find settings param 'container'.";
			}

			this._parentContainer = BX.findParent(this._container, { className: "crm-entity-section" }, false);
			this._buttonContainer = BX(BX.prop.get(this._settings, "buttonContainerId"));
			this._createSectionButton = BX(BX.prop.get(this._settings, "createSectionButtonId"));
			this._configMenuButton = BX(BX.prop.get(this._settings, "configMenuButtonId"));
			this._configIcon = BX(BX.prop.get(this._settings, "configIconId"));

			this._enableVisibilityPolicy = BX.prop.getBoolean(this._settings, "enableVisibilityPolicy", true);
			this._enableCommunicationControls = BX.prop.getBoolean(this._settings, "enableCommunicationControls", true);
			this._enablePageTitleControls = BX.prop.getBoolean(this._settings, "enablePageTitleControls", true);
			if(this._enablePageTitleControls)
			{
				this._pageTitle = BX("pagetitle");
				this._buttonWrapper = BX("pagetitle_btn_wrapper");
				this._editPageTitleButton = BX("pagetitle_edit");
				this._copyPageUrlButton = BX("page_url_copy_btn");
			}

			this.adjustSize();
			this.adjustTitle();

			//region Form
			this._formElement = BX.create("form", {props: { name: this._id + "_form"}});
			this._container.appendChild(this._formElement);

			this._enableRequiredUserFieldCheck = BX.prop.getBoolean(this._settings, "enableRequiredUserFieldCheck", true);

			this._enableAjaxForm = BX.prop.getBoolean(this._settings, "enableAjaxForm", true);
			if(this._enableAjaxForm)
			{
				this.initializeAjaxForm();
			}
			//endregion

			//region Duplicate manager
			var duplicateControlConfig = BX.prop.getObject(this._settings, "duplicateControl", {});
			if(this._ajaxForm)
			{
				duplicateControlConfig["form"] = this._ajaxForm;
			}

			this._dupControlManager = BX.Crm.EntityEditorDupManager.create(
				this._id.toLowerCase() + "_dup",
				duplicateControlConfig
			);
			//endregion

			this._context = BX.prop.getObject(this._settings, "context", {});
			this._contextId = BX.prop.getString(this._settings, "contextId", "");
			this._externalContextId = BX.prop.getString(this._settings, "externalContextId", "");

			this._readOnly = BX.prop.getBoolean(this._settings, "readOnly", false);
			if(this._readOnly)
			{
				this._enableSectionEdit = this._enableSectionCreation = false;
			}
			else
			{
				this._enableSectionEdit = BX.prop.getBoolean(this._settings, "enableSectionEdit", false);
				this._enableSectionCreation = BX.prop.getBoolean(this._settings, "enableSectionCreation", false);
			}

			this._userFieldManager = BX.prop.get(this._settings, "userFieldManager", null);

			this._bizprocManager = BX.prop.get(this._settings, "bizprocManager", null);
			if(this._bizprocManager)
			{
				this._bizprocManager._editor = this;
			}

			this._restPlacementTabManager = BX.prop.get(this._settings, "restPlacementTabManager", null);
			if(this._restPlacementTabManager)
			{
				this._restPlacementTabManager._editor = this;
			}

			this._modeChangeNotifier = BX.CrmNotifier.create(this);
			this._controlChangeNotifier = BX.CrmNotifier.create(this);

			this._availableSchemeElements = this._scheme.getAvailableElements();

			this._controllers = [];
			this._controls = [];
			this._activeControls = [];
			this._modeSwitch = BX.Crm.EntityEditorModeSwitch.create(this._id, { editor: this });

			this._htmlEditorConfigs = BX.prop.getObject(this._settings, "htmlEditorConfigs", {});

			var elements = this._scheme.getElements();

			var initialMode = BX.Crm.EntityEditorMode.view;
			if(!this._readOnly)
			{
				initialMode = BX.Crm.EntityEditorMode.parse(BX.prop.getString(this._settings, "initialMode", ""));
			}
			this._mode = initialMode !== BX.Crm.EntityEditorMode.intermediate ? initialMode : BX.Crm.EntityEditorMode.view;

			this._enableModeToggle = false;
			if(!this._readOnly)
			{
				this._enableModeToggle = BX.prop.getBoolean(this._settings, "enableModeToggle", true);
			}

			if(this._isNew && !this._readOnly)
			{
				this._mode = BX.Crm.EntityEditorMode.edit;
			}

			var i, length;
			var controllerData = BX.prop.getArray(this._settings, "controllers", []);
			for(i = 0, length = controllerData.length; i < length; i++)
			{
				var controller = this.createController(controllerData[i]);
				if(controller)
				{
					this._controllers.push(controller);
				}
			}

			var element, control;
			for(i = 0, length = elements.length; i < length; i++)
			{
				element = elements[i];
				control = this.createControl(
					element.getType(),
					element.getName(),
					{ schemeElement: element, mode: BX.Crm.EntityEditorMode.view }
				);

				if(!control)
				{
					continue;
				}

				this._controls.push(control);
			}

			if(this._mode === BX.Crm.EntityEditorMode.edit && this._controls.length > 0)
			{
				for(i = 0, length = this._controls.length; i < length; i++)
				{
					control = this._controls[i];
					//Enable edit mode for required fields only.
					var priority = control.getEditPriority();
					if(priority === BX.Crm.EntityEditorPriority.high)
					{
						control.setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
					}
				}

				if(this.getActiveControlCount() === 0)
				{
					this._controls[0].setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
				}
			}

			//region Validators
			this._validators = [];
			var validatorConfigs = BX.prop.getArray(this._settings, "validators", []);
			for(i = 0, length = validatorConfigs.length; i < length; i++)
			{
				var validator = this.createValidator(validatorConfigs[i]);
				if(validator)
				{
					this._validators.push(validator);
				}
			}
			//endregion

			this._modeChangeNotifier.notify([ this ]);

			this._enableToolPanel = BX.prop.getBoolean(this._settings, "enableToolPanel", true);
			if(this._enableToolPanel)
			{
				this._toolPanel = BX.Crm.EntityEditorToolPanel.create(
					this._id,
					{
						container: this._isEmbedded ? this._formElement : document.body,
						editor: this,
						visible: false
					}
				);
			}

			this._enableBottomPanel = BX.prop.getBoolean(this._settings, "enableBottomPanel", true);
			this._enableFieldsContextMenu = BX.prop.getBoolean(this._settings, "enableFieldsContextMenu", true);
			this._enableExternalLayoutResolvers = BX.prop.getBoolean(this._settings, "enableExternalLayoutResolvers", false);
			this._showEmptyFields = BX.prop.getBoolean(this._settings, "showEmptyFields", false);

			BX.addCustomEvent(
				window,
				"Crm.InterfaceToolbar.MenuBuild",
				BX.delegate(this.onInterfaceToolbarMenuBuild, this)
			);

			//region D&D Config
			this._dragConfig = {};

			var sectionDragModes = {};
			sectionDragModes[BX.Crm.EntityEditorMode.names.view]
				= sectionDragModes[BX.Crm.EntityEditorMode.names.edit]
				= BX.prop.getBoolean(this._settings, "enableSectionDragDrop", true);

			this._dragConfig[BX.Crm.EditorDragObjectType.section] =
				{
					scope: BX.Crm.EditorDragScope.form,
					modes: sectionDragModes
				};

			var fieldDragModes = {};
			fieldDragModes[BX.Crm.EntityEditorMode.names.view]
				= fieldDragModes[BX.Crm.EntityEditorMode.names.edit]
				= BX.prop.getBoolean(this._settings, "enableFieldDragDrop", true);

			this._dragConfig[BX.Crm.EditorDragObjectType.field] =
				{
					scope: BX.Crm.EditorDragScope.form,
					modes: fieldDragModes
				};

			if(this.canChangeScheme())
			{
				this._dragContainerController = BX.Crm.EditorDragContainerController.create(
					"editor_" + this.getId(),
					{
						charge: BX.Crm.EditorSectionDragContainer.create({ editor: this }),
						node: this._formElement
					}
				);
				this._dragContainerController.addDragFinishListener(this._dropHandler);
			}
			//endregion

			this.layout();

			BX.bind(window, "resize", BX.debounce(BX.delegate(this.onResize, this), 50));
			//BX.bind(window, "resize", BX.delegate(this.onResize, this));

			BX.addCustomEvent("SidePanel.Slider:onOpenComplete", this._sliderOpenHandler);
			BX.addCustomEvent("SidePanel.Slider:onClose", this._sliderCloseHandler);

			BX.addCustomEvent("onCrmEntityUpdate", this._entityUpdateHandler);

			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onInit", [ this, eventArgs ]);
		},
		release: function()
		{
			//console.log("EntityEditor::release: %s", this.getId());

			if(this._dragContainerController)
			{
				this._dragContainerController.removeDragFinishListener(this._dropHandler);
				this._dragContainerController.release();
				this._dragContainerController = null;
			}

			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].clearLayout();
			}

			BX.removeCustomEvent("onCrmEntityUpdate", this._entityUpdateHandler);
			BX.removeCustomEvent("SidePanel.Slider:onOpenComplete", this._sliderOpenHandler);
			BX.removeCustomEvent("SidePanel.Slider:onClose", this._sliderCloseHandler);

			this.releaseAjaxForm();
			this._container = BX.remove(this._container);

			this._haslayout = false;
			this._isReleased = true;
		},
		clone: function(params)
		{
			//var settings = Object.assign({}, this._settings);
			var wrapper = BX(BX.prop.get(params, "wrapper"));
			if(!BX.type.isElementNode(wrapper))
			{
				throw "Crm.EntityEditor: Could not find param 'wrapper'.";
			}

			var id = BX.prop.getString(params, "id", "");
			if(id === "")
			{
				id = BX.util.getRandomString(4);
			}

			var container = BX.create(
				"DIV",
				{
					props: { id: id.toLowerCase() + "_container",  className: "crm-entity-card-container-content" }
				}
			);
			wrapper.appendChild(container);

			var settings = BX.clone(this._settings);
			delete settings["containerId"];
			settings["container"] = container;

			return BX.Crm.EntityEditor.create(id, settings);
		},
		onSliderOpen: function(event)
		{
			//Reset close confirmation flag
			this._enableCloseConfirmation = true;
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onOpen", [ this, eventArgs ]);
		},
		onSliderClose: function(event)
		{
			if(!this._enableCloseConfirmation)
			{
				return;
			}

			var slider = top.BX.SidePanel.Instance.getSliderByWindow(window);
			if(slider !== event.getSlider())
			{
				return;
			}

			if(!slider.isOpen())
			{
				return;
			}

			if(!this.hasChangedControls() && !this.hasChangedControllers())
			{
				return;
			}

			event.denyAction();

			if(BX.Crm.EditorAuxiliaryDialog.isItemOpened("close_confirmation"))
			{
				return;
			}

			BX.Crm.EditorAuxiliaryDialog.create(
				"close_confirmation",
				{
					title: BX.message("CRM_EDITOR_CONFIRMATION"),
					content: BX.message("CRM_EDITOR_CLOSE_CONFIRMATION"),
					zIndex: 100,
					buttons:
						[
							{
								id: "close",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("JS_CORE_WINDOW_CLOSE"),
								callback: this._closeConfirmationHandler
							},
							{
								id: "cancel",
								type: BX.Crm.DialogButtonType.cancel,
								text: BX.message("JS_CORE_WINDOW_CANCEL"),
								callback: this._closeConfirmationHandler
							}
						]
				}
			).open();
		},
		onCloseConfirmButtonClick: function(button)
		{
			button.getDialog().close();

			if(button.getId() === "close")
			{
				this._enableCloseConfirmation = false;
				top.BX.SidePanel.Instance.getSliderByWindow(window).close();
			}
		},
		onCancelConfirmButtonClick: function(button)
		{
			button.getDialog().close();

			if(button.getId() === "yes")
			{
				this.innerCancel();
			}
		},
		onEntityUpdate: function(eventParams)
		{
			if(this._isReleased)
			{
				return;
			}

			if(this._entityTypeId === BX.prop.getInteger(eventParams, "entityTypeId", 0)
				&& this._entityId === BX.prop.getInteger(eventParams, "entityId", 0)
				&& this !== BX.prop.get(eventParams, "sender", 0)
			)
			{
				var data = BX.prop.getObject(eventParams, "entityData", null);
				if(data)
				{
					this._model.setData(data, { enableNotification: false });

					this.adjustTitle();
					this.adjustSize();

					this.refreshLayout({ reset: true });
				}
			}
		},
		initializeAjaxForm: function()
		{
			if(this._ajaxForm)
			{
				return;
			}

			this._ajaxForm = BX.Crm.AjaxForm.create(
				this._id,
				{
					elementNode: this._formElement,
					config:
					{
						url: this._serviceUrl,
						method: "POST",
						dataType: "json",
						processData : true,
						onsuccess: BX.delegate(this.onSaveSuccess, this),
						data:
						{
							"ACTION": "SAVE",
							"ACTION_ENTITY_ID": this._entityId,
							"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
								BX.CrmEntityType.resolveName(this._entityTypeId)
							),
							"ENABLE_REQUIRED_USER_FIELD_CHECK": this._enableRequiredUserFieldCheck ? 'Y' : 'N'
						}
					}
				}
			);

			//Prevent submit form by Enter if only one input on form
			this._formElement.setAttribute("onsubmit", "return false;");

			BX.addCustomEvent(this._ajaxForm, "onAfterSubmit", this._afterFormSubmitHandler);
			BX.addCustomEvent(this._ajaxForm, "onSubmitCancel", this._cancelFormSubmitHandler);
		},
		releaseAjaxForm: function()
		{
			if(!this._ajaxForm)
			{
				return;
			}

			BX.removeCustomEvent(this._ajaxForm, "onAfterSubmit", this._afterFormSubmitHandler);
			BX.removeCustomEvent(this._ajaxForm, "onSubmitCancel", this._cancelFormSubmitHandler);
			this._ajaxForm = null;
		},
		getId: function()
		{
			return this._id;
		},
		getEntityTypeId: function()
		{
			return this._entityTypeId;
		},
		getEntityTypeName: function()
		{
			return BX.CrmEntityType.resolveName(this._entityTypeId);
		},
		getEntityId: function()
		{
			return this._entityId;
		},
		getOwnerInfo: function()
		{
			return this._model.getOwnerInfo();
		},
		getMode: function()
		{
			return this._mode;
		},
		getModel: function()
		{
			return this._model;
		},
		getContextId: function()
		{
			return this._contextId;
		},
		getContext: function()
		{
			return this._context;
		},
		getExternalContextId: function()
		{
			return this._externalContextId;
		},
		getScheme: function()
		{
			return this._scheme;
		},
		isVisible: function()
		{
			return this._container.offsetParent !== null;
		},
		isVisibilityPolicyEnabled: function()
		{
			return this._enableVisibilityPolicy;
		},
		isSectionEditEnabled: function()
		{
			return this._enableSectionEdit;
		},
		isSectionCreationEnabled: function()
		{
			return this._enableSectionCreation && this.canChangeScheme();
		},
		isFieldsContextMenuEnabled: function()
		{
			return this._enableFieldsContextMenu;
		},
		isModeToggleEnabled: function()
		{
			return this._enableModeToggle;
		},
		isPersistent: function()
		{
			return(this._entityId > 0 && this._entityId === this._model.getIntegerField("ID", 0));
		},
		isNew: function()
		{
			return this._isNew;
		},
		isReadOnly: function()
		{
			return this._readOnly;
		},
		isEmbedded: function()
		{
			return this._isEmbedded;
		},
		isEditInViewEnabled: function()
		{
			return this._entityId > 0;
		},
		isNeedToDisplayEmptyFields: function()
		{
			return this._showEmptyFields;
		},
		areCommunicationControlsEnabled: function()
		{
			return this._enableCommunicationControls;
		},
		prepareFieldLayoutOptions: function(field)
		{
			var hasContent = field.hasContentToDisplay();
			var result = { isNeedToDisplay: (hasContent || this._showEmptyFields) };
			if(this._enableExternalLayoutResolvers)
			{
				var eventArgs =
					{
						id: this._id,
						field: field,
						hasContent: hasContent,
						showEmptyFields: this._showEmptyFields,
						layoutOptions: result
					};

				BX.onCustomEvent(
					window,
					"BX.Crm.EntityEditor:onResolveFieldLayoutOptions",
					[ this, eventArgs ]
				);
			}
			return result;
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				return BX.prop.getString(this._settings, "contactCreateUrl", "");
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				return BX.prop.getString(this._settings, "companyCreateUrl", "");
			}
			return "";
		},
		getEntityEditUrl: function(entityTypeName, entityId)
		{
			var url = "";
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				url = BX.prop.getString(this._settings, "contactEditUrl", "");
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.prop.getString(this._settings, "companyEditUrl", "");
			}

			if(url !== "")
			{
				url = url.replace("#id#", entityId, "gi");
			}

			return url;
		},
		getEntityRequisiteSelectUrl: function(entityTypeName, entityId)
		{
			var url = "";
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				url = BX.prop.getString(this._settings, "contactRequisiteSelectUrl", "").replace(/#contact_id#/gi, entityId);
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.prop.getString(this._settings, "companyRequisiteSelectUrl", "").replace(/#company_id#/gi, entityId);
			}
			return url;
		},
		getRequisiteEditUrl: function(id)
		{
			return BX.prop.getString(this._settings, "requisiteEditUrl", "").replace(/#requisite_id#/gi, id);
		},
		getDetailManager: function()
		{
			if(typeof(BX.Crm.EntityDetailManager) === "undefined")
			{
				return null;
			}

			return BX.Crm.EntityDetailManager.get(BX.prop.getString(this._settings, "detailManagerId", ""));
		},
		getUserFieldManager: function()
		{
			return this._userFieldManager;
		},
		getBizprocManager: function()
		{
			return this._bizprocManager;
		},
		getAttributeManager: function()
		{
			if(!this._attributeManager)
			{
				var settings = this.getAttributeManagerSettings();
				if(settings)
				{
					this._attributeManager = BX.Crm.EntityFieldAttributeManager.create(
						this._id,
						{
							entityTypeId: this.getEntityTypeId(),
							entityScope: BX.prop.getString(settings, "ENTITY_SCOPE", ""),
							isPermitted: BX.prop.getBoolean(settings, "IS_PERMITTED", true),
							lockScript: BX.prop.getString(settings, "LOCK_SCRIPT", ""),
							captions: BX.prop.getObject(settings, "CAPTIONS", {})
						}
					);
				}
			}
			return this._attributeManager;
		},
		getHtmlEditorConfig: function(fieldName)
		{
			return BX.prop.getObject(this._htmlEditorConfigs, fieldName, null);
		},
		//region Validators
		createValidator: function(settings)
		{
			settings["editor"] = this;
			return BX.Crm.EntityEditorValidatorFactory.create(
				BX.prop.getString(settings, "type", ""),
				settings
			);
		},
		//endregion
		//region Controls & Events
		getControlByIndex: function(index)
		{
			return (index >= 0 && index < this._controls.length) ? this._controls[index] : null;
		},
		getControlIndex: function(control)
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				if(this._controls[i] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getControls: function()
		{
			return this._controls;
		},
		getControlCount: function()
		{
			return this._controls.length;
		},
		createControl: function(type, controlId, settings)
		{
			settings["serviceUrl"] = this._serviceUrl;
			settings["container"] = this._formElement;
			settings["model"] = this._model;
			settings["editor"] = this;

			return BX.Crm.EntityEditorControlFactory.create(type, controlId, settings);
		},
		addControlAt: function(control, index)
		{
			var options = {};
			if(index < this._controls.length)
			{
				options["anchor"] = this._controls[index].getWrapper();
				this._controls.splice(index, 0, control);
			}
			else
			{
				this._controls.push(control);
			}
			control.layout(options);
		},
		moveControl: function(control, index)
		{
			var qty = this._controls.length;
			var lastIndex = qty - 1;
			if(index < 0  || index > qty)
			{
				index = lastIndex;
			}

			var currentIndex = this.getControlIndex(control);
			if(currentIndex < 0 || currentIndex === index)
			{
				return false;
			}

			control.clearLayout();
			this._controls.splice(currentIndex, 1);
			qty--;

			var anchor = index < qty
				? this._controls[index].getWrapper()
				: null;

			if(index < qty)
			{
				this._controls.splice(index, 0, control);
			}
			else
			{
				this._controls.push(control);
			}

			if(anchor)
			{
				control.layout({ anchor: anchor });
			}
			else
			{
				control.layout();
			}

			this._config.moveSchemeElement(control.getSchemeElement(), index);
		},
		removeControl: function(control)
		{
			var index = this.getControlIndex(control);
			if(index < 0)
			{
				return false;
			}

			this.processControlRemove(control);
			control.clearLayout();
			this._controls.splice(index, 1);
		},
		getControlById: function(id)
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				var control = this._controls[i];
				if(control.getId() === id)
				{
					return control;
				}

				var child = control.getChildById(id);
				if(child)
				{
					return child;
				}
			}
			return null;
		},
		getControlByIdRecursive: function(name, controls)
		{
			var res;

			if(!controls)
			{
				controls = this.getControls();
			}

			for (var i=0; i < controls.length; i++)
			{
				if (!controls[i] instanceof BX.Crm.EntityEditorControl)
				{
					continue;
				}

				if(controls[i].getId() === name)
				{
					return controls[i];
				}
				else if (controls[i] instanceof BX.Crm.EntityEditorSection)
				{
					if(res = this.getControlByIdRecursive(name, controls[i].getChildren()))
					{
						return res;
					}
				}
			}

			return null;
		},
		getAllControls: function(controls)
		{
			var result = [], res;

			if(!controls)
			{
				controls = this.getControls();
			}

			for (var i=0; i < controls.length; i++)
			{
				if (controls[i] instanceof BX.Crm.EntityEditorControl)
				{
					if (controls[i] instanceof BX.Crm.EntityEditorSection)
					{
						if(res = this.getAllControls(controls[i].getChildren()))
						{
							result = result.concat(res);
						}
					}
					else
					{
						result.push(controls[i]);
					}
				}
			}

			return result;
		},
		getActiveControlCount: function()
		{
			return this._activeControls.length;
		},
		getActiveControlIndex: function(control)
		{
			var length = this._activeControls.length;
			if(length === 0)
			{
				return -1;
			}

			for(var i = 0; i < length; i++)
			{
				if(this._activeControls[i] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getActiveControlById: function(id, recursive)
		{
			recursive = !!recursive;
			var length = this._activeControls.length;
			if(length === 0)
			{
				return null;
			}

			for(var i = 0; i < length; i++)
			{
				var control = this._activeControls[i];
				if(control.getId() === id)
				{
					return control;
				}

				if(recursive)
				{
					var child = control.getChildById(id);
					if(child)
					{
						return child;
					}
				}
			}
			return null;
		},
		getActiveControlByIndex: function(index)
		{
			return index >= 0 && index < this._activeControls.length ? this._activeControls[index] : null;
		},
		registerActiveControl: function(control)
		{
			var index = this.getActiveControlIndex(control);
			if(index >= 0)
			{
				return;
			}

			this._activeControls.push(control);
			control.setActive(true);
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				this._mode = BX.Crm.EntityEditorMode.edit;
				this._modeChangeNotifier.notify([ this ]);
			}
		},
		unregisterActiveControl: function(control)
		{
			var index = this.getActiveControlIndex(control);
			if(index < 0)
			{
				return;
			}

			this._activeControls.splice(index, 1);
			control.setActive(false);
			if(this._activeControls.length === 0 && this._mode !== BX.Crm.EntityEditorMode.view)
			{
				this._mode = BX.Crm.EntityEditorMode.view;
				this._modeChangeNotifier.notify([ this ]);
			}
		},
		releaseActiveControls: function(options)
		{
			//region Release Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onRelease", [ this, eventArgs ]);
			//endregion

			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				var control = this._activeControls[i];
				control.setActive(false);
				control.toggleMode(false, options);
			}
			this._activeControls = [];
		},
		hasChangedControls: function()
		{
			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				if(this._activeControls[i].isChanged())
				{
					return true;
				}
			}
			return false;
		},
		hasChangedControllers: function()
		{
			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				if(this._controllers[i].isChanged())
				{
					return true;
				}
			}
			return false;
		},
		isWaitingForInput: function()
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return false;
			}

			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				if(this._activeControls[i].isWaitingForInput())
				{
					return true;
				}
			}
			return false;
		},
		processControlModeChange: function(control)
		{
			if(control.getMode() === BX.Crm.EntityEditorMode.edit)
			{
				this.registerActiveControl(control);
			}
			else //BX.Crm.EntityEditorMode.view
			{
				this.unregisterActiveControl(control);
			}

			if(this.getActiveControlCount() > 0)
			{
				this.showToolPanel();
			}
			else
			{
				this.hideToolPanel();
			}
		},
		processControlChange: function(control, params)
		{
			if(!this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = true;
			}

			this.showToolPanel();
			this._controlChangeNotifier.notify([ params ]);
		},
		processControlAdd: function(control)
		{
			this.removeAvailableSchemeElement(control.getSchemeElement());
		},
		processControlMove: function(control)
		{
		},
		processControlRemove: function(control)
		{
			if(control instanceof BX.Crm.EntityEditorField || control instanceof BX.Crm.EntityEditorSubsection)
			{
				this.addAvailableSchemeElement(control.getSchemeElement());
			}
			else if(control instanceof BX.Crm.EntityEditorSection)
			{
				var children = control.getChildren();
				for(var i= 0, length = children.length; i < length; i++)
				{
					this.addAvailableSchemeElement(children[i].getSchemeElement());
				}
			}
		},
		//endregion
		//region Available Scheme Elements
		getAvailableSchemeElements: function()
		{
			return this._availableSchemeElements;
		},
		addAvailableSchemeElement: function(schemeElement)
		{
			this._availableSchemeElements.push(schemeElement);
			this._areAvailableSchemeElementsChanged = true;
			this.notifyAvailableSchemeElementsChanged();
		},
		removeAvailableSchemeElement: function(element)
		{
			var index = this.getAvailableSchemeElementIndex(element);
			if(index < 0)
			{
				return;
			}

			this._availableSchemeElements.splice(index, 1);
			this._areAvailableSchemeElementsChanged = true;
			this.notifyAvailableSchemeElementsChanged();
		},
		getAvailableSchemeElementIndex: function(element)
		{
			var schemeElements = this._availableSchemeElements;
			for(var i = 0, length = schemeElements.length; i < length; i++)
			{
				if(schemeElements[i] === element)
				{
					return i;
				}
			}
			return -1;
		},
		getAvailableSchemeElementByName: function(name)
		{
			var schemeElements = this._availableSchemeElements;
			for(var i = 0, length = schemeElements.length; i < length; i++)
			{
				var schemeElement = schemeElements[i];
				if(schemeElement.getName() === name)
				{
					return schemeElement;
				}
			}
			return null;
		},
		hasAvailableSchemeElements: function()
		{
			return (this._availableSchemeElements.length > 0);
		},
		getSchemeElementByName: function(name)
		{
			return this._scheme.findElementByName(name, { isRecursive: true });
		},
		notifyAvailableSchemeElementsChanged: function()
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].processAvailableSchemeElementsChange();
			}
		},
		//endregion
		//region Controllers
		createController: function(data)
		{
			return BX.Crm.EntityEditorControllerFactory.create(
				BX.prop.getString(data, "type", ""),
				BX.prop.getString(data, "name", ""),
				{
					config: BX.prop.getObject(data, "config", {}),
					model: this._model,
					editor: this
				}
			);
		},
		processControllerChange: function(controller)
		{
			if(!this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = true;
			}

			this.showToolPanel();
		},
		//endregion
		//region Layout
		getContainer: function()
		{
			return this._container;
		},
		prepareContextDataLayout: function(context, parentName)
		{
			for(var key in context)
			{
				if(!context.hasOwnProperty(key))
				{
					continue;
				}

				var item = context[key];
				var name = key;
				if(BX.type.isNotEmptyString(parentName))
				{
					name = parentName + "[" + name + "]";
				}
				if(BX.type.isPlainObject(item))
				{
					this.prepareContextDataLayout(item, name);
				}
				else
				{
					this._formElement.appendChild(
						BX.create("input", { props: { type: "hidden", name: name, value: item } })
					);
				}
			}
		},
		hasLayout: function()
		{
			return this._haslayout;
		},
		layout: function()
		{
			var eventArgs = { cancel: false };
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onBeforeLayout", [ this, eventArgs ]);
			if(eventArgs["cancel"])
			{
				return;
			}

			this.prepareContextDataLayout(this._context, "");

			if(this._toolPanel)
			{
				this._toolPanel.layout();
			}

			if(this._createSectionButton)
			{
				if(this.isSectionCreationEnabled())
				{
					BX.bind(this._createSectionButton, "click", BX.delegate(this.onCreateSectionButtonClick, this));
				}
				else
				{
					this._createSectionButton.style.display = "none";
				}
			}

			if(this._configMenuButton)
			{
				BX.bind(this._configMenuButton, "click", BX.delegate(this.onConfigMenuButtonClick, this));
			}

			var enableInlineEditSpotlight = BX.prop.getBoolean(this._settings, "enableInlineEditSpotlight", false);

			var userFieldLoaders =
				{
					edit: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.edit, enableBatchMode: true, owner: this }
					),
					view: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.view, enableBatchMode: true, owner: this }
					)
				};

			var i, length, control;
			for(i = 0, length = this._controls.length; i < length; i++)
			{
				control = this._controls[i];
				var mode = control.getMode();

				var layoutOptions =
					{
						userFieldLoader: userFieldLoaders[BX.Crm.EntityEditorMode.getName(mode)],
						enableFocusGain: !this._isEmbedded
					};

				if(i === 0 && enableInlineEditSpotlight && mode === BX.Crm.EntityEditorMode.view)
				{
					layoutOptions["lighting"] =
						{
							id: BX.prop.getString(this._settings, "inlineEditSpotlightId", ""),
							text: this.getMessage("inlineEditHint")
						};
				}

				control.layout(layoutOptions);

				if(mode === BX.Crm.EntityEditorMode.edit)
				{
					this.registerActiveControl(control);
				}
			}

			for(var key in userFieldLoaders)
			{
				if(userFieldLoaders.hasOwnProperty(key))
				{
					userFieldLoaders[key].runBatch();
				}
			}

			if(this.getActiveControlCount() > 0)
			{
				this.showToolPanel();
			}

			if(this._model.isCaptionEditable())
			{
				BX.bind(
					this._pageTitle,
					"click",
					BX.delegate(this.onPageTileClick, this)
				);

				if(this._editPageTitleButton)
				{
					BX.bind(
						this._editPageTitleButton,
						"click",
						BX.delegate(this.onPageTileClick, this)
					);
				}
			}

			if(this._mode === BX.Crm.EntityEditorMode.edit && this._dupControlManager.isEnabled())
			{
				this._dupControlManager.search();
			}

			if(this._enableBottomPanel && this._buttonContainer)
			{
				this._buttonContainer.style.display = "";
			}

			this.adjustButtons();
			this._haslayout = true;

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onLayout", [ this ]);
		},
		refreshLayout: function(options)
		{
			var userFieldLoaders =
				{
					edit: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.edit, enableBatchMode: true, owner: this }
					),
					view: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.view, enableBatchMode: true, owner: this }
					)
				};


			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				var control = this._controls[i];
				var mode = control.getMode();

				var layoutOptions = BX.mergeEx(
					options,
					{
						userFieldLoader: userFieldLoaders[BX.Crm.EntityEditorMode.getName(mode)],
						enableFocusGain: !this._isEmbedded
					}
				);
				control.refreshLayout(layoutOptions);
			}

			for(var key in userFieldLoaders)
			{
				if(userFieldLoaders.hasOwnProperty(key))
				{
					userFieldLoaders[key].runBatch();
				}
			}

			this.adjustButtons();

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onRefreshLayout", [ this ]);
		},
		//endregion
		switchControlMode: function(control, mode, options)
		{
			if(!this.isModeToggleEnabled())
			{
				return;
			}

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				if(control.checkModeOption(BX.Crm.EntityEditorModeOptions.saveOnExit))
				{
					this._modeSwitch.getQueue().add(control, BX.Crm.EntityEditorMode.view);
					this._modeSwitch.run();
				}
				else
				{
					control.setMode(mode, { options: options, notify: true });
					control.refreshLayout();
				}
			}
			else// if(mode === BX.Crm.EntityEditorMode.edit)
			{
				if(!BX.Crm.EntityEditorModeOptions.check(options, BX.Crm.EntityEditorModeOptions.exclusive))
				{
					control.setMode(BX.Crm.EntityEditorMode.edit, { options: options, notify: true });
					control.refreshLayout();
				}
				else
				{
					var queuedControlQty = 0;
					for(var i = 0, length = this._activeControls.length; i < length; i++)
					{
						var activeControl = this._activeControls[i];
						if(activeControl.checkModeOption(BX.Crm.EntityEditorModeOptions.saveOnExit))
						{
							this._modeSwitch.getQueue().add(activeControl, BX.Crm.EntityEditorMode.view, options);
							queuedControlQty++;
						}
					}

					if(queuedControlQty > 0)
					{
						this._modeSwitch.getQueue().add(control, BX.Crm.EntityEditorMode.edit, options);
						this._modeSwitch.run();
					}
					else
					{
						control.setMode(BX.Crm.EntityEditorMode.edit, { options: options, notify: true });
						control.refreshLayout();
					}
				}
			}
		},
		switchToViewMode: function(options)
		{
			this.releaseActiveControls(options);
			this.hideToolPanel();
		},
		switchTitleMode: function(mode)
		{
			if(mode === BX.Crm.EntityEditorMode.edit)
			{
				this._pageTitle.style.display = "none";

				if(this._buttonWrapper)
				{
					this._buttonWrapper.style.display = "none";
				}

				this._pageTitleInput = BX.create(
					"input",
					{
						props:
						{
							type: "text",
							className: "pagetitle-item crm-pagetitle-item",
							value: this._model.getCaption()
						}
					}
				);
				//this._pageTitle.parentNode.insertBefore(this._pageTitleInput, this._buttonWrapper);
				this._pageTitle.parentNode.insertBefore(this._pageTitleInput, this._pageTitle);
				this._pageTitleInput.focus();

				window.setTimeout(
					BX.delegate(
						function()
							{
								BX.bind(document, "click", this._pageTitleExternalClickHandler);
								BX.bind(this._pageTitleInput, "keyup", this._pageTitleKeyPressHandler);
							},
						this
					),
					300
				);
			}
			else
			{
				if(this._pageTitleInput)
				{
					this._pageTitleInput = BX.remove(this._pageTitleInput);
				}

				this._pageTitle.innerHTML = BX.util.htmlspecialchars(this._model.getCaption());
				this._pageTitle.style.display = "";

				if(this._buttonWrapper)
				{
					this._buttonWrapper.style.display = "";
				}

				BX.unbind(document, "click", this._pageTitleExternalClickHandler);
				BX.unbind(this._pageTitleInput, "keyup", this._pageTitleKeyPressHandler);

				this.adjustTitle();
			}
		},
		adjustTitle: function()
		{
			if(!this._enablePageTitleControls)
			{
				return;
			}

			if(!this._buttonWrapper)
			{
				return;
			}

			var caption = this._model.getCaption().trim();
			var captionTail = "";

			document.title = caption;
			if (BX.getClass("BX.SidePanel.Instance.updateBrowserTitle"))
			{
				BX.SidePanel.Instance.updateBrowserTitle();
			}

			var match = caption.match(/\s+\S+\s*$/);
			if(match)
			{
				captionTail = caption.substr(match["index"]);
				caption = caption.substr(0, match["index"]);
			}
			else
			{
				captionTail = caption;
				caption = "";
			}

			BX.cleanNode(this._buttonWrapper);
			if(captionTail !== "")
			{
				this._buttonWrapper.appendChild(document.createTextNode(captionTail));
			}
			if(this._editPageTitleButton)
			{
				this._buttonWrapper.appendChild(this._editPageTitleButton);
			}
			if(this._copyPageUrlButton)
			{
				this._buttonWrapper.appendChild(this._copyPageUrlButton);
			}

			this._pageTitle.innerHTML = BX.util.htmlspecialchars(caption);
		},
		adjustSize: function()
		{
			if(!this._enablePageTitleControls)
			{
				return;
			}

			if(!this._pageTitle)
			{
				return;
			}

			var wrapper = this._pageTitle.parentNode ? this._pageTitle.parentNode : this._pageTitle;
			BX.addClass(wrapper, "crm-pagetitle")
			var enableNarrowSize = wrapper.offsetWidth <= 480 && this._model.getCaption().length >= 40;
			if(enableNarrowSize && !BX.hasClass(wrapper, "pagetitle-narrow"))
			{
				BX.addClass(wrapper, "pagetitle-narrow");
			}
			else if(!enableNarrowSize && BX.hasClass(wrapper, "pagetitle-narrow"))
			{
				BX.removeClass(wrapper, "pagetitle-narrow");
			}

		},
		adjustButtons: function()
		{
			//Move configuration menu button to last section if bottom panel is hidden.
			if(this._config.isScopeToggleEnabled() && !this._enableBottomPanel && this._controls.length > 0)
			{
				this._controls[this._controls.length - 1].ensureButtonPanelWrapperCreated().appendChild(
					BX.create(
						"span",
						{
							props:
								{
									className: this._config.getScope() === BX.Crm.EntityConfigScope.common
										? "crm-entity-card-common" : "crm-entity-card-private"
								},
							events: { click: BX.delegate(this.onConfigMenuButtonClick, this) }
						}
					)
				);
			}
		},
		showToolPanel: function()
		{
			if(!this._toolPanel || this._toolPanel.isVisible())
			{
				return;
			}

			this._toolPanel.setVisible(true);
			if(this._parentContainer)
			{
				this._parentContainer.style.paddingBottom = "50px";

				document.body.style.paddingBottom = "60px";
				document.body.style.height = "auto";
			}
		},
		hideToolPanel: function()
		{
			if(!this._toolPanel || !this._toolPanel.isVisible())
			{
				return;
			}

			this._toolPanel.setVisible(false);
			if(this._parentContainer)
			{
				this._parentContainer.style.paddingBottom = "";

				document.body.style.paddingBottom = "";
				document.body.style.height = "";
			}
		},
		showMessageDialog: function(id, title, content)
		{
			var dlg = BX.Crm.EditorAuxiliaryDialog.create(
				id,
				{
					title: title,
					content: content,
					buttons:
						[
							{
								id: "continue",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("CRM_EDITOR_CONTINUE"),
								callback: function(button) { button.getDialog().close(); }
							}
						]
				}
			);
			dlg.open();
		},
		addModeChangeListener: function(listener)
		{
			this._modeChangeNotifier.addListener(listener);
		},
		removeModeChangeListener: function(listener)
		{
			this._modeChangeNotifier.removeListener(listener);
		},
		addControlChangeListener: function(listener)
		{
			this._controlChangeNotifier.addListener(listener);
		},
		removeControlChangeListener: function(listener)
		{
			this._controlChangeNotifier.removeListener(listener);
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityEditor.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getFormElement: function()
		{
			return this._formElement;
		},
		isChanged: function()
		{
			return this._isNew || this.hasChangedControls() || this.hasChangedControllers();
		},
		savePageTitle: function()
		{
			if(!this._pageTitleInput)
			{
				return;
			}

			var title = BX.util.trim(this._pageTitleInput.value);
			if(title === "")
			{
				return;
			}

			this._model.setCaption(title);
			var data =
				{
					"ACTION": "SAVE",
					"ACTION_ENTITY_ID": this._entityId,
					"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
						BX.CrmEntityType.resolveName(this._entityTypeId)
					),
					"PARAMS": BX.prop.getObject(this._context, "PARAMS", {})
				};

			this._model.prepareCaptionData(data);

			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				data = this._controllers[i].onBeforesSaveControl(data);
			}

			BX.ajax(
				{
					url: this._serviceUrl,
					method: "POST",
					dataType: "json",
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		saveChanged: function()
		{
			if(!this._isNew && !this.hasChangedControls() && !this.hasChangedControllers() && !this.isWaitingForInput())
			{
				this._modeSwitch.reset();
				this.releaseActiveControls();
				this.refreshLayout({ reset: true });
				this.hideToolPanel();
			}
			else
			{
				this._modeSwitch.reset();
				this._modeSwitch.getQueue().addBatch(this._activeControls, BX.Crm.EntityEditorMode.view);
				this._modeSwitch.run();
			}
		},
		saveDelayed: function(delay)
		{
			if(typeof(delay) === "undefined")
			{
				delay = 0;
			}

			if(this._delayedSaveHandle > 0)
			{
				window.clearTimeout(this._delayedSaveHandle);
			}
			this._delayedSaveHandle = window.setTimeout(BX.delegate(this.save, this), delay);
		},
		save: function()
		{
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(true);
			}

			var result = BX.Crm.EntityValidationResult.create();
			this.validate(result).then(
				BX.delegate(
					function()
					{
						if(this._bizprocManager)
						{
							return this._bizprocManager.onBeforeSave(result);
						}

						var promise = new BX.Promise();
						window.setTimeout(function(){ promise.fulfill(); }, 0);
						return promise;
					},
					this
				)
			).then(
				BX.delegate(
					function()
					{
						if(result.getStatus())
						{
							this.innerSave();
							if(this._bizprocManager)
							{
								this._bizprocManager.onAfterSave();
							}
						}
						else
						{
							if(this.isVisible())
							{
								var field = result.getTopmostField();
								if(field)
								{
									field.focus();
								}
							}

							if(this._toolPanel)
							{
								this._toolPanel.setLocked(false);
							}

							BX.onCustomEvent(window, "BX.Crm.EntityEditor:onFailedValidation", [ this, result ]);
						}
					},
					this
				)
			);

			if(this._delayedSaveHandle > 0)
			{
				this._delayedSaveHandle = 0;
			}
		},
		saveControl: function(control)
		{
			if(this._entityId <= 0)
			{
				return;
			}

			var result = BX.Crm.EntityValidationResult.create();
			control.validate(result);

			if(!result.getStatus())
			{
				return;
			}

			var data =
			{
				"ACTION": "SAVE",
				"ACTION_ENTITY_ID": this._entityId,
				"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
					BX.CrmEntityType.resolveName(this._entityTypeId)
				)
			};

			data = BX.mergeEx(data, this._context);
			control.save();
			control.prepareSaveData(data);

			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				data = this._controllers[i].onBeforesSaveControl(data);
			}

			BX.ajax(
				{
					method: "POST",
					dataType: "json",
					url: this._serviceUrl,
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		saveData: function(data)
		{
			if(this._entityId <= 0)
			{
				return;
			}

			data = BX.mergeEx(data, this._context);
			data = BX.mergeEx(
				data,
				{
					"ACTION": "SAVE",
					"ACTION_ENTITY_ID": this._entityId,
					"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
						BX.CrmEntityType.resolveName(this._entityTypeId)
					)
				}
			);

			BX.ajax(
				{
					method: "POST",
					dataType: "json",
					url: this._serviceUrl,
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		validate: function(result)
		{
			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				this._activeControls[i].validate(result);
			}

			var promise = new BX.Promise();
			this._userFieldManager.validate(result).then(
				BX.delegate(function() { promise.fulfill(); }, this)
			);
			return promise;
		},
		isRequestRunning: function()
		{
			return this._isRequestRunning;
		},
		innerSave: function()
		{
			if(this._isRequestRunning)
			{
				return;
			}

			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].onBeforeSubmit();
			}

			for(i = 0, length = this._activeControls.length; i < length; i++)
			{
				var control = this._activeControls[i];

				control.save();
				control.onBeforeSubmit();

				if(control.isSchemeChanged())
				{
					this._config.updateSchemeElement(control.getSchemeElement());
				}
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._scheme.setAvailableElements(this._availableSchemeElements);
				this._areAvailableSchemeElementsChanged = false;
			}

			if(this._config && this._config.isChanged())
			{
				this._config.save(false);
			}

			//region Rise Save Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model,
					cancel: false
				};

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onSave", [ this, eventArgs ]);

			var enableCloseConfirmation = BX.prop.getBoolean(
				eventArgs,
				"enableCloseConfirmation",
				null
			);
			if(BX.type.isBoolean(enableCloseConfirmation))
			{
				this._enableCloseConfirmation = enableCloseConfirmation;
			}

			if(eventArgs["cancel"])
			{
				return;
			}

			if(this._ajaxForm)
			{
				var detailManager = this.getDetailManager();
				if(detailManager)
				{
					var params =  detailManager.prepareAnalyticParams(
						this._entityId > 0 ? "update" : "create",
						{ embedded: this.isEmbedded() ? "Y" : "N" }
					);

					if(params)
					{
						this._ajaxForm.addUrlParams(params);
					}
				}

				this._ajaxForm.submit();
			}
			//endregion
		},
		cancel: function()
		{
			//region Rise Cancel Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model,
					cancel: false
				};

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onCancel", [ this, eventArgs ]);

			var enableCloseConfirmation = BX.prop.getBoolean(
				eventArgs,
				"enableCloseConfirmation",
				null
			);
			if(BX.type.isBoolean(enableCloseConfirmation))
			{
				this._enableCloseConfirmation = enableCloseConfirmation;
			}

			if(eventArgs["cancel"])
			{
				return;
			}
			//endregion

			if(this.hasChangedControls() || this.hasChangedControllers())
			{
				window.setTimeout(
					BX.delegate(this.openCancellationConfirmationDialog, this),
					250
				);
				return;
			}

			this.innerCancel();
		},
		innerCancel: function()
		{
			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].innerCancel();
			}

			this.rollback();

			if(this._isNew)
			{
				this.refreshLayout();
				if(typeof(top.BX.SidePanel) !== "undefined")
				{
					this._enableCloseConfirmation = false;
					window.setTimeout(
						function ()
						{
							var slider = top.BX.SidePanel.Instance.getSliderByWindow(window);
							if(slider && slider.isOpen())
							{
								slider.close(false);
							}
						},
						250
					);
				}
			}
			else
			{
				this.switchToViewMode({ refreshLayout: false });
				this.refreshLayout();
			}
		},
		openCancellationConfirmationDialog: function()
		{
			BX.Crm.EditorAuxiliaryDialog.create(
				"cancel_confirmation",
				{
					title: BX.message("CRM_EDITOR_CONFIRMATION"),
					content: BX.message("CRM_EDITOR_CANCEL_CONFIRMATION"),
					buttons:
						[
							{
								id: "yes",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("CRM_EDITOR_YES"),
								callback: this._cancelConfirmationHandler
							},
							{
								id: "no",
								type: BX.Crm.DialogButtonType.cancel,
								text: BX.message("CRM_EDITOR_NO"),
								callback: this._cancelConfirmationHandler
							}
						]
				}
			).open();
		},
		rollback: function()
		{
			this._model.rollback();

			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].rollback();
			}

			for(i = 0, length = this._activeControls.length; i < length; i++)
			{
				this._activeControls[i].rollback();
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._availableSchemeElements = this._scheme.getAvailableElements();
				this._areAvailableSchemeElementsChanged = false;
			}
		},
		addSchemeElementAt: function(schemeElement, index)
		{
			if(this._config)
			{
				this._config.addSchemeElementAt(schemeElement, index);
			}
		},
		updateSchemeElement: function(schemeElement)
		{
			if(this._config)
			{
				this._config.updateSchemeElement(schemeElement);
			}
		},
		removeSchemeElement: function(schemeElement)
		{
			if(this._config)
			{
				this._config.removeSchemeElement(schemeElement);
			}
		},
		canChangeScheme: function()
		{
			return this._config && this._config.isChangeable();
		},
		isSchemeChanged: function()
		{
			return this._config && this._config.isChanged();
		},
		saveScheme: function()
		{
			return this._config && this._config.save(false);
		},
		saveSchemeChanges: function()
		{
			this.commitSchemeChanges();
			return this._config && this._config.save(false);
		},
		commitSchemeChanges: function()
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].commitSchemeChanges();
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._scheme.setAvailableElements(this._availableSchemeElements);
				this._areAvailableSchemeElementsChanged = false;
			}
		},
		onSaveSuccess: function(result)
		{
			this._isRequestRunning = false;

			if(this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = false;
			}

			if(this._toolPanel)
			{
				this._toolPanel.setLocked(false);
				this._toolPanel.clearErrors();
			}

			//region Event Params
			var eventParams = BX.prop.getObject(result, "EVENT_PARAMS", {});
			eventParams["entityTypeId"] = this._entityTypeId;

			var entityInfo = BX.prop.getObject(result, "ENTITY_INFO", null);
			if(entityInfo)
			{
				eventParams["entityInfo"] = entityInfo;
			}

			var slider = BX.Crm.Page.getTopSlider();
			if(slider)
			{
				eventParams["sliderUrl"] = slider.getUrl();
			}
			//endregion

			var checkErrors = BX.prop.getObject(result, "CHECK_ERRORS", null);
			var error = BX.prop.getString(result, "ERROR", "");
			if(checkErrors || error !== "")
			{
				if(checkErrors)
				{
					var firstField = null;
					var errorMessages = [];
					for(var fieldId in checkErrors)
					{
						if(!checkErrors.hasOwnProperty(fieldId))
						{
							return;
						}

						var field = this.getActiveControlById(fieldId, true);
						if(field)
						{
							field.showError(checkErrors[fieldId]);
							if(!firstField)
							{
								firstField = field;
							}
						}
						else
						{
							errorMessages.push(checkErrors[fieldId]);
						}
					}

					if(firstField)
					{
						firstField.scrollAnimate();
					}

					error = errorMessages.join("<br/>");
				}

				if(error !== "" && this._toolPanel)
				{
					this._toolPanel.addError(error);
				}

				eventParams["checkErrors"] = checkErrors;
				eventParams["error"] = error;

				if(this._isNew)
				{
					BX.onCustomEvent(window, "onCrmEntityCreateError", [eventParams]);
				}
				else
				{
					eventParams["entityId"] = this._entityId;
					BX.onCustomEvent(window, "onCrmEntityUpdateError", [eventParams]);
				}

				this.releaseAjaxForm();
				this.initializeAjaxForm();

				return;
			}

			var entityData = BX.prop.getObject(result, "ENTITY_DATA", null);
			eventParams["entityData"] = entityData;
			eventParams["isCancelled"] = false;

			if(this._isNew)
			{
				this._entityId = BX.prop.getInteger(result, "ENTITY_ID", 0);
				if(this._entityId <= 0)
				{
					if(this._toolPanel)
					{
						this._toolPanel.addError(this.getMessage("couldNotFindEntityIdError"));
					}
					return;
				}

				//fire onCrmEntityCreate
				BX.Crm.EntityEvent.fireCreate(this._entityTypeId, this._entityId, this._externalContextId, eventParams);

				eventParams["sender"] = this;
				eventParams["entityId"] = this._entityId;

				BX.onCustomEvent(window, "onCrmEntityCreate", [eventParams]);

				if(BX.prop.getBoolean(eventParams, "isCancelled", true))
				{
					this._entityId = 0;

					this.rollback();

					this.releaseAjaxForm();
					this.initializeAjaxForm();

					return;
				}

				this._isNew = false;
			}
			else
			{
				//fire onCrmEntityUpdate
				BX.Crm.EntityEvent.fireUpdate(this._entityTypeId, this._entityId, this._externalContextId, eventParams);

				eventParams["sender"] = this;
				eventParams["entityId"] = this._entityId;
				BX.onCustomEvent(window, "onCrmEntityUpdate", [eventParams]);

				if(BX.prop.getBoolean(eventParams, "isCancelled", true))
				{
					this.rollback();

					this.releaseAjaxForm();
					this.initializeAjaxForm();

					return;
				}
			}

			var redirectUrl = BX.prop.getString(result, "REDIRECT_URL", "");

			var additionalEventParams = BX.prop.getObject(result, "EVENT_PARAMS", null);
			if(additionalEventParams)
			{
				var eventName = BX.prop.getString(additionalEventParams, "name", "");
				var eventArgs = BX.prop.getObject(additionalEventParams, "args", null);
				if(eventName !== "" && eventArgs !== null)
				{
					if(redirectUrl !== "")
					{
						eventArgs["redirectUrl"] = redirectUrl;
					}
					BX.localStorage.set(eventName, eventArgs, 10);
				}
			}

			if(this._isReleased)
			{
				return;
			}

			if(redirectUrl !== "" && !this._isEmbedded)
			{
				window.location.replace(
					BX.util.add_url_param(
						redirectUrl,
						{ "IFRAME": "Y", "IFRAME_TYPE": "SIDE_SLIDER" }
					)
				);
			}
			else
			{
				if(BX.type.isPlainObject(entityData))
				{
					//Notification event is disabled because we will call "refreshLayout" for all controls at the end.
					this._model.setData(entityData, { enableNotification: false });
				}

				this.adjustTitle();
				this.adjustSize();
				this.releaseAjaxForm();
				this.initializeAjaxForm();

				for(var i = 0, length = this._controllers.length; i < length; i++)
				{
					this._controllers[i].onAfterSave();
				}

				//console.log("switchToViewMode");

				if(this._modeSwitch.isRunning())
				{
					this._modeSwitch.complete();
				}
				else
				{
					this.switchToViewMode({ refreshLayout: false });
				}

				this.refreshLayout({ reset: true });
				this.hideToolPanel();
			}
		},
		formatMoney: function(sum, currencyId, callback)
		{
			BX.ajax(
				{
					url: BX.prop.getString(this._settings, "serviceUrl", ""),
					method: "POST",
					dataType: "json",
					data:
					{
						"ACTION": "GET_FORMATTED_SUM",
						"CURRENCY_ID": currencyId,
						"SUM": sum
					},
					onsuccess: callback
				}
			);
		},
		findOption: function (value, options)
		{
			for(var i = 0, l = options.length; i < l; i++)
			{
				if(value === options[i].VALUE)
				{
					return options[i].NAME;
				}
			}
			return value;
		},
		prepareConfigMenuItems: function()
		{
			var items = [];
			var callback = BX.delegate(this.onMenuItemClick, this);

			items.push(
				{
					id: "switchToPersonalConfig",
					text: this.getMessage("switchToPersonalConfig"),
					onclick: callback,
					className: this._config.getScope() === BX.Crm.EntityConfigScope.personal
						? "menu-popup-item-accept" : "menu-popup-item-none"
				}
			);

			items.push(
				{
					id: "switchToCommonConfig",
					text: this.getMessage("switchToCommonConfig"),
					onclick: callback,
					className: this._config.getScope() === BX.Crm.EntityConfigScope.common
						? "menu-popup-item-accept" : "menu-popup-item-none"
				}
			);

			if(this.canChangeScheme())
			{
				items.push({ delimiter: true });

				items.push(
					{
						id: "resetConfig",
						text: this.getMessage("resetConfig"),
						onclick: callback,
						className: "menu-popup-item-none"
					}
				);

				if(BX.prop.getBoolean(this._settings, "enableSettingsForAll", false))
				{
					items.push(
						{
							id: "forceCommonConfigForAllUsers",
							text: this.getMessage("forceCommonConfigForAllUsers"),
							onclick: callback,
							className: "menu-popup-item-none"
						}
					);
				}
			}

			return items;
		},
		getServiceUrl: function()
		{
			return this._serviceUrl;
		},
		loadCustomHtml: function(actionName, actionData, callback)
		{
			actionData["ACTION"] = actionName;
			actionData["ACTION_ENTITY_ID"] = this._entityId;
			BX.ajax(
				{
					url: this._serviceUrl,
					method: "POST",
					dataType: "html",
					data: actionData,
					onsuccess: callback
				}
			);
		},
		onAfterFormSubmit: function(sender, eventArgs)
		{
			this._isRequestRunning = true;
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(true);
			}
		},
		onCancelFormSubmit: function(sender, eventArgs)
		{
			this._isRequestRunning = false;
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(false);
			}
		},
		//region Duplicate Control
		isDuplicateControlEnabled: function()
		{
			return this._dupControlManager.isEnabled();
		},
		getDuplicateManager: function()
		{
			return this._dupControlManager;
		},
		//endregion
		//region Events
		onResize: function(e)
		{
			this.adjustSize();
		},
		onPageTileClick: function(e)
		{
			if(this._readOnly)
			{
				return
			}

			if(this.isChanged())
			{
				this.showMessageDialog(
					"titleEditDenied",
					this.getMessage("titleEdit"),
					this.getMessage("titleEditUnsavedChanges")
				);
				return;
			}

			this.switchTitleMode(BX.Crm.EntityEditorMode.edit);
		},
		onCreateSectionButtonClick: function(e)
		{
			if(!this.isSectionCreationEnabled())
			{
				return;
			}

			var index = this.getControlCount();
			var name = "user_" + BX.util.getRandomString(8).toLowerCase();

			var schemeElement = BX.Crm.EntitySchemeElement.create(
				{
					type: "section",
					name: name,
					title: this.getMessage("newSectionTitle")
				}
			);

			this.addSchemeElementAt(schemeElement, index);

			var control = this.createControl(
				"section",
				name,
				{
					schemeElement: schemeElement,
					model: this._model,
					container: this._formElement
				}
			);
			this.addControlAt(control, index);
			this.saveScheme();

			control.setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
			control.refreshLayout();
			control.setTitleMode(BX.Crm.EntityEditorMode.edit);
			this.registerActiveControl(control);
		},
		onConfigMenuButtonClick: function(e)
		{
			if(this._isConfigMenuShown)
			{
				return;
			}

			var menuItems = this.prepareConfigMenuItems();
			if(menuItems.length > 0)
			{
				BX.PopupMenu.show(
					this._id + "_config_menu",
					BX.getEventTarget(e),
					menuItems,
					{
						angle: false,
						autoHide: true,
						closeByEsc: true,
						events:
							{
								onPopupShow: function(){ this._isConfigMenuShown = true; }.bind(this),
								onPopupClose: function(){ BX.PopupMenu.destroy(this._id + "_config_menu"); }.bind(this),
								onPopupDestroy: function(){ this._isConfigMenuShown = false; }.bind(this)
							}
					}
				);
			}
		},
		onPageTitleExternalClick: function(e)
		{
			var target = BX.getEventTarget(e);
			if(target !== this._pageTitleInput)
			{
				this.savePageTitle();
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
		},
		onPageTitleKeyPress: function(e)
		{
			var c = e.keyCode;
			if(c === 13)
			{
				this.savePageTitle();
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
			else if(c === 27)
			{
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
		},
		onInterfaceToolbarMenuBuild: function(sender, eventArgs)
		{
			var menuItems = BX.prop.getArray(eventArgs, "items", null);
			if(!menuItems)
			{
				return;
			}

			var configMenuItems = this.prepareConfigMenuItems();
			if(configMenuItems.length > 0)
			{
				if(menuItems.length > 0)
				{
					menuItems.push({ delimiter: true });
				}

				for(var i = 0, length = configMenuItems.length; i < length; i++)
				{
					menuItems.push(configMenuItems[i]);
				}
			}
		},
		//endregion
		//region Configuration
		onMenuItemClick: function(event, menuItem)
		{
			var id = BX.prop.getString(menuItem, "id", "");
			if(id === "resetConfig")
			{
				this.resetConfig();
			}
			else if(id === "switchToPersonalConfig")
			{
				this.setConfigScope(BX.Crm.EntityConfigScope.personal);
			}
			else if(id === "switchToCommonConfig")
			{
				this.setConfigScope(BX.Crm.EntityConfigScope.common);
			}
			else if(id === "forceCommonConfigForAllUsers")
			{
				this.forceCommonConfigScopeForAll();
			}

			if(menuItem.menuWindow)
			{
				menuItem.menuWindow.close();
			}
		},
		setConfigScope: function(scope)
		{
			if(this._config.getScope() === scope)
			{
				return;
			}

			this._config.setScope(scope).then(
				function()
				{
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onConfigScopeChange", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		forceCommonConfigScopeForAll: function()
		{
			this._config.forceCommonScopeForAll().then(
				function()
				{
					var scope = this._config.getScope();
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onForceCommonConfigScopeForAll", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded && scope !== BX.Crm.EntityConfigScope.common)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		resetConfig: function()
		{
			this._config.reset(false).then(
				function()
				{
					var scope = this._config.getScope();
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onConfigReset", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		getConfigOption: function(name, defaultValue)
		{
			return this._config.getOption(name, defaultValue);
		},
		setConfigOption: function(name, value)
		{
			return this._config.setOption(name, value);
		},
		getAttributeManagerSettings: function()
		{
			return BX.prop.getObject(this._settings, "attributeConfig", null);
		},
		//endregion
		//region Options
		getOption: function(name, defaultValue)
		{
			return BX.prop.getString(this._settings["options"], name, defaultValue);
		},
		setOption: function(name, value)
		{
			if(typeof(value) === "undefined" || value === null)
			{
				return;
			}

			if(BX.prop.getString(this._settings["options"], name, null) === value)
			{
				return;
			}

			this._settings["options"][name] = value;
		},
		//endregion
		//region D&D
		getDragConfig: function(typeId)
		{
			return BX.prop.getObject(this._dragConfig, typeId, {});
		},
		hasPlaceHolder: function()
		{
			return !!this._dragPlaceHolder;
		},
		createPlaceHolder: function(index)
		{
			var qty = this.getControlCount();
			if(index < 0 || index > qty)
			{
				index = qty > 0 ? qty : 0;
			}

			if(this._dragPlaceHolder)
			{
				if(this._dragPlaceHolder.getIndex() === index)
				{
					return this._dragPlaceHolder;
				}

				this._dragPlaceHolder.clearLayout();
				this._dragPlaceHolder = null;
			}

			this._dragPlaceHolder = BX.Crm.EditorDragSectionPlaceholder.create(
				{
					container: this._formElement,
					anchor: (index < qty) ? this._controls[index].getWrapper() : null,
					index: index
				}
			);

			this._dragPlaceHolder.layout();
			return this._dragPlaceHolder;
		},
		getPlaceHolder: function()
		{
			return this._dragPlaceHolder;
		},
		removePlaceHolder: function()
		{
			if(this._dragPlaceHolder)
			{
				this._dragPlaceHolder.clearLayout();
				this._dragPlaceHolder = null;
			}
		},
		processDraggedItemDrop: function(dragContainer, draggedItem)
		{
			var containerCharge = dragContainer.getCharge();
			if(!((containerCharge instanceof BX.Crm.EditorSectionDragContainer) && containerCharge.getEditor() === this))
			{
				return;
			}

			var context = draggedItem.getContextData();
			var contextId = BX.type.isNotEmptyString(context["contextId"]) ? context["contextId"] : "";
			if(contextId !== BX.Crm.EditorSectionDragItem.contextId)
			{
				return;
			}

			var itemCharge = typeof(context["charge"]) !== "undefined" ?  context["charge"] : null;
			if(!(itemCharge instanceof BX.Crm.EditorSectionDragItem))
			{
				return;
			}

			var control = itemCharge.getControl();
			if(!control)
			{
				return;
			}

			var currentIndex = this.getControlIndex(control);
			if(currentIndex < 0)
			{
				return;
			}

			var placeholder = this.getPlaceHolder();
			var placeholderIndex = placeholder ? placeholder.getIndex() : -1;
			if(placeholderIndex < 0)
			{
				return;
			}

			var index = placeholderIndex <= currentIndex ? placeholderIndex : (placeholderIndex - 1);
			if(index !== currentIndex)
			{
				this.moveControl(control, index);
				this.saveScheme();
			}
		},
		onDrop: function(dragContainer, draggedItem, x, y)
		{
			this.processDraggedItemDrop(dragContainer, draggedItem);
		},
		//endregion
		//region Permissions
		canCreateContact: function()
		{
			return BX.prop.getBoolean(this._settings, "canCreateContact", false);
		},
		canCreateCompany: function()
		{
			return BX.prop.getBoolean(this._settings, "canCreateCompany", false);
		},
		//endregion
		addHelpLink: function(data)
		{
			if(!this._helpWrapper)
			{
				this._helpWrapper = BX.create("DIV", { props: { className: "crm-entity-card-widget-help" } });
				this._container.append(this._helpWrapper);

				var link = BX.create("A",
					{
						props: { className: "crm-entity-card-widget-help-link" },
						text: BX.prop.getString(data, "text", "For Your information")
					}
				);
				var url = BX.prop.getString(data, "url", "");
				if(url !== "")
				{
					link.href = helpUrl;
					link.target = "_blank";
				}
				else
				{
					link.href = "#";
					BX.bind(
						link,
						"click",
						function(e) {
							window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(data, "code", ""));
							e.preventDefault();
						}
					);
				}
				this._helpWrapper.appendChild(link);
			}
		},
		getConfigScope: function()
		{
			return this._config.getScope();
		}
	};
	BX.Crm.EntityEditor.defaultInstance = null;
	BX.Crm.EntityEditor.items = {};
	BX.Crm.EntityEditor.get = function(id)
	{
		return this.items.hasOwnProperty(id) ? this.items[id] : null;
	};
	if(typeof(BX.Crm.EntityEditor.messages) === "undefined")
	{
		BX.Crm.EntityEditor.messages = {};
	}
	BX.Crm.EntityEditor.setDefault = function(instance)
	{
		BX.Crm.EntityEditor.defaultInstance = instance;
	};
	BX.Crm.EntityEditor.getDefault = function()
	{
		return BX.Crm.EntityEditor.defaultInstance;
	};
	BX.Crm.EntityEditor.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}
//endregion

//region ENTITY EDITOR MODE QUEUE
if(typeof BX.Crm.EntityEditorModeQueue === "undefined")
{
	BX.Crm.EntityEditorModeQueue = function()
	{
		this._id = "";
		this._settings = {};
		this._items = [];
	};
	BX.Crm.EntityEditorModeQueue.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
		},
		findIndex: function(control)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				if(this._items[i]["control"] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getLength: function ()
		{
			return this._items.length;
		},
		add: function(control, mode, options)
		{
			if(typeof(options) === "undefined")
			{
				options = BX.Crm.EntityEditorModeOptions.none;
			}
			var index = this.findIndex(control);
			if(index >= 0)
			{
				this._items[index] = { control: control, mode: mode, options: options };
			}
			else
			{
				this._items.push({ control: control, mode: mode, options: options });
			}
		},
		addBatch: function(controls, mode, options)
		{
			for(var i = 0, length = controls.length; i < length; i++)
			{
				this.add(controls[i], mode, options);
			}
		},
		remove: function(control)
		{
			var index = this.findIndex(control);
			if(index >= 0)
			{
				this._items.splice(index, 1)
			}
		},
		clear: function()
		{
			this._items = [];
		},
		process: function()
		{
			var length = this._items.length;
			if(length === 0)
			{
				return 0;
			}

			for(var i = 0; i < length; i++)
			{
				var item = this._items[i];
				item["control"].setMode(item["mode"], { options: item["options"], notify: true });
			}

			return length;
		}
	};
	BX.Crm.EntityEditorModeQueue.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorModeQueue();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region ENTITY EDITOR MODE SWITCH
if(typeof BX.Crm.EntityEditorModeSwitch === "undefined")
{
	BX.Crm.EntityEditorModeSwitch = function()
	{
		this._id = "";
		this._settings = {};
		this._queue = null;
		this._isRunning = false;
		this._runHandle = 0;
	};
	BX.Crm.EntityEditorModeSwitch.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._editor = BX.prop.get(this._settings, "editor");
			this._queue = BX.Crm.EntityEditorModeQueue.create(this._id, {});
		},
		getQueue: function()
		{
			return this._queue;
		},
		reset: function()
		{
			this._queue.clear();
			this._isRunning = false;
		},
		isRunning: function()
		{
			return this._isRunning;
		},
		run: function()
		{
			if(this._isRunning)
			{
				return;
			}

			if(this._runHandle > 0)
			{
				window.clearTimeout(this._runHandle);
			}
			this._runHandle = window.setTimeout(BX.delegate(this.doRun, this), 50);
		},
		doRun: function()
		{
			this._editor.saveDelayed();

			this._isRunning = true;
			this._runHandle = 0;
		},
		complete: function ()
		{
			this._queue.process();
			this.reset();
		}
	};
	BX.Crm.EntityEditorModeSwitch.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorModeSwitch();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region EDITOR MODE
if(typeof BX.Crm.EntityEditorMode === "undefined")
{
	BX.Crm.EntityEditorMode =
	{
		intermediate: 0,
		edit: 1,
		view: 2,
		names: { view: "view",  edit: "edit" },
		getName: function(id)
		{
			if(id === this.edit)
			{
				return this.names.edit;
			}
			else if(id === this.view)
			{
				return this.names.view;
			}
			return "";
		},
		parse: function(str)
		{
			str = str.toLowerCase();
			if(str === this.names.edit)
			{
				return this.edit;
			}
			else if(str === this.names.view)
			{
				return this.view;
			}
			return this.intermediate;
		}
	};
}
//endregion

//region EDITOR MODE OPTIONS
if(typeof BX.Crm.EntityEditorModeOptions === "undefined")
{
	BX.Crm.EntityEditorModeOptions =
	{
		none: 0,
		exclusive:  0x1,
		individual: 0x2,
		saveOnExit: 0x40,
		check: function(options, option)
		{
			return((options & option) === option);
		}
	};
}
//endregion

//region EDITOR CONTROL OPTIONS
if(typeof BX.Crm.EntityEditorControlOptions === "undefined")
{
	BX.Crm.EntityEditorControlOptions =
	{
		none: 0,
		showAlways: 1,
		check: function(options, option)
		{
			return((options & option) === option);
		}
	};
}
//endregion

//region EDITOR PRIORITY
if(typeof BX.Crm.EntityEditorPriority === "undefined")
{
	BX.Crm.EntityEditorPriority =
	{
		undefined: 0,
		normal: 1,
		high: 2
	};
}
//endregion

//region EDITOR MODE SWITCH TYPE
if(typeof BX.Crm.EntityEditorModeSwitchType === "undefined")
{
	BX.Crm.EntityEditorModeSwitchType =
		{
			none:       0x0,
			common:     0x1,
			button:     0x2,
			content:    0x4,
			check: function(options, option)
			{
				return((options & option) === option);
			}
		};
}
//endregion

//region DIALOG
if(typeof BX.Crm.EditorDialogButton === "undefined")
{
	BX.Crm.EditorDialogButton = function()
	{
		this._id = "";
		this._type = BX.Crm.DialogButtonType.undefined;
		this._settings = {};
		this._dialog = null;
		this._keyPressHandler = BX.delegate(this.onKeyPress, this);
	};
	BX.Crm.EditorDialogButton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._type = BX.prop.getInteger(this._settings, "type", BX.Crm.DialogButtonType.undefined);
			this._dialog = BX.prop.get(this._settings, "dialog", null);
		},
		bind: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				BX.bind(document, "keydown", this._keyPressHandler);
			}
		},
		unbind: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				BX.unbind(document, "keydown", this._keyPressHandler);
			}
		},
		onKeyPress: function(e)
		{
			if(this._type !== BX.Crm.DialogButtonType.accept)
			{
				return;
			}

			e = e || window.event;
			if (e.keyCode === 13)
			{
				//Enter key
				this.onClick(e);
			}
		},
		getId: function()
		{
			return this._id;
		},
		getDialog: function()
		{
			return this._dialog;
		},
		prepareContent: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				return (
					new BX.UI.SaveButton(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
			else if(this._type === BX.Crm.DialogButtonType.cancel)
			{
				return (
					new BX.UI.CancelButton(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
			else
			{
				return (
					new BX.UI.Button(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
		},
		onClick: function(e)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this);
			}
		}
	};
	BX.Crm.EditorDialogButton.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDialogButton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EditorAuxiliaryDialog === "undefined")
{
	BX.Crm.EditorAuxiliaryDialog = function()
	{
		this._id = "";
		this._settings = {};

		this._popup = null;
		this._buttons = null;
	};
	BX.Crm.EditorAuxiliaryDialog.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
		},
		getSetting: function(name, defaultValue)
		{
			return BX.prop.get(this._settings, name, defaultValue);
		},
		getId: function()
		{
			return this._id;
		},
		open: function()
		{
			this._popup = new BX.PopupWindow(
				this._id,
				BX.prop.getElementNode(this._settings, "anchor", null),
				{
					autoHide: false,
					draggable: false,
					closeByEsc: true,
					offsetLeft: 0,
					offsetTop: 0,
					zIndex: BX.prop.getInteger(this._settings, "zIndex", 0),
					bindOptions: { forceBindPosition: true },
					titleBar: BX.prop.getString(this._settings, "title", "No title"),
					content: BX.prop.getString(this._settings, "content", ""),
					buttons: this.prepareButtons(),
					events:
					{
						onPopupShow: BX.delegate(this.onPopupShow, this),
						onPopupClose: BX.delegate(this.onPopupClose, this),
						onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
					}
				}
			);
			this._popup.show();
		},
		close: function()
		{
			if(this._popup)
			{
				this._popup.close();
			}
		},
		isOpen: function()
		{
			return this._popup && this._popup.isShown();
		},
		prepareButtons: function()
		{
			var results = [];

			this._buttons = [];
			var data = BX.prop.getArray(this._settings, "buttons", []);
			for(var i = 0, length = data.length; i < length; i++)
			{
				var buttonData = data[i];
				buttonData["dialog"] = this;
				var button = BX.Crm.EditorDialogButton.create(
					BX.prop.getString(buttonData, "id", ""),
					buttonData
				);
				this._buttons.push(button);
				results.push(button.prepareContent());
			}

			return results;
		},
		bind: function()
		{
			for(var i = 0, length = this._buttons.length; i < length; i++)
			{
				this._buttons[i].bind();
			}
		},
		unbind: function()
		{
			for(var i = 0, length = this._buttons.length; i < length; i++)
			{
				this._buttons[i].unbind();
			}
		},
		onPopupShow: function()
		{
			this.bind();
		},
		onPopupClose: function()
		{
			this.unbind();

			if(this._popup)
			{
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			if(this._popup)
			{
				this._popup = null;
			}
			delete BX.Crm.EditorAuxiliaryDialog.items[this.getId()];
		}
	};
	BX.Crm.EditorAuxiliaryDialog.items = {};

	BX.Crm.EditorAuxiliaryDialog.isItemOpened = function(id)
	{
		return this.items.hasOwnProperty(id) && this.items[id].isOpen();
	};
	BX.Crm.EditorAuxiliaryDialog.hasOpenItems = function()
	{
		for(var key in this.items)
		{
			if(!this.items.hasOwnProperty(key))
			{
				continue;
			}

			if(this.items[key].isOpen())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EditorAuxiliaryDialog.create = function(id, settings)
	{
		var self = new BX.Crm.EditorAuxiliaryDialog();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}
//endregion

//region FILE STORAGE TYPE
if(typeof BX.Crm.EditorFileStorageType === "undefined")
{
	BX.Crm.EditorFileStorageType =
	{
		undefined: 0,
		file: 1,
		webdav: 2,
		diskfile: 3
	};
}
//endregion

//region VALIDATION
if(typeof BX.Crm.EntityValidator === "undefined")
{
	BX.Crm.EntityValidator = function()
	{
		this._settings = {};
		this._editor = null;
		this._data = null;
	};
	BX.Crm.EntityValidator.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._editor = BX.prop.get(this._settings, "editor", null);
			this._data = BX.prop.getObject(this._settings, "data", {});

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		release: function()
		{
		},
		getData: function()
		{
			return this._data;
		},
		getDataStringParam: function(name, defaultValue)
		{
			return BX.prop.getString(this._data, name, defaultValue);
		},
		getErrorMessage: function()
		{
			return BX.prop.getString(this._settings, "message", "");
		},
		validate: function(result)
		{
			return true;
		},
		processControlChange: function(control)
		{
		}
	};
}

if(typeof BX.Crm.EntityPersonValidator === "undefined")
{
	BX.Crm.EntityPersonValidator = function()
	{
		BX.Crm.EntityPersonValidator.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityPersonValidator, BX.Crm.EntityValidator);

	BX.Crm.EntityPersonValidator.prototype.doInitialize = function()
	{
		this._nameField = this._editor.getControlById(
			this.getDataStringParam("nameField", "")
		);
		if(this._nameField)
		{
			this._nameField.addValidator(this);
		}

		this._lastNameField = this._editor.getControlById(
			this.getDataStringParam("lastNameField", "")
		);
		if(this._lastNameField)
		{
			this._lastNameField.addValidator(this);
		}
	};
	BX.Crm.EntityPersonValidator.prototype.release = function()
	{
		if(this._nameField)
		{
			this._nameField.removeValidator(this);
		}

		if(this._lastNameField)
		{
			this._lastNameField.removeValidator(this);
		}
	};
	BX.Crm.EntityPersonValidator.prototype.validate = function(result)
	{
		var isNameActive = this._nameField.isActive();
		var isLastNameActive = this._lastNameField.isActive();

		if(!isNameActive && !isLastNameActive)
		{
			return true;
		}

		var name = isNameActive ? this._nameField.getRuntimeValue() : this._nameField.getValue();
		var lastName = isLastNameActive ? this._lastNameField.getRuntimeValue() : this._lastNameField.getValue();

		if(name !== "" || lastName !== "")
		{
			return true;
		}

		if(name === "" && isNameActive)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this._nameField }));
			this._nameField.showError(this.getErrorMessage());
		}

		if(lastName === "" && isLastNameActive)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this._lastNameField }));
			this._lastNameField.showError(this.getErrorMessage());
		}

		return false;
	};
	BX.Crm.EntityPersonValidator.prototype.processFieldChange = function(field)
	{
		if(field !== this._nameField && field !== this._lastNameField)
		{
			return;
		}

		if(this._nameField)
		{
			this._nameField.clearError();
		}

		if(this._lastNameField)
		{
			this._lastNameField.clearError();
		}
	};
	BX.Crm.EntityPersonValidator.create = function(settings)
	{
		var self = new BX.Crm.EntityPersonValidator();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityValidationError === "undefined")
{
	BX.Crm.EntityValidationError = function()
	{
		this._settings = {};
		this._field = null;
		this._message = "";
	};
	BX.Crm.EntityValidationError.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._field = BX.prop.get(this._settings, "field", null);
			this._message = BX.prop.getString(this._settings, "message", "");
		},
		getField: function()
		{
			return this._field;
		},
		getMessage: function()
		{
			return this._message;
		}
	};
	BX.Crm.EntityValidationError.create = function(settings)
	{
		var self = new BX.Crm.EntityValidationError();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityValidationResult === "undefined")
{
	BX.Crm.EntityValidationResult = function()
	{
		this._settings = {};
		this._errors = [];
	};
	BX.Crm.EntityValidationResult.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
		},
		getStatus: function()
		{
			return this._errors.length === 0;
		},
		addError: function(error)
		{
			this._errors.push(error);
		},
		getErrors: function()
		{
			return this._errors;
		},
		addResult: function(result)
		{
			var errors = result.getErrors();
			for(var i = 0, length = errors.length; i < length; i++)
			{
				this._errors.push(errors[i]);
			}
		},
		getTopmostField: function()
		{
			var field = null;
			var top = null;
			for(var i = 0, length = this._errors.length; i < length; i++)
			{
				var currentField = this._errors[i].getField();
				if(!field)
				{
					field = currentField;
					top = currentField.getPosition()["top"];
					continue;

				}
				var pos = currentField.getPosition();
				if(!pos)
				{
					continue;
				}

				var currentFieldTop = currentField.getPosition()["top"];
				if(currentFieldTop < top)
				{
					field = currentField;
					top = currentFieldTop;
				}
			}

			return field;
		}
	};
	BX.Crm.EntityValidationResult.create = function(settings)
	{
		var self = new BX.Crm.EntityValidationResult();
		self.initialize(settings);
		return self;
	};
}
//endregion

//region ENTITY CONFIGURATION SCOPE
if(typeof BX.Crm.EntityConfigScope === "undefined")
{
	BX.Crm.EntityConfigScope =
	{
		undefined: '',
		personal:  'P',
		common: 'C'
	};

	if(typeof(BX.Crm.EntityConfigScope.captions) === "undefined")
	{
		BX.Crm.EntityConfigScope.captions = {};
	}

	BX.Crm.EntityConfigScope.setCaptions = function(captions)
	{
		if(BX.type.isPlainObject(captions))
		{
			this.captions = captions;
		}
	};

	BX.Crm.EntityConfigScope.getCaption = function(scope)
	{
		return BX.prop.getString(this.captions, scope, scope);
	};
}
//endregion

//region CONFIG
if(typeof BX.Crm.EntityConfig === "undefined")
{
	BX.Crm.EntityConfig = function()
	{
		this._id = "";
		this._settings = {};
		this._scope = BX.Crm.EntityConfigScope.undefined;
		this._enableScopeToggle = true;

		this._canUpdatePersonalConfiguration = true;
		this._canUpdateCommonConfiguration = false;

		this._data = {};
		this._items = [];
		this._options = {};

		this._serviceUrl = "";
		this._isChanged = false;
	};
	BX.Crm.EntityConfig.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._scope = BX.prop.getString(this._settings, "scope", BX.Crm.EntityConfigScope.personal);
			this._enableScopeToggle = BX.prop.getBoolean(this._settings, "enableScopeToggle", true);

			this._canUpdatePersonalConfiguration = BX.prop.getBoolean(this._settings, "canUpdatePersonalConfiguration", true);
			this._canUpdateCommonConfiguration = BX.prop.getBoolean(this._settings, "canUpdateCommonConfiguration", false);

			this._data = BX.prop.getArray(this._settings, "data", []);

			this._items = [];
			for(var i = 0, length = this._data.length; i < length; i++)
			{
				var item = this._data[i];
				var type = BX.prop.getString(item, "type", "");
				if(type === "section")
				{
					this._items.push(BX.Crm.EntityConfigSection.create({ data: item }));
				}
				else
				{
					this._items.push(BX.Crm.EntityConfigField.create({ data: item }));
				}
			}

			this._options = BX.prop.getObject(this._settings, "options", {});
			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
		},
		findItemByName: function(name)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getName() === name)
				{
					return item;
				}
			}
			return null;
		},
		findItemIndexByName: function(name)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getName() === name)
				{
					return i;
				}
			}
			return -1;
		},
		toJSON: function()
		{
			var result = [];
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				result.push(this._items[i].toJSON());
			}
			return result;
		},
		addSchemeElementAt: function(schemeElement, index)
		{
			var data = schemeElement.createConfigItem();
			var item = schemeElement.getType() === "section"
				? BX.Crm.EntityConfigSection.create({ data: data })
				: BX.Crm.EntityConfigField.create({ data: data });

			if(index >= 0 && index < this._items.length)
			{
				this._items.splice(index, 0, item);
			}
			else
			{
				this._items.push(item);
			}

			this._isChanged = true;
		},
		moveSchemeElement: function(schemeElement, index)
		{
			var qty = this._items.length;
			var lastIndex = qty - 1;
			if(index < 0  || index > qty)
			{
				index = lastIndex;
			}

			var currentIndex = this.findItemIndexByName(schemeElement.getName());
			if(currentIndex < 0 || currentIndex === index)
			{
				return;
			}

			var item = this._items[currentIndex];
			this._items.splice(currentIndex, 1);

			qty--;

			if(index < qty)
			{
				this._items.splice(index, 0, item);
			}
			else
			{
				this._items.push(item);
			}

			this._isChanged = true;
		},
		updateSchemeElement: function(schemeElement)
		{
			var index;
			var parentElement = schemeElement.getParent();
			if(parentElement)
			{
				var parentItem = this.findItemByName(parentElement.getName());
				if(parentItem)
				{
					index = parentItem.findFieldIndexByName(schemeElement.getName());
					if(index >= 0)
					{
						parentItem.setField(
							BX.Crm.EntityConfigField.create({ data: schemeElement.createConfigItem() }),
							index
						);
						this._isChanged = true;
					}
				}
			}
			else
			{
				index = this.findItemIndexByName(schemeElement.getName());
				if(index >= 0)
				{
					if(schemeElement.getType() === "section")
					{
						this._items[index] = BX.Crm.EntityConfigSection.create({ data: schemeElement.createConfigItem() });
					}
					else
					{
						this._items[index] = BX.Crm.EntityConfigField.create({ data: schemeElement.createConfigItem() });
					}
					this._isChanged = true;
				}
			}

		},
		removeSchemeElement: function(schemeElement)
		{
			var index = this.findItemIndexByName(schemeElement.getName());
			if(index < 0)
			{
				return;
			}

			this._items.splice(index, 1);
			this._isChanged = true;
		},
		isChangeable: function()
		{
			if(this._scope === BX.Crm.EntityConfigScope.common)
			{
				return this._canUpdateCommonConfiguration;
			}
			else if(this._scope === BX.Crm.EntityConfigScope.personal)
			{
				return this._canUpdatePersonalConfiguration;
			}

			return false;
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		isScopeToggleEnabled: function()
		{
			return this._enableScopeToggle;
		},
		getScope: function()
		{
			return this._scope;
		},
		setScope: function(scope)
		{
			var promise = new BX.Promise();
			if(!this._enableScopeToggle || this._scope === scope)
			{
				window.setTimeout(
					function(){ promise.fulfill(); },
					0
				);
				return promise;
			}

			this._scope = scope;

			//Scope is changed - data collections are invalid.
			this._data = [];
			this._items = [];

			BX.ajax.post(
				this._serviceUrl,
				{ guid: this._id, action: "setScope", scope: this._scope },
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		registerField: function(scheme)
		{
			var parentScheme = scheme.getParent();
			if(!parentScheme)
			{
				return;
			}

			var section = this.findItemByName(parentScheme.getName());
			if(!section)
			{
				return;
			}

			section.addField(
				BX.Crm.EntityConfigField.create({ data: scheme.createConfigItem() })
			);
			this.save();
		},
		unregisterField: function(scheme)
		{
			var parentScheme = scheme.getParent();
			if(!parentScheme)
			{
				return;
			}

			var section = this.findItemByName(parentScheme.getName());
			if(!section)
			{
				return;
			}

			var field = section.findFieldByName(scheme.getName());
			if(!field)
			{
				return;
			}

			section.removeFieldByIndex(field.getIndex());
			this.save();
		},
		save: function(forAllUsers, enableOptions)
		{
			forAllUsers = !!forAllUsers;
			enableOptions = !!enableOptions;

			var promise = new BX.Promise();
			if(!this._isChanged && !forAllUsers)
			{
				window.setTimeout(
					function(){ promise.fulfill(); },
					0
				);
				return promise;
			}

			var data =
			{
				guid: this._id,
				action: "save",
				scope: this._scope,
				config: this.toJSON()
			};

			if(enableOptions)
			{
				data["options"] = this._options;
			}

			if(this._scope === BX.Crm.EntityConfigScope.personal && forAllUsers)
			{
				data["forAllUsers"] = "Y";
				data["delete"] = "Y";
			}

			BX.ajax.post(
				this._serviceUrl,
				data,
				function(){ promise.fulfill(); }
			);
			this._isChanged = false;
			return promise;
		},
		reset: function(forAllUsers)
		{
			var data =
			{
				guid: this._id,
				action: "reset",
				scope: this._scope,
				config: this.toJSON()
			};

			if(forAllUsers)
			{
				data["forAllUsers"] = "Y";
			}

			var promise = new BX.Promise();
			BX.ajax.post(
				this._serviceUrl,
				data,
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		forceCommonScopeForAll: function()
		{
			var promise = new BX.Promise();
			BX.ajax.post(
				this._serviceUrl,
				{ guid: this._id, action: "forceCommonScopeForAll" },
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		getOption: function(name, defaultValue)
		{
			return BX.prop.getString(this._options, name, defaultValue);
		},
		setOption: function(name, value)
		{
			if(typeof(value) === "undefined" || value === null)
			{
				return;
			}

			if(BX.prop.getString(this._options, name, null) === value)
			{
				return;
			}

			this._options[name] = value;

			if(this._scope === BX.Crm.EntityConfigScope.common)
			{
				BX.userOptions.save(
					"crm.entity.editor",
					this._id + "_common_opts",
					name,
					value,
					true
				);
			}
			else
			{
				BX.userOptions.save(
					"crm.entity.editor",
					this._id + "_opts",
					name,
					value,
					false
				);
			}
		}
	};
	BX.Crm.EntityConfig.create = function(id, settings)
	{
		var self = new BX.Crm.EntityConfig();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityConfigItem === "undefined")
{
	BX.Crm.EntityConfigItem = function()
	{
		this._settings = {};
		this._data = {};
		this._name = "";
		this._title = "";
	};

	BX.Crm.EntityConfigItem.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._data = BX.prop.getObject(this._settings, "data", []);
			this._name = BX.prop.getString(this._data, "name", "");
			this._title = BX.prop.getString(this._data, "title", "");

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getType: function()
		{
			return "";
		},
		getName: function()
		{
			return this._name;
		},
		getTitle: function()
		{
			return this._title;
		},
		toJSON: function()
		{
			return {};
		}
	};
}

if(typeof BX.Crm.EntityConfigSection === "undefined")
{
	BX.Crm.EntityConfigSection = function()
	{
		BX.Crm.EntityConfigSection.superclass.constructor.apply(this);
		this._fields = [];
	};
	BX.extend(BX.Crm.EntityConfigSection, BX.Crm.EntityConfigItem);

	BX.Crm.EntityConfigSection.prototype.doInitialize = function()
	{
		this._fields = [];
		var elements = BX.prop.getArray(this._data, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			var field = BX.Crm.EntityConfigField.create({ data: elements[i] });
			field.setIndex(i);
			this._fields.push(field);
		}
	};
	BX.Crm.EntityConfigSection.prototype.getType = function()
	{
		return "section";
	};
	BX.Crm.EntityConfigSection.prototype.getFields = function()
	{
		return this._fields;
	};
	BX.Crm.EntityConfigSection.prototype.findFieldByName = function(name)
	{
		var index = this.findFieldIndexByName(name);
		return index >= 0 ? this._fields[index] : null;
	};
	BX.Crm.EntityConfigSection.prototype.findFieldIndexByName = function(name)
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getName() === name)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityConfigSection.prototype.addField = function(field)
	{
		this._fields.push(field);
	};
	BX.Crm.EntityConfigSection.prototype.setField = function(field, index)
	{
		this._fields[index] = field;
	};
	BX.Crm.EntityConfigSection.prototype.removeFieldByIndex = function(index)
	{
		var length = this._fields.length;
		if(index < 0 || index >= length)
		{
			return false;
		}

		this._fields.splice(index, 1);
		return true;
	};
	BX.Crm.EntityConfigSection.prototype.toJSON = function()
	{
		var result = { name: this._name, title: this._title, type: "section", elements: [] };
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			result.elements.push(this._fields[i].toJSON());
		}
		return result;
	};
	BX.Crm.EntityConfigSection.create = function(settings)
	{
		var self = new BX.Crm.EntityConfigSection();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityConfigField === "undefined")
{
	BX.Crm.EntityConfigField = function()
	{
		BX.Crm.EntityConfigField.superclass.constructor.apply(this);
		this._index = -1;
		this._optionFlags = 0;

	};
	BX.extend(BX.Crm.EntityConfigField, BX.Crm.EntityConfigItem);
	BX.Crm.EntityConfigField.prototype.doInitialize = function()
	{
		this._optionFlags = BX.prop.getInteger(this._data, "optionFlags", 0);
	};
	BX.Crm.EntityConfigField.prototype.toJSON = function()
	{
		var result = { name: this._name };
		if(this._title !== "")
		{
			result["title"] = this._title;
		}
		if(this._optionFlags > 0)
		{
			result["optionFlags"] = this._optionFlags;
		}
		return result;
	};
	BX.Crm.EntityConfigField.prototype.getIndex = function()
	{
		return this._index;
	};
	BX.Crm.EntityConfigField.prototype.setIndex = function(index)
	{
		this._index = index;
	};
	BX.Crm.EntityConfigField.create = function(settings)
	{
		var self = new BX.Crm.EntityConfigField();
		self.initialize(settings);
		return self;
	};
}
//endregion

//region SCHEME & ELEMENTS
if(typeof BX.Crm.EntityScheme === "undefined")
{
	BX.Crm.EntityScheme = function()
	{
		this._id = "";
		this._settings = {};
		this._elements = null;
		this._availableElements = null;
	};
	BX.Crm.EntityScheme.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._elements = [];
			this._availableElements = [];

			var i, length;
			var currentData = BX.prop.getArray(this._settings, "current", []);
			for(i = 0, length = currentData.length; i < length; i++)
			{
				this._elements.push(BX.Crm.EntitySchemeElement.create(currentData[i]));
			}

			var availableData = BX.prop.getArray(this._settings, "available", []);
			for(i = 0, length = availableData.length; i < length; i++)
			{
				this._availableElements.push(BX.Crm.EntitySchemeElement.create(availableData[i]));
			}
		},
		getId: function()
		{
			return this._id;
		},
		getElements: function()
		{
			return ([].concat(this._elements));
		},
		findElementByName: function(name, options)
		{
			var isRecursive = BX.prop.getBoolean(options, "isRecursive", false);
			for(var i = 0, length = this._elements.length; i < length; i++)
			{
				var element = this._elements[i];
				if(element.getName() === name)
				{
					return element;
				}

				if(!isRecursive)
				{
					continue;
				}

				var childElement = element.findElementByName(name);
				if(childElement !== null)
				{
					return childElement;
				}
			}

			return null;
		},
		getAvailableElements: function()
		{
			return([].concat(this._availableElements));
		},
		setAvailableElements: function(elements)
		{
			this._availableElements = BX.type.isArray(elements) ? elements : [];
		}
	};
	BX.Crm.EntityScheme.create = function(id, settings)
	{
		var self = new BX.Crm.EntityScheme();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntitySchemeElement === "undefined")
{
	BX.Crm.EntitySchemeElement = function()
	{
		this._settings = {};
		this._name = "";
		this._type = "";
		this._title = "";
		this._originalTitle = "";
		this._optionFlags = 0;

		this._isEditable = true;
		this._isTransferable = true;
		this._isContextMenuEnabled = true;
		this._isRequired = false;
		this._isRequiredConditionally = false;
		this._isHeading = false;
		this._isMergeable = true;

		this._visibilityPolicy = BX.Crm.EntityEditorVisibilityPolicy.always;
		this._data = null;
		this._elements = null;
		this._parent = null;
	};
	BX.Crm.EntitySchemeElement.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};

			this._name = BX.prop.getString(this._settings, "name", "");
			this._type = BX.prop.getString(this._settings, "type", "");

			this._data = BX.prop.getObject(this._settings, "data", {});

			this._isEditable = BX.prop.getBoolean(this._settings, "editable", true);
			this._isTransferable = BX.prop.getBoolean(this._settings, "transferable", true);
			this._isMergeable = BX.prop.getBoolean(this._settings, "mergeable", true);
			this._isContextMenuEnabled = BX.prop.getBoolean(this._settings, "enabledMenu", true);
			this._isTitleEnabled = BX.prop.getBoolean(this._settings, "enableTitle", true)
				&& this.getDataBooleanParam("enableTitle", true);
			this._isDragEnabled = BX.prop.getBoolean(this._settings, "isDragEnabled", true);
			this._isRequired = BX.prop.getBoolean(this._settings, "required", false);
			this._isRequiredConditionally = BX.prop.getBoolean(this._settings, "requiredConditionally", false);
			this._isHeading = BX.prop.getBoolean(this._settings, "isHeading", false);

			this._visibilityPolicy = BX.Crm.EntityEditorVisibilityPolicy.parse(
				BX.prop.getString(
					this._settings,
					"visibilityPolicy",
					""
				)
			);

			//region Titles
			var title = BX.prop.getString(this._settings, "title", "");
			var originalTitle = BX.prop.getString(this._settings, "originalTitle", "");

			if(title !== "" && originalTitle === "")
			{
				originalTitle = title;
			}
			else if(originalTitle !== "" && title === "")
			{
				title = originalTitle;
			}

			this._title = title;
			this._originalTitle = originalTitle;
			//endregion

			this._optionFlags = BX.prop.getInteger(this._settings, "optionFlags", 0);

			this._elements = [];
			var elementData = BX.prop.getArray(this._settings, "elements", []);
			for(var i = 0, l = elementData.length; i < l; i++)
			{
				this._elements.push(BX.Crm.EntitySchemeElement.create(elementData[i]));
			}
		},
		mergeSettings: function(settings)
		{
			this.initialize(BX.mergeEx(this._settings, settings));
		},
		getName: function()
		{
			return this._name;
		},
		getType: function()
		{
			return this._type;
		},
		getTitle: function()
		{
			return this._title;
		},
		setTitle: function(title)
		{
			this._title = this._settings["title"] = title;
		},
		getOriginalTitle: function()
		{
			return this._originalTitle;
		},
		hasCustomizedTitle: function()
		{
			return this._title !== "" && this._title !== this._originalTitle;
		},
		resetOriginalTitle: function()
		{
			this._originalTitle = this._title;
		},
		getOptionFlags: function()
		{
			return this._optionFlags;
		},
		setOptionFlags: function(flags)
		{
			this._optionFlags = this._settings["optionFlags"] = flags;
		},
		areAttributesEnabled: function()
		{
			return BX.prop.getBoolean(this._settings, "enableAttributes", true);
		},
		isEditable: function()
		{
			return this._isEditable;
		},
		isTransferable: function()
		{
			return this._isTransferable;
		},
		isRequired: function()
		{
			return this._isRequired;
		},
		isRequiredConditionally: function()
		{
			return this._isRequiredConditionally;
		},
		isContextMenuEnabled: function()
		{
			return this._isContextMenuEnabled;
		},
		isTitleEnabled: function()
		{
			return this._isTitleEnabled;
		},
		isDragEnabled: function()
		{
			return this._isDragEnabled;
		},
		isHeading: function()
		{
			return this._isHeading;
		},
		isMergeable: function()
		{
			return this._isMergeable;
		},
		getCreationPlaceholder: function()
		{
			return BX.prop.getString(
				BX.prop.getObject(this._settings, "placeholders", null),
				"creation",
				""
			);
		},
		getVisibilityPolicy: function()
		{
			return this._visibilityPolicy;
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data)
		{
			this._data = data;
		},
		getDataParam: function(name, defaultval)
		{
			return BX.prop.get(this._data, name, defaultval);
		},
		setDataParam: function(name, val)
		{
			this._data[name] = val;
		},
		getDataStringParam: function(name, defaultval)
		{
			return BX.prop.getString(this._data, name, defaultval);
		},
		getDataIntegerParam: function(name, defaultval)
		{
			return BX.prop.getInteger(this._data, name, defaultval);
		},
		getDataBooleanParam: function(name, defaultval)
		{
			return BX.prop.getBoolean(this._data, name, defaultval);
		},
		getDataObjectParam: function(name, defaultval)
		{
			return BX.prop.getObject(this._data, name, defaultval);
		},
		getDataArrayParam: function(name, defaultval)
		{
			return BX.prop.getArray(this._data, name, defaultval);
		},
		getElements: function()
		{
			return this._elements;
		},
		setElements: function(elements)
		{
			this._elements = elements;
		},
		findElementByName: function(name)
		{
			for(var i = 0, length = this._elements.length; i < length; i++)
			{
				var element = this._elements[i];
				if(element.getName() === name)
				{
					return element;
				}
			}
			return null;
		},
		getAffectedFields: function()
		{
			var results = this.getDataArrayParam("affectedFields", []);
			if(results.length === 0)
			{
				results.push(this._name);
			}
			return results;
		},
		getParent: function()
		{
			return this._parent;
		},
		setParent: function(parent)
		{
			this._parent = parent instanceof BX.Crm.EntitySchemeElement ? parent : null;
		},
		hasAttributeConfiguration: function(attributeTypeId)
		{
			return !!this.getAttributeConfiguration(attributeTypeId);
		},
		getAttributeConfiguration: function(attributeTypeId)
		{
			var data = this.getData();
			var configs = BX.prop.getArray(data, "attrConfigs", null);
			if(!configs)
			{
				return null;
			}

			for(var i = 0, length = configs.length; i < length; i++)
			{
				var config = configs[i];
				if(BX.prop.getInteger(config, "typeId", BX.Crm.EntityFieldAttributeType.undefined) === attributeTypeId)
				{
					return BX.clone(config);
				}
			}
			return null;
		},
		setAttributeConfiguration: function(config)
		{
			var typeId = BX.prop.getInteger(config, "typeId", BX.Crm.EntityFieldAttributeType.undefined);
			if(typeof(this._data["attrConfigs"]) === "undefined")
			{
				this._data["attrConfigs"] = [];
			}

			var index = -1;
			for(var i = 0, length = this._data["attrConfigs"].length; i < length; i++)
			{
				if(BX.prop.getInteger(this._data["attrConfigs"][i], "typeId", BX.Crm.EntityFieldAttributeType.undefined) === typeId)
				{
					index = i;
					break;
				}
			}

			if(index >= 0)
			{
				this._data["attrConfigs"].splice(index, 1, config);
			}
			else
			{
				this._data["attrConfigs"].push(config);
			}
		},
		removeAttributeConfiguration: function(attributeTypeId)
		{
			if(typeof(this._data["attrConfigs"]) === "undefined")
			{
				return;
			}

			for(var i = 0, length = this._data["attrConfigs"].length; i < length; i++)
			{
				if(BX.prop.getInteger(this._data["attrConfigs"][i], "typeId", BX.Crm.EntityFieldAttributeType.undefined) === attributeTypeId)
				{
					this._data["attrConfigs"].splice(i, 1);
					return;
				}
			}
		},
		createConfigItem: function()
		{
			var result = { name: this._name };

			if(this._type === "section")
			{
				result["type"] = "section";

				if(this._title !== "")
				{
					result["title"] = this._title;
				}

				result["elements"] = [];
				for(var i = 0, length = this._elements.length; i < length; i++)
				{
					//result["elements"].push({ name: this._elements[i].getName() });
					result["elements"].push(this._elements[i].createConfigItem());
				}
			}
			else
			{
				if(this._title !== "" && this._title !== this._originalTitle)
				{
					result["title"] = this._title;
				}

				if(this._optionFlags > 0)
				{
					result["optionFlags"] = this._optionFlags;
				}
			}

			return result;
		},
		clone: function()
		{
			return BX.Crm.EntitySchemeElement.create(BX.clone(this._settings));
		}
	};
	BX.Crm.EntitySchemeElement.create = function(settings)
	{
		var self = new BX.Crm.EntitySchemeElement();
		self.initialize(settings);
		return self;
	}
}
//endregion

//region FACTORY
if(typeof BX.Crm.EntityEditorValidatorFactory === "undefined")
{
	BX.Crm.EntityEditorValidatorFactory =
	{
		create: function(type, settings)
		{
			if(type === "person")
			{
				return BX.Crm.EntityPersonValidator.create(settings);
			}

			return null;
		}
	}
}

if(typeof BX.Crm.EntityEditorControlFactory === "undefined")
{
	BX.Crm.EntityEditorControlFactory =
	{
		initialized: false,
		methods: {},

		isInitialized: function()
		{
			return this.initialized;
		},
		initialize: function()
		{
			if(this.initialized)
			{
				return;
			}

			var eventArgs = { methods: {} };
			BX.onCustomEvent(
				window,
				"BX.Crm.EntityEditorControlFactory:onInitialize",
				[ this, eventArgs ]
			);

			for(var name in eventArgs.methods)
			{
				if(eventArgs.methods.hasOwnProperty(name))
				{
					this.registerFactoryMethod(name, eventArgs.methods[name]);
				}
			}

			this.initialized = true;
		},
		registerFactoryMethod: function(name, method)
		{
			if(BX.type.isFunction(method))
			{
				this.methods[name] = method;
			}
		},
		create: function(type, controlId, settings)
		{
			if(!this.initialized)
			{
				this.initialize();
			}


			if(type === "section")
			{
				return BX.Crm.EntityEditorSection.create(controlId, settings);
			}
			else if(type === "text")
			{
				return BX.Crm.EntityEditorText.create(controlId, settings);
			}
			else if(type === "number")
			{
				return BX.Crm.EntityEditorNumber.create(controlId, settings);
			}
			else if(type === "datetime")
			{
				return BX.Crm.EntityEditorDatetime.create(controlId, settings);
			}
			else if(type === "boolean")
			{
				return BX.Crm.EntityEditorBoolean.create(controlId, settings);
			}
			else if(type === "list")
			{
				return BX.Crm.EntityEditorList.create(controlId, settings);
			}
			else if(type === "multilist")
			{
				return BX.Crm.EntityEditorMultiList.create(controlId, settings);
			}
			else if(type === "html")
			{
				return BX.Crm.EntityEditorHtml.create(controlId, settings);
			}
			else if(type === "money")
			{
				return BX.Crm.EntityEditorMoney.create(controlId, settings);
			}
			else if(type === "image")
			{
				return BX.Crm.EntityEditorImage.create(controlId, settings);
			}
			else if(type === "user")
			{
				return BX.Crm.EntityEditorUser.create(controlId, settings);
			}
			else if(type === "multiple_user")
			{
				return BX.Crm.EntityEditorMultipleUser.create(controlId, settings);
			}
			else if(type === "address")
			{
				return BX.Crm.EntityEditorAddress.create(controlId, settings);
			}
			else if(type === "crm_entity")
			{
				return BX.Crm.EntityEditorEntity.create(controlId, settings);
			}
			else if(type === "file_storage")
			{
				return BX.Crm.EntityEditorFileStorage.create(controlId, settings);
			}
			else if(type === "client")
			{
				return BX.Crm.EntityEditorClient.create(controlId, settings);
			}
			else if(type === "client_light")
			{
				return BX.Crm.EntityEditorClientLight.create(controlId, settings);
			}
			else if(type === "multifield")
			{
				return BX.Crm.EntityEditorMultifield.create(controlId, settings);
			}
			else if(type === "product_row_summary")
			{
				return BX.Crm.EntityEditorProductRowSummary.create(controlId, settings);
			}
			else if(type === "requisite_selector")
			{
				return BX.Crm.EntityEditorRequisiteSelector.create(controlId, settings);
			}
			else if(type === "requisite_list")
			{
				return BX.Crm.EntityEditorRequisiteList.create(controlId, settings);
			}
			else if(type === "userField")
			{
				return BX.Crm.EntityEditorUserField.create(controlId, settings);
			}
			else if(type === "userFieldConfig")
			{
				return BX.Crm.EntityEditorUserFieldConfigurator.create(controlId, settings);
			}
			else if(type === "recurring")
			{
				return BX.Crm.EntityEditorRecurring.create(controlId, settings);
			}
			else if(type === "recurring_custom_row")
			{
				return BX.Crm.EntityEditorRecurringCustomRowField.create(controlId, settings);
			}
			else if(type === "recurring_single_row")
			{
				return BX.Crm.EntityEditorRecurringSingleField.create(controlId, settings);
			}
			else if(type === "custom")
			{
				return BX.Crm.EntityEditorCustom.create(controlId, settings);
			}
			else if(type === "shipment")
			{
				return BX.Crm.EntityEditorShipment.create(controlId, settings);
			}
			else if(type === "payment")
			{
				return BX.Crm.EntityEditorPayment.create(controlId, settings);
			}
			else if(type === "payment_status")
			{
				return BX.Crm.EntityEditorPaymentStatus.create(controlId, settings);
			}
			else if(type === "payment_check")
			{
				return BX.Crm.EntityEditorPaymentCheck.create(controlId, settings);
			}
			else if(type === "order_subsection")
			{
				return BX.Crm.EntityEditorSubsection.create(controlId, settings);
			}
			else if(type === "order_property_wrapper")
			{
				return BX.Crm.EntityEditorOrderPropertyWrapper.create(controlId, settings);
			}
			else if(type === "order_property_subsection")
			{
				return BX.Crm.EntityEditorOrderPropertySubsection.create(controlId, settings);
			}
			else if(type === "order_property_file")
			{
				return BX.Crm.EntityEditorOrderPropertyFile.create(controlId, settings);
			}
			else if(type === "order_product_property")
			{
				return BX.Crm.EntityEditorOrderProductProperty.create(controlId, settings);
			}
			else if(type === "order_person_type")
			{
				return BX.Crm.EntityEditorOrderPersonType.create(controlId, settings);
			}
			else if(type === "order_quantity")
			{
				return BX.Crm.EntityEditorOrderQuantity.create(controlId, settings);
			}
			else if(type === "order_user")
			{
				return BX.Crm.EntityEditorOrderUser.create(controlId, settings);
			}
			else if(type === "order_client")
			{
				return BX.Crm.EntityEditorOrderClient.create(controlId, settings);
			}
			else if(type === "hidden")
			{
				return BX.Crm.EntityEditorHidden.create(controlId, settings);
			}
			else if(type === "delivery_selector")
			{
				return BX.Crm.EntityEditorDeliverySelector.create(controlId, settings);
			}
			else if(type === "shipment_extra_services")
			{
				return BX.Crm.EntityEditorShipmentExtraServices.create(controlId, settings);
			}

			for(var name in this.methods)
			{
				if(!this.methods.hasOwnProperty(name))
				{
					continue;
				}

				var control = this.methods[name](type, controlId, settings);
				if(control)
				{
					return control;
				}
			}

			return null;
		}
	};
}

if(typeof BX.Crm.EntityEditorControllerFactory === "undefined")
{
	BX.Crm.EntityEditorControllerFactory =
	{
		create: function(type, controllerId, settings)
		{
			if(type === "product_row_proxy")
			{
				return BX.Crm.EntityEditorProductRowProxy.create(controllerId, settings);
			}
			else if(type === "order_controller")
			{
				return BX.Crm.EntityEditorOrderController.create(controllerId, settings);
			}
			else if(type === "order_shipment_controller")
			{
				return BX.Crm.EntityEditorOrderShipmentController.create(controllerId, settings);
			}
			else if(type === "order_payment_controller")
			{
				return BX.Crm.EntityEditorOrderPaymentController.create(controllerId, settings);
			}
			else if(type === "order_product_controller")
			{
				return BX.Crm.EntityEditorOrderProductController.create(controllerId, settings);
			}

			return null;
		}
	};
}

if(typeof BX.Crm.EntityEditorModelFactory === "undefined")
{
	BX.Crm.EntityEditorModelFactory =
	{
		create: function(entityTypeId, id, settings)
		{
			if(entityTypeId === BX.CrmEntityType.enumeration.lead)
			{
				return BX.Crm.LeadModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.contact)
			{
				return BX.Crm.ContactModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.company)
			{
				return BX.Crm.CompanyModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.deal)
			{
				return BX.Crm.DealModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.dealrecurring)
			{
				return BX.Crm.DealRecurringModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.quote)
			{
				return BX.Crm.QuoteModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.order)
			{
				return BX.Crm.OrderModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.orderpayment)
			{
				return BX.Crm.OrderPaymentModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.ordershipment)
			{
				return BX.Crm.OrderShipmentModel.create(id, settings);
			}
			return BX.Crm.EntityModel.create(id, settings);
		}
	};
}
//endregion

//region MODEL
if(typeof BX.Crm.EntityModel === "undefined")
{
	BX.Crm.EntityModel = function()
	{
		this._id = "";
		this._settings = {};
		this._data = null;
		this._initData = null;
		this._lockedFields = null;
		this._changeNotifier = null;
		this._lockNotifier = null;
	};
	BX.Crm.EntityModel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._data = BX.prop.getObject(this._settings, "data", {});
			this._initData = BX.clone(this._data);
			this._lockedFields = {};
			this._changeNotifier = BX.CrmNotifier.create(this);
			this._lockNotifier = BX.CrmNotifier.create(this);

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getEntityTypeId: function()
		{
			return BX.CrmEntityType.enumeration.undefined;
		},
		getEntityId: function()
		{
			return BX.prop.getInteger(this._data, "ID", 0);
		},
		getOwnerInfo: function()
		{
			return(
				{
					ownerID: this.getEntityId(),
					ownerType: BX.CrmEntityType.resolveName(this.getEntityTypeId())
				}
			);
		},
		getField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.get(this._data, name, defaultValue);
		},
		getStringField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getString(this._data, name, defaultValue);
		},
		getIntegerField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getInteger(this._data, name, defaultValue);
		},
		getNumberField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getNumber(this._data, name, defaultValue);
		},
		getArrayField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getArray(this._data, name, defaultValue);
		},
		registerNewField: function(name, value)
		{
			//update data
			this._data[name] = value;
			//update initialization data because of rollback.
			this._initData[name] = value;
		},
		setField: function(name, value, options)
		{
			if(this._data.hasOwnProperty(name) && this._data[name] === value)
			{
				return;
			}

			this._data[name] = value;

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							name: name,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), fieldName: name } ]
				);
			}
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data, options)
		{
			this._data = BX.type.isPlainObject(data) ? data : {};
			this._initData = BX.clone(this._data);

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		updateData: function(data, options)
		{
			if(!BX.type.isPlainObject(data))
			{
				return;
			}

			this._data = BX.mergeEx(this._data, data);
			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		updateDataObject: function(name, data, options)
		{
			if(!this._data.hasOwnProperty(name))
			{
				this._data[name] = data;
			}
			else
			{
				this._data[name] = BX.mergeEx(this._data[name], data);
			}

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		getSchemeField: function(schemeElement, name, defaultValue)
		{
			return this.getField(schemeElement.getDataStringParam(name, ""), defaultValue);
		},
		setSchemeField: function(schemeElement, name, value)
		{
			var fieldName = schemeElement.getDataStringParam(name, "");
			if(fieldName !== "")
			{
				this.setField(fieldName, value);
			}
		},
		getMappedField: function(map, name, defaultValue)
		{
			var fieldName = BX.prop.getString(map, name, "");
			return fieldName !== "" ? this.getField(fieldName, defaultValue) : defaultValue;
		},
		setMappedField: function(map, name, value)
		{
			var fieldName = BX.prop.getString(map, name, "");
			if(fieldName !== "")
			{
				this.setField(fieldName, value);
			}
		},
		save: function()
		{
		},
		rollback: function()
		{
			this._data = BX.clone(this._initData);
		},
		lockField: function(fieldName)
		{
			if(this._lockedFields.hasOwnProperty(fieldName))
			{
				return;
			}

			this._lockedFields[fieldName] = true;
			this._lockNotifier.notify([ { name: name, isLocked: true } ]);
		},
		unlockField: function(fieldName)
		{
			if(!this._lockedFields.hasOwnProperty(fieldName))
			{
				return;
			}

			delete this._lockedFields[fieldName];
			this._lockNotifier.notify([ { name: name, isLocked: false } ]);
		},
		isFieldLocked: function(fieldName)
		{
			return this._lockedFields.hasOwnProperty(fieldName);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		addLockListener: function(listener)
		{
			this._lockNotifier.addListener(listener);
		},
		removeLockListener: function(listener)
		{
			this._lockNotifier.removeListener(listener);
		},
		isCaptionEditable: function()
		{
			return false;
		},
		getCaption: function()
		{
			return "";
		},
		setCaption: function(caption)
		{
		},
		prepareCaptionData: function(data)
		{
		}
	};
	BX.Crm.EntityModel.create = function(id, settings)
	{
		var self = new BX.Crm.EntityModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.LeadModel === "undefined")
{
	BX.Crm.LeadModel = function()
	{
		BX.Crm.LeadModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.LeadModel, BX.Crm.EntityModel);
	BX.Crm.LeadModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Change", BX.delegate(this.onEntityProgressChange, this));
	};
	BX.Crm.LeadModel.prototype.onEntityProgressChange = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STATUS_ID", ""))
		{
			this.setField("STATUS_ID", stepId);
		}
	};
	BX.Crm.LeadModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.lead;
	};
	BX.Crm.LeadModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.LeadModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.LeadModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.LeadModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.LeadModel.create = function(id, settings)
	{
		var self = new BX.Crm.LeadModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.ContactModel === "undefined")
{
	BX.Crm.ContactModel = function()
	{
		BX.Crm.ContactModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.ContactModel, BX.Crm.EntityModel);
	BX.Crm.ContactModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.contact;
	};
	BX.Crm.ContactModel.prototype.getCaption = function()
	{
		return this.getField("FORMATTED_NAME", "");
	};
	BX.Crm.ContactModel.create = function(id, settings)
	{
		var self = new BX.Crm.ContactModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.CompanyModel === "undefined")
{
	BX.Crm.CompanyModel = function()
	{
		BX.Crm.CompanyModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.CompanyModel, BX.Crm.EntityModel);
	BX.Crm.CompanyModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.CompanyModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.company;
	};
	BX.Crm.CompanyModel.prototype.getCaption = function()
	{
		return this.getField("TITLE", "");
	};
	BX.Crm.CompanyModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.CompanyModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.CompanyModel.create = function(id, settings)
	{
		var self = new BX.Crm.CompanyModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.DealModel === "undefined")
{
	BX.Crm.DealModel = function()
	{
		BX.Crm.DealModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.DealModel, BX.Crm.EntityModel);
	BX.Crm.DealModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Saved", BX.delegate(this.onEntityProgressSave, this));
	};
	BX.Crm.DealModel.prototype.onEntityProgressSave = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STAGE_ID", ""))
		{
			this.setField("STAGE_ID", stepId);
		}
	};
	BX.Crm.DealModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.deal;
	};
	BX.Crm.DealModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.DealModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.DealModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.DealModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.DealModel.create = function(id, settings)
	{
		var self = new BX.Crm.DealModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.DealRecurringModel === "undefined")
{
	BX.Crm.DealRecurringModel = function ()
	{
		BX.Crm.DealRecurringModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.DealRecurringModel, BX.Crm.DealModel);

	BX.Crm.DealRecurringModel.create = function(id, settings)
	{
		var self = new BX.Crm.DealRecurringModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.QuoteModel === "undefined")
{
	BX.Crm.QuoteModel = function()
	{
		BX.Crm.QuoteModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.QuoteModel, BX.Crm.EntityModel);
	BX.Crm.QuoteModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Change", BX.delegate(this.onEntityProgressChange, this));
	};
	BX.Crm.QuoteModel.prototype.onEntityProgressChange = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STATUS_ID", ""))
		{
			this.setField("STATUS_ID", stepId);
		}
	};
	BX.Crm.QuoteModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.quote;
	};
	BX.Crm.QuoteModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.QuoteModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.QuoteModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.QuoteModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.QuoteModel.create = function(id, settings)
	{
		var self = new BX.Crm.QuoteModel();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region D&D
if(typeof BX.Crm.EditorDragScope === "undefined")
{
	BX.Crm.EditorDragScope =
	{
		intermediate: 0,
		parent: 1,
		form: 2,
		getDefault: function()
		{
			return this.form;
		}
	};
}

if(typeof BX.Crm.EditorDragObjectType === "undefined")
{
	BX.Crm.EditorDragObjectType =
	{
		intermediate: "",
		field: "F",
		section: "S"
	};
}

if(typeof(BX.Crm.EditorDragItem) === "undefined")
{
	BX.Crm.EditorDragItem = function()
	{
	};
	BX.Crm.EditorDragItem.prototype =
	{
		getType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getContextId: function()
		{
			return "";
		},
		createGhostNode: function()
		{
			return null;
		},
		processDragStart: function()
		{
		},
		processDragPositionChange: function(pos, ghostRect)
		{
		},
		processDragStop: function()
		{
		}
	};
}

if(typeof(BX.Crm.EditorFieldDragItem) === "undefined")
{
	BX.Crm.EditorFieldDragItem = function()
	{
		BX.Crm.EditorFieldDragItem.superclass.constructor.apply(this);
		this._scope = BX.Crm.EditorDragScope.undefined;
		this._control = null;
		this._contextId = "";
	};
	BX.extend(BX.Crm.EditorFieldDragItem, BX.Crm.EditorDragItem);
	BX.Crm.EditorFieldDragItem.prototype.initialize = function(settings)
	{
		this._control = BX.prop.get(settings, "control");
		if(!this._control)
		{
			throw "Crm.EditorFieldDragItem: The 'control' parameter is not defined in settings or empty.";
		}
		this._scope = BX.prop.getInteger(settings, "scope", BX.Crm.EditorDragScope.getDefault());
		this._contextId = BX.prop.getString(settings, "contextId", "");
	};
	BX.Crm.EditorFieldDragItem.prototype.getType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EditorFieldDragItem.prototype.getControl = function()
	{
		return this._control;
	};
	BX.Crm.EditorFieldDragItem.prototype.getContextId = function()
	{
		return this._contextId !== "" ? this._contextId : BX.Crm.EditorFieldDragItem.contextId;
	};
	BX.Crm.EditorFieldDragItem.prototype.createGhostNode = function()
	{
		return this._control.createGhostNode();
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragStart = function()
	{
		window.setTimeout(
			function()
			{
				//Ensure Field drag controllers are enabled.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, true);
				//Disable Section drag controllers for the avoidance of collisions.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, false);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);
		this._control.getWrapper().style.opacity = "0.2";
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragPositionChange = function(pos, ghostRect)
	{
		//var startY = pos.y;

		var parentPos = this._scope === BX.Crm.EditorDragScope.parent
			? this._control.getParentPosition()
			: this._control.getRootContainerPosition();

		if(pos.y < parentPos.top)
		{
			pos.y = parentPos.top;
		}
		if((pos.y + ghostRect.height) > parentPos.bottom)
		{
			pos.y = parentPos.bottom - ghostRect.height;
		}
		if(pos.x < parentPos.left)
		{
			pos.x = parentPos.left;
		}
		if((pos.x + ghostRect.width) > parentPos.right)
		{
			pos.x = parentPos.right - ghostRect.width;
		}

		//var finishY = pos.y;
		//console.log("parent: %d start: %d final: %d", parentPos.top, startY, finishY);
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragStop = function()
	{
		window.setTimeout(
			function()
			{
				//Returning Section drag controllers to work.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, true);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);
		this._control.getWrapper().style.opacity = "1";
	};
	BX.Crm.EditorFieldDragItem.contextId = "editor_field";
	BX.Crm.EditorFieldDragItem.create = function(settings)
	{
		var self = new BX.Crm.EditorFieldDragItem();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorSectionDragItem) === "undefined")
{
	BX.Crm.EditorSectionDragItem = function()
	{
		BX.Crm.EditorSectionDragItem.superclass.constructor.apply(this);
		this._control = null;
	};
	BX.extend(BX.Crm.EditorSectionDragItem, BX.Crm.EditorDragItem);
	BX.Crm.EditorSectionDragItem.prototype.initialize = function(settings)
	{
		this._control = BX.prop.get(settings, "control");
		if(!this._control)
		{
			throw "Crm.EditorSectionDragItem: The 'control' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorSectionDragItem.prototype.getType = function()
	{
		return BX.Crm.EditorDragObjectType.section;
	};
	BX.Crm.EditorSectionDragItem.prototype.getControl = function()
	{
		return this._control;
	};
	BX.Crm.EditorSectionDragItem.prototype.getContextId = function()
	{
		return BX.Crm.EditorSectionDragItem.contextId;
	};
	BX.Crm.EditorSectionDragItem.prototype.createGhostNode = function()
	{
		return this._control.createGhostNode();
	};
	BX.Crm.EditorSectionDragItem.prototype.processDragStart = function()
	{
		BX.addClass(document.body, "crm-entity-widgets-drag");

		var control = this._control;
		control.getWrapper().style.opacity = "0.2";
		window.setTimeout(
			function()
			{
				//Ensure Section drag controllers are enabled.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, true);
				//Disable Field drag controllers for the avoidance of collisions.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, false);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();

				window.setTimeout(
					function()
					{
						var firstControl = control.getSiblingByIndex(0);
						if(firstControl !== null && firstControl !== control)
						{
							firstControl.getWrapper().scrollIntoView();
						}
					},
					200
				);
			}
		);
	};
	BX.Crm.EditorSectionDragItem.prototype.processDragStop = function()
	{
		BX.removeClass(document.body, "crm-entity-widgets-drag");
		window.setTimeout(
			function()
			{
				//Returning Field drag controllers to work.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, true);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);

		var control = this._control;
		control.getWrapper().style.opacity = "1";
		window.setTimeout(
			function()
			{
				control.getWrapper().scrollIntoView();
			},
			150
		);
	};
	BX.Crm.EditorSectionDragItem.contextId = "editor_section";
	BX.Crm.EditorSectionDragItem.create = function(settings)
	{
		var self = new BX.Crm.EditorSectionDragItem();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragItemController) === "undefined")
{
	BX.Crm.EditorDragItemController = function()
	{
		BX.Crm.EditorDragItemController.superclass.constructor.apply(this);
		this._charge = null;
		this._preserveDocument = true;
	};
	BX.extend(BX.Crm.EditorDragItemController, BX.CrmCustomDragItem);
	BX.Crm.EditorDragItemController.prototype.doInitialize = function()
	{
		this._charge = this.getSetting("charge");
		if(!this._charge)
		{
			throw "Crm.EditorDragItemController: The 'charge' parameter is not defined in settings or empty.";
		}

		this._startNotifier = BX.CrmNotifier.create(this);
		this._stopNotifier = BX.CrmNotifier.create(this);

		this._ghostOffset = { x: 0, y: -40 };
	};
	BX.Crm.EditorDragItemController.prototype.addStartListener = function(listener)
	{
		this._startNotifier.addListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.removeStartListener = function(listener)
	{
		this._startNotifier.removeListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.addStopListener = function(listener)
	{
		this._stopNotifier.addListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.removeStopListener = function(listener)
	{
		this._stopNotifier.removeListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.getCharge = function()
	{
		return this._charge;
	};
	BX.Crm.EditorDragItemController.prototype.createGhostNode = function()
	{
		if(this._ghostNode)
		{
			return this._ghostNode;
		}

		this._ghostNode = this._charge.createGhostNode();
		document.body.appendChild(this._ghostNode);
	};
	BX.Crm.EditorDragItemController.prototype.getGhostNode = function()
	{
		return this._ghostNode;
	};
	BX.Crm.EditorDragItemController.prototype.removeGhostNode = function()
	{
		if(this._ghostNode)
		{
			document.body.removeChild(this._ghostNode);
			this._ghostNode = null;
		}
	};
	BX.Crm.EditorDragItemController.prototype.getContextId = function()
	{
		return this._charge.getContextId();
	};
	BX.Crm.EditorDragItemController.prototype.getContextData = function()
	{
		return ({ contextId: this._charge.getContextId(), charge: this._charge });
	};
	BX.Crm.EditorDragItemController.prototype.processDragStart = function()
	{
		BX.Crm.EditorDragItemController.current = this;
		this._charge.processDragStart();
		BX.Crm.EditorDragContainerController.refresh(this._charge.getContextId());

		this._startNotifier.notify([]);
	};
	BX.Crm.EditorDragItemController.prototype.processDrag = function(x, y)
	{
	};
	BX.Crm.EditorDragItemController.prototype.processDragPositionChange = function(pos)
	{
		this._charge.processDragPositionChange(pos, BX.pos(this.getGhostNode()));
	};
	BX.Crm.EditorDragItemController.prototype.processDragStop = function()
	{
		BX.Crm.EditorDragItemController.current = null;
		this._charge.processDragStop();
		BX.Crm.EditorDragContainerController.refreshAfter(this._charge.getContextId(), 300);

		this._stopNotifier.notify([]);
	};
	BX.Crm.EditorDragItemController.current = null;
	BX.Crm.EditorDragItemController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDragItemController();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragContainer) === "undefined")
{
	BX.Crm.EditorDragContainer = function()
	{
	};
	BX.Crm.EditorDragContainer.prototype =
	{
		getContextId: function()
		{
			return "";
		},
		getPriority: function()
		{
			return 100;
		},
		hasPlaceHolder: function()
		{
			return false;
		},
		createPlaceHolder: function(index)
		{
			return null;
		},
		getPlaceHolder: function()
		{
			return null;
		},
		removePlaceHolder: function()
		{
		},
		getChildNodes: function()
		{
			return [];
		},
		getChildNodeCount: function()
		{
			return 0;
		}
	}
}

if(typeof(BX.Crm.EditorFieldDragContainer) === "undefined")
{
	BX.Crm.EditorFieldDragContainer = function()
	{
		BX.Crm.EditorFieldDragContainer.superclass.constructor.apply(this);
		this._section = null;
		this._context = "";
	};
	BX.extend(BX.Crm.EditorFieldDragContainer, BX.Crm.EditorDragContainer);
	BX.Crm.EditorFieldDragContainer.prototype.initialize = function(settings)
	{
		this._section = BX.prop.get(settings, "section");
		if(!this._section)
		{
			throw "Crm.EditorSectionDragContainer: The 'section' parameter is not defined in settings or empty.";
		}

		this._context = BX.prop.getString(settings, "context", "");
	};
	BX.Crm.EditorFieldDragContainer.prototype.getSection = function()
	{
		return this._section;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getContextId = function()
	{
		return this._context !== "" ? this._context : BX.Crm.EditorFieldDragItem.contextId;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getPriority = function()
	{
		return 10;
	};
	BX.Crm.EditorFieldDragContainer.prototype.hasPlaceHolder = function()
	{
		return this._section.hasPlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.createPlaceHolder = function(index)
	{
		return this._section.createPlaceHolder(index);
	};
	BX.Crm.EditorFieldDragContainer.prototype.getPlaceHolder = function()
	{
		return this._section.getPlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.removePlaceHolder = function()
	{
		this._section.removePlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.getChildNodes = function()
	{
		var nodes = [];
		var items = this._section.getChildren();
		for(var i = 0, length = items.length; i < length; i++)
		{
			nodes.push(items[i].getWrapper());
		}
		return nodes;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getChildNodeCount = function()
	{
		return this._section.getChildCount();
	};
	BX.Crm.EditorFieldDragContainer.create = function(settings)
	{
		var self = new BX.Crm.EditorFieldDragContainer();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorSectionDragContainer) === "undefined")
{
	BX.Crm.EditorSectionDragContainer = function()
	{
		BX.Crm.EditorSectionDragContainer.superclass.constructor.apply(this);
		this._editor = null;
	};
	BX.extend(BX.Crm.EditorSectionDragContainer, BX.Crm.EditorDragContainer);
	BX.Crm.EditorSectionDragContainer.prototype.initialize = function(settings)
	{
		this._editor = BX.prop.get(settings, "editor");
		if(!this._editor)
		{
			throw "Crm.EditorSectionDragContainer: The 'editor' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorSectionDragContainer.prototype.getEditor = function()
	{
		return this._editor;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getContextId = function()
	{
		return BX.Crm.EditorSectionDragItem.contextId;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getPriority = function()
	{
		return 20;
	};
	BX.Crm.EditorSectionDragContainer.prototype.hasPlaceHolder = function()
	{
		return this._editor.hasPlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.createPlaceHolder = function(index)
	{
		return this._editor.createPlaceHolder(index);
	};
	BX.Crm.EditorSectionDragContainer.prototype.getPlaceHolder = function()
	{
		return this._editor.getPlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.removePlaceHolder = function()
	{
		this._editor.removePlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.getChildNodes = function()
	{
		var nodes = [];
		var items = this._editor.getControls();
		for(var i = 0, length = items.length; i < length; i++)
		{
			nodes.push(items[i].getWrapper());
		}
		return nodes;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getChildNodeCount = function()
	{
		return this._editor.getControlCount();
	};
	BX.Crm.EditorSectionDragContainer.create = function(settings)
	{
		var self = new BX.Crm.EditorSectionDragContainer();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragContainerController) === "undefined")
{
	BX.Crm.EditorDragContainerController = function()
	{
		BX.Crm.EditorDragContainerController.superclass.constructor.apply(this);
		this._charge = null;
	};
	BX.extend(BX.Crm.EditorDragContainerController, BX.CrmCustomDragContainer);
	BX.Crm.EditorDragContainerController.prototype.doInitialize = function()
	{
		this._charge = this.getSetting("charge");
		if(!this._charge)
		{
			throw "Crm.EditorDragContainerController: The 'charge' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorDragContainerController.prototype.getCharge = function()
	{
		return this._charge;
	};
	BX.Crm.EditorDragContainerController.prototype.createPlaceHolder = function(pos)
	{
		var ghostRect = BX.pos(BX.Crm.EditorDragItemController.current.getGhostNode());
		var ghostTop = ghostRect.top, ghostBottom = ghostRect.top + 40;
		var ghostMean = Math.floor((ghostTop + ghostBottom) / 2);

		var rect, mean;
		var placeholder = this._charge.getPlaceHolder();
		if(placeholder)
		{
			rect = placeholder.getPosition();
			mean = Math.floor((rect.top + rect.bottom) / 2);
			if(
				(ghostTop <= rect.bottom && ghostTop >= rect.top) ||
				(ghostBottom >= rect.top && ghostBottom <= rect.bottom) ||
				Math.abs(ghostMean - mean) <= 8
			)
			{
				if(!placeholder.isActive())
				{
					placeholder.setActive(true);
				}
				return;
			}
		}

		var nodes = this._charge.getChildNodes();
		for(var i = 0; i < nodes.length; i++)
		{
			rect = BX.pos(nodes[i]);
			mean = Math.floor((rect.top + rect.bottom) / 2);
			if(
				(ghostTop <= rect.bottom && ghostTop >= rect.top) ||
				(ghostBottom >= rect.top && ghostBottom <= rect.bottom) ||
				Math.abs(ghostMean - mean) <= 8
			)
			{
				this._charge.createPlaceHolder((ghostMean - mean) <= 0 ? i : (i + 1)).setActive(true);
				return;
			}
		}

		this._charge.createPlaceHolder(-1).setActive(true);
		this.refresh();
	};
	BX.Crm.EditorDragContainerController.prototype.removePlaceHolder = function()
	{
		if(!this._charge.hasPlaceHolder())
		{
			return;
		}

		if(this._charge.getChildNodeCount() > 0)
		{
			this._charge.removePlaceHolder();
		}
		else
		{
			this._charge.getPlaceHolder().setActive(false);
		}
		this.refresh();
	};
	BX.Crm.EditorDragContainerController.prototype.getContextId = function()
	{
		return this._charge.getContextId();
	};
	BX.Crm.EditorDragContainerController.prototype.getPriority = function()
	{
		return this._charge.getPriority();
	};
	BX.Crm.EditorDragContainerController.prototype.isAllowedContext = function(contextId)
	{
		return contextId === this._charge.getContextId();
	};
	BX.Crm.EditorDragContainerController.refresh = function(contextId)
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			var item = this.items[k];
			if(item.getContextId() === contextId)
			{
				item.refresh();
			}
		}
	};
	BX.Crm.EditorDragContainerController.refreshAfter = function(contextId, interval)
	{
		interval = parseInt(interval);
		if(interval > 0)
		{
			window.setTimeout(function() { BX.Crm.EditorDragContainerController.refresh(contextId); }, interval);
		}
		else
		{
			this.refresh(contextId);
		}
	};
	BX.Crm.EditorDragContainerController.refreshAll = function()
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			this.items[k].refresh();
		}
	};
	BX.Crm.EditorDragContainerController.enable = function(contextId, enable)
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			var item = this.items[k];
			if(item.getContextId() === contextId)
			{
				item.enable(enable);
			}
		}
	};
	BX.Crm.EditorDragContainerController.items = {};
	BX.Crm.EditorDragContainerController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDragContainerController();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}

if(typeof(BX.Crm.EditorDragPlaceholder) === "undefined")
{
	BX.Crm.EditorDragPlaceholder = function()
	{
		this._settings = null;
		this._container = null;
		this._node = null;
		this._isDragOver = false;
		this._isActive = false;
		this._index = -1;
		this._timeoutId = null;
	};
	BX.Crm.EditorDragPlaceholder.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._container = this.getSetting("container", null);

			this._isActive = this.getSetting("isActive", false);
			this._index = parseInt(this.getSetting("index", -1));
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		isDragOver: function()
		{
			return this._isDragOver;
		},
		isActive: function()
		{
			return this._isActive;
		},
		setActive: function(active, interval)
		{
			if(this._timeoutId !== null)
			{
				window.clearTimeout(this._timeoutId);
				this._timeoutId = null;
			}

			interval = parseInt(interval);
			if(interval > 0)
			{
				var self = this;
				window.setTimeout(function(){ if(self._timeoutId === null) return; self._timeoutId = null; self.setActive(active, 0); }, interval);
				return;
			}

			active = !!active;
			if(this._isActive === active)
			{
				return;
			}

			this._isActive = active;
			if(this._node)
			{
				//this._node.className = active ? "crm-lead-header-drag-zone-bd" : "crm-lead-header-drag-zone-bd-inactive";
			}
		},
		getIndex: function()
		{
			return this._index;
		},
		prepareNode: function()
		{
			return null;
		},
		layout: function()
		{
			this._node = this.prepareNode();
			var anchor = this.getSetting("anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._node, anchor);
			}
			else
			{
				this._container.appendChild(this._node);
			}

			BX.bind(this._node, "dragover", BX.delegate(this._onDragOver, this));
			BX.bind(this._node, "dragleave", BX.delegate(this._onDragLeave, this));
		},
		clearLayout: function()
		{
			if(this._node)
			{
				// this._node = BX.remove(this._node);
				this._node.style.height = 0;
				setTimeout(BX.proxy(function (){this._node = BX.remove(this._node);}, this), 100);
			}
		},
		getPosition: function()
		{
			return BX.pos(this._node);
		},
		_onDragOver: function(e)
		{
			e = e || window.event;
			this._isDragOver = true;
			return BX.eventReturnFalse(e);
		},
		_onDragLeave: function(e)
		{
			e = e || window.event;
			this._isDragOver = false;
			return BX.eventReturnFalse(e);
		}
	}
}

if(typeof(BX.Crm.EditorDragFieldPlaceholder) === "undefined")
{
	BX.Crm.EditorDragFieldPlaceholder = function()
	{
	};

	BX.extend(BX.Crm.EditorDragFieldPlaceholder, BX.Crm.EditorDragPlaceholder);
	BX.Crm.EditorDragFieldPlaceholder.prototype.prepareNode = function()
	{
		return BX.create("div", { attrs: { className: "crm-entity-widget-content-block-place" } });
	};
	BX.Crm.EditorDragFieldPlaceholder.create = function(settings)
	{
		var self = new BX.Crm.EditorDragFieldPlaceholder();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragSectionPlaceholder) === "undefined")
{
	BX.Crm.EditorDragSectionPlaceholder = function()
	{
	};

	BX.extend(BX.Crm.EditorDragSectionPlaceholder, BX.Crm.EditorDragPlaceholder);
	BX.Crm.EditorDragSectionPlaceholder.prototype.prepareNode = function()
	{
		return BX.create("div", { attrs: { className: "crm-entity-card-widget crm-entity-card-widget-place" } });
	};
	BX.Crm.EditorDragSectionPlaceholder.create = function(settings)
	{
		var self = new BX.Crm.EditorDragSectionPlaceholder();
		self.initialize(settings);
		return self;
	};
}

//endregion

//region USER FIELD
if(typeof BX.Crm.EntityUserFieldType === "undefined")
{
	BX.Crm.EntityUserFieldType =
	{
		string: "string",
		integer: "integer",
		double: "double",
		boolean: "boolean",
		money: "money",
		date: "date",
		datetime: "datetime",
		enumeration: "enumeration",
		employee: "employee",
		crm: "crm",
		crmStatus: "crm_status",
		file: "file",
		url: "url"
	};
}

if(typeof BX.Crm.EntityUserFieldManager === "undefined")
{
	BX.Crm.EntityUserFieldManager = function()
	{
		this._id = "";
		this._settings = {};
		this._entityId = 0;
		this._fieldEntityId = "";
		this._enableCreation = false;
		this._creationSignature = "";
		this._creationUrl = "";
		this._activeFields = {};
		this._validationResult = null;
		this._validationPromise = null;

		this._config = null;
	};
	BX.Crm.EntityUserFieldManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entityId = BX.prop.getInteger(this._settings, "entityId", 0);
			this._fieldEntityId = BX.prop.getString(this._settings, "fieldEntityId", "");
			this._enableCreation = BX.prop.getBoolean(this._settings, "enableCreation", false);
			this._creationSignature = BX.prop.getString(this._settings, "creationSignature", "");
			this._creationPageUrl = BX.prop.getString(this._settings, "creationPageUrl", "");
		},
		isCreationEnabled: function()
		{
			return this._enableCreation;
		},
		isModificationEnabled: function()
		{
			return this._enableCreation;
		},
		getDefaultFieldLabel: function(typeId)
		{
			if(typeId === "string")
			{
				return this.getMessage("stringLabel");
			}
			else if(typeId === "double")
			{
				return this.getMessage("doubleLabel");
			}
			else if(typeId === "money")
			{
				return this.getMessage("moneyLabel");
			}
			else if(typeId === "datetime")
			{
				return this.getMessage("datetimeLabel");
			}
			else if(typeId === "enumeration")
			{
				return this.getMessage("enumerationLabel");
			}
			else if(typeId === "file")
			{
				return this.getMessage("fileLabel");
			}
			return this.getMessage("label");
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityUserFieldManager.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getAdditionalTypeList: function()
		{
			return BX.Crm.EntityUserFieldManager.additionalTypeList;
		},
		getTypeInfos: function()
		{
			var items = [];
			items.push({ name: "string", title: this.getMessage("stringTitle"), legend: this.getMessage("stringLegend") });
			items.push({ name: "enumeration", title: this.getMessage("enumerationTitle"), legend: this.getMessage("enumerationLegend") });
			items.push({ name: "datetime", title: this.getMessage("datetimeTitle"), legend: this.getMessage("datetimeLegend") });
			items.push({ name: "address", title: this.getMessage("addressTitle"), legend: this.getMessage("addressLegend") });

			if (this._fieldEntityId === 'CRM_LEAD' || this._fieldEntityId === 'CRM_DEAL')
			{
				items.push({ name: "resourcebooking", title: this.getMessage("resourcebookingTitle"), legend: this.getMessage("resourcebookingLegend") });
			}

			items.push({ name: "url", title: this.getMessage("urlTitle"), legend: this.getMessage("urlLegend") });
			items.push({ name: "file", title: this.getMessage("fileTitle"), legend: this.getMessage("fileLegend") });
			items.push({ name: "money", title: this.getMessage("moneyTitle"), legend: this.getMessage("moneyLegend") });
			items.push({ name: "boolean", title: this.getMessage("booleanTitle"), legend: this.getMessage("booleanLegend") });
			items.push({ name: "double", title: this.getMessage("doubleTitle"), legend: this.getMessage("doubleLegend") });

			var additionalList = this.getAdditionalTypeList();
			for(var i = 0; i < additionalList.length; i++)
			{
				items.push({
					name: additionalList[i].USER_TYPE_ID,
					title: additionalList[i].TITLE,
					legend: additionalList[i].LEGEND
				});
			}

			items.push({ name: "custom", title: this.getMessage("customTitle"), legend: this.getMessage("customLegend") });

			return items;
		},
		getCreationPageUrl: function()
		{
			return this._creationPageUrl;
		},
		createField: function(fieldData, mode)
		{
			if(!this._enableCreation)
			{
				return;
			}

			var typeId = BX.prop.getString(fieldData, "USER_TYPE_ID", "");
			if(typeId === "")
			{
				typeId = BX.Crm.EntityUserFieldType.string;
			}

			if(!BX.type.isNotEmptyString(fieldData["EDIT_FORM_LABEL"]))
			{
				fieldData["EDIT_FORM_LABEL"] = this.getDefaultFieldLabel(typeId);
			}

			if(!BX.type.isNotEmptyString(fieldData["LIST_COLUMN_LABEL"]))
			{
				fieldData["LIST_COLUMN_LABEL"] = fieldData["EDIT_FORM_LABEL"];
			}

			if(!BX.type.isNotEmptyString(fieldData["LIST_FILTER_LABEL"]))
			{
				fieldData["LIST_FILTER_LABEL"] = fieldData["LIST_COLUMN_LABEL"];
			}

			this.addFieldLabel("EDIT_FORM_LABEL", fieldData["EDIT_FORM_LABEL"], fieldData);
			this.addFieldLabel("LIST_COLUMN_LABEL", fieldData["LIST_COLUMN_LABEL"], fieldData);
			this.addFieldLabel("LIST_FILTER_LABEL", fieldData["LIST_FILTER_LABEL"], fieldData);

			var promise = new BX.Promise();
			var onSuccess = function(result)
			{
				promise.fulfill(result);
			};

			if(!BX.type.isNotEmptyString(fieldData["FIELD"]))
			{
				fieldData["FIELD"] = "UF_CRM_" + (new Date()).getTime().toString();
			}

			fieldData["ENTITY_ID"] = this._fieldEntityId;
			fieldData["SIGNATURE"] = this._creationSignature;

			if(!BX.type.isNotEmptyString(fieldData["MULTIPLE"]))
			{
				fieldData["MULTIPLE"] = "N";
			}

			if(!BX.type.isNotEmptyString(fieldData["MANDATORY"]))
			{
				fieldData["MANDATORY"] = "N";
			}

			if(typeId === BX.Crm.EntityUserFieldType.file)
			{
				fieldData["SHOW_FILTER"] = "N";
				fieldData["SHOW_IN_LIST"] = "N";
			}
			else
			{
				if(typeId === BX.Crm.EntityUserFieldType.employee
					|| typeId === BX.Crm.EntityUserFieldType.crm
					|| typeId === BX.Crm.EntityUserFieldType.crmStatus
				)
				{
					//Force exact match for 'employee', 'crm' and 'crm_status' types
					fieldData["SHOW_FILTER"] = "I";
				}
				else
				{
					fieldData["SHOW_FILTER"] = "E";
				}
				fieldData["SHOW_IN_LIST"] = "Y";
			}

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["DISPLAY"] = "UI";
			}

			if(typeId === BX.Crm.EntityUserFieldType.boolean)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["LABEL_CHECKBOX"] = fieldData["EDIT_FORM_LABEL"];
			}

			if(typeId === BX.Crm.EntityUserFieldType.double)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["PRECISION"] = 2;
			}

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.ViewManager.add({ "FIELDS": [fieldData] }, onSuccess);
			}
			else
			{
				BX.Main.UF.EditManager.add({ "FIELDS": [fieldData] }, onSuccess);
			}
			return promise;
		},
		updateField: function(fieldData, mode)
		{
			fieldData["ENTITY_ID"] = this._fieldEntityId;
			fieldData["SIGNATURE"] = this._creationSignature;

			if(BX.type.isNotEmptyString(fieldData["EDIT_FORM_LABEL"]))
			{
				this.addFieldLabel("EDIT_FORM_LABEL", fieldData["EDIT_FORM_LABEL"], fieldData);
			}

			if(BX.type.isNotEmptyString(fieldData["LIST_COLUMN_LABEL"]))
			{
				this.addFieldLabel("LIST_COLUMN_LABEL", fieldData["LIST_COLUMN_LABEL"], fieldData);
			}

			if(BX.type.isNotEmptyString(fieldData["LIST_FILTER_LABEL"]))
			{
				this.addFieldLabel("LIST_FILTER_LABEL", fieldData["LIST_FILTER_LABEL"], fieldData);
			}

			var promise = new BX.Promise();
			var onSuccess = function(result)
			{
				promise.fulfill(result);
			};

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.ViewManager.update({ "FIELDS": [fieldData] }, onSuccess);
			}
			else
			{
				BX.Main.UF.EditManager.update({ "FIELDS": [fieldData] }, onSuccess);
			}
			return promise;
		},
		resolveFieldName: function(fieldInfo)
		{
			return BX.prop.getString(fieldInfo, "FIELD", "");
		},
		addFieldLabel: function(name, value, fieldData)
		{
			var languages = BX.prop.getArray(this._settings, "languages", []);
			if(languages.length === 0)
			{
				fieldData[name] = value;
				return;
			}

			fieldData[name] = {};
			for(var i = 0, length = languages.length; i < length; i++)
			{
				var language = languages[i];
				fieldData[name][language["LID"]] = value;
			}
		},
		prepareSchemeElementSettings: function(fieldInfo)
		{
			var name = BX.prop.getString(fieldInfo, "FIELD", "");
			if(name === "")
			{
				return null;
			}

			if(BX.prop.getString(fieldInfo, "USER_TYPE_ID", "") === "")
			{
				fieldInfo["USER_TYPE_ID"] = "string";
			}

			if(BX.prop.getString(fieldInfo, "ENTITY_ID", "") === "")
			{
				fieldInfo["ENTITY_ID"] = this._fieldEntityId;
			}

			if(BX.prop.getInteger(fieldInfo, "ENTITY_VALUE_ID", 0) <= 0)
			{
				fieldInfo["ENTITY_VALUE_ID"] = this._entityId;
			}

			return(
				{
					name: name,
					originalTitle: BX.prop.getString(fieldInfo, "EDIT_FORM_LABEL", name),
					title: BX.prop.getString(fieldInfo, "EDIT_FORM_LABEL", name),
					type: "userField",
					required: BX.prop.getString(fieldInfo, "MANDATORY", "N") === "Y",
					data: { fieldInfo: fieldInfo }
				}
			);
		},
		createSchemeElement: function(fieldInfo)
		{
			return BX.Crm.EntitySchemeElement.create(this.prepareSchemeElementSettings(fieldInfo));
		},
		updateSchemeElement: function(element, fieldInfo)
		{
			var settings = this.prepareSchemeElementSettings(fieldInfo);
			settings["title"] = element.getTitle();
			element.mergeSettings(settings);
		},
		registerActiveField: function(field)
		{
			var name = field.getName();
			this._activeFields[name] = field;

			BX.Main.UF.EditManager.registerField(name, field.getFieldInfo(), field.getFieldNode());
		},
		unregisterActiveField: function(field)
		{
			var name = field.getName();
			if(this._activeFields.hasOwnProperty(name))
			{
				delete this._activeFields[name];
			}
			BX.Main.UF.EditManager.unRegisterField(name);
		},
		validate: function(result)
		{
			var names = [];
			for(var name in this._activeFields)
			{
				if(this._activeFields.hasOwnProperty(name))
				{
					names.push(name);
				}
			}

			if(names.length > 0)
			{
				this._validationResult = result;
				BX.Main.UF.EditManager.validate(
					names,
					BX.delegate(this.onValidationComplete, this)
				);
			}
			else
			{
				window.setTimeout(
					BX.delegate(
						function()
						{
							if(this._validationPromise)
							{
								this._validationPromise.fulfill();
								this._validationPromise = null;
							}
						},
						this
					),
					0
				);
			}

			this._validationPromise = new BX.Promise();
			return this._validationPromise;
		},
		onValidationComplete: function(results)
		{
			var name;
			//Reset previous messages
			for(name in this._activeFields)
			{
				if(this._activeFields.hasOwnProperty(name))
				{
					this._activeFields[name].clearError();
				}
			}

			//Add new messages
			for(name in results)
			{
				if(!results.hasOwnProperty(name))
				{
					continue;
				}

				if(this._activeFields.hasOwnProperty(name))
				{
					var field = this._activeFields[name];
					field.showError(results[name]);
					this._validationResult.addError(BX.Crm.EntityValidationError.create({ field: field }));
				}
			}

			if(this._validationPromise)
			{
				this._validationPromise.fulfill();
			}

			this._validationResult = null;
			this._validationPromise = null;
		}
	};
	if(typeof(BX.Crm.EntityUserFieldManager.messages) === "undefined")
	{
		BX.Crm.EntityUserFieldManager.messages = {};
	}
	BX.Crm.EntityUserFieldManager.items = {};
	BX.Crm.EntityUserFieldManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityUserFieldManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

if(typeof BX.Crm.EntityUserFieldLayoutLoader === "undefined")
{
	BX.Crm.EntityUserFieldLayoutLoader = function()
	{
		this._id = "";
		this._settings = {};
		this._mode = BX.Crm.EntityEditorMode.view;
		this._enableBatchMode = true;
		this._owner = null;
		this._items = [];
	};
	BX.Crm.EntityUserFieldLayoutLoader.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);
			this._enableBatchMode = BX.prop.getBoolean(this._settings, "enableBatchMode", true);
			this._owner = BX.prop.get(this._settings, "owner", null);
		},
		getId: function()
		{
			return this._id;
		},
		getOwner: function()
		{
			return this._owner;
		},
		addItem: function(item)
		{
			this._items.push(item);
		},
		run: function()
		{
			if(!this._enableBatchMode)
			{
				this.startRequest();
			}
		},
		runBatch: function()
		{
			if(this._enableBatchMode)
			{
				this.startRequest();
			}
		},
		startRequest: function()
		{
			if(this._items.length === 0)
			{
				return;
			}

			var fields = [];
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				if(BX.prop.getString(this._items[i], "name", "") !== "")
				{
					fields.push(BX.prop.getObject(this._items[i], "field", {}));
				}
			}

			if(fields.length === 0)
			{
				return;
			}

			var data = { "FIELDS": fields, "FORM": this._id, "CONTEXT": "CRM_EDITOR" };

			if(this._mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.Manager.getView(data, BX.delegate(this.onRequestComplete, this));
			}
			else
			{
				BX.Main.UF.Manager.getEdit(data, BX.delegate(this.onRequestComplete, this));
			}
		},
		onRequestComplete: function(result)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				var name = BX.prop.getString(item, "name", "");
				var callback = BX.prop.getFunction(item, "callback", null);
				if(name !== "" && callback !== null)
				{
					callback(BX.prop.getObject(result, name, {}));
				}
			}
		}
	};
	BX.Crm.EntityUserFieldLayoutLoader.create = function(id, settings)
	{
		var self = new BX.Crm.EntityUserFieldLayoutLoader();
		self.initialize(id, settings);
		return self;
	};
}

//endregion

//region DUPLICATE MANAGER
if(typeof BX.Crm.EntityEditorDupManager === "undefined")
{
	BX.Crm.EntityEditorDupManager = function()
	{
		this._id = "";
		this._settings = null;
		this._groupInfos = null;

		this._isEnabled = false;
		this._serviceUrl = "";
		this._entityTypeName = "";
		this._form = null;
		this._controller = null;
	};
	BX.Crm.EntityEditorDupManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._isEnabled = BX.prop.getBoolean(this._settings, "enabled", "");
			if(!this._isEnabled)
			{
				return;
			}

			this._groupInfos = BX.prop.getObject(this._settings, "groups", {});

			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
			this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			this._form = BX.prop.get(this._settings, "form", null);

			this._controller = BX.CrmDupController.create(
				this._id,
				{
					serviceUrl: this._serviceUrl,
					entityTypeName: this._entityTypeName,
					form: this._form,
					searcSummaryPosition: "right"
				}
			);
		},
		isEnabled: function()
		{
			return this._isEnabled;
		},
		search: function()
		{
			this._controller.initialSearch();
		},
		getGroupInfo: function(groupId)
		{
			return this._groupInfos.hasOwnProperty(groupId) ? this._groupInfos[groupId] : null;
		},
		getGroup: function(groupId)
		{
			return this._isEnabled ? this._controller.getGroup(groupId) : null;
		},
		ensureGroupRegistered: function(groupId)
		{
			if(!this._isEnabled)
			{
				return null;
			}

			var group = this.getGroup(groupId);
			if(!group)
			{
				group = this._controller.registerGroup(groupId, this.getGroupInfo(groupId));
			}
			return group;
		},
		registerField: function(config)
		{
			if(!this._isEnabled)
			{
				return null;
			}

			var groupId = BX.prop.getString(config, "groupId", "");
			var field = BX.prop.getObject(config, "field", null);
			if(groupId === "" || !field)
			{
				return null;
			}

			var group = this.ensureGroupRegistered(groupId);
			if(!group)
			{
				return null;
			}

			return group.registerField(field);
		},
		unregisterField: function(config)
		{
			if(!this._isEnabled)
			{
				return;
			}

			var groupId = BX.prop.getString(config, "groupId", "");
			var field = BX.prop.getObject(config, "field", null);
			if(groupId === "" || !field)
			{
				return;
			}

			var group = this.getGroup(groupId);
			if(!group)
			{
				return;
			}

			group.unregisterField(field);
		}
	};
	BX.Crm.EntityEditorDupManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorDupManager();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region HELPERS
if(typeof BX.Crm.EditorTextHelper === "undefined")
{
	BX.Crm.EditorTextHelper = function()
	{
	};
	BX.Crm.EditorTextHelper.prototype =
	{
		selectAll: function(input)
		{
			if(!(BX.type.isElementNode(input) && input.value.length > 0))
			{
				return;
			}

			if(BX.type.isFunction(input.setSelectionRange))
			{
				input.setSelectionRange(0, input.value.length);
			}
			else
			{
				input.select();
			}
		},
		setPositionAtEnd: function(input)
		{
			if(BX.type.isElementNode(input) && input.value.length > 0)
			{
				BX.setCaretPosition(input, input.value.length);
			}
		}
	};
	BX.Crm.EditorTextHelper._current = null;
	BX.Crm.EditorTextHelper.getCurrent = function ()
	{
		if(!this._current)
		{
			this._current = new BX.Crm.EditorTextHelper();
		}
		return this._current;
	}
}
//endregion

//region CONTROL VISIBILITY POLICY
if(typeof BX.Crm.EntityEditorVisibilityPolicy === "undefined")
{
	BX.Crm.EntityEditorVisibilityPolicy =
	{
		always: 0,
		view: 1,
		edit: 2,
		parse: function(str)
		{
			str = str.toLowerCase();
			if(str === "view")
			{
				return this.view;
			}
			else if(str === "edit")
			{
				return this.edit;
			}
			return this.always;
		},
		checkVisibility: function(control)
		{
			var mode = control.getMode();
			var policy = control.getVisibilityPolicy();

			if(policy === this.view)
			{
				return mode === BX.Crm.EntityEditorMode.view;
			}
			else if(policy === this.edit)
			{
				return mode === BX.Crm.EntityEditorMode.edit;
			}
			return true;
		}
	};
}
//endregion

//region CONTROLS (SECTIONS, FIELDS)
if(typeof BX.Crm.EntityEditorControl === "undefined")
{
	BX.Crm.EntityEditorControl = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;
		this._parent = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._modeOptions = BX.Crm.EntityEditorModeOptions.none;
		this._model = null;
		this._schemeElement = null;

		this._container = null;
		this._wrapper = null;
		this._dragButton = null;
		this._dragItem = null;
		this._hasLayout = false;
		this._isValidLayout = false;

		this._isVisible = true;
		this._isActive = false;
		this._isChanged = false;
		this._isSchemeChanged = false;
		this._changeHandler = BX.delegate(this.onChange, this);

		this._modeChangeNotifier = null;

		this._contextMenuButton = null;
		this._isContextMenuOpened = false;

		this._draggableContextId = "";
	};
	BX.Crm.EntityEditorControl.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._parent = BX.prop.get(this._settings, "parent", null);

			this._model = BX.prop.get(this._settings, "model", null);

			this._schemeElement = BX.prop.get(this._settings, "schemeElement", null);
			this._container = BX.prop.getElementNode(this._settings, "container", null);

			var mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);
			if(mode === BX.Crm.EntityEditorMode.edit && this._schemeElement && !this._schemeElement.isEditable())
			{
				mode = BX.Crm.EntityEditorMode.view;
			}
			this._mode = mode;

			this.doInitialize();
			this.bindModel();
		},
		doInitialize: function()
		{
		},
		bindModel: function()
		{
		},
		unbindModel: function()
		{
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityEditorControl.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getId: function()
		{
			return this._id;
		},
		getEditor: function()
		{
			return this._editor;
		},
		setEditor: function(editor)
		{
			this._editor = editor;
		},
		getParentPosition: function()
		{
			var parent = this.getParent();
			return (parent ? parent.getPosition() : { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
		},
		getParent: function()
		{
			return this._parent;
		},
		setParent: function(parent)
		{
			this._parent = parent;
		},
		getSiblingByIndex: function (index)
		{
			return this._editor ? this._editor.getControlByIndex(index) : null;
		},
		getChildCount: function()
		{
			return 0;
		},
		getChildById: function(childId)
		{
			return null;
		},
		editChild: function(child)
		{
		},
		removeChild: function(child)
		{
		},
		getChildren: function()
		{
			return [];
		},
		editChildConfiguration: function(child)
		{
		},
		areAttributesEnabled: function()
		{
			return this._schemeElement && this._schemeElement.areAttributesEnabled();
		},
		getType: function()
		{
			return this._schemeElement ? this._schemeElement.getType() : "";
		},
		getName: function()
		{
			return this._schemeElement ? this._schemeElement.getName() : "";
		},
		getTitle: function()
		{
			if(!this._schemeElement)
			{
				return "";
			}

			var title = this._schemeElement.getTitle();
			if(title === "")
			{
				title = this._schemeElement.getName();
			}

			return title;
		},
		setTitle: function(title)
		{
			if(!this._schemeElement)
			{
				return;
			}

			this._schemeElement.setTitle(title);
			this.refreshTitleLayout();
		},
		getOptionFlags: function()
		{
			return(this._schemeElement
				? this._schemeElement.getOptionFlags()
				: BX.Crm.EntityEditorControlOptions.none
			);
		},
		setOptionFlags: function(flags)
		{
			if(this._schemeElement)
			{
				this._schemeElement.setOptionFlags(flags);
			}
		},
		toggleOptionFlag: function(flag)
		{
			var flags = this.getOptionFlags();
			if(BX.Crm.EntityEditorControlOptions.check(flags, flag))
			{
				flags &= ~flag;
			}
			else
			{
				flags |= flag;
			}
			this.setOptionFlags(flags);
		},
		checkOptionFlag: function(flag)
		{
			return BX.Crm.EntityEditorControlOptions.check(this.getOptionFlags(), flag);
		},
		getData: function()
		{
			return this._schemeElement ? this._schemeElement.getData() : {};
		},
		isVisible: function()
		{
			if(!this._isVisible)
			{
				return false;
			}

			if(this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
			{
				return true;
			}
			return BX.Crm.EntityEditorVisibilityPolicy.checkVisibility(this);
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			if(this._hasLayout)
			{
				this._wrapper.style.display = this._isVisible ? "" : "none";
			}
		},
		isActive: function()
		{
			return this._isActive;
		},
		setActive: function(active)
		{
			active = !!active;
			if(this._isActive === active)
			{
				return;
			}

			this._isActive = active;
			this.doSetActive();
		},
		doSetActive: function()
		{
		},
		isEditable: function()
		{
			return this._schemeElement && this._schemeElement.isEditable();
		},
		isRequired: function()
		{
			return this._schemeElement && this._schemeElement.isRequired();
		},
		isRequiredConditionally: function()
		{
			return this._schemeElement && this._schemeElement.isRequiredConditionally();
		},
		isHeading: function()
		{
			return this._schemeElement && this._schemeElement.isHeading();
		},
		getCreationPlaceholder: function()
		{
			return this._schemeElement ? this._schemeElement.getCreationPlaceholder() : "";
		},
		isReadOnly: function()
		{
			return this._editor && this._editor.isReadOnly();
		},
		getVisibilityPolicy: function()
		{
			if(this._editor && !this._editor.isVisibilityPolicyEnabled())
			{
				return BX.Crm.EntityEditorVisibilityPolicy.always;
			}
			return this._schemeElement && this._schemeElement.getVisibilityPolicy();
		},
		getEditPriority: function()
		{
			return BX.Crm.EntityEditorPriority.normal;
		},
		getPosition: function()
		{
			return BX.pos(this._wrapper);
		},
		focus: function()
		{
		},
		save: function()
		{
		},
		validate: function(result)
		{
			return true;
		},
		rollback: function()
		{
		},
		isDragEnabled: function()
		{
			if(!this._editor)
			{
				return false;
			}

			if(!this._editor.canChangeScheme())
			{
				return false;
			}

			return BX.prop.getBoolean(
				BX.prop.getObject(
					this._editor.getDragConfig(this.getDragObjectType()),
					"modes",
					{}
				),
				BX.Crm.EntityEditorMode.getName(this._mode),
				false
			);
		},
		isContextMenuEnabled: function()
		{
			if(this._editor && !(this._editor.isFieldsContextMenuEnabled() && this._editor.canChangeScheme()))
			{
				return false;
			}

			return this._schemeElement.isContextMenuEnabled();
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode, options)
		{
			if(!this.canChangeMode(mode))
			{
				return;
			}

			var modeOptions = BX.prop.getInteger(options, "options", BX.Crm.EntityEditorModeOptions.none);
			if(this._mode === mode && this._modeOptions === modeOptions)
			{
				return;
			}

			this.onBeforeModeChange();

			this._mode = mode;
			this._modeOptions = modeOptions;
			this.doSetMode(this._mode);

			this.onAfterModeChange();

			if(BX.prop.getBoolean(options, "notify", false))
			{
				if(this._parent)
				{
					this._parent.processChildControlModeChange(this);
				}
				else if(this._editor)
				{
					this._editor.processControlModeChange(this);
				}
			}

			this._isSchemeChanged = false;
			this._isChanged = false;

			if(this._hasLayout)
			{
				this._isValidLayout = false;
			}
		},
		getModeChangeNotifier: function()
		{
			if(!this._modeChangeNotifier)
			{
				this._modeChangeNotifier = BX.CrmNotifier.create(this);
			}
			return this._modeChangeNotifier;
		},
		onBeforeModeChange: function()
		{
		},
		doSetMode: function(mode)
		{
		},
		onAfterModeChange: function()
		{
			if(this._modeChangeNotifier)
			{
				this._modeChangeNotifier.notify();
			}
		},
		canChangeMode: function(mode)
		{
			if(mode === BX.Crm.EntityEditorMode.edit)
			{
				return this.isEditable();
			}
			return true;
		},
		isModeToggleEnabled: function()
		{
			return this._editor.isModeToggleEnabled();
		},
		toggleMode: function(notify, options)
		{
			if(!this.isModeToggleEnabled())
			{
				return false;
			}

			this.setMode(
				this._mode === BX.Crm.EntityEditorMode.view
					? BX.Crm.EntityEditorMode.edit : BX.Crm.EntityEditorMode.view,
				{ notify: notify }
			);

			if(BX.prop.getBoolean(options, "refreshLayout", true))
			{
				this.refreshLayout();
			}
			return true;
		},
		isEditInViewEnabled: function()
		{
			//"Edit in View" - control value may be changed in view mode
			return(this._editor
				&& this._editor.isEditInViewEnabled()
				&& this.getDataBooleanParam("enableEditInView", false)
			);
		},
		isSingleEditEnabled: function()
		{
			//"Single Edit" - control may be switched to edit mode independently of parent control (section)
			return(
				this.isModeToggleEnabled()
				&& this.isEditable()
				&& !this.getDataBooleanParam("enableEditInView", false)
				&& this.getDataBooleanParam("enableSingleEdit", true)
			);
		},
		isInSingleEditMode: function()
		{
			if(!this.isInEditMode())
			{
				return false;
			}

			return(this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive)
				|| this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			);
		},
		isInEditMode: function()
		{
			return this._mode === BX.Crm.EntityEditorMode.edit;
		},
		isInViewMode: function()
		{
			return this._mode === BX.Crm.EntityEditorMode.view;
		},
		checkModeOption: function(option)
		{
			return BX.Crm.EntityEditorModeOptions.check(this._modeOptions, option);
		},
		getContextId: function()
		{
			return this._editor ? this._editor.getContextId() : '';
		},
		getExternalContextId: function()
		{
			return this._editor ? this._editor.getExternalContextId() : '';
		},
		processAvailableSchemeElementsChange: function()
		{
		},
		processChildControlModeChange: function(control)
		{
		},
		processChildControlChange: function(control, params)
		{
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		markAsChanged: function(params)
		{
			if(typeof(params) === "undefined")
			{
				params = {};
			}

			var control = BX.prop.get(params, "control", null);
			if(!(control && control instanceof BX.Crm.EntityEditorControl))
			{
				control = params["control"] = this;
			}

			if(!control.isInEditMode())
			{
				return;
			}

			if(!this._isChanged)
			{
				this._isChanged = true;
			}

			this.notifyChanged(params);
		},
		isSchemeChanged: function()
		{
			return this._isSchemeChanged;
		},
		markSchemeAsChanged: function()
		{
			if(this._isSchemeChanged)
			{
				return;
			}

			this._isSchemeChanged = true;
		},
		saveScheme: function()
		{
			if(!this._isSchemeChanged)
			{
				return;
			}

			this.commitSchemeChanges();
			return this._editor.saveScheme();
		},
		commitSchemeChanges: function()
		{
			if(!this._isSchemeChanged)
			{
				return;
			}

			this._editor.updateSchemeElement(this._schemeElement);
			this._isSchemeChanged = false;
		},
		getRootContainer: function()
		{
			return this._editor ? this._editor.getContainer() : null;
		},
		getRootContainerPosition: function()
		{
			return BX.pos(this.getRootContainer());
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function (container)
		{
			this._container = container;
			if(this._hasLayout)
			{
				this._hasLayout = false;
			}
		},
		getWrapper: function()
		{
			return this._wrapper;
		},
		enablePointerEvents: function(enable)
		{
			if(this._wrapper)
			{
				this._wrapper.style.pointerEvents = enable ? "" : "none";
			}
		},
		getModel: function()
		{
			return this._model;
		},
		getSchemeElement: function()
		{
			return this._schemeElement;
		},
		hasScheme: function()
		{
			return !!this._schemeElement;
		},
		getDataBooleanParam: function(name, defaultval)
		{
			return(this._schemeElement
				? this._schemeElement.getDataBooleanParam(name, defaultval)
				: defaultval
			);
		},
		hasLayout: function()
		{
			return this._hasLayout;
		},
		layout: function(options)
		{
		},
		registerLayout:  function(options)
		{
			if(!this._wrapper)
			{
				return;
			}

			this._wrapper.setAttribute("data-cid", this.getId());

			//HACK: Fix positions of context menu and drag button for readonly fields in editing section
			if(this.isInViewMode() && this._parent && this._parent.isInEditMode())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-readonly");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-readonly");
			}

			if(typeof options === "undefined")
			{
				options = {};
			}

			if(!BX.prop.getBoolean(options, "preservePosision", false))
			{
				var anchor = BX.prop.getElementNode(options, "anchor", null);
				if (anchor)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-hide");
					this._container.insertBefore(this._wrapper, anchor);
					setTimeout(BX.delegate(function ()
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-hide");
						BX.addClass(this._wrapper, "crm-entity-widget-content-show");
					}, this), 1);
					setTimeout(BX.delegate(function ()
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-show");
					}, this), 310);
				}
				else
				{
					this._container.appendChild(this._wrapper);
				}
			}

			this._isValidLayout = true;
			this.doRegisterLayout();
		},
		doRegisterLayout: function()
		{
		},
		refreshLayout: function(options)
		{
			if(!this._hasLayout)
			{
				return;
			}

			this.closeContextMenu();

			this.clearLayout({ preservePosision: true });
			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(BX.prop.getBoolean(options, "reset", false))
			{
				this.reset();
			}

			options["preservePosision"] = true;
			this.layout(options);
		},
		clearLayout: function(options)
		{
		},
		refreshTitleLayout: function()
		{
		},
		releaseLayout: function ()
		{
			this._wrapper = null;
		},
		release: function()
		{
		},
		reset: function()
		{
		},
		hide: function()
		{
			if(this.isRequired() || this.isRequiredConditionally())
			{
				return;
			}

			if(this._parent)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-hide");
				setTimeout(BX.delegate(function ()
				{
					this._parent.removeChild(this);
				}, this), 350);
			}
			else
			{
				this.clearLayout();
			}
		},
		showMessageDialog: function(id, title, content)
		{
			if(this._editor)
			{
				this._editor.showMessageDialog(id, title, content);
			}
		},
		prepareSaveData: function(data)
		{
		},
		onBeforeSubmit: function()
		{
		},
		onHideButtonClick: function(e)
		{
			this.hide();
		},
		onContextButtonClick: function(e)
		{
			if(!this._isContextMenuOpened)
			{
				this.openContextMenu();
			}
			else
			{
				this.closeContextMenu();
			}
		},
		openContextMenu: function()
		{
			if(this._isContextMenuOpened)
			{
				return;
			}

			var menu = this.prepareContextMenuItems();
			if(BX.type.isArray(menu) && menu.length > 0)
			{
				var handler = BX.delegate( this.onContextMenuItemSelect, this);
				for(var i = 0, length = menu.length; i < length; i++)
				{
					if(typeof menu[i]["onclick"] === "undefined")
					{
						menu[i]["onclick"] = handler;
					}
				}
				BX.PopupMenu.show(
					this._id,
					this._contextMenuButton,
					menu,
					{
						angle: false,
						events:
							{
								onPopupShow: BX.delegate(this.onContextMenuShow, this),
								onPopupClose: BX.delegate(this.onContextMenuClose, this)
							}
					}
				);
			}
		},
		prepareContextMenuItems: function()
		{
			return [];
		},
		processContextMenuCommand: function(e, command)
		{
		},
		closeContextMenu: function()
		{
			var menu = BX.PopupMenu.getMenuById(this._id);
			if(menu)
			{
				menu.popupWindow.close();
			}
		},
		onContextMenuShow: function()
		{
			this._isContextMenuOpened = true;
		},
		onContextMenuClose: function()
		{
			BX.PopupMenu.destroy(this._id);
			this._isContextMenuOpened = false;
		},
		onContextMenuItemSelect: function(e, item)
		{
			this.processContextMenuCommand(e, BX.prop.getString(item, "value"));
		},
		onChange: function(e)
		{
			this.markAsChanged();
		},
		notifyChanged: function(params)
		{
			if(typeof(params) === "undefined")
			{
				params = {};
			}

			if(this._parent)
			{
				this._parent.processChildControlChange(this, params);
			}
			else if(this._editor)
			{
				this._editor.processControlChange(this, params);
			}
		},
		getDragObjectType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getChildDragObjectType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getDragScope: function()
		{
			if(this._parent)
			{
				return this._parent.getChildDragScope();
			}

			if(!this._editor)
			{
				return BX.Crm.EditorDragScope.getDefault();
			}

			return BX.prop.getInteger(
				this._editor.getDragConfig(this.getDragObjectType()),
				"scope",
				BX.Crm.EditorDragScope.getDefault()
			);
		},
		getChildDragScope: function()
		{
			if(!this._editor)
			{
				return BX.Crm.EditorDragScope.getDefault();
			}

			return BX.prop.getInteger(
				this._editor.getDragConfig(this.getChildDragObjectType()),
				"scope",
				BX.Crm.EditorDragScope.getDefault()
			);
		},
		getDraggableContextId: function()
		{
			return this._draggableContextId;
		},
		setDraggableContextId: function(contextId)
		{
			this._draggableContextId = contextId;
		},
		createDragButton: function()
		{
			return this._dragButton;
		},
		createHideButton: function()
		{
			var enabled = !this.isRequired() && !this.isRequiredConditionally();
			var button = BX.create(
				"div",
				{
					props:
					{
						className: "crm-entity-widget-content-block-hide-btn",
						title: this.getHideButtonHint(enabled)
					}
				}
			);

			if(enabled)
			{
				BX.bind(button, "click", BX.delegate(this.onHideButtonClick, this));
			}
			return button;
		},
		createContextMenuButton: function()
		{
			this._contextMenuButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-context-menu" },
					events: { click: BX.delegate(this.onContextButtonClick, this) }
				}
			);

			return this._contextMenuButton;
		},
		createGhostNode:function()
		{
			return null;
		},
		getHideButtonHint: function(enabled)
		{
			return "";
		},
		isWaitingForInput: function()
		{
			return false;
		}
	};
	if(typeof(BX.Crm.EntityEditorControl.messages) === "undefined")
	{
		BX.Crm.EntityEditorControl.messages = {};
	}
}

if(typeof BX.Crm.EntityEditorField === "undefined")
{
	BX.Crm.EntityEditorField = function()
	{
		BX.Crm.EntityEditorField.superclass.constructor.apply(this);
		this._titleWrapper = null;

		this._singleEditButton = null;
		this._singleEditButtonHandler = BX.delegate(this.onSingleEditBtnClick, this);
		this._singleEditController = null;
		this._singleEditTimeoutHandle = 0;

		this._viewController = null;

		this._validators = null;
		this._hasError = false;
		this._errorContainer = null;

		this._layoutAttributes = null;
		this._spotlight = null;

		this._dragObjectType = BX.Crm.EditorDragObjectType.field;
	};
	BX.extend(BX.Crm.EntityEditorField, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorField.prototype.isNewEntity = function()
	{
		return this._editor && this._editor.isNew();
	};
	BX.Crm.EntityEditorField.prototype.configure = function()
	{
		if(this._parent)
		{
			this._parent.editChildConfiguration(this);
		}
	};
	BX.Crm.EntityEditorField.prototype.hasAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.hasAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.getAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.getAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.setAttributeConfiguration = function(configuration)
	{
		return this._schemeElement.setAttributeConfiguration(configuration);
	};
	BX.Crm.EntityEditorField.prototype.removeAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.removeAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.getDuplicateControlConfig = function()
	{
		return this._schemeElement ? this._schemeElement.getDataObjectParam("duplicateControl", null) : null;
	};
	BX.Crm.EntityEditorField.prototype.markAsChanged = function(params)
	{
		BX.Crm.EntityEditorField.superclass.markAsChanged.apply(this, arguments);
		if(this.hasError())
		{
			this.clearError();
		}

		var validators = this.getValidators();
		for(var i = 0, length = validators.length; i < length; i++)
		{
			validators[i].processFieldChange(this);
		}
	};
	BX.Crm.EntityEditorField.prototype.bindModel = function()
	{
		this._model.addChangeListener(BX.delegate(this.onModelChange, this));
		this._model.addLockListener(BX.delegate(this.onModelLock, this));
	};
	BX.Crm.EntityEditorField.prototype.onBeforeModeChange = function()
	{
		//Enable animation if it is going to view mode
		this._layoutAttributes = null;
		if(this.isInEditMode())
		{
			this._layoutAttributes = { animate: "show" };
		}
	};
	BX.Crm.EntityEditorField.prototype.onModelChange = function(sender, params)
	{
		this.processModelChange(params);
	};
	BX.Crm.EntityEditorField.prototype.onModelLock = function(sender, params)
	{
		this.processModelLock(params);
	};
	BX.Crm.EntityEditorField.prototype.processModelChange = function(params)
	{
	};
	BX.Crm.EntityEditorField.prototype.processModelLock = function(params)
	{
	};
	BX.Crm.EntityEditorField.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorField.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorField.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorField.prototype.hasContentWrapper = function()
	{
		return this.getContentWrapper() !== null;
	};
	BX.Crm.EntityEditorField.prototype.getContentWrapper = function()
	{
		return null;
	};
	BX.Crm.EntityEditorField.prototype.getHideButtonHint = function(enabled)
	{
		return this.getMessage(
			enabled ? "hideButtonHint" : "hideButtonDisabledHint"
		);
	};
	BX.Crm.EntityEditorField.prototype.getEditButton = function()
	{
		return this._singleEditButton;
	};
	BX.Crm.EntityEditorField.prototype.ensureWrapperCreated = function(params)
	{
		if(!this._wrapper)
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });
		}

		this.createAdditionalWrapperBlock();

		var classNames = BX.prop.getArray(params, "classNames", []);
		for(var i = 0, length = classNames.length;  i < length; i++)
		{
			BX.addClass(this._wrapper, classNames[i]);
		}
		return this._wrapper;
	};
	BX.Crm.EntityEditorField.prototype.createAdditionalWrapperBlock = function()
	{
		if(!this._wrapper)
		{
			return;
		}

		var additionalBlock = BX.create("div", {
			props: { className: "crm-entity-widget-before-action" },
			attrs: { "data-field-tag": this.getId() }
		});

		this._wrapper.appendChild(additionalBlock);

	};
	BX.Crm.EntityEditorField.prototype.adjustWrapper = function()
	{
		if(!this._wrapper)
		{
			return;
		}

		if(this.isInEditMode()
			&& (this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive)
				|| this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			)
		)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-edit");
		}
		else
		{
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-edit");
		}

		//region Applying layout attributes
		/*
		for(var i = this._wrapper.attributes.length - 1; i >= 0; i--)
		{
			this._wrapper.removeAttribute(this._wrapper.attributes[i].name);
		}
		*/
		if(this._layoutAttributes)
		{
			for(var key in this._layoutAttributes)
			{
				if(this._layoutAttributes.hasOwnProperty(key))
				{
					this._wrapper.setAttribute("data-" + key, this._layoutAttributes[key]);
				}
			}
			this._layoutAttributes = null;
		}
		//endregion
	};
	BX.Crm.EntityEditorField.prototype.createTitleNode = function(title)
	{
		this._titleWrapper = BX.create(
			"div",
			{
				attrs: { className: "crm-entity-widget-content-block-title" }
			}
		);

		this.prepareTitleLayout(BX.type.isNotEmptyString(title) ? title : this.getTitle());
		return this._titleWrapper;
	};
	BX.Crm.EntityEditorField.prototype.prepareTitleLayout = function(title)
	{
		if(!this._titleWrapper)
		{
			return;
		}

		var titleNode = BX.create("span",
			{ attrs: { className: "crm-entity-widget-content-block-title-text" }, text: title }
		);

		var marker = this.createTitleMarker();
		if(marker)
		{
			titleNode.appendChild(marker);
		}
		this._titleWrapper.appendChild(titleNode);

		var actionControls = this.createTitleActionControls();
		if(actionControls.length > 0)
		{
			var actionWrapper = BX.create("span", { attrs: { className: "crm-entity-widget-content-block-title-actions" } });
			this._titleWrapper.appendChild(actionWrapper);

			for(var i = 0, length = actionControls.length; i < length; i++)
			{
				actionWrapper.appendChild(actionControls[i]);
			}
		}

		/*
		var editButton = this.createEditButton();
		if(editButton)
		{
			this._titleWrapper.appendChild(editButton);
		}
		*/
	};
	BX.Crm.EntityEditorField.prototype.refreshTitleLayout = function()
	{
		if(!this._titleWrapper)
		{
			return;
		}

		BX.cleanNode(this._titleWrapper);
		this.prepareTitleLayout(this.getTitle());
	};
	BX.Crm.EntityEditorField.prototype.createTitleMarker = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			return null;
		}

		if(this.isRequired())
		{
			return BX.create("span", { style: { color: "#f00", verticalAlign: "super" }, text: "*" });
		}
		else if(this.isRequiredConditionally())
		{
			return BX.create("span", { text: "*" });
		}
		return null;
	};
	BX.Crm.EntityEditorField.prototype.createEditButton = function()
	{
		if(!(this.isInViewMode() && this.isSingleEditEnabled()))
		{
			return null;
		}

		if(!this._singleEditButton)
		{
			this._singleEditButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-card-widget-title-edit-icon" }
				}
			);
		}
		return this._singleEditButton;
	};
	BX.Crm.EntityEditorField.prototype.createTitleActionControls = function()
	{
		return [];
	};
	BX.Crm.EntityEditorField.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-widget-content-block-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorField.prototype.createGhostNode = function()
	{
		if(!this._wrapper)
		{
			return null;
		}

		var pos = BX.pos(this._wrapper);
		var node = this._wrapper.cloneNode(true);
		BX.addClass(node, "crm-entity-widget-content-block-drag");
		node.style.width = pos.width + "px";
		node.style.height = pos.height + "px";
		return node;
	};
	BX.Crm.EntityEditorField.prototype.clearLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		this.releaseLightingAbilities();

		BX.Crm.EntityEditorField.superclass.clearLayout.apply(this, arguments);

		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this.releaseDragDropAbilities();
		this.releaseSwitchingAbilities();

		if(!BX.prop.getBoolean(options, "preservePosision", false))
		{
			this._wrapper = BX.remove(this._wrapper);
		}
		else
		{
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-click-editable");
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-click-empty");
			this._wrapper = BX.cleanNode(this._wrapper);
			if(this.hasError())
			{
				this.clearError();
			}
		}

		if(this._singleEditButton)
		{
			this._singleEditButton = null;
		}

		this.doClearLayout(options);

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorField.prototype.doClearLayout = function(options)
	{
	};
	BX.Crm.EntityEditorField.prototype.registerLayout = function(options)
	{
		var isVisible = this.isVisible();
		var isNeedToDisplay = this.isNeedToDisplay();

		this._wrapper.style.display = (isVisible && isNeedToDisplay) ? "" : "none";

		this.initializeSwitchingAbilities();
		if(this.isInEditMode() && this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual))
		{
			window.setTimeout(BX.delegate(this.focus, this), 0);
		}
		BX.Crm.EntityEditorField.superclass.registerLayout.apply(this, arguments);

		var lighting = BX.prop.getObject(options, "lighting", null);
		if(lighting)
		{
			window.setTimeout(
				function(){ this.initializeLightingAbilities(lighting); }.bind(this),
				1000
			)
		}

		if(!isNeedToDisplay && BX.prop.getBoolean(options, "notifyIfNotDisplayed", false))
		{
			BX.UI.Notification.Center.notify(
				{
					content: this.getMessage("hiddenInViewMode").replace(/#TITLE#/gi, this.getTitle()),
					position: "top-center",
					autoHideDelay: 5000
				}
			);
		}
	};
	BX.Crm.EntityEditorField.prototype.raiseLayoutEvent = function()
	{
		BX.onCustomEvent(window, "BX.Crm.EntityEditorField:onLayout", [ this ]);
	};
	BX.Crm.EntityEditorField.prototype.hasContentToDisplay = function()
	{
		return this.hasValue();
	};
	BX.Crm.EntityEditorField.prototype.isNeedToDisplay = function(options)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit
			|| this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
		)
		{
			return true;
		}

		if(this._editor && BX.prop.getBoolean(options, "enableLayoutResolvers", true))
		{
			return BX.prop.getBoolean(
				this._editor.prepareFieldLayoutOptions(this),
				"isNeedToDisplay",
				true
			);
		}

		return this.hasContentToDisplay();
	};
	BX.Crm.EntityEditorField.prototype.isWaitingForInput = function()
	{
		return this.isInEditMode() && this.isRequired() && !this.hasValue();
	};
	BX.Crm.EntityEditorField.prototype.hide = function()
	{
		if(!(this.isRequired() || this.isRequiredConditionally()))
		{
			BX.Crm.EntityEditorField.superclass.hide.apply(this, arguments);
		}
		else
		{
			this.showMessageDialog(
				"operationDenied",
				this.getMessage("hideDeniedDlgTitle"),
				this.getMessage("hideDeniedDlgContent")
			);
		}
	};
	//region Value
	BX.Crm.EntityEditorField.prototype.getEditPriority = function()
	{
		var hasValue = this.hasValue();
		if(!hasValue && (this.isRequired() || this.isRequiredConditionally()))
		{
			return BX.Crm.EntityEditorPriority.high;
		}

		if(!this._editor.isNew())
		{
			return BX.Crm.EntityEditorPriority.normal;
		}

		return hasValue ? BX.Crm.EntityEditorPriority.high : this.doGetEditPriority();
	};
	BX.Crm.EntityEditorField.prototype.doGetEditPriority = function()
	{
		return BX.Crm.EntityEditorPriority.normal;
	};
	BX.Crm.EntityEditorField.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.type.isString(value))
		{
			return value.trim() !== "";
		}
		return (value !== null && value !== undefined);
	};
	BX.Crm.EntityEditorField.prototype.setupFromModel = function(model, options)
	{
		if(!model)
		{
			model = this._model;
		}

		if(!model)
		{
			return;
		}

		var data = this.getRelatedModelData(model);
		this._model.updateData(data, options);
	};
	BX.Crm.EntityEditorField.prototype.getRelatedModelData = function(model)
	{
		if(!model)
		{
			model = this._model;
		}

		if(!model)
		{
			return {};
		}

		var data = {};
		var keys = this.getRelatedDataKeys();
		for(var i = 0, length = keys.length; i < length; i++)
		{
			var key = keys[i];
			if(key !== "")
			{
				data[key] = model.getField(key, null);
			}
		}
		return data;
	};
	BX.Crm.EntityEditorField.prototype.getRelatedDataKeys = function()
	{
		return [this.getDataKey()];
	};
	BX.Crm.EntityEditorField.prototype.hasValue = function()
	{
		return this.checkIfNotEmpty(this.getValue());
	};
	BX.Crm.EntityEditorField.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getField(
				this.getDataKey(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorField.prototype.getStringValue = function(defaultValue)
	{
		return this._model ? this._model.getStringField(this.getName(), defaultValue) : "";
	};
	BX.Crm.EntityEditorField.prototype.getRuntimeValue = function()
	{
		return "";
	};
	BX.Crm.EntityEditorField.prototype.getDataKey = function()
	{
		return this.getName();
	};
	BX.Crm.EntityEditorField.prototype.prepareSaveData = function(data)
	{
		data[this.getDataKey()] = this.getValue();
	};
	//endregion
	//region Validators
	BX.Crm.EntityEditorField.prototype.findValidatorIndex = function(validator)
	{
		if(!this._validators)
		{
			return -1;
		}

		for(var i = 0, length = this._validators.length; i < length; i++)
		{
			if(this._validators[i] === validator)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorField.prototype.addValidator = function(validator)
	{
		if(validator && this.findValidatorIndex(validator) < 0)
		{
			if(!this._validators)
			{
				this._validators = [];
			}
			this._validators.push(validator);
		}
	};
	BX.Crm.EntityEditorField.prototype.removeValidator = function(validator)
	{
		if(!this._validators || !validator)
		{
			return;
		}

		var index = this.findValidatorIndex(validator);
		if(index >= 0)
		{
			this._validators.splice(index, 1);
		}
	};
	BX.Crm.EntityEditorField.prototype.getValidators = function()
	{
		return this._validators ? this._validators : [];
	};
	BX.Crm.EntityEditorField.prototype.hasValidators = function()
	{
		return this._validators && this._validators.length > 0;
	};
	BX.Crm.EntityEditorField.prototype.executeValidators = function(result)
	{
		if(!this._validators)
		{
			return true;
		}

		var isValid = true;
		for(var i = 0, length = this._validators.length; i < length; i++)
		{
			if(!this._validators[i].validate(result))
			{
				isValid = false;
			}
		}
		return isValid;
	};
	//endregion
	BX.Crm.EntityEditorField.prototype.hasError =  function()
	{
		return this._hasError;
	};
	BX.Crm.EntityEditorField.prototype.showError =  function(error, anchor)
	{
		if(!this._errorContainer)
		{
			this._errorContainer = BX.create(
				"div",
				{ attrs: { className: "crm-entity-widget-content-error-text" } }
			);
		}

		this._errorContainer.innerHTML = error;
		this._wrapper.appendChild(this._errorContainer);
		BX.addClass(this._wrapper, "crm-entity-widget-content-error");
		this._hasError = true;
	};
	BX.Crm.EntityEditorField.prototype.showRequiredFieldError =  function(anchor)
	{
		this.showError(this.getMessage("requiredFieldError"), anchor);
	};
	BX.Crm.EntityEditorField.prototype.clearError =  function()
	{
		if(!this._hasError)
		{
			return;
		}

		if(this._errorContainer && this._errorContainer.parentNode)
		{
			this._errorContainer.parentNode.removeChild(this._errorContainer);
		}
		BX.removeClass(this._wrapper, "crm-entity-widget-content-error");
		this._hasError = false;
	};
	BX.Crm.EntityEditorField.prototype.scrollAnimate = function()
	{
		var doc = BX.GetDocElement(document);
		var anchor = this._wrapper;
		window.setTimeout(
			function()
			{
				(new BX.easing(
						{
							duration : 300,
							start : { position: doc.scrollTop },
							finish: { position: BX.pos(anchor).top - 10 },
							step: function(state)
							{
								doc.scrollTop = state.position;
							}
						}
					)
				).animate();
			},
			0
		);
	};
	BX.Crm.EntityEditorField.prototype.setDragObjectType = function(type)
	{
		this._dragObjectType = type;
	};
	BX.Crm.EntityEditorField.prototype.getDragObjectType = function()
	{
		return this._dragObjectType;
	};
	BX.Crm.EntityEditorField.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"field_" +  this.getId(),
			{
				charge: BX.Crm.EditorFieldDragItem.create(
					{
						control: this,
						contextId: this._draggableContextId,
						scope: this.getDragScope()
					}
				),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorField.prototype.releaseDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			this._dragItem.release();
			this._dragItem = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.initializeSwitchingAbilities = function()
	{
		if(this.isInViewMode())
		{
			if(this.isSingleEditEnabled())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-click-editable");
				if(!this.hasContentToDisplay())
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-click-empty");
				}

				if(this._singleEditButton)
				{
					BX.bind(this._singleEditButton, "click", this._singleEditButtonHandler);
				}
			}

			if(this.hasContentWrapper()
				&& BX.Crm.EntityEditorModeSwitchType.check(
					this.getModeSwitchType(BX.Crm.EntityEditorMode.edit),
					BX.Crm.EntityEditorModeSwitchType.content
				)
			)
			{
				this._viewController = BX.Crm.EditorFieldViewController.create(
					this._id,
					{ field: this, wrapper: this.getContentWrapper() }
				);
			}
		}
		else if(this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive))
		{
			this._singleEditController = BX.Crm.EditorFieldSingleEditController.create(
				this._id,
				{ field: this }
			);
		}
	};
	BX.Crm.EntityEditorField.prototype.releaseSwitchingAbilities = function()
	{
		if(this._singleEditButton)
		{
			BX.unbind(this._singleEditButton, "click", this._singleEditButtonHandler);
		}

		if(this._viewController)
		{
			this._viewController.release();
			this._viewController = null;
		}

		if(this._singleEditController)
		{
			this._singleEditController.release();
			this._singleEditController = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.initializeLightingAbilities = function(params)
	{
		var text = BX.prop.getString(params, "text", "");
		if(!BX.type.isNotEmptyString(text))
		{
			return;
		}

		var wrapper = this.getContentWrapper();
		if(!wrapper)
		{
			return;
		}

		this._spotlight = new BX.SpotLight(
			{
				id: BX.prop.getString(params, "id", ""),
				targetElement: wrapper,
				autoSave: true,
				content: text,
				targetVertex: "middle-left",
				zIndex: 200
			}
		);
		this._spotlight.show();

		var events = BX.prop.getObject(params, "events", {});
		for(var key in events)
		{
			if(events.hasOwnProperty(key))
			{
				BX.addCustomEvent(this._spotlight, key, events[key]);
			}
		}
	};
	BX.Crm.EntityEditorField.prototype.releaseLightingAbilities = function()
	{
		if(this._spotlight)
		{
			this._spotlight.close();
			this._spotlight = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.prepareContextMenuItems = function()
	{
		var results = [];
		results.push({ value: "hide", text: this.getMessage("hide") });
		results.push({ value: "configure", text: this.getMessage("configure") });

		if (this._parent && this._parent.hasAdditionalMenu())
		{
			var additionalMenu = this._parent.getAdditionalMenu();
			for (var i=0; i<additionalMenu.length; i++)
			{
				results.push(additionalMenu[i]);
			}
		}

		results.push(
			{
				value: "showAlways",
				text: '<label class="crm-context-menu-item-hide-empty-wrap">' +
				'<input type="checkbox"' +
				(this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways) ? ' checked = "true"' : '') +
				' class="crm-context-menu-item-hide-empty-input">' +
				'<span class="crm-context-menu-item-hide-empty-text">' +
				this.getMessage("showAlways") +
				'</span></label>'
			}
		);

		this.doPrepareContextMenuItems(results);
		return results;
	};
	BX.Crm.EntityEditorField.prototype.doPrepareContextMenuItems = function(menuItems)
	{
	};
	BX.Crm.EntityEditorField.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "showAlways")
		{
			var target = BX.getEventTarget(e);
			if(target && target.tagName === "INPUT")
			{
				this.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
				if(this._parent)
				{
					this._parent.processChildControlSchemeChange(this);
				}

				if(!this.isNeedToDisplay())
				{
					window.setTimeout(BX.delegate(this.clearLayout, this), 500);
					BX.UI.Notification.Center.notify(
						{
							content: this.getMessage("isHiddenDueToShowAlwaysChanged").replace(/#TITLE#/gi, this.getTitle()),
							position: "top-center",
							autoHideDelay: 5000
						}
					);
					this.closeContextMenu();
				}
			}
			return;
		}

		if(command === "hide")
		{
			window.setTimeout(BX.delegate(this.hide, this), 500);
		}
		else if(command === "configure")
		{
			this.configure();
		}
		else if (this._parent && this._parent.hasAdditionalMenu())
		{
			this._parent.processChildAdditionalMenuCommand(this, command);
		}
		this.closeContextMenu();
	};
	BX.Crm.EntityEditorField.prototype.onSingleEditBtnClick = function(e)
	{
		if(!(this.isSingleEditEnabled() && this._editor))
		{
			return;
		}

		if(this._singleEditTimeoutHandle > 0)
		{
			window.clearTimeout(this._singleEditTimeoutHandle);
			this._singleEditTimeoutHandle = 0;
		}

		this._singleEditTimeoutHandle = window.setTimeout(
			BX.delegate(this.switchToSingleEditMode, this),
			250
		);

		BX.eventCancelBubble(e);
	};
	BX.Crm.EntityEditorField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button;
		}
		return result;
	};
	BX.Crm.EntityEditorField.prototype.switchToSingleEditMode = function(targetNode)
	{
		if(!(this.isSingleEditEnabled() && this._editor))
		{
			return;
		}

		this._singleEditTimeoutHandle = 0;

		if(this._editor)
		{
			this._editor.switchControlMode(
				this,
				BX.Crm.EntityEditorMode.edit,
				BX.Crm.EntityEditorModeOptions.individual
			);
		}
	};
	if(typeof(BX.Crm.EntityEditorField.messages) === "undefined")
	{
		BX.Crm.EntityEditorField.messages = {};
	}
}

if(typeof BX.Crm.EntityEditorSection === "undefined")
{
	BX.Crm.EntityEditorSection = function()
	{
		BX.Crm.EntityEditorSection.superclass.constructor.apply(this);
		this._fields = null;
		this._fieldConfigurator = null;
		this._userFieldConfigurator = null;
		this._mandatoryConfigurator = null;

		this._titleWrapper = null;
		this._titleEditButton = null;
		this._titleEditHandler = BX.delegate(this.onTitleEditButtonClick, this);
		this._titleView = null;
		this._titleInput = null;
		this._titleMode = BX.Crm.EntityEditorMode.intermediate;
		this._titleInputKeyHandler = BX.delegate(this.onTitleInputKeyPress, this);
		this._documentClickHandler = BX.delegate(this.onExternalClick, this);

		this._enableToggling = true;
		this._toggleButton = null;

		this._buttonPanelWrapper = null;

		this._addChildButton = null;
		this._addChildButtonHandler = BX.delegate(this.onAddChildBtnClick, this);

		this._createChildButton = null;
		this._createChildButtonHandler = BX.delegate(this.onCreateUserFieldBtnClick, this);

		this._deleteButton = null;
		this._deleteButtonHandler = BX.delegate(this.onDeleteSectionBtnClick, this);
		this._detetionConfirmDlgId = "section_deletion_confirm";

		this._childSelectMenu = null;
		this._fieldTypeSelectMenu = null;

		this._dragContainerController = null;
		this._dragPlaceHolder = null;
		this._dropHandler = BX.delegate(this.onDrop, this);
		this._titleActions = null;

		this._fieldSelector = null;
		this._stub = null;

		this._detailButton = null;
	};
	BX.extend(BX.Crm.EntityEditorSection, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorSection.prototype.doSetActive = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].setActive(this._isActive);
		}
	};
	//region Initialization
	BX.Crm.EntityEditorSection.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorSection.superclass.initialize.call(this, id, settings);

		this._draggableContextId = BX.Crm.EditorFieldDragItem.contextId;
		if(this.getChildDragScope() === BX.Crm.EditorDragScope.parent)
		{
			this._draggableContextId += "_" + this.getId();
		}

		this.initializeFromModel();
	};
	BX.Crm.EntityEditorSection.prototype.initializeFromModel =  function()
	{
		var i, length;
		if(this._fields)
		{
			for(i = 0, length = this._fields.length; i < length; i++)
			{
				this._fields[i].release();
			}
		}

		this._fields = [];

		var elements = this._schemeElement.getElements();
		for(i = 0, length = elements.length; i < length; i++)
		{
			var element = elements[i];
			var field = this._editor.createControl(
				element.getType(),
				element.getName(),
				{ schemeElement: element, model: this._model, parent: this }
			);

			if(!field)
			{
				continue;
			}

			element.setParent(this._schemeElement);
			field.setMode(this._mode, { notify: false });
			this._fields.push(field);
		}
	};
	//endregion
	//region Layout
	BX.Crm.EntityEditorSection.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-card-widget-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorSection.prototype.createGhostNode = function()
	{
		if(!this._wrapper)
		{
			return null;
		}

		var pos = BX.pos(this._wrapper);
		var node =  BX.create("div",
			{
				props: { className: "crm-entity-card-widget-edit" },
				children :
					[
						BX.create("div",
							{
								props: { className: "crm-entity-card-widget-draggable-btn-container" },
								children:
									[
										BX.create(
											"div",
											{
												props: { className: "crm-entity-card-widget-draggable-btn" },
												children:
													[
														BX.create("div",
															{ props: { className: "crm-entity-card-widget-draggable-btn-inner" } }
														)
													]
											}
										)
									]
							}
						),
						BX.create("div",
							{
								props: { className: "crm-entity-card-widget-title" },
								children :
									[
										BX.create("span",
											{
												props: { className: "crm-entity-card-widget-title-text" },
												text: this._schemeElement.getTitle()
											}
										)
									]
							}
						)
					]
			}
		);
		BX.addClass(node, "crm-entity-widget-card-drag");
		node.style.width = pos.width + "px";
		return node;
	};
	BX.Crm.EntityEditorSection.prototype.getEditPriority = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].getEditPriority() === BX.Crm.EntityEditorPriority.high)
			{
				return BX.Crm.EntityEditorPriority.high;
			}
		}
		return BX.Crm.EntityEditorPriority.normal;
	};
	BX.Crm.EntityEditorSection.prototype.layout = function(options)
	{
		var i, length;

		//Create wrapper
		var title = this._schemeElement.getTitle();
		this._contentContainer = BX.create("div", {props: { className: 'crm-entity-widget-content' } });
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;

		var wrapperClassName = isViewMode
			? "crm-entity-card-widget"
			: "crm-entity-card-widget-edit";

		this._enableToggling = this.isModeToggleEnabled() && this._schemeElement.getDataBooleanParam("enableToggling", true);
		this._toggleButton = BX.create("span",
			{
				attrs: { className: "crm-entity-widget-hide-btn" },
				events: { click: BX.delegate(this.onToggleBtnClick, this) },
				text: this.getMessage(isViewMode ? "change" : "cancel")
			}
		);

		var url = BX.prop.getString(this.getEditor()._settings, "entityDetailsUrl", "");
		if (this.getEditor().isEmbedded() && url.length)
		{
			var sections = this.getEditor().getControls().filter(function(control)
			{
				return (control instanceof BX.Crm.EntityEditorSection);
			});

			if (sections.length && sections[0] === this)
			{
				this._detailButton = BX.create("a",
					{
						attrs: {
							className: "crm-entity-widget-detail-btn",
							href: url
						},
						text: this.getMessage("openDetails")
					}
				);
			}
		}

		if(!this._enableToggling)
		{
			this._toggleButton.style.display = "none";
		}

		this._titleMode = BX.Crm.EntityEditorMode.view;

		this._wrapper = BX.create("div", { props: { className: wrapperClassName }});

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._schemeElement.isTitleEnabled())
		{
			this._titleEditButton = BX.create("span",
				{
					props: { className: "crm-entity-card-widget-title-edit-icon" },
					events: { click: this._titleEditHandler }
				}
			);

			if(!this._editor.isSectionEditEnabled() || !this._editor.canChangeScheme())
			{
				this._titleEditButton.style.display = "none";
			}

			this._titleView = BX.create("span",
				{
					props: { className: "crm-entity-card-widget-title-text" },
					text: title
				}
			);
			this._titleInput = BX.create("input",
				{
					props: { className: "crm-entity-card-widget-title-text" },
					style: { display: "none" }
				}
			);
			this._titleActions = BX.create('div',
				{
					props: { className: 'crm-entity-widget-actions-block' },
					children : [ this._toggleButton]
				}
			);
			if (this._detailButton)
			{
				this._titleActions.appendChild(this._detailButton);
			}

			this._titleWrapper = BX.create('div',
				{
					props: { className: 'crm-entity-card-widget-title' },
					children :
						[
							BX.create('div',{
								style: {
									maxWidth: 'calc(100% - 30px)',
									minWidth: 0,
									flex: 1
								},
								children:
								[
									this._titleView,
									this._titleInput,
									this._titleEditButton
								]
							}),
							this._titleActions
						]
				}
			);

			this._wrapper.appendChild(this._titleWrapper);
		}

		this._wrapper.appendChild(this._contentContainer);

		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var anchor = BX.prop.getElementNode(options, "anchor", null);
		if (anchor)
		{
			this._container.insertBefore(this._wrapper, anchor);
		}
		else
		{
			this._container.appendChild(this._wrapper);
		}

		if(isViewMode && this._fields.length === 0)
		{
			this._contentContainer.appendChild(this.createStub());
		}

		var enableReset = BX.prop.getBoolean(options, "reset", false);
		//Layout fields
		var userFieldLoader = BX.prop.get(options, "userFieldLoader", null);
		if(!userFieldLoader)
		{
			userFieldLoader = BX.Crm.EntityUserFieldLayoutLoader.create(
				this._id,
				{ mode: this._mode, enableBatchMode: true, owner: this }
			);
		}

		var lighting = BX.prop.getObject(options, "lighting", null);
		var enableFocusGain = BX.prop.getBoolean(options, "enableFocusGain", true);
		var isLighted = false;
		for(i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			field.setContainer(this._contentContainer);
			field.setDraggableContextId(this._draggableContextId);

			//Force layout reset because of animation implementation
			field.releaseLayout();
			if(enableReset)
			{
				field.reset();
			}

			var layoutOptions = { userFieldLoader: userFieldLoader };
			if(!isLighted && lighting && field.isVisible() && field.isNeedToDisplay())
			{
				layoutOptions["lighting"] = lighting;
				isLighted = true;
			}

			field.layout(layoutOptions);
			if(enableFocusGain && !isViewMode && field.isHeading())
			{
				field.focus();
			}
		}

		if(userFieldLoader.getOwner() === this)
		{
			userFieldLoader.runBatch();
		}

		this._addChildButton = this._createChildButton = this._deleteButton = null;
		if(this._editor.canChangeScheme() && this._schemeElement.getDataBooleanParam('showButtonPanel', true))
		{
			this._buttonPanelWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });

			if(this._schemeElement.getDataBooleanParam("isChangeable", true))
			{
				this._addChildButton = BX.create("span",
					{
						props: { className: "crm-entity-widget-content-block-edit-action-btn" },
						text: this.getMessage("selectField"),
						events: { click: this._addChildButtonHandler }
					}
				);
				if(!this._editor.hasAvailableSchemeElements())
				{
					this._addChildButton.style.display = "none";
				}
				this._buttonPanelWrapper.appendChild(this._addChildButton);

				if(this._editor.getUserFieldManager().isCreationEnabled())
				{
					this._createChildButton = BX.create("span",
						{
							props: { className: "crm-entity-widget-content-block-edit-action-btn" },
							text: this.getMessage("createField"),
							events: { click: this._createChildButtonHandler }
						}
					);
					this._buttonPanelWrapper.appendChild(this._createChildButton);
				}
			}

			if(this._schemeElement.getDataBooleanParam("isRemovable", true))
			{
				var deleteClassName = "crm-entity-widget-content-block-edit-remove-btn";
				if (this.isRequired() || this.isRequiredConditionally())
				{
					deleteClassName = "crm-entity-widget-content-block-edit-remove-btn-disabled";
				}

				this._deleteButton = BX.create("span",
					{
						props: { className: deleteClassName },
						text: this.getMessage("deleteSection")
					}
				);
				this._buttonPanelWrapper.appendChild(this._deleteButton);
				BX.bind(this._deleteButton, "click", this._deleteButtonHandler);
			}

			this._contentContainer.appendChild(this._buttonPanelWrapper);
		}

		if(this.isDragEnabled())
		{
			this._dragContainerController = BX.Crm.EditorDragContainerController.create(
				"section_" + this.getId(),
				{
					charge: BX.Crm.EditorFieldDragContainer.create(
						{
							section: this,
							context: this._draggableContextId
						}
					),
					node: this._wrapper
				}
			);
			this._dragContainerController.addDragFinishListener(this._dropHandler);

			this.initializeDragDropAbilities();
		}

		//region Add custom Html
		var serialNumber = this._editor._controls.indexOf(this);
		var eventArgs =  { id: this._id, customNodes: [], serialNumber: serialNumber };
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onLayout", [ this, eventArgs ]);
		if(this._titleActions && BX.type.isArray(eventArgs["customNodes"]))
		{
			for(i = 0, length = eventArgs["customNodes"].length; i < length; i++)
			{
				var node = eventArgs["customNodes"][i];
				if(BX.type.isElementNode(node))
				{
					this._titleActions.appendChild(node);
				}
			}
		}
		//endregion

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorSection.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(this._dragContainerController)
		{
			this._dragContainerController.removeDragFinishListener(this._dropHandler);
			this._dragContainerController.release();
			this._dragContainerController = null;
		}
		this.releaseDragDropAbilities();

		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			field.clearLayout();
			field.setContainer(null);
			field.setDraggableContextId("");
		}

		if(this._addChildButton)
		{
			BX.unbind(this._addChildButton, "click", this._addChildButtonHandler);
			this._addChildButton = BX.remove(this._addChildButton);
		}

		if(this._createChildButton)
		{
			BX.unbind(this._createChildButton, "click", this._createChildButtonHandler);
			this._createChildButton = BX.remove(this._createChildButton);
		}

		if(this._deleteButton)
		{
			BX.unbind(this._deleteButton, "click", this._deleteButtonHandler);
			this._deleteButton = BX.remove(this._deleteButton);
		}

		if(this._buttonPanelWrapper)
		{
			this._buttonPanelWrapper = BX.remove(this._buttonPanelWrapper);
		}

		this._stub = null;
		this._titleWrapper = null;
		this._wrapper = BX.remove(this._wrapper);
		this._hasLayout = false;
	};
	BX.Crm.EntityEditorSection.prototype.refreshLayout = function(options)
	{
		options = BX.type.isPlainObject(options) ? BX.mergeEx({}, options) : {};

		//region CALLBACK
		var callback = BX.prop.getFunction(options, "callback", null);
		delete options["callback"];
		//endregion

		//region ANCHOR
		delete options["anchor"];
		if(this._wrapper && this._wrapper.nextSibling)
		{
			options["anchor"] = this._wrapper.nextSibling;
		}
		//endregion

		//region LAYOUT
		this.clearLayout();
		this.layout(options);
		//endregion

		if(callback)
		{
			callback();
		}
	};
	BX.Crm.EntityEditorSection.prototype.createStub = function()
	{
		this._stub = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block" },
				children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-nothing-selected" },
								children:
									[
										BX.create(
											"div",
											{
												props: { className: "crm-entity-widget-content-nothing-selected-text" },
												text: this.getMessage("nothingSelected")
											}
										)
									]
							}
						)
					]
			}
		);

		if(this.isModeToggleEnabled())
		{
			BX.bind(this._stub, "click", BX.delegate(this.onStubClick, this));
		}

		return this._stub;
	};
	BX.Crm.EntityEditorSection.prototype.onStubClick = function(e)
	{
		this.toggle();
	};
	BX.Crm.EntityEditorSection.prototype.hasAdditionalMenu = function(e)
	{
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.getAdditionalMenu = function(e)
	{
		return [];
	};
	BX.Crm.EntityEditorSection.prototype.processChildAdditionalMenuCommand = function(child, command)
	{
	};
	BX.Crm.EntityEditorSection.prototype.ensureButtonPanelWrapperCreated = function()
	{
		if(!this._hasLayout)
		{
			throw "EntityEditorSection: Control does not have layout.";
		}

		if(!this._buttonPanelWrapper)
		{
			this._buttonPanelWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });
			this._contentContainer.appendChild(this._buttonPanelWrapper);
		}
		return this._buttonPanelWrapper;
	};
	//endregion
	//region Title Edit
	BX.Crm.EntityEditorSection.prototype.setTitleMode = function(mode)
	{
		if(this._titleMode === mode)
		{
			return;
		}

		this._titleMode = mode;

		if(!this._schemeElement.isTitleEnabled())
		{
			return;
		}

		if(this._titleMode === BX.Crm.EntityEditorMode.view)
		{
			this._titleView.style.display = "";
			this._titleInput.style.display = "none";
			this._titleEditButton.style.display = "";

			var title = this._titleInput.value;
			this._titleView.innerHTML = BX.util.htmlspecialchars(title);

			this._schemeElement.setTitle(title);
			this.markSchemeAsChanged();
			this.saveScheme();

			BX.unbind(this._titleInput, "keyup", this._titleInputKeyHandler);
			BX.unbind(window.document, "click", this._documentClickHandler);
		}
		else
		{
			this._titleView.style.display = "none";
			this._titleInput.style.display = "";
			this._titleEditButton.style.display = "none";

			this._titleInput.value = this._schemeElement.getTitle();

			BX.bind(this._titleInput, "keyup", this._titleInputKeyHandler);
			this._titleInput.focus();

			window.setTimeout(
				BX.delegate(function() { BX.bind(window.document, "click", this._documentClickHandler); }, this),
				100
			);
		}
	};
	BX.Crm.EntityEditorSection.prototype.toggleTitleMode = function()
	{
		this.setTitleMode(
			this._titleMode === BX.Crm.EntityEditorMode.view
				? BX.Crm.EntityEditorMode.edit
				: BX.Crm.EntityEditorMode.view
		);
	};
	BX.Crm.EntityEditorSection.prototype.onTitleEditButtonClick = function(e)
	{
		if(this._editor.isSectionEditEnabled())
		{
			this.toggleTitleMode();
		}
	};
	BX.Crm.EntityEditorSection.prototype.onTitleInputKeyPress = function(e)
	{
			if(!e)
			{
				e = window.event;
			}

			if(e.keyCode === 13)
			{
				this.toggleTitleMode();
			}
	};
	BX.Crm.EntityEditorSection.prototype.onExternalClick = function(e)
	{
		if(!e)
		{
			e = window.event;
		}

		if(this._titleInput !== BX.getEventTarget(e))
		{
			this.toggleTitleMode();
		}
	};
	//endregion
	//region Toggling & Mode control
	BX.Crm.EntityEditorSection.prototype.enableToggling = function(enable)
	{
		enable = !!enable;
		if(this._enableToggling === enable)
		{
			return;
		}

		this._enableToggling = enable;
		if(this._hasLayout)
		{
			this._toggleButton.style.display = this._enableToggling ? "" : "none";
		}
	};
	BX.Crm.EntityEditorSection.prototype.toggle = function()
	{
		if(this._enableToggling && this._editor)
		{
			var isViewMode = (this._mode === BX.Crm.EntityEditorMode.view);
			if (isViewMode)
			{
				this.releaseActiveControls();
			}
			this._editor.switchControlMode(
				this,
				isViewMode ? BX.Crm.EntityEditorMode.edit : BX.Crm.EntityEditorMode.view
			);
		}
	};
	BX.Crm.EntityEditorSection.prototype.releaseActiveControls = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var control = this._fields[i];
			this._editor.unregisterActiveControl(control);
		}
	};
	BX.Crm.EntityEditorSection.prototype.onToggleBtnClick = function(e)
	{
		this.toggle();
	};
	BX.Crm.EntityEditorSection.prototype.onBeforeModeChange = function()
	{
		this.removeFieldConfigurator();
		this.removeUserFieldConfigurator();
	};
	BX.Crm.EntityEditorSection.prototype.doSetMode = function(mode)
	{
		if(this._titleMode === BX.Crm.EntityEditorMode.edit)
		{
			this.toggleTitleMode();
		}
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].setMode(mode, { notify: false });
		}
	};
	//endregion
	//region Tracking of Changes, Validation, Saving and Rolling back
	BX.Crm.EntityEditorSection.prototype.processAvailableSchemeElementsChange = function()
	{
		if(this._hasLayout && BX.type.isDomNode(this._addChildButton))
		{
			this._addChildButton.style.display = this._editor.hasAvailableSchemeElements() ? "" : "none";
		}
	};
	BX.Crm.EntityEditorSection.prototype.validate = function(result)
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}

		var currentResult = BX.Crm.EntityValidationResult.create();
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getMode() !== BX.Crm.EntityEditorMode.edit)
			{
				continue;
			}

			field.validate(currentResult);
		}

		result.addResult(currentResult);
		return currentResult.getStatus();
	};
	BX.Crm.EntityEditorSection.prototype.commitSchemeChanges = function()
	{
		if(this._isSchemeChanged)
		{
			var schemeElements = [];
			for(var i = 0, length = this._fields.length; i < length; i++)
			{
				var schemeElement = this._fields[i].getSchemeElement();
				if(schemeElement)
				{
					schemeElements.push(schemeElement);
				}
			}
			this._schemeElement.setElements(schemeElements);
		}
		return BX.Crm.EntityEditorSection.superclass.commitSchemeChanges.call(this);
	};
	BX.Crm.EntityEditorSection.prototype.save = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].save();
		}
	};
	BX.Crm.EntityEditorSection.prototype.rollback = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].rollback();
		}

		if(this._isChanged)
		{
			this.initializeFromModel();
			this._isChanged = false;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onBeforeSubmit = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].onBeforeSubmit();
		}
	};
	//endregion
	//region Children & User Fields
	BX.Crm.EntityEditorSection.prototype.getChildIndex = function(child)
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i] === child)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorSection.prototype.addChild = function(child, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var related = null;
		var index = BX.prop.getInteger(options, "index", -1);
		if(index >= 0)
		{
			this._fields.splice(index, 0, child);
			if(index < (this._fields.length - 1))
			{
				related = this._fields[index + 1];
			}
		}
		else
		{
			this._fields.push(child);
			related = BX.prop.get(options, "related", null);
		}

		if(child.getParent() !== this)
		{
			child.setParent(this);
		}

		if(child.hasScheme())
		{
			child.getSchemeElement().setParent(this._schemeElement);
		}

		child.setActive(this._isActive);

		if(this._hasLayout)
		{
			child.setContainer(this._contentContainer);
			child.setDraggableContextId(this._draggableContextId);

			var layoutOpts = BX.prop.getObject(options, "layout", {});

			if(related)
			{
				layoutOpts["anchor"] = related.getWrapper();
			}
			else
			{
				layoutOpts["anchor"] = this._buttonPanelWrapper;
			}

			if(BX.prop.getBoolean(layoutOpts, "forceDisplay", false) &&
				!child.isNeedToDisplay() &&
				!child.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
			)
			{
				//Ensure that field will be displayed.
				child.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			child.layout(layoutOpts);
		}

		if(child.hasScheme())
		{
			this._editor.processControlAdd(child);
			this.markSchemeAsChanged();

			if(BX.prop.getBoolean(options, "enableSaving", true))
			{
				this.saveScheme();
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.removeChild = function(child, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var index = this.getChildIndex(child);
		if(index < 0)
		{
			return;
		}

		if(child.isActive())
		{
			child.setActive(false);
		}

		this._fields.splice(index, 1);

		var processScheme = child.hasScheme();

		if(processScheme)
		{
			child.getSchemeElement().setParent(null);
		}

		if(this._hasLayout)
		{
			child.clearLayout();
			child.setContainer(null);
			child.setDraggableContextId("");
		}

		if(processScheme)
		{
			this._editor.processControlRemove(child);
			this.markSchemeAsChanged();

			if(BX.prop.getBoolean(options, "enableSaving", true))
			{
				this.saveScheme();
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.moveChild = function(child, index, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var qty = this.getChildCount();
		var lastIndex = qty - 1;
		if(index < 0  || index > qty)
		{
			index = lastIndex;
		}

		var currentIndex = this.getChildIndex(child);
		if(currentIndex < 0 || currentIndex === index)
		{
			return false;
		}

		if(this._hasLayout)
		{
			child.clearLayout();
		}
		this._fields.splice(currentIndex, 1);

		qty--;

		var anchor = null;
		if(this._hasLayout)
		{
			anchor = index < qty
				? this._fields[index].getWrapper()
				: this._buttonPanelWrapper;
		}

		if(index < qty)
		{
			this._fields.splice(index, 0, child);
		}
		else
		{
			this._fields.push(child);
		}

		if(this._hasLayout)
		{
			if(anchor)
			{
				child.layout({ anchor: anchor });
			}
			else
			{
				child.layout();
			}
		}

		this._editor.processControlMove(child);
		this.markSchemeAsChanged();

		if(BX.prop.getBoolean(options, "enableSaving", true))
		{
			this.saveScheme();
		}

		return true;
	};
	BX.Crm.EntityEditorSection.prototype.editChild = function(child)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			child.focus();
		}
		else if(!this.isReadOnly())
		{
			var isHomogeneous = true;
			for(var i = 0, length = this._fields.length; i < length; i++)
			{
				if(this._fields[i].getMode() !== this._mode)
				{
					isHomogeneous = false;
					break;
				}
			}

			if(isHomogeneous)
			{
				this.setMode(BX.Crm.EntityEditorMode.edit, { notify: true });
				this.refreshLayout(
					{
						callback: function(){ child.focus(); }
					}
				);
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.getChildById = function(childId)
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getId() === childId)
			{
				return field;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorSection.prototype.getChildCount = function()
	{
		return this._fields.length;
	};
	BX.Crm.EntityEditorSection.prototype.getChildren = function()
	{
		return this._fields;
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlModeChange = function(child)
	{
		if(!this.isActive() && this._editor)
		{
			this._editor.processControlModeChange(child);
		}
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlChange = function(child, params)
	{
		if(!child.isInEditMode())
		{
			return;
		}

		if(typeof(params) === "undefined")
		{
			params = {};
		}

		if(!BX.prop.get(params, "control", null))
		{
			params["control"] = child;
		}

		this.markAsChanged(params);
		this.enableToggling(false);
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlSchemeChange = function(child)
	{
		this.markSchemeAsChanged();
		this.saveScheme();
	};
	BX.Crm.EntityEditorSection.prototype.openAddChildMenu = function()
	{
		var schemeElements = this._editor.getAvailableSchemeElements();
		var length = schemeElements.length;
		if(length === 0)
		{
			return;
		}

		var menuItems = [];
		for(var i = 0; i < length; i++)
		{
			var schemeElement = schemeElements[i];
			menuItems.push({ text: schemeElement.getTitle(), value: schemeElement.getName() });
		}

		menuItems.push({ delimiter: true });
		menuItems.push({ text: this.getMessage("selectFieldFromOtherSection"), value: "ACTION.TRANSFER" });

		var eventArgs =
			{
				id: this._id,
				menuItems: menuItems,
				button: this._addChildButton,
				cancel: false
			};
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onOpenChildMenu", [ this, eventArgs ]);

		if(eventArgs["cancel"])
		{
			return;
		}

		if(this._childSelectMenu)
		{
			this._childSelectMenu.setupItems(menuItems);
		}
		else
		{
			this._childSelectMenu = BX.CmrSelectorMenu.create(this._id, { items: menuItems });
			this._childSelectMenu.addOnSelectListener(BX.delegate(this.onChildSelect, this));
		}
		this._childSelectMenu.open(this._addChildButton);
	};
	BX.Crm.EntityEditorSection.prototype.onAddChildBtnClick = function(e)
	{
		this.openAddChildMenu();
	};
	BX.Crm.EntityEditorSection.prototype.openTransferDialog = function()
	{
		if(!this._fieldSelector)
		{
			this._fieldSelector = BX.Crm.EntityEditorFieldSelector.create(
				this._id,
				{
					scheme: this._editor.getScheme(),
					excludedNames: [ this.getSchemeElement().getName() ],
					title: this.getMessage("transferDialogTitle")
				}
			);
			this._fieldSelector.addClosingListener(BX.delegate(this.onTransferFieldSelect, this));
		}

		this._fieldSelector.open();
	};
	BX.Crm.EntityEditorSection.prototype.onTransferFieldSelect = function(sender, eventArgs)
	{
		if(BX.prop.getBoolean(eventArgs, "isCanceled"))
		{
			return;
		}

		var items = BX.prop.getArray(eventArgs, "items");
		if(items.length === 0)
		{
			return;
		}

		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];

			var sectionName = BX.prop.getString(item, "sectionName", "");
			var fieldName = BX.prop.getString(item, "fieldName", "");

			var sourceSection = this._editor.getControlById(sectionName);
			if(!sourceSection)
			{
				continue;
			}

			var sourceField = sourceSection.getChildById(fieldName);
			if(!sourceField)
			{
				continue;
			}

			var schemeElement = sourceField.getSchemeElement();

			sourceSection.removeChild(sourceField, { enableSaving: false });

			var targetField = this._editor.createControl(
				schemeElement.getType(),
				schemeElement.getName(),
				{ schemeElement: schemeElement, model: this._model, parent: this, mode: this._mode }
			);

			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			//Option "forceDisplay" to enable "showAlways" flag if required .
			this.addChild(targetField, { layout: { forceDisplay: true }, enableSaving: false });
		}

		this._editor.saveSchemeChanges();
	};
	BX.Crm.EntityEditorSection.prototype.onChildSelect = function(sender, item)
	{
		var eventArgs =
			{
				id: this._id,
				item: item,
				button: this._addChildButton,
				cancel: false
			};
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onChildMenuItemSelect", [ this, eventArgs ]);

		if(eventArgs["cancel"])
		{
			return;
		}

		var v = item.getValue();
		if(v === "ACTION.TRANSFER")
		{
			this.openTransferDialog();
			return;
		}

		var element = this._editor.getAvailableSchemeElementByName(v);
		if(!element)
		{
			return;
		}

		var field = this._editor.createControl(
			element.getType(),
			element.getName(),
			{ schemeElement: element, model: this._model, parent: this, mode: this._mode }
		);

		if(field)
		{
			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			//Option "forceDisplay" to enable "showAlways" flag if required .
			this.addChild(field, { layout: { forceDisplay: true } });
		}
	};
	BX.Crm.EntityEditorSection.prototype.onCreateUserFieldBtnClick = function(e)
	{
		if(!this._fieldTypeSelectMenu)
		{
			var infos = this._editor.getUserFieldManager().getTypeInfos();
			var items = [];
			for(var i = 0, length = infos.length; i < length; i++)
			{
				var info = infos[i];
				items.push({ value: info.name, text: info.title, legend: info.legend });
			}

			this._fieldTypeSelectMenu = BX.Crm.UserFieldTypeMenu.create(
				this._id,
				{
					items: items,
					callback: BX.delegate(this.onUserFieldTypeSelect, this)
				}
			);
		}
		this._fieldTypeSelectMenu.open(this._createChildButton);
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldTypeSelect = function(sender, item)
	{
		this._fieldTypeSelectMenu.close();

		var typeId = item.getValue();
		if(typeId === "")
		{
			return;
		}

		if(typeId === "custom")
		{
			window.open(this._editor.getUserFieldManager().getCreationPageUrl());
		}
		else
		{
			this.removeFieldConfigurator();
			this.removeUserFieldConfigurator();
			this.createUserFieldConfigurator({ typeId: typeId });
		}
	};
	BX.Crm.EntityEditorSection.prototype.createUserFieldConfigurator = function(params)
	{
		if(!BX.type.isPlainObject(params))
		{
			throw "EntityEditorSection: The 'params' argument must be object.";
		}

		var typeId = "";
		var field = BX.prop.get(params, "field", null);
		if(field)
		{
			if(!(field instanceof BX.Crm.EntityEditorUserField))
			{
				throw "EntityEditorSection: The 'field' param must be EntityEditorUserField.";
			}

			typeId = field.getFieldType();
			field.setVisible(false);
		}
		else
		{
			typeId = BX.prop.get(params, "typeId", BX.Crm.EntityUserFieldType.string);
		}

		if (typeId === 'resourcebooking')
		{
			var options = {
				editor: this._editor,
				schemeElement: null,
				model: this._model,
				mode: BX.Crm.EntityEditorMode.edit,
				parent: this,
				typeId: typeId,
				field: field,
				showAlways: true
			};

			if (BX.Calendar && BX.type.isFunction(BX.Calendar.ResourcebookingUserfield))
			{
				this._userFieldConfigurator = BX.Calendar.ResourcebookingUserfield.getCrmFieldConfigurator("", options);
			}
			else if (BX.Calendar && BX.Calendar.UserField && BX.Calendar.UserField.EntityEditorUserFieldConfigurator)
			{
				this._userFieldConfigurator = BX.Calendar.UserField.EntityEditorUserFieldConfigurator.create("", options);
			}
		}
		else
		{
			var attrManager = this._editor.getAttributeManager();
			if(attrManager)
			{
				this._mandatoryConfigurator = attrManager.createFieldConfigurator(
					field,
					BX.Crm.EntityFieldAttributeType.required
				);
			}

			this._userFieldConfigurator = BX.Crm.EntityEditorUserFieldConfigurator.create(
				"",
				{
					editor: this._editor,
					schemeElement: null,
					model: this._model,
					mode: BX.Crm.EntityEditorMode.edit,
					parent: this,
					typeId: typeId,
					field: field,
					mandatoryConfigurator: this._mandatoryConfigurator,
					showAlways: true
				}
			);
		}

		this.addChild(this._userFieldConfigurator, { related: field });

		BX.addCustomEvent(this._userFieldConfigurator, "onSave", BX.delegate(this.onUserFieldConfigurationSave, this));
		BX.addCustomEvent(this._userFieldConfigurator, "onCancel", BX.delegate(this.onUserFieldConfigurationCancel, this));
	};
	BX.Crm.EntityEditorSection.prototype.removeUserFieldConfigurator = function()
	{
		if(this._userFieldConfigurator)
		{
			var field = this._userFieldConfigurator.getField();
			if(field)
			{
				field.setVisible(true);
			}
			this.removeChild(this._userFieldConfigurator);
			this._userFieldConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldConfigurationSave = function(sender, params)
	{
		if(sender !== this._userFieldConfigurator)
		{
			return;
		}

		this._userFieldConfigurator.setLocked(true);

		var typeId = BX.prop.getString(params, "typeId");
		if(typeId === BX.Crm.EntityUserFieldType.datetime && !BX.prop.getBoolean(params, "enableTime", false))
		{
			typeId = BX.Crm.EntityUserFieldType.date;
		}

		var fieldData = { "USER_TYPE_ID": typeId };

		if(this._mandatoryConfigurator
			&& this._mandatoryConfigurator.isPermitted()
			&& this._mandatoryConfigurator.isEnabled()
			&& this._mandatoryConfigurator.isCustomized()
		)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}

			fieldData["MANDATORY"] = "N";
		}
		else
		{
			fieldData["MANDATORY"] = BX.prop.getBoolean(params, "mandatory", false) ? "Y" : "N";
		}

		var settings = BX.prop.get(params, "settings", null);
		if (settings)
		{
			fieldData["SETTINGS"] = settings;
		}

		var showAlways = BX.prop.getBoolean(params, "showAlways", null);
		var label = BX.prop.getString(params, "label", "");
		var field = BX.prop.get(params, "field", null);

		if(field)
		{
			var previousLabel = field.getTitle();
			if(label !== "" || showAlways !== null)
			{
				field.setTitle(label);
				if(showAlways !== null && showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
				{
					field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
				}

				this.markSchemeAsChanged();
				this.saveScheme();
			}

			fieldData["FIELD"] = field.getName();
			fieldData["ENTITY_VALUE_ID"] = field.getEntityValueId();

			if(this._editor.getConfigScope() === BX.Crm.EntityConfigScope.common && previousLabel !== label)
			{
				fieldData["EDIT_FORM_LABEL"] = fieldData["LIST_COLUMN_LABEL"] = fieldData["LIST_FILTER_LABEL"] = label;
			}

			fieldData["VALUE"] = field.getFieldValue();

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				fieldData["ENUM"] = BX.prop.getArray(params, "enumeration", []);
			}

			field.adjustFieldParams(fieldData, false);

			this._editor.getUserFieldManager().updateField(
				fieldData,
				field.getMode()
			).then(
				BX.delegate(this.onUserFieldUpdate, this)
			);
		}
		else
		{
			if(showAlways !== null)
			{
				this._editor.setOption("show_always", showAlways ? "Y" : "N");
			}

			fieldData["EDIT_FORM_LABEL"] = fieldData["LIST_COLUMN_LABEL"] = fieldData["LIST_FILTER_LABEL"] = BX.prop.getString(params, "label");
			fieldData["MULTIPLE"] = BX.prop.getBoolean(params, "multiple", false) ? "Y" : "N";

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				fieldData["ENUM"] = BX.prop.getArray(params, "enumeration", []);
			}

			this._editor.getUserFieldManager().createField(
				fieldData,
				this._mode
			).then(BX.delegate(this.onUserFieldCreate, this));
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldConfigurationCancel = function(sender, params)
	{
		if(sender !== this._userFieldConfigurator)
		{
			return;
		}

		this.removeUserFieldConfigurator();

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldCreate = function(result)
	{
		if(!BX.type.isPlainObject(result))
		{
			return;
		}

		this.removeUserFieldConfigurator();

		var manager = this._editor.getUserFieldManager();
		for(var key in result)
		{
			if(!result.hasOwnProperty(key))
			{
				continue;
			}

			var data = result[key];
			var info = BX.prop.getObject(data, "FIELD", null);
			if(!info)
			{
				continue;
			}

			var element = manager.createSchemeElement(info);
			if(!element)
			{
				continue;
			}

			this._model.registerNewField(
				element.getName(),
				{ "VALUE": "", "SIGNATURE": BX.prop.getString(info, "SIGNATURE", "") }
			);

			var field = this._editor.createControl(
				element.getType(),
				element.getName(),
				{ schemeElement: element, model: this._model, parent: this, mode: this._mode }
			);

			if(this._mandatoryConfigurator
				&& this._mandatoryConfigurator.isPermitted()
				&& this._mandatoryConfigurator.isEnabled()
				&& this._mandatoryConfigurator.isCustomized()
			)
			{
				var attributeConfig = this._mandatoryConfigurator.getConfiguration();
				this._editor.getAttributeManager().saveConfiguration(attributeConfig, element.getName());
				field.setAttributeConfiguration(attributeConfig);
			}

			var showAlways = this._editor.getOption("show_always", "Y") === "Y";
			if(showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
			{
				field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			this.addChild(field, { layout: { notifyIfNotDisplayed: true, html: BX.prop.getString(data, "HTML", "") } });

			break;
		}

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldUpdate = function(result)
	{
		if(!BX.type.isPlainObject(result))
		{
			return;
		}

		this.removeUserFieldConfigurator();

		var manager = this._editor.getUserFieldManager();
		for(var key in result)
		{
			if(!result.hasOwnProperty(key))
			{
				continue;
			}

			var data = result[key];
			var info = BX.prop.getObject(data, "FIELD", null);
			if(!info)
			{
				continue;
			}

			var field = this.getChildById(key);
			if(!field)
			{
				continue;
			}

			var element = field.getSchemeElement();
			if(!element)
			{
				continue;
			}

			if(this._mandatoryConfigurator && this._mandatoryConfigurator.isPermitted())
			{
				if(this._mandatoryConfigurator.isEnabled() && this._mandatoryConfigurator.isCustomized())
				{
					var attributeConfig = this._mandatoryConfigurator.getConfiguration();
					this._editor.getAttributeManager().saveConfiguration(attributeConfig, element.getName());
					field.setAttributeConfiguration(attributeConfig);
				}
				else
				{
					var attributeTypeId = this._mandatoryConfigurator.getTypeId();
					this._editor.getAttributeManager().removeConfiguration(attributeTypeId, element.getName());
					field.removeAttributeConfiguration(attributeTypeId);
				}
			}

			manager.updateSchemeElement(element, info);
			var options = {};
			var html = BX.prop.getString(data, "HTML", "");
			if(html !== "")
			{
				options["html"] = html;
			}

			field.refreshLayout(options);

			break;
		}

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.editChildConfiguration = function(child)
	{
		this.removeFieldConfigurator();
		this.removeUserFieldConfigurator();

		if(child.getType() === "userField" && this._editor.getUserFieldManager().isModificationEnabled())
		{
			this.createUserFieldConfigurator({ field: child });
		}
		else
		{
			this.createFieldConfigurator(child);
		}
	};
	BX.Crm.EntityEditorSection.prototype.createFieldConfigurator = function(child)
	{
		child.setVisible(false);

		var attrManager = this._editor.getAttributeManager();
		if(attrManager)
		{
			this._mandatoryConfigurator = attrManager.createFieldConfigurator(
				child,
				BX.Crm.EntityFieldAttributeType.required
			);
		}

		this._fieldConfigurator = BX.Crm.EntityEditorFieldConfigurator.create(
			"",
			{
				editor: this._editor,
				schemeElement: null,
				model: this._model,
				mode: BX.Crm.EntityEditorMode.edit,
				parent: this,
				field: child,
				mandatoryConfigurator: this._mandatoryConfigurator
			}
		);
		this.addChild(this._fieldConfigurator, { related: child });

		BX.addCustomEvent(this._fieldConfigurator, "onSave", BX.delegate(this.onFieldConfigurationSave, this));
		BX.addCustomEvent(this._fieldConfigurator, "onCancel", BX.delegate(this.onFieldConfigurationCancel, this));
	};
	BX.Crm.EntityEditorSection.prototype.removeFieldConfigurator = function()
	{
		if(this._fieldConfigurator)
		{
			var field = this._fieldConfigurator.getField();
			if(field)
			{
				field.setVisible(true);
			}
			this.removeChild(this._fieldConfigurator);
			this._fieldConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onFieldConfigurationSave = function(sender, params)
	{
		if(sender !== this._fieldConfigurator)
		{
			return;
		}

		var field = BX.prop.get(params, "field", null);
		if(!field)
		{
			throw "EntityEditorSection. Could not find target field.";
		}

		var label = BX.prop.getString(params, "label", "");
		var showAlways = BX.prop.getBoolean(params, "showAlways", null);
		if(label === "" && showAlways === null)
		{
			this.removeFieldConfigurator();
			if(this._mandatoryConfigurator)
			{
				this._mandatoryConfigurator = null;
			}
			return;
		}

		this._fieldConfigurator.setLocked(true);
		field.setTitle(label);
		if(showAlways !== null && showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
		{
			field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		}

		this.markSchemeAsChanged();
		this.saveScheme().then(
			BX.delegate(
				function()
				{
					if(this._mandatoryConfigurator)
					{
						if(this._mandatoryConfigurator.isPermitted()
							&& field.areAttributesEnabled()
							&& !field.isRequired()
						)
						{
							if(this._mandatoryConfigurator.isEnabled())
							{
								if(this._mandatoryConfigurator.isChanged())
								{
									this._mandatoryConfigurator.acceptChanges();
								}
								var attributeConfig = this._mandatoryConfigurator.getConfiguration();
								this._editor.getAttributeManager().saveConfiguration(attributeConfig, field.getName());
								field.setAttributeConfiguration(attributeConfig);
							}
							else
							{
								var attributeTypeId = this._mandatoryConfigurator.getTypeId();
								this._editor.getAttributeManager().removeConfiguration(attributeTypeId, field.getName());
								field.removeAttributeConfiguration(attributeTypeId);
							}
						}
						this._mandatoryConfigurator = null;
					}
					this.removeFieldConfigurator();
				},
				this
			)
		)
	};
	BX.Crm.EntityEditorSection.prototype.onFieldConfigurationCancel = function(sender, params)
	{
		if(sender !== this._fieldConfigurator)
		{
			return;
		}

		var field = BX.prop.get(params, "field", null);
		if(!field)
		{
			throw "EntityEditorSection. Could not find target field.";
		}

		this.removeFieldConfigurator();
		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.enablePointerEvents = function(enable)
	{
		if(!this._fields)
		{
			return;
		}

		enable = !!enable;
		for(i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].enablePointerEvents(enable);
		}
	};
	//endregion
	//region Create|Delete Section
	BX.Crm.EntityEditorSection.prototype.onDeleteConfirm = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this._editor.removeSchemeElement(this.getSchemeElement());
		this._editor.removeControl(this);
		this._editor.saveScheme();
	};
	BX.Crm.EntityEditorSection.prototype.onDeleteSectionBtnClick = function(e)
	{
		if(this.isRequired() || this.isRequiredConditionally())
		{
			this.showMessageDialog(
				"operationDenied",
				this.getMessage("deleteSection"),
				this.getMessage("deleteSectionDenied")
			);
			return;
		}

		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("deleteSection"),
					content: this.getMessage("deleteSectionConfirm")
				}
			);
		}
		dlg.open().then(BX.delegate(this.onDeleteConfirm, this));
	};
	//endregion
	//region D&D
	BX.Crm.EntityEditorSection.prototype.getDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.section;
	};
	BX.Crm.EntityEditorSection.prototype.getChildDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EntityEditorSection.prototype.hasPlaceHolder = function()
	{
		return !!this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.createPlaceHolder = function(index)
	{
		this.enablePointerEvents(false);

		var qty = this.getChildCount();
		if(index < 0 || index > qty)
		{
			index = qty > 0 ? qty : 0;
		}

		if(this._dragPlaceHolder)
		{
			if(this._dragPlaceHolder.getIndex() === index)
			{
				return this._dragPlaceHolder;
			}

			this._dragPlaceHolder.clearLayout();
			this._dragPlaceHolder = null;
		}

		this._dragPlaceHolder = BX.Crm.EditorDragFieldPlaceholder.create(
			{
				container: this._contentContainer,
				anchor: (index < qty) ? this._fields[index].getWrapper() : this._buttonPanelWrapper,
				index: index
			}
		);
		this._dragPlaceHolder.layout();
		return this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.getPlaceHolder = function()
	{
		return this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.removePlaceHolder = function()
	{
		this.enablePointerEvents(true);

		if(this._dragPlaceHolder)
		{
			this._dragPlaceHolder.clearLayout();
			this._dragPlaceHolder = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.processDraggedItemDrop = function(dragContainer, draggedItem)
	{
		var containerCharge = dragContainer.getCharge();
		if(!((containerCharge instanceof BX.Crm.EditorFieldDragContainer) && containerCharge.getSection() === this))
		{
			return;
		}

		var context = draggedItem.getContextData();
		var contextId = BX.type.isNotEmptyString(context["contextId"]) ? context["contextId"] : "";

		if(contextId !== this.getDraggableContextId())
		{
			return;
		}

		var placeholder = this.getPlaceHolder();
		var placeholderIndex = placeholder ? placeholder.getIndex() : -1;
		if(placeholderIndex < 0)
		{
			return;
		}

		var itemCharge = typeof(context["charge"]) !== "undefined" ?  context["charge"] : null;
		if(!(itemCharge instanceof BX.Crm.EditorFieldDragItem))
		{
			return;
		}

		var source = itemCharge.getControl();
		if(!source)
		{
			return;
		}

		var sourceParent = source.getParent();
		if(sourceParent === this)
		{
			var currentIndex = this.getChildIndex(source);
			if(currentIndex < 0)
			{
				return;
			}

			var index = placeholderIndex <= currentIndex ? placeholderIndex : (placeholderIndex - 1);
			if(index === currentIndex)
			{
				return;
			}

			this.moveChild(source, index, { enableSaving: false });
			this._editor.saveSchemeChanges();
		}
		else
		{
			var schemeElement = source.getSchemeElement();
			sourceParent.removeChild(source, { enableSaving: false });

			var target = this._editor.createControl(
				schemeElement.getType(),
				schemeElement.getName(),
				{ schemeElement: schemeElement, model: this._model, parent: this, mode: this._mode }
			);

			if(this._mode === BX.Crm.EntityEditorMode.view
				&& !target.hasContentToDisplay()
				&& !target.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
			)
			{
				//Activate 'showAlways' flag for display empty field in view mode.
				target.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			this.addChild(target, { index: placeholderIndex, enableSaving: false });
			this._editor.saveSchemeChanges();
		}
	};
	BX.Crm.EntityEditorSection.prototype.onDrop = function(dragContainer, draggedItem, x, y)
	{
		this.processDraggedItemDrop(dragContainer, draggedItem);
	};
	BX.Crm.EntityEditorSection.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"section_" + this.getId(),
			{
				charge: BX.Crm.EditorSectionDragItem.create({ control: this }),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorSection.prototype.releaseDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			this._dragItem.release();
			this._dragItem = null;
		}
	};
	//endregion
	BX.Crm.EntityEditorSection.prototype.isWaitingForInput = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isWaitingForInput())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.isRequired = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isRequired())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.isRequiredConditionally = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isRequiredConditionally())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorSection.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.Crm.EntityEditorSection.messages) === "undefined")
	{
		BX.Crm.EntityEditorSection.messages = {};
	}
	BX.Crm.EntityEditorSection.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorSection();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorText === "undefined")
{
	BX.Crm.EntityEditorText = function()
	{
		BX.Crm.EntityEditorText.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};

	BX.extend(BX.Crm.EntityEditorText, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorText.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorText.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorText.prototype.focus = function()
	{
		if(!this._input)
		{
			return;
		}

		BX.focus(this._input);
		BX.Crm.EditorTextHelper.getCurrent().setPositionAtEnd(this._input);
	};
	BX.Crm.EntityEditorText.prototype.getLineCount = function()
	{
		return this._schemeElement.getDataIntegerParam("lineCount", 1);
	};
	BX.Crm.EntityEditorText.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-text" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			var lineCount = this.getLineCount();
			if(lineCount > 1)
			{
				this._input = BX.create("textarea",
					{
						props:
						{
							className: "crm-entity-widget-content-textarea",
							name: name,
							rows: lineCount,
							value: value
						}
					}
				);
			}
			else
			{
				this._input = BX.create("input",
					{
						attrs:
						{
							name: name,
							className: "crm-entity-widget-content-input",
							type: "text",
							value: value
						}
					}
				);
			}

			if(this.isNewEntity())
			{
				var placeholder = this.getCreationPlaceholder();
				if(placeholder !== "")
				{
					this._input.setAttribute("placeholder", placeholder);
				}
			}

			BX.bind(this._input, "input", this._changeHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-field-container" },
									children: [ this._input ]
								}
							)
						]
				}
			);

			if(this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this.getDuplicateControlConfig();
				if(dupControlConfig)
				{
					if(!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getId();
					dupControlConfig["field"]["element"] = this._input;
					this._editor.getDuplicateManager().registerField(dupControlConfig);
				}
			}
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			if(this.hasContentToDisplay())
			{
				if(this.getLineCount() > 1)
				{
					this._innerWrapper = BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-inner" },
							children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-inner-text" },
											html: BX.util.nl2br(BX.util.htmlspecialchars(value))
										}
									)
								]
						}
					);
				}
				else
				{
					this._innerWrapper = BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-inner" },
							children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-inner-text" },
											text: value
										}
									)
								]
						}
					);
				}
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorText.prototype.doClearLayout = function(options)
	{
		if(this._editor.isDuplicateControlEnabled())
		{
			var dupControlConfig = this.getDuplicateControlConfig();
			if(dupControlConfig)
			{
				if(!BX.type.isPlainObject(dupControlConfig["field"]))
				{
					dupControlConfig["field"] = {};
				}
				dupControlConfig["field"]["id"] = this.getId();
				this._editor.getDuplicateManager().unregisterField(dupControlConfig);
			}
		}

		this._input = null;
		//BX.unbind(this._innerWrapper, "click", this._viewClickHandler);
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorText.prototype.refreshLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorText.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit && this._input)
		{
			this._input.value = this.getValue();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = BX.util.htmlspecialchars(this.getValue());
		}
	};
	BX.Crm.EntityEditorText.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
			? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorText.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorText. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorText.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorText.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorText.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorText.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorText.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value, { originator: this });
		}
	};
	BX.Crm.EntityEditorText.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorText.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorText();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorNumber === "undefined")
{
	BX.Crm.EntityEditorNumber = function()
	{
		BX.Crm.EntityEditorNumber.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorNumber, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorNumber.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorNumber.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorNumber.prototype.focus = function()
	{
		if(!this._input)
		{
			return;
		}

		BX.focus(this._input);
		BX.Crm.EditorTextHelper.getCurrent().selectAll(this._input);
	};
	BX.Crm.EntityEditorNumber.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-number" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._input = null;
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input",
				{
					attrs:
					{
						name: name,
						className: "crm-entity-widget-content-input",
						type: "text",
						value: value
					}
				}
			);
			BX.bind(this._input, "input", this._changeHandler);

			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					//todo: remove class "crm-entity-widget-content-block-field-half-width" if required
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-field-half-width" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-field-container" },
									children: [ this._input ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			if(!this.hasContentToDisplay())
			{
				value = this.getMessage("isEmpty");
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-inner-text"},
									text: value
								}
							)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorNumber.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorNumber.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorNumber.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorNumber. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorNumber.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorNumber.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorNumber.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorNumber.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorNumber.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value);
		}
	};
	BX.Crm.EntityEditorNumber.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorNumber();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorDatetime === "undefined")
{
	BX.Crm.EntityEditorDatetime = function()
	{
		BX.Crm.EntityEditorDatetime.superclass.constructor.apply(this);
		this._input = null;
		this._inputClickHandler = BX.delegate(this.onInputClick, this);
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorDatetime, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorDatetime.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorDatetime.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorDatetime.prototype.focus = function()
	{
		if(this._input)
		{
			BX.focus(this._input);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._input);
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-date" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input",
				{
					attrs:
					{
						name: name,
						className: "crm-entity-widget-content-input",
						type: "text",
						value: value
					}
				}
			);
			BX.bind(this._input, "click", this._inputClickHandler);
			BX.bind(this._input, "change", this._changeHandler);
			BX.bind(this._input, "input", this._changeHandler);

			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-field-half-width" },
					children:
						[
							BX.create("div",
								{
									props: {className:"crm-entity-widget-content-block-field-container"},
									children: [ this._input ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			value = BX.date.format("j F Y", BX.parseDate(value));
			this._wrapper.appendChild(this.createTitleNode(title));
			if(!this.hasContentToDisplay())
			{
				value = this.getMessage("isEmpty");
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-inner-text"},
									text: value
								}
							)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorDatetime.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			&& this._input
		)
		{
			window.setTimeout(BX.delegate(this.showCalendar, this), 100);
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorDatetime.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorDatetime.prototype.onInputClick = function(e)
	{
		this.showCalendar();
	};
	BX.Crm.EntityEditorDatetime.prototype.showCalendar = function()
	{
		BX.calendar({ node: this._input, field: this._input, bTime: false, bSetFocus: false });
	};
	BX.Crm.EntityEditorDatetime.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorDatetime. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorDatetime.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorDatetime.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorDatetime.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value);
		}
	};
	BX.Crm.EntityEditorDatetime.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorDatetime();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorBoolean === "undefined")
{
	BX.Crm.EntityEditorBoolean = function()
	{
		BX.Crm.EntityEditorBoolean.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorBoolean, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorBoolean.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorBoolean.superclass.doInitialize.apply(this);
		this._selectedValue = this._model.getField(this._schemeElement.getName());
	};
	BX.Crm.EntityEditorBoolean.prototype.areAttributesEnabled = function()
	{
		return false;
	};
	BX.Crm.EntityEditorBoolean.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorBoolean.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorBoolean.prototype.hasValue = function()
	{
		return BX.util.trim(this.getValue()) !== "";
	};
	BX.Crm.EntityEditorBoolean.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		if(defaultValue === undefined)
		{
			defaultValue = "N";
		}

		var value = this._model.getStringField(
			this.getName(),
			defaultValue
		);

		if(value !== "Y" && value !== "N")
		{
			value = "N";
		}

		return value;
	};
	BX.Crm.EntityEditorBoolean.prototype.getRuntimeValue = function()
	{
		if (this._mode !== BX.Crm.EntityEditorMode.edit || !this._input)
			return "";

		var value = BX.util.trim(this._input.value);
		if(value !== "Y" && value !== "N")
		{
			value = "N";
		}
		return value;
	};
	BX.Crm.EntityEditorBoolean.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-checkbox" ] });
		this.adjustWrapper();

		/*
		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}
		*/

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(
				BX.create("input", { attrs: { name: name, type: "hidden", value: "N" } })
			);

			this._input = BX.create(
				"input",
				{
					attrs:
					{
						className: "crm-entity-widget-content-checkbox",
						name: name,
						type: "checkbox",
						value: "Y",
						checked: value === "Y"
					}
				}
			);
			BX.bind(this._input, "change", this._changeHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children:
										[
											BX.create("label",
												{
													attrs: { className: "crm-entity-widget-content-block-checkbox-label" },
													children:
														[
															this._input,
															BX.create("span",
																{
																	props: { className: "crm-entity-widget-content-block-checkbox-description" },
																	text: title
																}
															)
														]
												}
											)
										]
								}
							)
						]
				}
			);
		}
		else//if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-inner-text"},
									text: this.getMessage(value === "Y" ? "yes" : "no")
								}
							)
						]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorBoolean.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
		//this._selectContainer = null;
	};
	BX.Crm.EntityEditorBoolean.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorBoolean. Invalid validation context";
		}

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			BX.addClass(this._input, "crm-entity-widget-content-error");
			this.showRequiredFieldError(this._input);
		}
		else
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
			this.clearError();
		}
		return isValid;
	};
	BX.Crm.EntityEditorBoolean.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorBoolean.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorBoolean.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.checked ? "Y" : "N", { originator: this });
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorBoolean.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorBoolean.superclass.getMessage.apply(this, arguments)
		);
	};
	if(typeof(BX.Crm.EntityEditorBoolean.messages) === "undefined")
	{
		BX.Crm.EntityEditorBoolean.messages = {};
	}
	BX.Crm.EntityEditorBoolean.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorBoolean();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorList === "undefined")
{
	BX.Crm.EntityEditorList = function()
	{
		BX.Crm.EntityEditorList.superclass.constructor.apply(this);
		this._items = null;
		this._input = null;
		this._selectContainer = null;
		this._selectedValue = "";
		this._selectorClickHandler = BX.delegate(this.onSelectorClick, this);
		this._innerWrapper = null;
		this._isOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorList, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorList.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorList.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorList.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.type.isString(value))
		{
			value = value.trim();
			//0 is value for "Not Selected" item
			return value !== "" && value !== "0";
		}
		return (value !== null && value !== undefined);
	};
	BX.Crm.EntityEditorList.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-select" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();

		var value = this.getValue();
		var item = this.getItemByValue(value);
		var isHtmlOption = this.getDataBooleanParam('isHtml', false);
		var containerProps = {};

		if(!item)
		{
			item = this.getFirstItem();
			if(item)
			{
				value = item["VALUE"];
			}
		}
		this._selectedValue = value;

		this._selectContainer = null;
		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			containerProps = {props: { className: "crm-entity-widget-content-select" }};
			if (isHtmlOption)
			{
				containerProps.html = (item ? item["NAME"] : value);
			}
			else
			{
				containerProps.text = (item ? item["NAME"] : value);
			}

			this._selectContainer = BX.create("div", containerProps);
			BX.bind(this._selectContainer, "click", this._selectorClickHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children :[ this._selectContainer ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			var text = "";
			if(!this.hasContentToDisplay())
			{
				text = this.getMessage("isEmpty");
			}
			else if(item)
			{
				text = item["NAME"];
			}
			else
			{
				text = value;
			}

			var containerProps = {props: { className: "crm-entity-widget-content-block-inner-text" }};

			if (isHtmlOption)
			{
				containerProps.html = text;
			}
			else
			{
				containerProps.text = text;
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div", containerProps)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorList.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			&& this._selectContainer
		)
		{
			window.setTimeout(BX.delegate(this.openMenu, this), 100);
		}
	};
	BX.Crm.EntityEditorList.prototype.doClearLayout = function(options)
	{
		this.closeMenu();

		this._input = null;
		this._selectContainer = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorList.prototype.refreshLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMoney.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		var value = this.getValue();
		var item = this.getItemByValue(value);
		var text = item ? BX.prop.getString(item, "NAME", value) : value;
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._selectedValue = value;
			if(this._input)
			{
				this._input.value  = value;
			}
			if(this._selectContainer)
			{
				this._selectContainer.innerHTML = this.getDataBooleanParam('isHtml', false) ? text : BX.util.htmlspecialchars(text);
			}
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = this.getDataBooleanParam('isHtml', false) ? text : BX.util.htmlspecialchars(text);
		}
	};
	BX.Crm.EntityEditorList.prototype.validate = function(result)
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			throw "BX.Crm.EntityEditorList. Invalid validation context";
		}

		if(!this.isEditable())
		{
			return true;
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorList.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorList.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorList.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorList.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorList.prototype.onSelectorClick = function (e)
	{
		if(!this._isOpened)
		{
			this.openMenu();
		}
		else
		{
			this.closeMenu();
		}
	};
	BX.Crm.EntityEditorList.prototype.openMenu = function()
	{
		if(this._isOpened)
		{
			return;
		}

		var menu = [];
		var items = this.getItems();
		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];
			if(!BX.prop.getBoolean(item, "IS_EDITABLE", true))
			{
				continue;
			}

			var value = BX.prop.getString(item, "VALUE", i);
			var name = BX.prop.getString(item, "NAME", value);
			menu.push(
				{
					text: this.getDataBooleanParam('isHtml', false) ? name : BX.util.htmlspecialchars(name),
					value: value,
					onclick: BX.delegate( this.onItemSelect, this)
				}
			);
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onMenuShow, this),
						onPopupClose: BX.delegate( this.onMenuClose, this)
					}
			}
		);
		BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorList.prototype.closeMenu = function()
	{
		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorList.prototype.onMenuShow = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isOpened = true;
	};
	BX.Crm.EntityEditorList.prototype.onMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isOpened = false;
	};
	BX.Crm.EntityEditorList.prototype.onItemSelect = function(e, item)
	{
		this.closeMenu();

		this._selectedValue = this._input.value  = item.value;
		var name = BX.prop.getString(
			this.getItemByValue(this._selectedValue),
			"NAME",
			this._selectedValue
		);

		this._selectContainer.innerHTML = this.getDataBooleanParam('isHtml', false) ? name : BX.util.htmlspecialchars(name);
		this.markAsChanged();
		BX.PopupMenu.destroy(this._id);

	};
	BX.Crm.EntityEditorList.prototype.getItems = function()
	{
		if(!this._items)
		{
			this._items = BX.prop.getArray(this._schemeElement.getData(), "items", []);
		}
		return this._items;
	};
	BX.Crm.EntityEditorList.prototype.getItemByValue = function(value)
	{
		var items = this.getItems();
		for(var i = 0, l = items.length; i < l; i++)
		{
			var item = items[i];
			if(value === BX.prop.getString(item, "VALUE", ""))
			{
				return item;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorList.prototype.getFirstItem = function()
	{
		var items = this.getItems();
		return items.length > 0 ? items[0] : null;
	};
	BX.Crm.EntityEditorList.prototype.save = function()
	{
		if(!this.isEditable())
		{
			return;
		}

		this._model.setField(this.getName(), this._selectedValue);
	};
	BX.Crm.EntityEditorList.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorList.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? this._selectedValue : ""
		);
	};
	BX.Crm.EntityEditorList.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorList();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorHtml === "undefined")
{
	BX.Crm.EntityEditorHtml = function()
	{
		BX.Crm.EntityEditorHtml.superclass.constructor.apply(this);
		this._htmlEditorContainer = null;
		this._htmlEditor = null;
		this._isEditorInitialized = false;
		this._focusOnLoad = false;

		this._input = null;
		this._innerWrapper = null;

		this._editorInitializationHandler = BX.delegate(this.onEditorInitialized, this);
		this._viewClickHandler = BX.delegate(this.onViewClick, this);
	};
	BX.extend(BX.Crm.EntityEditorHtml, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorHtml.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorHtml.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorHtml.prototype.checkIfNotEmpty = function(value)
	{
		return BX.Crm.EntityEditorHtml.isNotEmptyValue(value);
	};
	BX.Crm.EntityEditorHtml.prototype.focus = function()
	{
		if(this._htmlEditor && this._isEditorInitialized)
		{
			this._htmlEditor.Focus(true);
		}
		else
		{
			this._focusOnLoad = true;
		}
	};
	BX.Crm.EntityEditorHtml.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.release();
		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-comment" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(!this._editor)
			{
				throw "BX.Crm.EntityEditorHtml: Editor instance is required for create layout.";
			}

			var htmlEditorConfig = this._editor.getHtmlEditorConfig(name);
			if(!htmlEditorConfig)
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor config.";
			}

			this._htmlEditorContainer = BX(BX.prop.getString(htmlEditorConfig, "containerId"));
			if(!BX.type.isElementNode(this._htmlEditorContainer))
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor container.";
			}

			this._htmlEditor = BXHtmlEditor.Get(BX.prop.getString(htmlEditorConfig, "id"));
			if(!this._htmlEditor)
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor instance.";
			}

			this._wrapper.appendChild(this.createTitleNode(title));
			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children: [this._htmlEditorContainer]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);

			if(this.hasContentToDisplay())
			{
				this._innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-content-block-field-container" },
							children:
							[
								BX.create("div",
									{
										props: { className: "crm-entity-widget-content-block-inner-comment" },
										html: value
									}
								)
							]
						}
					)
				);

				if (value.length > 200)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
					this._innerWrapper.appendChild(
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-widget-content-block-field-comment-expand-btn-container" },
								children:
									[
										BX.create("A",
											{
												attrs:
													{
														className: "crm-entity-widget-content-block-field-comment-expand-btn",
														href: "#"
													},
												events:
													{
														click: BX.delegate(this.onExpandButtonClick, this)
													},
												text: this.getMessage("expand")
											}
										)
									]
							}
						)
					);
					this._isCollapsed = true;
				}
			}
			else
			{
				this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			}

			this._wrapper.appendChild(this._innerWrapper);

			BX.bindDelegate(
				this._wrapper,
				"mousedown",
				BX.delegate(this.filterViewNode, this),
				this._viewClickHandler
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._isEditorInitialized = !!this._htmlEditor.inited;
			if(this._isEditorInitialized)
			{
				this.prepareEditor();
			}
			else
			{
				BX.addCustomEvent(
					this._htmlEditor,
					"OnCreateIframeAfter",
					this._editorInitializationHandler
				);
				this._htmlEditor.Init();
			}

			window.top.setTimeout(BX.delegate(this.bindChangeEvent, this), 1000);
			this.initializeDragDropAbilities();
		}

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorHtml.prototype.doClearLayout = function(options)
	{
		this.release();
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorHtml.prototype.onExpandButtonClick = function(e)
	{
		if (!this._wrapper)
		{
			return BX.PreventDefault(e);
		}

		if (this._hasFiles && BX.type.isDomNode(this._commentWrapper) && !this._textLoaded)
		{
			this._textLoaded = true;
			this.loadContent(this._commentWrapper, "GET_TEXT")
		}
		var eventWrapper = this._wrapper.querySelector(".crm-entity-widget-content-block-inner-comment");
		if (this._isCollapsed)
		{

			BX.defer(
				function() {
					eventWrapper.style.maxHeight = eventWrapper.scrollHeight + 130 + "px";
				}
			)();

			setTimeout(
				BX.delegate(function() {
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-expand");
					eventWrapper.style.maxHeight = "";
				}, this),
				200
			);
		}
		else
		{
			BX.defer(
				function() {
					eventWrapper.style.maxHeight = eventWrapper.clientHeight + "px";
				}
			)();


			BX.defer(
				function() {
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-comment-expand");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
				},
				this
			)();

			setTimeout(
				function() {
					eventWrapper.style.maxHeight = "";
				},
				200
			);
		}

		this._isCollapsed = !this._isCollapsed;

		var button = this._wrapper.querySelector("a.crm-entity-widget-content-block-field-comment-expand-btn");
		if (button)
		{
			button.innerHTML = this.getMessage(this._isCollapsed ? "expand" : "collapse");
		}
		return BX.PreventDefault(e);
	};
	BX.Crm.EntityEditorHtml.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorHtml.messages;
		return (m.hasOwnProperty(name)
				? m[name]
				: BX.Crm.EntityEditorHtml.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorHtml.prototype.filterViewNode = function(obj)
	{
		return true;
	};
	BX.Crm.EntityEditorHtml.prototype.onViewClick = function(e)
	{
		var link = null;
		var node = BX.getEventTarget(e);
		if(node.tagName === "A")
		{
			link = node;
		}
		else
		{
			link = BX.findParent(node, { tagName: "a" }, this._wrapper);
		}

		if(link && link.target !== "_blank")
		{
			link.target = "_blank";
		}
	};
	BX.Crm.EntityEditorHtml.prototype.onEditorInitialized = function()
	{
		this._isEditorInitialized = true;
		BX.removeCustomEvent(
			this._htmlEditor,
			"OnCreateIframeAfter",
			this._editorInitializationHandler
		);
		this.prepareEditor();
	};
	BX.Crm.EntityEditorHtml.prototype.prepareEditor = function()
	{
		this._htmlEditorContainer.style.display = "";

		this._htmlEditor.CheckAndReInit();
		this._htmlEditor.ResizeSceleton("100%", 200);
		this._htmlEditor.SetContent(this.getStringValue(""), true);

		if(this._focusOnLoad)
		{
			this._htmlEditor.Focus(true);
			this._focusOnLoad = false;
		}
	};
	BX.Crm.EntityEditorHtml.prototype.release = function()
	{
		if(this._htmlEditorContainer)
		{
			var stub = BX.create("DIV",
				{
					style:
						{
							height: this._htmlEditorContainer.offsetHeight + "px",
							border: "1px solid #bbc4cd",
							boxSizing: "border-box"
						}
				}
			);
			this._htmlEditorContainer.parentNode.insertBefore(stub, this._htmlEditorContainer);

			document.body.appendChild(this._htmlEditorContainer);
			this._htmlEditorContainer.style.display = "none";
			this._htmlEditorContainer = null;
		}

		if(this._htmlEditor)
		{
			this.unbindChangeEvent();
			this._htmlEditor.SetContent("");
			this._htmlEditor = null;
			this._isEditorInitialized = false;
		}

		this._focusOnLoad = false;
	};
	BX.Crm.EntityEditorHtml.prototype.bindChangeEvent = function()
	{
		if(this._htmlEditor)
		{
			BX.addCustomEvent(this._htmlEditor, "OnContentChanged", this._changeHandler);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.unbindChangeEvent = function()
	{
		if(this._htmlEditor)
		{
			BX.removeCustomEvent(this._htmlEditor, "OnContentChanged", this._changeHandler);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._htmlEditor))
		{
			throw "BX.Crm.EntityEditorHtml. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.Crm.EntityEditorHtml.isNotEmptyValue(this._htmlEditor.GetContent());
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._htmlEditorContainer);
		}
		return isValid;
	};
	BX.Crm.EntityEditorHtml.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorHtml.superclass.showError.apply(this, arguments);
		if(this._htmlEditorContainer)
		{
			BX.addClass(this._htmlEditorContainer, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorHtml.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorHtml.superclass.clearError.apply(this);
		if(this._htmlEditorContainer)
		{
			BX.removeClass(this._htmlEditorContainer, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorHtml.prototype.save = function()
	{
		if(this._htmlEditor)
		{
			var value = this._input.value = this._htmlEditor.GetContent();
			this._model.setField(this.getName(), value);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? this._htmlEditor.GetContent() : ""
		);
	};
	BX.Crm.EntityEditorHtml.isNotEmptyValue = function(value)
	{
		return BX.util.trim(value.replace(/<br\/?>|&nbsp;/ig, "")) !== "";
	};
	BX.Crm.EntityEditorHtml.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorHtml();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorMoney === "undefined")
{
	BX.Crm.EntityEditorMoney = function()
	{
		BX.Crm.EntityEditorMoney.superclass.constructor.apply(this);
		this._currencyEditor = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
		this._selectedCurrencyValue = "";
		this._selectorClickHandler = BX.delegate(this.onSelectorClick, this);
		this._isCurrencyMenuOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorMoney, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorMoney.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMoney.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorMoney.prototype.focus = function()
	{
		if(this._amountInput)
		{
			BX.focus(this._amountInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._amountInput);
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getStringField(
				this.getAmountFieldName(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorMoney.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-money" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		//var name = this.getName();
		var title = this.getTitle();
		var data = this.getData();

		var amountInputName = BX.prop.getString(data, "amount");
		var currencyInputName = BX.prop.getString(BX.prop.getObject(data, "currency"), "name");

		var currencyValue = this._model.getField(
			BX.prop.getString(BX.prop.getObject(data, "currency"), "name", "")
		);

		if(!BX.type.isNotEmptyString(currencyValue))
		{
			currencyValue = BX.Currency.Editor.getBaseCurrencyId();
		}

		this._selectedCurrencyValue = currencyValue;

		var currencyName = this._editor.findOption(
			currencyValue,
			BX.prop.getArray(BX.prop.getObject(data, "currency"), "items")
		);

		var amountFieldName = this.getAmountFieldName();
		var currencyFieldName = this.getCurrencyFieldName();
		var amountValue = this._model.getField(amountFieldName, ""); //SET CURRENT SUM VALUE
		var formatted = this._model.getField(BX.prop.getString(data, "formatted"), ""); //SET FORMATTED VALUE

		this._amountValue = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountValue = BX.create("input",
				{
					attrs:
					{
						name: amountInputName,
						type: "hidden",
						value: amountValue
					}
				}
			);

			this._amountInput = BX.create("input",
				{
					attrs:
					{
						className: "crm-entity-widget-content-input",
						type: "text",
						value: formatted
					}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			if(this._model.isFieldLocked(amountFieldName))
			{
				this._amountInput.disabled = true;
			}

			this._currencyInput = BX.create("input",
				{
					attrs:
					{
						name: currencyInputName,
						type: "hidden",
						value: currencyValue
					}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: currencyName
				}
			);

			if(this._model.isFieldLocked(currencyFieldName))
			{
				this._selectContainer.disabled = true;
			}
			else
			{
				BX.bind(this._selectContainer, "click", this._selectorClickHandler);
			}

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double" },
					children:
						[
							this._amountValue,
							this._amountInput,
							this._currencyInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" + (this._selectContainer.disabled ? '-disabled': '') },
									children: [ this._selectContainer ]
								}
							)
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children: [ this._inputWrapper ]
				}
			);

			this._currencyEditor = new BX.Currency.Editor(
				{
					input: this._amountInput,
					currency: currencyValue,
					callback: BX.delegate(this.onAmountValueChange, this)
				}
			);

			this._currencyEditor.changeValue();
		}
		else //this._mode === BX.Crm.EntityEditorMode.view
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			if(this.hasContentToDisplay())
			{
				this._sumElement = BX.create("span",
					{
						props: { className: "crm-entity-widget-content-block-wallet" }
					}
				);
				this._sumElement.innerHTML = this.renderMoney();
				this._innerWrapper = BX.create("div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						children:
							[
								BX.create("div",
									{
										props: { className: "crm-entity-widget-content-block-inner-text" },
										children: [ this._sumElement ]
									}
								)
							]
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create("div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMoney.prototype.doClearLayout = function(options)
	{
		BX.PopupMenu.destroy(this._id);

		if(this._currencyEditor)
		{
			this._currencyEditor.clean();
			this._currencyEditor = null;
		}

		this._amountValue = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorMoney.prototype.refreshLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMoney.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit && this._amountInput)
		{
			var currencyValue = this._currencyEditor
				? this._currencyEditor.currency
				: this._model.getField(this.getCurrencyFieldName());

			if(!BX.type.isNotEmptyString(currencyValue))
			{
				currencyValue = BX.Currency.Editor.getBaseCurrencyId();
			}

			var amountFieldName = this.getAmountFieldName();
			this._amountValue.value = this._model.getField(amountFieldName);
			this._amountInput.value = BX.Currency.Editor.getFormattedValue(
				this._model.getField(amountFieldName, ""),
				currencyValue
			);

			this._amountInput.disabled = this._model.isFieldLocked(amountFieldName);
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._sumElement)
		{
			this._sumElement.innerHTML = this.renderMoney();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onAmountValueChange = function(v)
	{
		if(this._amountValue)
		{
			this._amountValue.value = v;
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getAmountFieldName = function()
	{
		return this._schemeElement.getDataStringParam("amount", "");
	};
	BX.Crm.EntityEditorMoney.prototype.getCurrencyFieldName = function()
	{
		return BX.prop.getString(
			this._schemeElement.getDataObjectParam("currency", {}),
			"name",
			""
		);
	};
	BX.Crm.EntityEditorMoney.prototype.onSelectorClick = function (e)
	{
		this.openCurrencyMenu();
	};
	BX.Crm.EntityEditorMoney.prototype.openCurrencyMenu = function()
	{
		if(this._isCurrencyMenuOpened)
		{
			return;
		}

		var data = this._schemeElement.getData();
		var currencyList = BX.prop.getArray(BX.prop.getObject(data, "currency"), "items"); //{NAME, VALUE}

		var key = 0;
		var menu = [];
		while (key < currencyList.length)
		{
			menu.push(
				{
					text: currencyList[key]["NAME"],
					value: currencyList[key]["VALUE"],
					onclick: BX.delegate( this.onCurrencySelect, this)
				}
			);
			key++
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onCurrencyMenuOpen, this),
						onPopupClose: BX.delegate( this.onCurrencyMenuClose, this)
					}
			}
		);
		// BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorMoney.prototype.closeCurrencyMenu = function()
	{
		if(!this._isCurrencyMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencyMenuOpen = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isCurrencyMenuOpened = true;
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencyMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isCurrencyMenuOpened = false;
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencySelect = function(e, item)
	{
		this.closeCurrencyMenu();

		this._selectedCurrencyValue = this._currencyInput.value = item.value;
		this._selectContainer.innerHTML = BX.util.htmlspecialchars(item.text);
		if(this._currencyEditor)
		{
			this._currencyEditor.setCurrency(this._selectedCurrencyValue);
		}
		this.markAsChanged(
			{
				fieldName: this.getCurrencyFieldName(),
				fieldValue: this._selectedCurrencyValue
			}
		);
	};
	BX.Crm.EntityEditorMoney.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getAmountFieldName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorMoney.prototype.processModelLock = function(params)
	{
		var name = BX.prop.getString(params, "name", "");
		if(this.getAmountFieldName() === name)
		{
			this.refreshLayout();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._amountInput && this._amountValue))
		{
			throw "BX.Crm.EntityEditorMoney. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._amountValue.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._inputWrapper);
		}
		return isValid;
	};
	BX.Crm.EntityEditorMoney.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorMoney.superclass.showError.apply(this, arguments);
		if(this._amountInput)
		{
			BX.addClass(this._amountInput, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorMoney.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorMoney.superclass.clearError.apply(this);
		if(this._amountInput)
		{
			BX.removeClass(this._amountInput, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountValue)
			{
				data[ BX.prop.getString(data, "amount")] = this._amountValue.value;
			}
			data[ BX.prop.getString(data, "currency")] = this._selectedCurrencyValue;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorMoney.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		this._model.setField(
			BX.prop.getString(BX.prop.getObject(data, "currency"), "name"),
			this._selectedCurrencyValue,
			{ originator: this }
		);

		if(this._amountValue)
		{
			this._model.setField(
				BX.prop.getString(data, "amount"),
				this._amountValue.value,
				{ originator: this }
			);

			this._model.setField(
				BX.prop.getString(data, "formatted"),
				"",
				{ originator: this }
			);

			this._editor.formatMoney(
				this._amountValue.value,
				this._selectedCurrencyValue,
				BX.delegate(this.onMoneyFormatRequestSuccess, this)
			);
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onMoneyFormatRequestSuccess = function(data)
	{
		var schemeData = this._schemeElement.getData();
		var formattedWithCurrency = BX.type.isNotEmptyString(data["FORMATTED_SUM_WITH_CURRENCY"]) ? data["FORMATTED_SUM_WITH_CURRENCY"] : "";
		this._model.setField(BX.prop.getString(schemeData, "formattedWithCurrency"), formattedWithCurrency);

		var formatted = BX.type.isNotEmptyString(data["FORMATTED_SUM"]) ? data["FORMATTED_SUM"] : "";
		this._model.setField(
			BX.prop.getString(schemeData, "formatted"),
			formatted,
			{ originator: this }
		);

		if(this._sumElement)
		{
			while (this._sumElement.firstChild)
			{
				this._sumElement.removeChild(this._sumElement.firstChild);
			}
			this._sumElement.innerHTML = this.renderMoney();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.renderMoney = function()
	{
		var data = this._schemeElement.getData();
		var formattedWithCurrency = this._model.getField(BX.prop.getString(data, "formattedWithCurrency"), "");
		var formatted = this._model.getField(BX.prop.getString(data, "formatted"), "");
		var result = BX.Currency.Editor.trimTrailingZeros(formatted, this._selectedCurrencyValue);

		return formattedWithCurrency.replace(
			formatted,
			"<span class=\"crm-entity-widget-content-block-colums-right\">" + result + "</span>"
		);
	};
	BX.Crm.EntityEditorMoney.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMoney();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorImage === "undefined")
{
	BX.Crm.EntityEditorImage = function()
	{
		BX.Crm.EntityEditorImage.superclass.constructor.apply(this);
		this._innerWrapper = null;

		this._dialogShowHandler = BX.delegate(this.onDialogShow, this);
		this._dialogCloseHandler = BX.delegate(this.onDialogClose, this);
		this._fileChangeHandler = BX.delegate(this.onFileChange, this);
	};
	BX.extend(BX.Crm.EntityEditorImage, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorImage.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorImage.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorImage.prototype.hasContentToDisplay = function()
	{
		return(this._mode === BX.Crm.EntityEditorMode.edit
			|| this._model.getSchemeField(this._schemeElement, "showUrl", "") !== ""
		);
	};
	BX.Crm.EntityEditorImage.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-file" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
			this._editor.loadCustomHtml("RENDER_IMAGE_INPUT", { "FIELD_NAME": name }, BX.delegate(this.onEditorHtmlLoad, this));
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });

			if(this.hasContentToDisplay())
			{
				this._innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-content-block-inner-box" },
							children:
								[
									BX.create(
										"img",
										{
											props:
												{
													className: "crm-entity-widget-content-block-photo",
													src: this._model.getSchemeField(this._schemeElement, "showUrl", "")
												}
										}
									)
								]
						}
					)
				);
			}
			else
			{
				this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorImage.prototype.doClearLayout = function(options)
	{
		if(this._innerWrapper)
		{
			BX.removeCustomEvent(window, "onAfterPopupShow", this._dialogShowHandler);
			BX.removeCustomEvent(window, "onPopupClose", this._dialogCloseHandler);

			BX.cleanNode(this._innerWrapper);
			this._innerWrapper = null;
		}

		this.unbindFileEvents();
	};
	BX.Crm.EntityEditorImage.prototype.onEditorHtmlLoad = function(html)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = html;

			BX.addCustomEvent(window, "onAfterPopupShow", this._dialogShowHandler);
			BX.addCustomEvent(window, "onPopupClose", this._dialogCloseHandler);

			window.setTimeout(BX.delegate(this.bindFileEvents, this), 500)
		}
	};
	BX.Crm.EntityEditorImage.prototype.bindFileEvents = function()
	{
		var fileControl = BX.MFInput ? BX.MFInput.get(this.getName().toLowerCase() + "_uploader") : null
		if(fileControl)
		{
			BX.addCustomEvent(fileControl, "onAddFile", this._fileChangeHandler);
			BX.addCustomEvent(fileControl, "onDeleteFile", this._fileChangeHandler);
		}
	};
	BX.Crm.EntityEditorImage.prototype.unbindFileEvents = function()
	{
		var fileControl = BX.MFInput ? BX.MFInput.get(this.getName().toLowerCase() + "_uploader") : null
		if(fileControl)
		{
			BX.removeCustomEvent(fileControl, "onAddFile", this._fileChangeHandler);
			BX.removeCustomEvent(fileControl, "onDeleteFile", this._fileChangeHandler);
		}
	};
	BX.Crm.EntityEditorImage.prototype.onDialogShow = function(popup)
	{
		if(popup.uniquePopupId.indexOf("popupavatarEditor") !== 0)
		{
			return;
		}

		BX.addCustomEvent(window, "onApply", this._fileChangeHandler);

		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(false);
		}

		BX.bind(
			popup.popupContainer,
			"click",
			function (e) { BX.eventCancelBubble(e); }
		);
	};
	BX.Crm.EntityEditorImage.prototype.onDialogClose = function(popup)
	{
		if(BX.prop.getString(popup, "uniquePopupId", "").indexOf("popupavatarEditor") !== 0)
		{
			return;
		}

		BX.removeCustomEvent(window, "onApply", this._fileChangeHandler);

		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(true);
		}
	};
	BX.Crm.EntityEditorImage.prototype.onFileChange = function(result)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorImage.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorImage();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorUser === "undefined")
{
	BX.Crm.EntityEditorUser = function()
	{
		BX.Crm.EntityEditorUser.superclass.constructor.apply(this);
		this._input = null;
		this._editButton = null;
		this._photoElement = null;
		this._nameElement = null;
		this._positionElement = null;
		this._userSelector = null;
		this._selectedData = {};
		this._editButtonClickHandler = BX.delegate(this.onEditBtnClick, this);
	};
	BX.extend(BX.Crm.EntityEditorUser, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorUser.prototype.isSingleEditEnabled = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUser.prototype.getRelatedDataKeys = function()
	{
		return (
			[
				this.getDataKey(),
				this._schemeElement.getDataStringParam("formated", ""),
				this._schemeElement.getDataStringParam("position", ""),
				this._schemeElement.getDataStringParam("showUrl", ""),
				this._schemeElement.getDataStringParam("photoUrl", "")
			]
		);
	};
	BX.Crm.EntityEditorUser.prototype.hasContentToDisplay = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUser.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this._schemeElement.getName();
		var title = this._schemeElement.getTitle();
		var value = this._model.getField(name);

		var formattedName = this._model.getSchemeField(this._schemeElement, "formated", "");
		var position = this._model.getSchemeField(this._schemeElement, "position", "");
		var showUrl = this._model.getSchemeField(this._schemeElement, "showUrl", "", "");
		var photoUrl = this._model.getSchemeField(this._schemeElement, "photoUrl", "");

		this._photoElement = BX.create("a",
			{
				props: { className: "crm-widget-employee-avatar-container", target: "_blank" },
				style:
					{
						backgroundImage: BX.type.isNotEmptyString(photoUrl) ? "url('" + photoUrl + "')" : "",
						backgroundSize: BX.type.isNotEmptyString(photoUrl) ? "30px" : ""
					}
			}
		);

		this._nameElement = BX.create("a",
			{
				props: { className: "crm-widget-employee-name", target: "_blank" },
				text: formattedName
			}
		);

		if (showUrl !== "")
		{
			this._photoElement.href = showUrl;
			this._nameElement.href = showUrl;
		}

		this._positionElement = BX.create("SPAN",
			{
				props: { className: "crm-widget-employee-position" },
				text: position
			}
		);

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		var userElement = BX.create("div", { props: { className: "crm-widget-employee-container" } });
		this._editButton = null;
		this._input = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit || (this.isEditInViewEnabled() && !this.isReadOnly()))
		{
			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			this._editButton = BX.create("span", { props: { className: "crm-widget-employee-change" }, text: this.getMessage("change") });
			BX.bind(this._editButton, "click", this._editButtonClickHandler);
			userElement.appendChild(this._editButton);
		}

		userElement.appendChild(this._photoElement);
		userElement.appendChild(
			BX.create("span",
				{
					props: { className: "crm-widget-employee-info" },
					children: [ this._nameElement, this._positionElement ]
				}
			)
		);

		this._wrapper.appendChild(
			BX.create("div",
				{ props: { className: "crm-entity-widget-content-block-inner" }, children: [ userElement ] }
			)
		);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorUser.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
		)
		{
			window.setTimeout(BX.delegate(this.openSelector, this), 0);
		}
	};
	BX.Crm.EntityEditorUser.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._editButton = null;
		this._photoElement = null;
		this._nameElement = null;
		this._positionElement = null;
	};
	BX.Crm.EntityEditorUser.prototype.onEditBtnClick = function(e)
	{
		//If any other control has changed try to switch to edit mode.
		if(this._mode === BX.Crm.EntityEditorMode.view && this.isEditInViewEnabled() && this.getEditor().isChanged())
		{
			this.switchToSingleEditMode();
		}
		else
		{
			this.openSelector();
		}
	};
	BX.Crm.EntityEditorUser.prototype.openSelector = function()
	{
		if(!this._userSelector)
		{
			this._userSelector = BX.Crm.EntityEditorUserSelector.create(
				this._id,
				{ callback: BX.delegate(this.processItemSelect, this) }
			);
		}

		this._userSelector.open(this._editButton);
	};
	BX.Crm.EntityEditorUser.prototype.processItemSelect = function(selector, item)
	{
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;
		var editInView = this.isEditInViewEnabled();
		if(isViewMode && !editInView)
		{
			return;
		}

		this._selectedData =
			{
				id: BX.prop.getInteger(item, "entityId", 0),
				photoUrl: BX.prop.getString(item, "avatar", ""),
				formattedNameHtml: BX.prop.getString(item, "name", ""),
				positionHtml: BX.prop.getString(item, "desc", "")
			};

		this._input.value = this._selectedData["id"];
		this._photoElement.style.backgroundImage = this._selectedData["photoUrl"] !== ""
			? "url('" + this._selectedData["photoUrl"] + "')" : "";
		this._photoElement.style.backgroundSize = this._selectedData["photoUrl"] !== ""
			? "30px" : "";

		this._nameElement.innerHTML = this._selectedData["formattedNameHtml"];
		this._positionElement.innerHTML = this._selectedData["positionHtml"];
		this._userSelector.close();

		if(!isViewMode)
		{
			this.markAsChanged();
		}
		else
		{
			this._editor.saveControl(this);
		}
	};
	BX.Crm.EntityEditorUser.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		if(this._selectedData["id"] > 0)
		{
			var itemId = this._selectedData["id"];

			this._model.setField(
				BX.prop.getString(data, "formated"),
				BX.util.htmlspecialcharsback(this._selectedData["formattedNameHtml"])
			);

			this._model.setField(
				BX.prop.getString(data, "position"),
				this._selectedData["positionHtml"] !== "&nbsp;"
					? BX.util.htmlspecialcharsback(this._selectedData["positionHtml"]) : ""
			);

			this._model.setField(
				BX.prop.getString(data, "showUrl"),
				BX.prop.getString(data, "pathToProfile").replace(/#user_id#/ig, itemId)
			);

			this._model.setField(
				BX.prop.getString(data, "photoUrl"),
				this._selectedData["photoUrl"]
			);

			this._model.setField(this.getName(), itemId);
		}
	};
	BX.Crm.EntityEditorUser.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorUser.prototype.getRuntimeValue = function()
	{
		if (this._mode === BX.Crm.EntityEditorMode.edit && this._selectedData["id"] > 0)
		{
			return this._selectedData["id"];
		}
		return "";
	};
	BX.Crm.EntityEditorUser.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorUser.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorUser.superclass.getMessage.apply(this, arguments)
		);
	};

	if(typeof(BX.Crm.EntityEditorUser.messages) === "undefined")
	{
		BX.Crm.EntityEditorUser.messages = {};
	}
	BX.Crm.EntityEditorUser.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUser();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorAddress === "undefined")
{
	BX.Crm.EntityEditorAddress = function()
	{
		BX.Crm.EntityEditorAddress.superclass.constructor.apply(this);
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorAddress, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorAddress.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorAddress.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorAddress.prototype.hasContentToDisplay = function()
	{
		return(this._mode === BX.Crm.EntityEditorMode.edit || this.getViewHtml() !== "");
	};
	BX.Crm.EntityEditorAddress.prototype.getViewHtml = function()
	{
		var viewFieldName = this._schemeElement.getDataStringParam("view", "");
		if(viewFieldName === "")
		{
			viewFieldName = this._schemeElement.getName() + "_HML";
		}
		return this._model.getStringField(viewFieldName, "");
	};
	BX.Crm.EntityEditorAddress.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this._schemeElement.getName();
		var title = this.getTitle();
		var fields = this._schemeElement.getDataObjectParam("fields", {});
		var labels = this._schemeElement.getDataObjectParam("labels", {});
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{

			var fieldsContainer = BX.create("div", { attrs: { className: "crm-entity-widget-content-block-inner-address" } } );

			this._innerWrapper = BX.create("div",
				{
					attrs: { className: "crm-entity-widget-content-block-inner" },
					children:
					[
						BX.create("div",
							{
								props: {className: "crm-entity-widget-content-block-field-container"},
								children: [ fieldsContainer ]
							}
						)
					]
				}
			);

			for(var key in fields)
			{
				if(!fields.hasOwnProperty(key))
				{
					return;
				}

				var field = fields[key];
				var label = BX.prop.getString(labels, key, key);
				this.layoutField(key, field, label, fieldsContainer);
			}

			BX.bindDelegate(
				fieldsContainer,
				"bxchange",
				{ tag: [ "input", "textarea" ] },
				this._changeHandler
			);
		}
		else
		{
			if(this.hasContentToDisplay())
			{
				this._innerWrapper = BX.create("div",
					{
						attrs: { className: "crm-entity-widget-content-block-inner" },
						children:
						[
							BX.create("div",
								{
									attrs: { className: "crm-entity-widget-content-block-inner-text" },
									html: this.getViewHtml()
								}
							)
						]
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						attrs: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true
	};
	BX.Crm.EntityEditorAddress.prototype.layoutField = function(name, field, label, container)
	{
		var alias = BX.prop.getString(field, "NAME", name);
		var value = this._model.getStringField(alias, "");

		container.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children: [
						BX.create(
							"span",
							{
								attrs: { className: "crm-entity-widget-content-block-title-text" },
								text: label
							}
						)
					]
				}
			)
		);

		if(BX.prop.getBoolean(field, "IS_MULTILINE", false))
		{
			container.appendChild(
				BX.create(
					"textarea",
					{
						props: { className: "crm-entity-widget-content-input", name: alias, value: value }
					}
				)
			);
		}
		else
		{
			container.appendChild(
				BX.create(
					"input",
					{
						props: { className: "crm-entity-widget-content-input", name: alias, type: "text", value: value }
					}
				)
			);
		}
	};
	BX.Crm.EntityEditorAddress.prototype.doClearLayout = function(options)
	{
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorAddress.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorAddress();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorMultifieldItem === "undefined")
{
	BX.Crm.EntityEditorMultifieldItem = function()
	{
		this._id = "";
		this._settings = {};
		this._parent = null;
		this._editor = null;

		this._mode = BX.Crm.EntityEditorMode.view;
		this._data = null;
		this._typeId = "";
		this._valueTypeItems = null;

		this._container = null;
		this._wrapper = null;
		this._valueInput = null;
		this._valueTypeInput = null;
		this._valueTypeSelector = null;

		this._deleteButton = null;
		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);

		this._isJunked = false;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorMultifieldItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._parent = BX.prop.get(this._settings, "parent", null);
			this._editor = this._parent.getEditor();

			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);

			this._typeId = BX.prop.getString(this._settings, "typeId", "");
			this._data = BX.prop.getObject(this._settings, "data", {});
			this._valueTypeItems = BX.prop.getArray(this._settings, "valueTypeItems", []);

			this._container = BX.prop.getElementNode(this._settings, "container", null);
		},
		getId: function()
		{
			return this._id;
		},
		isEmpty: function()
		{
			return BX.util.trim(this.getValue()) === "";
		},
		getTypeId: function()
		{
			return this._typeId;
		},
		getValue: function()
		{
			return BX.prop.getString(this._data, "VALUE", "");
		},
		getValueId: function()
		{
			return BX.prop.getString(this._data, "ID", "");
		},
		getValueTypeId: function()
		{
			var result = BX.prop.getString(this._data, "VALUE_TYPE", "");
			return result !== "" ? result : this.getDefaultValueTypeId();
		},
		getDefaultValueTypeId: function()
		{
			return this._valueTypeItems.length > 0
				? BX.prop.getString(this._valueTypeItems[0], "VALUE") : "";
		},
		getViewData: function()
		{
			return BX.prop.getObject(this._data, "VIEW_DATA", {});
		},
		resolveValueTypeName: function(valueTypeId)
		{
			if(valueTypeId === "")
			{
				return "";
			}

			for(var i = 0, length = this._valueTypeItems.length; i < length; i++)
			{
				var item = this._valueTypeItems[i];
				if(valueTypeId === BX.prop.getString(item, "VALUE", ""))
				{
					return BX.prop.getString(item, "NAME", valueTypeId);
				}
			}
			return valueTypeId;
		},
		prepareControlName: function(name)
		{
			return this.getTypeId() + "[" + this.getValueId() + "]" + "[" + name + "]";
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			this._mode = mode;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
			if(this._hasLayout)
			{
				this.clearLayout();
			}
		},
		focus: function()
		{
			if(this._valueInput)
			{
				BX.focus(this._valueInput);
				BX.Crm.EditorTextHelper.getCurrent().selectAll(this._valueInput);
			}
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			this._valueInput = null;
			this._valueTypeInput = null;
			this._valueTypeSelector = null;
			this._deleteButton = null;
			var valueTypeId = this.getValueTypeId();
			var value = this.getValue();

			this._wrapper = BX.create("div");
			this._container.appendChild(this._wrapper);

			if(this._mode === BX.Crm.EntityEditorMode.edit)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double");

				this._valueInput = BX.create(
					"input",
					{
						attrs:
							{
								className: "crm-entity-widget-content-input",
								name: this.prepareControlName("VALUE"),
								type: "text",
								value: value
							}
					}
				);
				BX.bind(this._valueInput, "input", BX.delegate(this.onValueChange, this));
				this._wrapper.appendChild(this._valueInput);

				this._valueTypeInput = BX.create(
					"input",
					{
						attrs:
							{
								name: this.prepareControlName("VALUE_TYPE"),
								type: "hidden",
								value: valueTypeId
							}
					}
				);
				this._wrapper.appendChild(this._valueTypeInput);

				this._valueTypeSelector = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-select" },
						text: this.resolveValueTypeName(valueTypeId),
						events: { click: BX.delegate(this.onValueTypeSelectorClick, this) }
					}
				);

				this._wrapper.appendChild(
					BX.create(
						"div",
						{
							attrs: { className: "crm-entity-widget-content-block-select" },
							children: [ this._valueTypeSelector ]
						}
					)
				);

				this._deleteButton = BX.create(
					"div",
					{ attrs: { className: "crm-entity-widget-content-remove-block" } }
				);
				this._wrapper.appendChild(this._deleteButton);
				BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

				if(this._editor.isDuplicateControlEnabled())
				{
					var dupControlConfig = this._parent.getDuplicateControlConfig();
					if(dupControlConfig)
					{
						if(!BX.type.isPlainObject(dupControlConfig["field"]))
						{
							dupControlConfig["field"] = {};
						}
						dupControlConfig["field"]["id"] = this.getValueId();
						dupControlConfig["field"]["element"] = this._valueInput;
						this._editor.getDuplicateManager().registerField(dupControlConfig);
					}
				}
			}
			else if(this._mode === BX.Crm.EntityEditorMode.view && !this.isEmpty())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-mutlifield");

				var viewData = this.getViewData();
				var html = BX.prop.getString(viewData, "value", "");
				if(html === "")
				{
					html = BX.util.htmlspecialchars(value);
				}

				this._wrapper.appendChild(
					BX.create(
						"span",
						{
							attrs: { className: "crm-entity-widget-content-block-mutlifield-type" },
							text: this.resolveValueTypeName(valueTypeId)
						}
					)
				);

				var contentWrapper = BX.create(
					"span",
					{
						attrs: { className: "crm-entity-widget-content-block-mutlifield-value" },
						html: html
					}
				);
				this._wrapper.appendChild(contentWrapper);

				if(this._parent.getMultifieldType() === "EMAIL")
				{
					var emailLink = contentWrapper.querySelector("a.crm-entity-email");
					if(emailLink)
					{
						BX.bind(emailLink, "click", BX.delegate(this.onEmailClick, this));
					}
				}
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this._parent.getDuplicateControlConfig();
				if(dupControlConfig)
				{
					if(!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getValueId();
					this._editor.getDuplicateManager().unregisterField(dupControlConfig);
				}
			}

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		adjust: function()
		{
			if(this._hasLayout)
			{
				this._wrapper.style.display = this._isJunked ? "none" : "";
			}
		},
		onValueChange: function(e)
		{
			this._parent.processItemChange(this);
		},
		onValueTypeSelectorClick: function(e)
		{
			var menu = [];
			for(var i = 0, length = this._valueTypeItems.length; i < length; i++)
			{
				var item = this._valueTypeItems[i];
				menu.push(
					{
						text: item["NAME"],
						value: item["VALUE"],
						onclick: BX.delegate( this.onValueTypeSelect, this)
					}
				);
			}

			BX.addClass(this._valueTypeSelector, "active");

			BX.PopupMenu.destroy(this._id);
			BX.PopupMenu.show(
				this._id,
				this._valueTypeSelector,
				menu,
				{
					angle: false, width: this._valueTypeSelector.offsetWidth + 'px',
					events: { onPopupClose: BX.delegate(this.onValueTypeMenuClose, this) }
				}
			);

			BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._valueTypeSelector)["width"]);
		},
		onValueTypeMenuClose: function(e)
		{
			BX.removeClass(this._valueTypeSelector, "active");
		},
		onValueTypeSelect: function(e, item)
		{
			BX.removeClass(this._valueTypeSelector, "active");

			this._valueTypeInput.value = item.value;
			this._valueTypeSelector.innerHTML = BX.util.htmlspecialchars(item.text);

			this._parent.processItemChange(this);
			BX.PopupMenu.destroy(this._id);
		},
		isJunked: function()
		{
			return this._isJunked;
		},
		markAsJunked: function(junked)
		{
			junked = !!junked;
			if(this._isJunked !== junked)
			{
				this._isJunked = junked;
				if(this._isJunked)
				{
					this._valueInput.value = "";
				}
				this.adjust();
			}
		},
		onEmailClick: function(e)
		{
			if(BX.CrmActivityEditor)
			{
				var ownerInfo = this._editor.getOwnerInfo();
				var settings =
				{
					ownerType: ownerInfo["ownerType"],
					ownerID: ownerInfo["ownerID"],
					communications:
					[
						{
							entityType: ownerInfo["ownerType"],
							entityId: ownerInfo["ownerID"],
							type: "EMAIL",
							value: this.getValue()
						}
					]
				};
				BX.CrmActivityEditor.addEmail(settings);
			}
			return BX.PreventDefault(e);
		},
		onDeleteButtonClick: function(e)
		{
			this._parent.processItemDeletion(this);
		}
	};
	BX.Crm.EntityEditorMultifieldItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifieldItem();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorMultifieldItemPhone ==="undefined")
{
	BX.Crm.EntityEditorMultifieldItemPhone = function()
	{
		BX.Crm.EntityEditorMultifieldItemPhone.superclass.constructor.apply(this);

		this._maskedPhone = null;
		this._maskedValueInput = null;
		this._countryFlagNode = null;
	};

	BX.extend(BX.Crm.EntityEditorMultifieldItemPhone, BX.Crm.EntityEditorMultifieldItem);

	BX.Crm.EntityEditorMultifieldItemPhone.prototype.layout = function ()
	{
		var self = this;
		if (this._hasLayout)
		{
			return;
		}

		this._valueInput = null;
		this._valueTypeInput = null;
		this._valueTypeSelector = null;
		var valueTypeId = this.getValueTypeId();
		var value = this.getValue();

		this._wrapper = BX.create("div");
		this._container.appendChild(this._wrapper);

		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double");

			this._valueInput = BX.create(
				"input",
				{
					attrs: {
						name: this.prepareControlName("VALUE"),
						type: "hidden",
						value: value
					}
				}
			);
			this._wrapper.appendChild(this._valueInput);

			this._wrapper.appendChild(BX.create("div", {
				props: {className: "crm-entity-widget-content-input-phone-wrapper"},
				children: [
					this._countryFlagNode = BX.create("span", {
						props: {className: "crm-entity-widget-content-country-flag"}
					}),
					this._maskedValueInput = BX.create(
						"input",
						{
							attrs: {
								className: "crm-entity-widget-content-input crm-entity-widget-content-input-phone",
								type: "text",
								value: value
							}
						}
					)
				]
			}));

			this._maskedPhone = new BX.PhoneNumber.Input({
				node: this._maskedValueInput,
				flagNode: this._countryFlagNode,
				flagSize: 24,
				onChange: function(e)
				{
					self._valueInput.value = e.value;
					self.onValueChange();
				}
			});

			this._valueTypeInput = BX.create(
				"input",
				{
					attrs: {
						name: this.prepareControlName("VALUE_TYPE"),
						type: "hidden",
						value: valueTypeId
					}
				}
			);
			this._wrapper.appendChild(this._valueTypeInput);

			this._valueTypeSelector = BX.create(
				"div",
				{
					props: {className: "crm-entity-widget-content-select"},
					text: this.resolveValueTypeName(valueTypeId),
					events: {click: BX.delegate(this.onValueTypeSelectorClick, this)}
				}
			);

			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						attrs: {className: "crm-entity-widget-content-block-select"},
						children: [this._valueTypeSelector]
					}
				)
			);

			this._deleteButton = BX.create(
				"div",
				{ attrs: { className: "crm-entity-widget-content-remove-block" } }
			);
			this._wrapper.appendChild(this._deleteButton);
			BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

			if (this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this._parent.getDuplicateControlConfig();
				if (dupControlConfig)
				{
					if (!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getValueId();
					dupControlConfig["field"]["element"] = this._maskedValueInput;
					this._editor.getDuplicateManager().registerField(dupControlConfig);
				}
			}
		}
		else if (this._mode === BX.Crm.EntityEditorMode.view && !this.isEmpty())
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-mutlifield");

			var viewData = this.getViewData();
			var html = BX.prop.getString(viewData, "value", "");
			if(html === "")
			{
				html = BX.util.htmlspecialchars(value);
			}

			this._wrapper.appendChild(
				BX.create(
					"span",
					{
						attrs: {className: "crm-entity-widget-content-block-mutlifield-type"},
						text: this.resolveValueTypeName(valueTypeId)
					}
				)
			);

			this._wrapper.appendChild(
				BX.create(
					"span",
					{
						attrs: {className: "crm-entity-widget-content-block-mutlifield-value"},
						html: html
					}
				)
			);
		}

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMultifieldItemPhone.prototype.focus = function()
	{
		if(this._maskedValueInput)
		{
			BX.focus(this._maskedValueInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._maskedValueInput);
		}
	};
	BX.Crm.EntityEditorMultifieldItemPhone.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifieldItemPhone();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorMultifield === "undefined")
{
	BX.Crm.EntityEditorMultifield = function()
	{
		BX.Crm.EntityEditorMultifield.superclass.constructor.apply(this);
		this._items = null;
		this._itemWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorMultifield, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorMultifield.prototype.doInitialize = function()
	{
		this.initializeItems();
	};
	BX.Crm.EntityEditorMultifield.prototype.initializeItems = function()
	{
		var name = this.getName();
		var data = this._model.getField(name, []);
		if(data.length === 0)
		{
			data.push({ "ID": "n0" });
		}

		for(var i = 0, length = data.length; i < length; i++)
		{
			this.addItem(data[i]);
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.findItemIndex = function(item)
	{
		if(!this._items)
		{
			return -1;
		}

		for(var i = 0, length = this._items.length; i < length; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}

		return -1;
	};
	BX.Crm.EntityEditorMultifield.prototype.resetItems = function()
	{
		if(this._hasLayout)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].clearLayout();
			}
		}

		this._items = [];
	};
	BX.Crm.EntityEditorMultifield.prototype.deleteItem = function(item)
	{
		if(!this._items)
		{
			return;
		}

		var index = this.findItemIndex(item);
		if(index >= 0)
		{
			this._items[index].markAsJunked(true);
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.reset = function()
	{
		this.resetItems();
		this.initializeItems();
	};
	BX.Crm.EntityEditorMultifield.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}

		var length = this._items.length;
		if(length === 0)
		{
			return false;
		}

		for(var i = 0; i < length; i++)
		{
			if(!this._items[i].isEmpty())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorMultifield.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMultifield.prototype.getContentWrapper = function()
	{
		return this._itemWrapper;
	};
	BX.Crm.EntityEditorMultifield.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorMultifield.prototype.prepareItemsLayout = function()
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			item.setMode(this._mode);
			item.setContainer(this._itemWrapper);
			item.layout();
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMultifield.prototype.getContentWrapper = function()
	{
		return this._itemWrapper;
	};
	BX.Crm.EntityEditorMultifield.prototype.focus = function()
	{
		if(this._items && this._items.length > 0)
		{
			this._items[this._items.length - 1].focus();
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-multifield" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		this._itemWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));

		this._itemWrapper = BX.create("div", { attrs: { className: "crm-entity-widget-content-block-inner" } });
		this._wrapper.appendChild(this._itemWrapper);

		if(this.hasContentToDisplay())
		{
			this.prepareItemsLayout();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._itemWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						attrs: { className: "crm-entity-widget-content-block-add-field" },
						children:
						[
							BX.create(
								"span",
								{
									attrs: { className: "crm-entity-widget-content-add-field" },
									text: this.getMessage("add"),
									events: { click: BX.delegate(this.onAddButtonClick, this) }
								}
							)
						]
					}
				)
			);
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMultifield.prototype.doClearLayout = function(options)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			item.clearLayout();
			item.setContainer(null);
		}
		this._itemWrapper = null;
	};
	BX.Crm.EntityEditorMultifield.prototype.refreshLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMultifield.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		this.resetItems();
		BX.cleanNode(this._itemWrapper);

		this.initializeItems();
		if(this.hasContentToDisplay())
		{
			this.prepareItemsLayout();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._itemWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.getMultifieldType = function()
	{
		return this._schemeElement.getDataStringParam("type", "");
	};
	BX.Crm.EntityEditorMultifield.prototype.addItem = function(data)
	{
		var item;
		var typeId = this._schemeElement.getName();

		if(typeId === 'PHONE')
		{
			item = BX.Crm.EntityEditorMultifieldItemPhone.create(
				"",
				{
					parent: this,
					typeId: this._schemeElement.getName(),
					valueTypeItems: this._schemeElement.getDataArrayParam("items", []),
					data: data
				}
			);
		}
		else
		{
			item = BX.Crm.EntityEditorMultifieldItem.create(
				"",
				{
					parent: this,
					typeId: this._schemeElement.getName(),
					valueTypeItems: this._schemeElement.getDataArrayParam("items", []),
					data: data
				}
			);
		}

		if(this._items === null)
		{
			this._items = [];
		}

		this._items.push(item);

		if(this._hasLayout)
		{
			item.setMode(this._mode);
			item.setContainer(this._itemWrapper);
			item.layout();
		}

		return item;
	};
	BX.Crm.EntityEditorMultifield.prototype.onAddButtonClick = function(e)
	{
		this.addItem({ "ID": "n" + this._items.length.toString() });
	};
	BX.Crm.EntityEditorMultifield.prototype.processItemChange = function(item)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorMultifield.prototype.processItemDeletion = function(item)
	{
		this.deleteItem(item);
		this.markAsChanged();
	};
	BX.Crm.EntityEditorMultifield.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifield();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClientMode === "undefined")
{
	BX.Crm.EntityEditorClientMode =
	{
		undefined: 0,
		select: 1,
		create: 2,
		edit: 3
	};
}

if(typeof BX.Crm.EntityEditorClientSearchBox === "undefined")
{
	BX.Crm.EntityEditorClientSearchBox = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;

		this._container = null;
		this._wrapper = null;

		this._badgeElement = null;
		this._editButton = null;
		this._changeButton = null;
		this._deleteButton = null;

		this._parentField = null;
		this._entityInfo = null;
		this._entityTypeName = "";

		this._externalEditorPages = null;

		this._searchInput = null;
		this._searchControl = null;

		this._loaderConfig = null;

		this._changeNotifier = null;
		this._titleChangeNotifier = null;
		this._resetNotifier = null;
		this._deletionNotifier = null;

		this._enableDeletion = true;

		this._editButtonHandler = BX.delegate(this.onEditButtonClick, this);
		this._changeButtonHandler = BX.delegate(this.onChangeButtonClick, this);
		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);
		this._inputFocusHandler = BX.delegate(this.onInputFocus, this);
		this._inputBlurHandler = BX.delegate(this.onInputBlur, this);
		this._inputDblClickHandler = BX.delegate(this.onInputDblClick, this);

		this._mode = BX.Crm.EntityEditorClientMode.undefined;
		this._multifieldChangeNotifier = null;

		this._maskedPhone = null;
		this._emailInput = null;

		this._phoneId = "";
		this._emailId = "";

		this._enableQuickEdit = true;

		this._hasFocus = false;
		this._hasLayout = false;
		this._hasMultifieldLayout = false;
	};
	BX.Crm.EntityEditorClientSearchBox.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._parentField = BX.prop.get(this._settings, "parentField", null);
			this._container = BX.prop.getElementNode(this._settings, "container", null);

			var entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			if(entityInfo)
			{
				this._entityInfo = entityInfo;
				this._entityTypeName = entityInfo.getTypeName();
			}
			else
			{
				this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			}

			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorClientMode.select);
			if(this._mode === BX.Crm.EntityEditorClientMode.edit && !(this._entityInfo && this._entityInfo.canUpdate()))
			{
				this._mode = BX.Crm.EntityEditorClientMode.select;
			}

			this._enableQuickEdit = BX.prop.getBoolean(this._settings, "enableQuickEdit", true);
			this._enableDeletion = BX.prop.getBoolean(this._settings, "enableDeletion", true);
			this._loaderConfig = BX.prop.get(this._settings, "loaderConfig", null);

			this._changeNotifier = BX.CrmNotifier.create(this);
			this._titleChangeNotifier = BX.CrmNotifier.create(this);
			this._deletionNotifier = BX.CrmNotifier.create(this);
			this._resetNotifier = BX.CrmNotifier.create(this);

			this._multifieldChangeNotifier = BX.CrmNotifier.create(this);
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorClientSearchBox.messages, name);
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		setEntityTypeName: function(entityTypeName)
		{
			if(this._entityTypeName !== entityTypeName)
			{
				this._entityTypeName = entityTypeName;
			}
		},
		setEntity: function(entityInfo, enableNotification)
		{
			var previousEntityInfo = this._entityInfo;

			this._entityInfo = entityInfo;

			if(entityInfo)
			{
				this._entityTypeName = entityInfo.getTypeName();
			}

			if(this._entityInfo && this._entityInfo.getId() === 0)
			{
				this.setMode(BX.Crm.EntityEditorClientMode.create);
			}
			else
			{
				this.setMode(BX.Crm.EntityEditorClientMode.select);
			}

			this.clearMultifieldLayout();
			this.adjust();

			if(enableNotification)
			{
				this._changeNotifier.notify([ this._entityInfo , previousEntityInfo ]);
			}
		},
		setupEntity: function(entityTypeName, entityId)
		{
			if(entityId <= 0)
			{
				return;
			}

			this.setEntityTypeName(entityTypeName);
			this.loadEntityInfo(entityId);
		},
		hasEntity: function()
		{
			return !!this._entityInfo;
		},
		isNewEntity: function()
		{
			return this._entityInfo && this._entityInfo.getId() === 0;
		},
		canUpdateEntity: function()
		{
			return this._entityInfo && this._entityInfo.canUpdate();
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			if(!BX.type.isNumber(mode))
			{
				mode = parseInt(mode);
				if(!BX.type.isNumber(mode))
				{
					throw "EntityEditorClientSearchBox: Argument must be integer.";
				}
			}

			if(this._mode === mode)
			{
				return;
			}

			this._mode = mode;
		},
		layout: function(options)
		{
			if(this._hasLayout)
			{
				return;
			}

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-row" } });
			this.innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-inner" } });

			var anchor = BX.prop.getElementNode(options, "anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._wrapper.appendChild(this.innerWrapper);

			var boxWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
			this.innerWrapper.appendChild(boxWrapper);

			var icon = BX.create("div", { props: { className: "crm-entity-widget-img-box" } });
			if(this._entityTypeName === BX.CrmEntityType.names.company)
			{
				BX.addClass(icon, "crm-entity-widget-img-company");
			}
			else if(this._entityTypeName === BX.CrmEntityType.names.contact)
			{
				BX.addClass(icon, "crm-entity-widget-img-contact");
			}
			boxWrapper.appendChild(icon);

			this._searchInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.prop.getString(this._settings, "placeholder", ""),
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input",
							autocomplete: "nope"
						}
				}
			);
			boxWrapper.appendChild(this._searchInput);
			BX.bind(this._searchInput, "focus", this._inputFocusHandler);
			BX.bind(this._searchInput, "blur", this._inputBlurHandler);
			BX.bind(this._searchInput, "dblclick", this._inputDblClickHandler);

			this._badgeElement = BX.create("div", { props: { className: "crm-entity-widget-badge" } });
			boxWrapper.appendChild(this._badgeElement);

			this._editButton = BX.create("div", { props: { className: "crm-entity-widget-btn-edit" } });
			boxWrapper.appendChild(this._editButton);

			BX.bind(this._editButton, "click", this._editButtonHandler);

			this._changeButton = BX.create(
				"div",
				{
					props:
						{
							className: "crm-entity-widget-btn-select",
							title: this.getMessage(this._entityTypeName.toLowerCase() + "ChangeButtonHint")
						}
				}
			);
			boxWrapper.appendChild(this._changeButton);

			BX.bind(this._changeButton, "click", this._changeButtonHandler);

			if(this._entityInfo)
			{
				//Move it in BX.UI.Dropdown
				this._searchInput.value = this._entityInfo.getTitle();
			}

			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ this._entityTypeName ], scope: "index" },
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					enableCreation: BX.prop.getBoolean(this._settings, "enableCreation", false),
					enableCreationOnBlur: this._enableQuickEdit,
					context: { origin: "crm.entity.editor", isEmbedded: this._editor.isEmbedded()  },
					messages:
						{
							creationLegend: this.getMessage(this._entityTypeName.toLowerCase() + "ToCreateLegend"),
							notFound: this.getMessage("notFound")
						},
					events:
						{
							onSelect: this.onEntitySelect.bind(this),
							onAdd: this.onEntityAdd.bind(this),
							onReset: this.onEntityReset.bind(this)
						}
				}
			);

			this._deleteButton = BX.create("div", { props: { className: "crm-entity-widget-btn-close" } });
			if(!this._enableDeletion)
			{
				this._deleteButton.style.display = "none";
			}
			this.innerWrapper.appendChild(this._deleteButton);
			BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

			window.setTimeout(function(){ this.adjust(options); }.bind(this), 0);
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this.clearMultifieldLayout();

			BX.unbind(this._editButton, "click", this._editButtonHandler);
			BX.unbind(this._deleteButton, "click", this._deleteButtonHandler);
			BX.unbind(this._changeButton, "click", this._changeButtonHandler);

			this._deleteButton = this._changeButton = this._searchControl = this._badgeElement = null;
			this._wrapper = BX.remove(this._wrapper);

			this._hasLayout = false;
		},
		prepareMultifieldLayout: function()
		{
			if(this._hasMultifieldLayout)
			{
				return;
			}

			this._multifieldContainer = BX.create("div", { props: { className: "crm-entity-widget-content-multifield" } });
			this._wrapper.appendChild(this._multifieldContainer);

			this._phoneInput = BX.create("input", { props: { type: "hidden" } });
			this._countryFlagNode = BX.create("span", { props: {className: "crm-entity-widget-content-country-flag"}});
			this._maskedPhoneInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.message("CRM_EDITOR_PHONE"),
							className: "crm-entity-widget-content-input crm-entity-widget-content-input-phone",
							autocomplete: "nope"
						}
				}
			);

			this._multifieldContainer.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-content-multifield-item" },
						children:
							[
								this._countryFlagNode,
								this._maskedPhoneInput,
								this._phoneInput
							]
					}
				)
			);

			this._maskedPhone = new BX.PhoneNumber.Input(
				{
					node: this._maskedPhoneInput,
					flagNode: this._countryFlagNode,
					flagSize: 24,
					onChange: BX.delegate(this.onPhoneChange, this)
				}
			);

			this._emailInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.message("CRM_EDITOR_EMAIL"),
							className: "crm-entity-widget-content-input",
							autocomplete: "nope"
						}
				}
			);
			BX.bind(this._emailInput, "input", BX.delegate(this.onEmailChange, this));

			this._multifieldContainer.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-content-multifield-item" },
						children: [ this._emailInput ]
					}
				)
			);

			var emailId = "", phoneId = "", fieldCounter = 0;
			this._phoneId = this._emailId = "";
			if(this._entityInfo)
			{
				var phones = this._entityInfo.getPhones();
				if(phones.length === 0)
				{
					this._maskedPhone.setValue((this._phoneInput.value = ""));
				}
				else
				{
					this._phoneId = BX.prop.getString(phones[0], "ID", "");
					phoneId = this.parseMultifieldPseudoId(this._phoneId);
					if(phoneId >= 0)
					{
						fieldCounter = phoneId + 1;
					}
					this._maskedPhone.setValue((this._phoneInput.value = BX.prop.getString(phones[0], "VALUE", "")));
				}

				var emails = this._entityInfo.getEmails();
				if(emails.length === 0)
				{
					this._emailInput.value = "";
				}
				else
				{
					this._emailId = BX.prop.getString(emails[0], "ID", "");
					emailId = this.parseMultifieldPseudoId(this._emailId);
					if(emailId >= 0)
					{
						fieldCounter = emailId + 1;
					}
					this._emailInput.value = BX.prop.getString(emails[0], "VALUE", "");
				}
			}
			else
			{
				this._emailInput.value = "";
				this._maskedPhone.setValue((this._phoneInput.value = ""));
			}

			if(this._phoneId === "")
			{
				this._phoneId = this.prepareMultifieldPseudoId(fieldCounter);
				fieldCounter++;
			}

			if(this._emailId === "")
			{
				this._emailId = this.prepareMultifieldPseudoId(fieldCounter);
				//fieldCounter++;
			}

			this._hasMultifieldLayout = true;
		},
		clearMultifieldLayout: function()
		{
			if(!this._hasMultifieldLayout)
			{
				return;
			}

			this._multifieldContainer = BX.remove(this._multifieldContainer);

			this._phoneInput = this._maskedPhone = this._emailInput = null;
			this._phoneId = this._emailId = "";

			this._hasMultifieldLayout = false;
		},
		prepareMultifieldPseudoId: function(num)
		{
			return ("n" + num.toString());
		},
		parseMultifieldPseudoId: function(pseudoId)
		{
			var m = pseudoId.match(/^n(\d+)/);
			return BX.type.isArray(m) && m.length > 1 ? parseInt(m[1]) : -1;
		},
		isNeedToSave: function()
		{
			return (this._mode === BX.Crm.EntityEditorClientMode.create
				|| this._mode === BX.Crm.EntityEditorClientMode.edit
			);
		},
		save: function()
		{
			if(this._mode !== BX.Crm.EntityEditorClientMode.create && this._mode !== BX.Crm.EntityEditorClientMode.edit)
			{
				return;
			}

			if(!this._entityInfo)
			{
				return;
			}

			if(this._searchInput && this._searchInput.value !== this._entityInfo.getTitle())
			{
				this._entityInfo.setTitle(this._searchInput.value);
			}

			if(this._phoneInput)
			{
				this._entityInfo.setMultifieldById(
					{ "ID": this._phoneId, "TYPE_ID": "PHONE", "VALUE": this._phoneInput.value },
					this._phoneId
				);
			}

			if(this._emailInput)
			{
				this._entityInfo.setMultifieldById(
					{ "ID": this._emailId, "TYPE_ID": "EMAIL", "VALUE": this._emailInput.value },
					this._emailId
				);
			}
		},
		focus: function()
		{
			if(this._searchInput)
			{
				this._searchInput.focus();
			}
		},
		hasValue: function()
		{
			return !!this._entityInfo;
		},
		addMultifieldChangeListener: function(listener)
		{
			this._multifieldChangeNotifier.addListener(listener);
		},
		removeMultifieldChangeListener: function(listener)
		{
			this._multifieldChangeNotifier.removeListener(listener);
		},
		addTitleChangeListener: function(listener)
		{
			this._titleChangeNotifier.addListener(listener);
		},
		removeTitleChangeListener: function(listener)
		{
			this._titleChangeNotifier.removeListener(listener);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		addDeletionListener: function(listener)
		{
			this._deletionNotifier.addListener(listener);
		},
		removeDeletionListener: function(listener)
		{
			this._deletionNotifier.removeListener(listener);
		},
		addResetListener: function(listener)
		{
			this._resetNotifier.addListener(listener);
		},
		removeResetListener: function(listener)
		{
			this._resetNotifier.removeListener(listener);
		},
		isQuickEditEnabled: function()
		{
			return this._enableQuickEdit;
		},
		enableQuickEdit: function(enable)
		{
			enable = !!enable;
			if(this._enableQuickEdit === enable)
			{
				return;
			}

			this._enableQuickEdit = enable;

			if(this._searchControl)
			{
				this._searchControl.enableCreationOnBlur = this._enableQuickEdit;
			}
		},
		enableDeletion: function(enable)
		{
			enable = !!enable;
			if(this._enableDeletion === enable)
			{
				return;
			}

			this._enableDeletion = enable;

			if(this._hasLayout)
			{
				this._deleteButton.style.display = enable ? "" : "none";
			}
		},
		adjust: function(options)
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(this._hasFocus)
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-complete");
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-inprogress");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-inprogress");
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-complete");
			}

			if(this.hasEntity())
			{
				if(this._mode === BX.Crm.EntityEditorClientMode.create
					|| this._mode === BX.Crm.EntityEditorClientMode.edit
				)
				{
					this._badgeElement.innerHTML = this.getMessage(
						this._mode === BX.Crm.EntityEditorClientMode.create
							? this._entityTypeName.toLowerCase() + "ToCreateTag"
							: "entityEditTag"
					);

					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");

					BX.addClass(
						this._wrapper,
						this._mode === BX.Crm.EntityEditorClientMode.create
							? "crm-entity-widget-content-block-new-mode"
							: "crm-entity-widget-content-block-edit-mode"
					);

					if(this._searchInput.value.length < 0)
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
					}
					else
					{
						BX.addClass(this._wrapper, "crm-entity-widget-content-block-textreset");
					}

					this.prepareMultifieldLayout();

					if(this._searchControl)
					{
						this._searchControl.isDisabled = true;
					}
				}
				else if(this._mode === BX.Crm.EntityEditorClientMode.select)
				{
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-badge");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");

					this.clearMultifieldLayout();

					if(this._searchControl)
					{
						this._searchControl.isDisabled = false;
					}
				}

				if(this._searchInput.value.length > 0)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				}
				else
				{
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				}
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-new-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-edit-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-complete");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-inprogress");

				this.clearMultifieldLayout();

				if(this._searchControl)
				{
					this._searchControl.isDisabled = false;
				}
			}
		},
		getParentContextId: function()
		{
			return this._parentField.getContextId();
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._parentField.getEntityCreateUrl(entityTypeName);
		},
		getEntityEditUrl: function(entityTypeName, entityId)
		{
			return this._parentField.getEntityEditUrl(entityTypeName, entityId);
		},
		openEntityCreatePage: function(params)
		{
			var url = this.getEntityCreateUrl(this._entityTypeName);
			if(url === "")
			{
				return;
			}

			var contextId = this.getParentContextId() + "_" + BX.util.getRandomString(6).toUpperCase();

			var urlParams = BX.prop.getObject(params, "urlParams", {});
			urlParams["external_context_id"] = contextId;
			url = BX.util.add_url_param(url, urlParams);

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalEditorPages)
			{
				this._externalEditorPages = {};
			}
			this._externalEditorPages[contextId] = url;
			BX.Crm.Page.open(url);
		},
		openEntityEditPage: function(params)
		{
			var url = this.getEntityEditUrl(this._entityTypeName, BX.prop.getInteger(params, "entityId", 0));
			if(url === "")
			{
				return;
			}

			var contextId = this.getParentContextId() + "_" + BX.util.getRandomString(6).toUpperCase();

			var urlParams = BX.prop.getObject(params, "urlParams", {});
			urlParams["external_context_id"] = contextId;
			url = BX.util.add_url_param(url, urlParams);

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalEditorPages)
			{
				this._externalEditorPages = {};
			}
			this._externalEditorPages[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onExternalEvent: function(params)
		{
			var eventName = BX.prop.getString(params, "key", "");

			if(eventName !== "onCrmEntityCreate" && eventName !== "onCrmEntityUpdate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			var contextId = BX.prop.getString(value, "context", "");

			if(BX.prop.getString(this._externalEditorPages, contextId, "") === "")
			{
				return;
			}

			var entityTypeName = BX.prop.getString(value, "entityTypeName", "");
			var entityId = BX.prop.getInteger(value, "entityId", 0);

			if(this._entityTypeName !== entityTypeName)
			{
				return;
			}

			if(eventName === "onCrmEntityUpdate" && !(this._entityInfo && this._entityInfo.getId() === entityId))
			{
				return;
			}

			this.setupEntity(this._entityTypeName, entityId);

			window.setTimeout(
				function()
				{
					BX.Crm.Page.close(
						this._externalEditorPages[contextId],
						{ identity: { key: "external_context_id", value: contextId } }
					);
					delete this._externalEditorPages[contextId];
				}.bind(this),
				100
			);
		},
		onPhoneChange: function(e)
		{
			if(!this._phoneInput)
			{
				return;
			}

			if(this._phoneInput.value !== e.value)
			{
				this._phoneInput.value = e.value;
				this._multifieldChangeNotifier.notify();
			}
		},
		onEmailChange: function(e)
		{
			this._multifieldChangeNotifier.notify();
		},
		onEditButtonClick: function()
		{
			if(this.isNewEntity()
				|| !this.canUpdateEntity()
				|| this.getMode() === BX.Crm.EntityEditorClientMode.edit
			)
			{
				return;
			}

			if(this._searchControl)
			{
				this._searchControl.destroyPopupWindow();
			}

			if(!this.isQuickEditEnabled())
			{
				this.openEntityEditPage(
					{
						entityId: this._entityInfo.getId(),
						urlParams: { init_mode: "edit" }
					}
				);
				return;
			}

			this.setMode(BX.Crm.EntityEditorClientMode.edit);
			this.clearMultifieldLayout();
			this.adjust();
		},
		onChangeButtonClick: function(e)
		{
			this.setMode(BX.Crm.EntityEditorClientMode.select);

			if(this._searchInput)
			{
				this._searchInput.focus();
			}

			if(this._searchControl)
			{
				this._searchControl.getPopupWindow().show();
			}
		},
		onDeleteButtonClick: function(e)
		{
			if(this._enableDeletion)
			{
				this._deletionNotifier.notify([ this._entityInfo ]);
			}
		},
		onInputFocus: function(e)
		{
			this._hasFocus = true;
			window.setTimeout(BX.delegate(this.adjust, this), 150);
		},
		onInputBlur: function(e)
		{
			this._hasFocus = false;
			window.setTimeout(BX.delegate(this.adjust, this), 300);

			if(this._mode === BX.Crm.EntityEditorClientMode.edit && this._searchInput.value !== this._entityInfo.getTitle())
			{
				this._titleChangeNotifier.notify([]);
			}
		},
		onInputDblClick: function(e)
		{
		},
		onEntityAdd: function(sender, item)
		{
			var title = BX.prop.getString(item, "title", "");
			if(title === "")
			{
				return;
			}

			if(this._searchControl)
			{
				this._searchControl.destroyPopupWindow();
			}

			if(!this.isQuickEditEnabled())
			{
				this.openEntityCreatePage({ urlParams: { title: title } });
				return;
			}

			var entityData = { typeName: this._entityTypeName, title: title };
			if(BX.validation.checkIfEmail(title))
			{
				entityData["title"] = this.getMessage(
					this._entityTypeName === BX.CrmEntityType.names.contact ? "unnamed" : "untitled"
				);
				entityData["advancedInfo"] =
					{
						"multiFields": [ { "ID": this.prepareMultifieldPseudoId(0), "TYPE_ID": "EMAIL", "VALUE": title } ]
					};
			}
			else if(BX.validation.checkIfPhone(title))
			{
				entityData["title"] = this.getMessage(
					this._entityTypeName === BX.CrmEntityType.names.contact ? "unnamed" : "untitled"
				);
				entityData["advancedInfo"] =
					{
						"multiFields": [ { "ID": this.prepareMultifieldPseudoId(0), "TYPE_ID": "PHONE", "VALUE": title } ]
					};
			}

			if(this._searchInput.value !== entityData["title"])
			{
				this._searchInput.value = entityData["title"];
			}

			this.setEntity(BX.CrmEntityInfo.create(entityData), true);

			this._searchControl.destroyPopupWindow();
		},
		onEntityReset: function()
		{
			this.reset();
			this._searchControl.destroyPopupWindow();
		},
		onEntitySelect: function(sender, item)
		{
			var entityTypeName = BX.prop.getString(item, "type", "");
			var entityId = BX.prop.getInteger(item, "id", 0);
			var title = BX.prop.getString(item, "title", "");

			this.setEntityTypeName(entityTypeName);
			if(entityId <= 0)
			{
				return;
			}

			this.loadEntityInfo(entityId);

			this._searchInput.value = title;
			this._searchControl.destroyPopupWindow();
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(entityData)
			{
				this.setEntity(BX.CrmEntityInfo.create(entityData), true);
				if(this._hasLayout)
				{
					var anchor = this._wrapper.nextSibling;
					this.clearLayout();
					this.layout({ anchor: anchor });
				}
			}
		},
		reset: function()
		{
			this._searchInput.value = "";

			var previousEntityInfo = this._entityInfo;
			this._entityInfo = null;
			this._resetNotifier.notify([ previousEntityInfo ]);

			window.setTimeout(BX.delegate(this.adjust, this), 150);
		},
		loadEntityInfo: function(entityId)
		{
			var loader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
			if(!loader)
			{
				return;
			}

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: loader["url"],
					action: loader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId, "NORMALIZE_MULTIFIELDS": "Y" }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		}
	};
	if(typeof(BX.Crm.EntityEditorClientSearchBox.messages) === "undefined")
	{
		BX.Crm.EntityEditorClientSearchBox.messages = {};
	}
	BX.Crm.EntityEditorClientSearchBox.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClientSearchBox();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClientLayoutType === "undefined")
{
	BX.Crm.EntityEditorClientLayoutType =
	{
		undefined: 0,
		contactCompany: 1,
		companyContact: 2,
		contact: 3,
		company: 4,

		names:
		{
			contactCompany: "CONTACT_COMPANY",
			companyContact: "COMPANY_CONTACT",
			contact: "CONTACT",
			company: "COMPANY"
		},

		resolveId: function(name)
		{
			name = name.toUpperCase();
			if(this.names.contactCompany === name)
			{
				return this.contactCompany;
			}
			else if(this.names.companyContact === name)
			{
				return this.companyContact;
			}
			else if(this.names.contact === name)
			{
				return this.contact;
			}
			else if(this.names.company === name)
			{
				return this.company;
			}

			return this.undefined;
		}
	};
}

if(typeof BX.Crm.EntityEditorClientLight === "undefined")
{
	BX.Crm.EntityEditorClientLight = function()
	{
		BX.Crm.EntityEditorClientLight.superclass.constructor.apply(this);
		this._map = null;
		this._info = null;

		this._primaryLoaderConfig = null;
		this._secondaryLoaderConfig = null;

		this._dataElements = null;

		this._companyInfos = null;
		this._contactInfos = null;

		this._enableCompanyMultiplicity = false;

		this._companyTitleWrapper = null;
		this._contactTitleWrapper = null;

		this._companySearchBoxes = null;
		this._contactSearchBoxes = null;

		this._companyPanels = null;
		this._contactPanels = null;

		this._companyWrapper = null;
		this._contactWrapper = null;

		this._addCompanyButton = null;
		this._addContactButton = null;

		this._innerWrapper = null;

		this._layoutType = BX.Crm.EntityEditorClientLayoutType.undefined;
		this._enableLayoutTypeChange = false;
		this._enableQuickEdit = null;

		this._companyNameChangeHandler = BX.delegate(this.onCompanyNameChange, this);
		this._companyChangeHandler = BX.delegate(this.onCompanyChange, this);
		this._companyDeletionHandler = BX.delegate(this.onCompanyDelete, this);
		this._companyResetHandler = BX.delegate(this.onCompanyReset, this);
		this._contactNameChangeHandler = BX.delegate(this.onContactNameChange, this);
		this._contactChangeHandler = BX.delegate(this.onContactChange, this);
		this._contactDeletionHandler = BX.delegate(this.onContactDelete, this);
		this._contactResetHandler = BX.delegate(this.onContactReset, this);
		this._requisiteChangeHandler = BX.delegate(this.onRequisiteChange, this);
		this._multifieldChangeHandler = BX.delegate(this.onMultifieldChange, this);
	};
	BX.extend(BX.Crm.EntityEditorClientLight, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorClientLight.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorClientLight.superclass.doInitialize.apply(this);
		this._map = this._schemeElement.getDataObjectParam("map", {});

		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClientLight.prototype.initializeFromModel = function()
	{
		this._companyInfos = BX.Collection.create();
		this._contactInfos = BX.Collection.create();

		this._info = this._model.getSchemeField(this._schemeElement, "info", {});
		this.initializeEntityInfos(BX.prop.getArray(this._info, "COMPANY_DATA", []), this._companyInfos);
		this.initializeEntityInfos(BX.prop.getArray(this._info, "CONTACT_DATA", []), this._contactInfos);

		this._enableCompanyMultiplicity = this._schemeElement.getDataBooleanParam("enableCompanyMultiplicity", false);

		var loaders = this._schemeElement.getDataObjectParam("loaders", {});
		this._primaryLoaderConfig = BX.prop.getObject(loaders, "primary", {});
		this._secondaryLoaderConfig = BX.prop.getObject(loaders, "secondary", {});

		//region Layout Type
		this._enableLayoutTypeChange = true;

		var fixedLayoutTypeName = this._schemeElement.getDataStringParam("fixedLayoutType", "");
		if(fixedLayoutTypeName !== "")
		{
			var fixedLayoutType = BX.Crm.EntityEditorClientLayoutType.resolveId(fixedLayoutTypeName);
			if(fixedLayoutType !== BX.Crm.EntityEditorClientLayoutType.undefined)
			{
				this._layoutType = fixedLayoutType;
				this._enableLayoutTypeChange = false;
			}
		}
		//endregion
	};
	BX.Crm.EntityEditorClientLight.prototype.initializeEntityInfos = function(sourceData, collection)
	{
		for(var i = 0, length = sourceData.length; i < length; i++)
		{
			var info = BX.CrmEntityInfo.create(sourceData[i]);
			if(info.getId() > 0)
			{
				collection.add(info);
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.createDataElement = function(key, value)
	{
		var name = BX.prop.getString(this._map, key, "");

		if(name === "")
		{
			return;
		}

		var input = BX.create("input", { attrs: { name: name, type: "hidden" } });
		if(BX.type.isNotEmptyString(value))
		{
			input.value = value;
		}

		if(!this._dataElements)
		{
			this._dataElements = {};
		}

		this._dataElements[key] = input;
		if(this._wrapper)
		{
			this._wrapper.appendChild(input);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorClientLight.messages;
		return (m.hasOwnProperty(name)
				? m[name]
				: BX.Crm.EntityEditorClientLight.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorClientLight.prototype.hasCompanies = function()
	{
		return this._companyInfos !== null && this._companyInfos.length() > 0;
	};
	BX.Crm.EntityEditorClientLight.prototype.hasContacts = function()
	{
		return this._contactInfos !== null && this._contactInfos.length() > 0;
	};
	BX.Crm.EntityEditorClientLight.prototype.addCompany = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			if(!this._companyInfos)
			{
				this._companyInfos = BX.Collection.create();
			}

			this._companyInfos.add(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeCompany = function(entityInfo)
	{
		if(this._companyInfos && (entityInfo instanceof BX.CrmEntityInfo))
		{
			this._companyInfos.remove(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.addContact = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			if(!this._contactInfos)
			{
				this._contactInfos = BX.Collection.create();
			}

			this._contactInfos.add(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContact = function(entityInfo)
	{
		if(this._contactInfos && (entityInfo instanceof BX.CrmEntityInfo))
		{
			this._contactInfos.remove(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.hasContentToDisplay = function()
	{
		return(
			this.hasCompanies()
			|| (this._contactInfos !== null && this._contactInfos.length() > 0)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorClientLight.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorClientLight.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClientLight.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityCreateUrl = function(entityTypeName)
	{
		return this._editor.getEntityCreateUrl(entityTypeName);
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityEditUrl = function(entityTypeName, entityId)
	{
		return this._editor.getEntityEditUrl(entityTypeName, entityId);
	};
	BX.Crm.EntityEditorClientLight.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorClientLight.prototype.doPrepareContextMenuItems = function(menuItems)
	{
		menuItems.push({ delimiter: true });

		if(this._enableLayoutTypeChange)
		{
			var layoutType = this.getLayoutType();
			if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact
				|| layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany
			)
			{
				menuItems.push(
					{
						value: "set_layout_contact",
						text: this.getMessage("disableCompany")
					}
				);

				menuItems.push(
					{
						value: "set_layout_company",
						text: this.getMessage("disableContact")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.company)
			{
				menuItems.push(
					{
						value: "set_layout_company_contact",
						text: this.getMessage("enableContact")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.contact)
			{
				menuItems.push(
					{
						value: "set_layout_contact_company",
						text: this.getMessage("enableCompany")
					}
				);
			}

			if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact)
			{
				menuItems.push({ delimiter: true });
				menuItems.push(
					{
						value: "set_layout_contact_company",
						text: this.getMessage("displayContactAtFirst")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany)
			{
				menuItems.push({ delimiter: true });
				menuItems.push(
					{
						value: "set_layout_company_contact",
						text: this.getMessage("displayCompanyAtFirst")
					}
				);
			}

			menuItems.push({ delimiter: true });
		}

		if(this.isQuickEditEnabled())
		{
			menuItems.push(
				{
					value: "disable_quick_edit",
					text: this.getMessage("disableQuickEdit")
				}
			);
		}
		else
		{
			menuItems.push(
				{
					value: "enable_quick_edit",
					text: this.getMessage("enableQuickEdit")
				}
			);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "set_layout_contact_company")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.contactCompany) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_company_contact")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.companyContact) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_contact")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.contact) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_company")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.company) }.bind(this),
				100
			);
		}
		else if(command === "disable_quick_edit")
		{
			this.enableQuickEdit(false);
		}
		else if(command === "enable_quick_edit")
		{
			this.enableQuickEdit(true);
		}
		BX.Crm.EntityEditorClientLight.superclass.processContextMenuCommand.apply(this, arguments)
	};
	//region Quick Edit
	BX.Crm.EntityEditorClientLight.prototype.isQuickEditEnabled = function()
	{
		if(this._enableQuickEdit === null)
		{
			this._enableQuickEdit = this._editor.getConfigOption("enableQuickEdit", "Y") === "Y";
		}
		return this._enableQuickEdit;
	};
	BX.Crm.EntityEditorClientLight.prototype.enableQuickEdit = function(enable)
	{
		enable = !!enable;

		if(this._enableQuickEdit === null)
		{
			this._enableQuickEdit = this._editor.getConfigOption("enableQuickEdit", "Y") === "Y";
		}

		if(this._enableQuickEdit === enable)
		{
			return;
		}

		this._enableQuickEdit = enable;
		this._editor.setConfigOption("enableQuickEdit", enable ? "Y" : "N");

		var i, length;
		if(this._companySearchBoxes)
		{
			for(i = 0, length = this._companySearchBoxes.length; i < length; i++)
			{
				this._companySearchBoxes[i].enableQuickEdit(enable);
			}
		}

		if(this._contactSearchBoxes)
		{
			for(i = 0, length = this._contactSearchBoxes.length; i < length; i++)
			{
				this._contactSearchBoxes[i].enableQuickEdit(enable);
			}
		}
	};
	//endregion
	//region Layout Type
	BX.Crm.EntityEditorClientLight.prototype.isCompanyEnabled = function()
	{
		var layoutType = this.getLayoutType();
		return (
			layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.company
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.isContactEnabled = function()
	{
		var layoutType = this.getLayoutType();
		return (
			layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.contact
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getLayoutType = function()
	{
		if(this._layoutType <= 0)
		{
			var str = this._editor.getConfigOption("client_layout", "");
			var num = parseInt(str);
			if(isNaN(num) || num <= 0)
			{
				num = BX.Crm.EntityEditorClientLayoutType.companyContact;
			}
			this._layoutType = num;
		}
		return this._layoutType;
	};
	BX.Crm.EntityEditorClientLight.prototype.setLayoutType = function(layoutType)
	{
		if(!BX.type.isNumber(layoutType))
		{
			layoutType = parseInt(layoutType);
		}

		if(isNaN(layoutType) || layoutType <= 0)
		{
			return;
		}

		if(layoutType === this._layoutType)
		{
			return;
		}

		this._layoutType = layoutType;

		this._editor.setConfigOption("client_layout", layoutType);
		this.refreshLayout();
	};
	//endregion
	BX.Crm.EntityEditorClientLight.prototype.layout = function(options)
	{
		if (this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));

		if(!this.hasContentToDisplay() && this.isInViewMode())
		{
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-inner" },
					text: this.getMessage("isEmpty")
				}
			);
			this._wrapper.appendChild(this._innerWrapper);
		}
		else
		{
			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });
			this._wrapper.appendChild(this._innerWrapper);

			var layoutType = this.getLayoutType();

			if(this.isInEditMode())
			{
				var fieldContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container" } });
				this._innerWrapper.appendChild(fieldContainer);
				this._innerContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container-inner" } });
				fieldContainer.appendChild(this._innerContainer);
			}
			else
			{
				BX.addClass(this._wrapper, "crm-entity-widget-participants-block");
				BX.addClass(this._innerWrapper, "crm-entity-widget-inner");
			}

			if(this.isContactEnabled() && this.isCompanyEnabled())
			{
				if(layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany)
				{
					this.renderContact();
					this.renderCompany();
				}
				else if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact)
				{
					this.renderCompany();
					this.renderContact();
				}
			}
			else
			{
				if(this.isContactEnabled())
				{
					this.renderContact();
				}

				if(this.isCompanyEnabled())
				{
					this.renderCompany();
				}
			}
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);

		this._entityEditParams = {};
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorClientLight.prototype.createAdditionalWrapperBlock = function()
	{
	};
	BX.Crm.EntityEditorClientLight.prototype.switchToSingleEditMode = function(targetNode)
	{
		this._entityEditParams = {};

		if(this.isInViewMode() && this.isQuickEditEnabled() && BX.type.isElementNode(targetNode))
		{
			var isFound = false;

			if(BX.isParentForNode(this._companyTitleWrapper, targetNode))
			{
				isFound = true;

				this._entityEditParams["enableCompany"] = true;
				this._entityEditParams["companyIndex"] = 0;
			}

			if(!isFound && BX.isParentForNode(this._contactTitleWrapper, targetNode))
			{
				isFound = true;

				this._entityEditParams["enableContact"] = true;
				this._entityEditParams["contactIndex"] = 0;
			}

			var i, length;
			if(!isFound && this._companyPanels !== null)
			{
				for(i = 0, length = this._companyPanels.length; i < length; i++)
				{
					if(this._companyPanels[i].checkOwership(targetNode))
					{
						isFound = true;

						this._entityEditParams["enableCompany"] = true;
						this._entityEditParams["companyIndex"] = i;

						break;
					}
				}
			}

			if(!isFound && this._contactPanels !== null)
			{
				for(i = 0, length = this._contactPanels.length; i < length; i++)
				{
					if(this._contactPanels[i].checkOwership(targetNode))
					{
						isFound = true;

						this._entityEditParams["enableContact"] = true;
						this._entityEditParams["contactIndex"] = i;

						break;
					}
				}
			}

			if(!BX.prop.getBoolean(this._entityEditParams, "enableCompany", false)
				&& !BX.prop.getBoolean(this._entityEditParams, "enableContact", false)
			)
			{
				var layoutType = this.getLayoutType();
				if(layoutType === BX.Crm.EntityEditorClientLayoutType.contact
					|| layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany
				)
				{
					this._entityEditParams["enableContact"] = true;
					this._entityEditParams["contactIndex"] = 0;
				}
				else if(layoutType === BX.Crm.EntityEditorClientLayoutType.company
					|| layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact
				)
				{
					this._entityEditParams["enableCompany"] = true;
				}
			}
		}
		BX.Crm.EntityEditorClientLight.superclass.switchToSingleEditMode.apply(this, arguments);
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityInitialMode = function(entityTypeId)
	{
		if(!this.isQuickEditEnabled())
		{
			return BX.Crm.EntityEditorClientMode.select;
		}

		if(!this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual))
		{
			return BX.Crm.EntityEditorClientMode.edit;
		}

		return BX.prop.getBoolean(
			this._entityEditParams,
			entityTypeId === BX.CrmEntityType.enumeration.contact ? "enableContact" : "enableCompany",
			false
		) ? BX.Crm.EntityEditorClientMode.edit : BX.Crm.EntityEditorClientMode.select;
	};
	BX.Crm.EntityEditorClientLight.prototype.resolveDataTagName = function(entityTypeName)
	{
		var compoundInfos = this._schemeElement.getDataArrayParam("compound", null);
		if(BX.type.isArray(compoundInfos))
		{
			for(var i = 0, length = compoundInfos.length; i < length; i++)
			{
				if(BX.prop.getString(compoundInfos[i], "entityTypeName", "") === entityTypeName)
				{
					return BX.prop.getString(compoundInfos[i], "tagName", "");
				}
			}
		}
		return "";
	};
	BX.Crm.EntityEditorClientLight.prototype.renderContact = function()
	{
		var caption = this._schemeElement.getDataStringParam("contactLegend", "");
		if(caption === "")
		{
			caption = BX.CrmEntityType.getCaptionByName(BX.CrmEntityType.names.contact);
		}

		if(this.isInEditMode())
		{
			this._contactWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-inner-row" } });
			this._innerContainer.appendChild(this._contactWrapper);

			this._contactTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children:
						[
							BX.create("span",
								{
									props: { className: "crm-entity-widget-content-block-title-text" },
									text: caption
								}
							)
						]
				}
			);
			this._contactWrapper.appendChild(this._contactTitleWrapper);

			this._addContactButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-widget-actions-btn-add" },
					text: this.getMessage("addParticipant")
				}
			);
			this._contactWrapper.appendChild(this._addContactButton);
			BX.bind(this._addContactButton, "click", BX.delegate(this.onContactAddButtonClick, this));

			this._contactSearchBoxes = [];
			if(this._contactInfos.length() > 0)
			{
				var mode = this.getEntityInitialMode(BX.CrmEntityType.enumeration.contact);
				var editIndex = mode === BX.Crm.EntityEditorClientMode.edit
					? BX.prop.getInteger(this._entityEditParams, "contactIndex", -1) : -1;

				for(var i = 0, length = this._contactInfos.length(); i < length; i++)
				{
					var currentMode = mode;
					if(currentMode === BX.Crm.EntityEditorClientMode.edit && !(editIndex === i || editIndex === -1))
					{
						currentMode = BX.Crm.EntityEditorClientMode.select
					}

					this.addContactSearchBox(
						this.createContactSearchBox({ entityInfo: this._contactInfos.get(i), mode: currentMode })
					);
				}
			}
			else
			{
				this.addContactSearchBox(this.createContactSearchBox());
			}
		}
		else if(this._contactInfos.length() > 0 && this.isContactEnabled())
		{
			this._contactTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" }
				}
			);

			var innerTitleWrapper = BX.create("span",
				{
					props: { className: "crm-entity-widget-content-subtitle-text" },
					children: [ BX.create("span", { text: caption }) ]
				}
			);
			this._contactTitleWrapper.appendChild(innerTitleWrapper);


			if(!this.isReadOnly())
			{
				innerTitleWrapper.appendChild(
					BX.create("span",
						{
							props: { className: "crm-entity-card-widget-title-edit-icon" }
						}
					)
				);
			}

			var innerWrapperContainer = BX.create("div", {
				props: { className: "crm-entity-widget-content-block-inner-container" }
			});

			this._innerWrapper.appendChild(innerWrapperContainer);
			innerWrapperContainer.appendChild(this._contactTitleWrapper);


			var dataTagName = this.resolveDataTagName(BX.CrmEntityType.names.contact);
			if(dataTagName === "")
			{
				dataTagName = "CONTACT_IDS";
			}
			
			var additionalBlock = BX.create("div", {
				props: { className: "crm-entity-widget-before-action" },
				attrs: { "data-field-tag": dataTagName }
			});
			innerWrapperContainer.appendChild(additionalBlock);


			this._contactPanels = [];
			for(i = 0, length = this._contactInfos.length(); i < length; i++)
			{
				var contactInfo = this._contactInfos.get(i);

				var contactSettings =
					{
						editor: this,
						entityInfo: contactInfo,
						enableEntityTypeCaption: false,
						enableRequisite: false,
						enableCommunications: this._editor.areCommunicationControlsEnabled(),
						mode: BX.Crm.EntityEditorMode.view
					};

				//HACK: Enable requisite selection due to editor is not support it.
				var enableRequisite = i === 0 && !(this.isCompanyEnabled() && this.hasCompanies());
				if(enableRequisite)
				{
					contactSettings['enableRequisite'] = true;
					contactSettings['requisiteBinding'] = this._model.getField("REQUISITE_BINDING", {});
					contactSettings['requisiteSelectUrl'] = this._editor.getEntityRequisiteSelectUrl(
						BX.CrmEntityType.names.contact,
						contactInfo.getId()
					);
					contactSettings['requisiteMode'] = BX.Crm.EntityEditorMode.edit;
				}

				var contactPanel = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + contactInfo.getId().toString(),
					contactSettings
				);

				this._contactPanels.push(contactPanel);
				contactPanel.setContainer(innerWrapperContainer);
				contactPanel.layout();

				if(enableRequisite)
				{
					contactPanel.addRequisiteChangeListener(this._requisiteChangeHandler);
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.renderCompany = function()
	{
		var caption = this._schemeElement.getDataStringParam("companyLegend", "");
		if(caption === "")
		{
			caption = BX.CrmEntityType.getCaptionByName(BX.CrmEntityType.names.company);
		}

		if(this.isInEditMode())
		{
			this._companyWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-inner-row" } });
			this._innerContainer.appendChild(this._companyWrapper);

			this._companyTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children:
						[
							BX.create("span",
								{
									props: { className: "crm-entity-widget-content-block-title-text" },
									text: caption
								}
							)
						]
				}
			);
			this._companyWrapper.appendChild(this._companyTitleWrapper);

			if(this._enableCompanyMultiplicity)
			{
				this._addCompanyButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-actions-btn-add" },
						text: this.getMessage("addParticipant")
					}
				);
				this._companyWrapper.appendChild(this._addCompanyButton);
				BX.bind(this._addCompanyButton, "click", BX.delegate(this.onCompanyAddButtonClick, this));
			}

			this._companySearchBoxes = [];
			if(this._companyInfos.length() > 0)
			{
				var mode = this.getEntityInitialMode(BX.CrmEntityType.enumeration.company);
				var editIndex = mode === BX.Crm.EntityEditorClientMode.edit
					? BX.prop.getInteger(this._entityEditParams, "companyIndex", -1) : -1;

				for(var i = 0, length = this._companyInfos.length(); i < length; i++)
				{
					var currentMode = mode;
					if(currentMode === BX.Crm.EntityEditorClientMode.edit && !(editIndex === i || editIndex === -1))
					{
						currentMode = BX.Crm.EntityEditorClientMode.select
					}

					this.addCompanySearchBox(
						this.createCompanySearchBox({ entityInfo: this._companyInfos.get(i), mode: currentMode })
					);
				}
			}
			else
			{
				this.addCompanySearchBox(this.createCompanySearchBox());
			}
		}
		else if(this.isCompanyEnabled() && this._companyInfos.length() > 0)
		{
			this._companyTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" }
				}
			);

			var innerTitleWrapper = BX.create("span",
				{
					props: { className: "crm-entity-widget-content-subtitle-text" },
					children: [ BX.create("span", { text: caption }) ]
				}
			);
			this._companyTitleWrapper.appendChild(innerTitleWrapper);
			if(!this.isReadOnly())
			{
				innerTitleWrapper.appendChild(
					BX.create("span",
						{
							props: { className: "crm-entity-card-widget-title-edit-icon" }
						}
					)
				);
			}



			var innerWrapperContainer = BX.create("div", {
				props: { className: "crm-entity-widget-content-block-inner-container" }
			});

			this._innerWrapper.appendChild(innerWrapperContainer);
			innerWrapperContainer.appendChild(this._companyTitleWrapper);

			var dataTagName = this.resolveDataTagName(BX.CrmEntityType.names.company);
			if(dataTagName === "")
			{
				dataTagName = this._enableCompanyMultiplicity ? "COMPANY_IDS" : "COMPANY_ID";
			}

			var additionalBlock = BX.create("div", {
				props: { className: "crm-entity-widget-before-action" },
				attrs: { "data-field-tag": dataTagName }
			});
			innerWrapperContainer.appendChild(additionalBlock);

			this._companyPanels = [];
			for(i = 0, length = this._companyInfos.length(); i < length; i++)
			{
				var companyInfo = this._companyInfos.get(i);

				var companySettings =
					{
						editor: this,
						entityInfo: companyInfo,
						enableEntityTypeCaption: false,
						enableRequisite: false,
						enableCommunications: this._editor.areCommunicationControlsEnabled(),
						mode: BX.Crm.EntityEditorMode.view
					};

				//HACK: Enable requisite selection due to editor is not support it.
				var enableRequisite = i === 0;
				if(enableRequisite)
				{
					companySettings['enableRequisite'] = true;
					companySettings['requisiteBinding'] = this._model.getField("REQUISITE_BINDING", {});
					companySettings['requisiteSelectUrl'] = this._editor.getEntityRequisiteSelectUrl(
						BX.CrmEntityType.names.company,
						companyInfo.getId()
					);
					companySettings['requisiteMode'] = BX.Crm.EntityEditorMode.edit;
				}

				var companyPanel = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + companyInfo.getId().toString(),
					companySettings
				);

				this._companyPanels.push(companyPanel);
				companyPanel.setContainer(innerWrapperContainer);
				companyPanel.layout();

				if(enableRequisite)
				{
					companyPanel.addRequisiteChangeListener(this._requisiteChangeHandler);
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.createCompanySearchBox = function(params)
	{
		var entityInfo = BX.prop.get(params, "entityInfo", null);
		if(entityInfo !== null && !(entityInfo instanceof BX.CrmEntityInfo))
		{
			entityInfo = null;
		}

		var enableCreation = this._editor.canCreateCompany();
		if(enableCreation)
		{
			//Check if creation of company is disabled by configuration.
			enableCreation = BX.prop.getBoolean(
				this._schemeElement.getDataObjectParam("creation", {}),
				BX.CrmEntityType.names.company.toLowerCase(),
				true
			);
		}

		return(
			BX.Crm.EntityEditorClientSearchBox.create(
				this._id,
				{
					entityTypeName: BX.CrmEntityType.names.company,
					entityInfo: entityInfo,
					enableCreation: enableCreation,
					enableDeletion: false,
					enableQuickEdit: this.isQuickEditEnabled(),
					mode: BX.prop.getInteger(params, "mode", BX.Crm.EntityEditorClientMode.select),
					editor: this._editor,
					loaderConfig: this._primaryLoaderConfig,
					lastEntityInfos: this._model.getSchemeField(this._schemeElement, "lastCompanyInfos", []),
					container: this._companyWrapper,
					placeholder: this.getMessage("companySearchPlaceholder"),
					parentField: this
				}
			)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.addCompanySearchBox = function(searchBox, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this._companySearchBoxes.push(searchBox);

		var layoutOptions = BX.prop.getObject(options, "layoutOptions", {});
		if(this._addCompanyButton)
		{
			layoutOptions["anchor"] = this._addCompanyButton;
		}

		searchBox.layout(layoutOptions);

		searchBox.addResetListener(this._companyResetHandler);
		searchBox.addTitleChangeListener(this._companyNameChangeHandler);
		searchBox.addChangeListener(this._companyChangeHandler);
		searchBox.addDeletionListener(this._companyDeletionHandler);
		searchBox.addMultifieldChangeListener(this._multifieldChangeHandler);

		var enableDeletion = this._companySearchBoxes.length > 1;
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			this._companySearchBoxes[i].enableDeletion(enableDeletion);
		}

		return searchBox;
	};
	BX.Crm.EntityEditorClientLight.prototype.removeCompanySearchBox = function(searchBox)
	{
		var index = this.findCompanySearchBoxIndex(searchBox);
		if(index < 0)
		{
			return;
		}

		searchBox.removeResetListener(this._companyResetHandler);
		searchBox.removeTitleChangeListener(this._companyNameChangeHandler);
		searchBox.removeChangeListener(this._companyChangeHandler);
		searchBox.removeDeletionListener(this._companyDeletionHandler);
		searchBox.removeMultifieldChangeListener(this._multifieldChangeHandler);

		searchBox.clearLayout();

		this._companySearchBoxes.splice(index, 1);

		var enableDeletion = this._companySearchBoxes.length > 1;
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			this._companySearchBoxes[i].enableDeletion(enableDeletion);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.findCompanySearchBoxIndex = function(companySearchBox)
	{
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			if(companySearchBox === this._companySearchBoxes[i])
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorClientLight.prototype.createContactSearchBox = function(params)
	{
		var entityInfo = BX.prop.get(params, "entityInfo", null);
		if(entityInfo !== null && !(entityInfo instanceof BX.CrmEntityInfo))
		{
			entityInfo = null;
		}

		var enableCreation = this._editor.canCreateContact();
		if(enableCreation)
		{
			//Check if creation of contact is disabled by configuration.
			enableCreation = BX.prop.getBoolean(
				this._schemeElement.getDataObjectParam("creation", {}),
				BX.CrmEntityType.names.contact.toLowerCase(),
				true
			);
		}

		return(
			BX.Crm.EntityEditorClientSearchBox.create(
				this._id,
				{
					entityTypeName: BX.CrmEntityType.names.contact,
					entityInfo: entityInfo,
					enableCreation: enableCreation,
					enableDeletion: BX.prop.getBoolean(params, "enableDeletion", true),
					enableQuickEdit: this.isQuickEditEnabled(),
					mode: BX.prop.getInteger(params, "mode", BX.Crm.EntityEditorClientMode.select),
					editor: this._editor,
					loaderConfig: this._primaryLoaderConfig,
					lastEntityInfos: this._model.getSchemeField(this._schemeElement, "lastContactInfos", []),
					container: this._contactWrapper,
					placeholder: this.getMessage("contactSearchPlaceholder"),
					parentField: this
				}
			)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.addContactSearchBox = function(searchBox, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this._contactSearchBoxes.push(searchBox);

		var layoutOptions = BX.prop.getObject(options, "layoutOptions", {});
		if(this._addContactButton)
		{
			layoutOptions["anchor"] = this._addContactButton;
		}

		searchBox.layout(layoutOptions);

		searchBox.addResetListener(this._contactResetHandler);
		searchBox.addTitleChangeListener(this._contactNameChangeHandler);
		searchBox.addChangeListener(this._contactChangeHandler);
		searchBox.addDeletionListener(this._contactDeletionHandler);
		searchBox.addMultifieldChangeListener(this._multifieldChangeHandler);

		var enableDeletion = this._contactSearchBoxes.length > 1;
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			this._contactSearchBoxes[i].enableDeletion(enableDeletion);
		}

		return searchBox;
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContactSearchBox = function(searchBox)
	{
		var index = this.findContactSearchBoxIndex(searchBox);
		if(index < 0)
		{
			return;
		}

		searchBox.removeResetListener(this._contactResetHandler);
		searchBox.removeTitleChangeListener(this._contactNameChangeHandler);
		searchBox.removeChangeListener(this._contactChangeHandler);
		searchBox.removeDeletionListener(this._contactDeletionHandler);
		searchBox.removeMultifieldChangeListener(this._multifieldChangeHandler);

		searchBox.clearLayout();

		this._contactSearchBoxes.splice(index, 1);

		var enableDeletion = this._contactSearchBoxes.length > 1;
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			this._contactSearchBoxes[i].enableDeletion(enableDeletion);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContactAllSearchBoxes = function()
	{
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			var searchBox = this._contactSearchBoxes[i];

			searchBox.removeResetListener(this._contactResetHandler);
			searchBox.removeChangeListener(this._contactChangeHandler);
			searchBox.removeDeletionListener(this._contactDeletionHandler);
			searchBox.clearLayout();
		}

		this._contactSearchBoxes = [];
	};
	BX.Crm.EntityEditorClientLight.prototype.findContactSearchBoxIndex = function(contactSearchBox)
	{
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			if(contactSearchBox === this._contactSearchBoxes[i])
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorClientLight.prototype.save = function()
	{
		this._info["COMPANY_DATA"] = this.saveEntityInfos(this._companySearchBoxes, this._companyInfos);
		this._info["CONTACT_DATA"] = this.saveEntityInfos(this._contactSearchBoxes, this._contactInfos);
	};
	BX.Crm.EntityEditorClientLight.prototype.saveEntityInfos = function(searchBoxes, entityInfos)
	{
		var i, length;

		if(searchBoxes !== null)
		{
			for(i = 0, length = searchBoxes.length; i < length; i++)
			{
				if(searchBoxes[i].isNeedToSave())
				{
					searchBoxes[i].save();
				}
			}
		}

		var data = [];
		if(entityInfos !== null)
		{
			var infoItems = entityInfos.getItems();
			for(i = 0, length = infoItems.length; i < length; i++)
			{
				data.push(infoItems[i].getSettings());
			}
		}
		return data;
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactAddButtonClick = function(e)
	{
		this.addContactSearchBox(this.createContactSearchBox()).focus();
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyAddButtonClick = function(e)
	{
		if(this._enableCompanyMultiplicity)
		{
			this.addCompanySearchBox(this.createCompanySearchBox()).focus();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyReset = function(sender, previousEntityInfo)
	{
		if(previousEntityInfo)
		{
			this.removeCompany(previousEntityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyNameChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyChange = function(sender, currentEntityInfo, previousEntityInfo)
	{
		var isChanged = false;

		if(previousEntityInfo)
		{
			this.removeCompany(previousEntityInfo);
			isChanged = true;
		}

		if(currentEntityInfo)
		{
			this.addCompany(currentEntityInfo);
			isChanged = true;
		}

		if(!isChanged)
		{
			return;
		}

		this.markAsChanged();

		if(!this._enableCompanyMultiplicity)
		{
			if(currentEntityInfo.getId() > 0)
			{
				var entityLoader = BX.prop.getObject(
					this._secondaryLoaderConfig,
					BX.CrmEntityType.names.company,
					null
				);

				if(entityLoader)
				{
					BX.CrmDataLoader.create(
						this._id,
						{
							serviceUrl: entityLoader["url"],
							action: entityLoader["action"],
							params:
								{
									"PRIMARY_TYPE_NAME": BX.CrmEntityType.names.company,
									"PRIMARY_ID": currentEntityInfo.getId(),
									"SECONDARY_TYPE_NAME": BX.CrmEntityType.names.contact,
									"OWNER_TYPE_NAME": this.getOwnerTypeName()
								}
						}
					).load(BX.delegate(this.onContactInfosLoad, this));
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyDelete = function(sender, currentEntityInfo)
	{
		if(currentEntityInfo)
		{
			this._companyInfos.remove(currentEntityInfo);
			this.markAsChanged();
		}

		this.removeCompanySearchBox(sender);
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactChange = function(sender, currentEntityInfo, previousEntityInfo)
	{
		var isChanged = false;

		if(previousEntityInfo)
		{
			this.removeContact(previousEntityInfo);
			isChanged = true;
		}

		if(currentEntityInfo)
		{
			this.addContact(currentEntityInfo);
			isChanged = true;
		}

		if(isChanged)
		{
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactNameChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactDelete = function(sender, currentEntityInfo)
	{
		if(currentEntityInfo)
		{
			this._contactInfos.remove(currentEntityInfo);
			this.markAsChanged();
		}

		this.removeContactSearchBox(sender);
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactReset = function(sender, previousEntityInfo)
	{
		if(previousEntityInfo)
		{
			this.removeContact(previousEntityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactInfosLoad = function(sender, result)
	{
		var i, length;
		var entityInfos = [];
		var entityData = BX.type.isArray(result['ENTITY_INFOS']) ? result['ENTITY_INFOS'] : [];
		for(i = 0, length = entityData.length; i < length; i++)
		{
			entityInfos.push(BX.CrmEntityInfo.create(entityData[i]));
		}

		this._contactInfos.removeAll();
		for(i = 0, length = entityInfos.length; i < length; i++)
		{
			this._contactInfos.add(entityInfos[i]);
		}
		this.markAsChanged();

		this.removeContactAllSearchBoxes();
		if(entityInfos.length > 0)
		{
			for(i = 0, length = entityInfos.length; i < length; i++)
			{
				this.addContactSearchBox(
					this.createContactSearchBox(
						{ entityInfo: entityInfos[i] }
					)
				);
			}
		}
		else
		{
			this.addContactSearchBox(this.createContactSearchBox());
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onRequisiteChange = function(sender, eventArgs)
	{
		if(this.isInEditMode())
		{
			this.markAsChanged();
		}
		else
		{
			//Save immediately
			this._editor.saveData(
				{
					'REQUISITE_ID': BX.prop.getInteger(eventArgs, "requisiteId", 0),
					'BANK_DETAIL_ID': BX.prop.getInteger(eventArgs, "bankDetailId", 0)
				}
			);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onMultifieldChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.prepareEntitySubmitData = function(searchBoxes)
	{
		if(!BX.type.isArray(searchBoxes))
		{
			return [];
		}

		var results = [];
		for(var i = 0, length = searchBoxes.length; i < length; i++)
		{
			var entity = searchBoxes[i].getEntity();
			if(!entity)
			{
				continue;
			}

			var data = {};

			var mode = searchBoxes[i].getMode();
			if(mode === BX.Crm.EntityEditorClientMode.select
				|| (mode === BX.Crm.EntityEditorClientMode.edit && entity.getTitle() !== "")
			)
			{
				data["id"] = entity.getId();
			}
			if(mode === BX.Crm.EntityEditorClientMode.create
				|| (mode === BX.Crm.EntityEditorClientMode.edit && entity.getTitle() !== "")
			)
			{
				data["title"] = entity.getTitle();
				data["multifields"] = entity.getMultifields();
			}

			results.push(data);
		}
		return results;
	};
	BX.Crm.EntityEditorClientLight.prototype.onBeforeSubmit = function()
	{
		var data = {};
		if(this.isCompanyEnabled())
		{
			data["COMPANY_DATA"] = this.prepareEntitySubmitData(this._companySearchBoxes);
		}
		if(this.isContactEnabled())
		{
			data["CONTACT_DATA"] = this.prepareEntitySubmitData(this._contactSearchBoxes);
		}

		this.createDataElement("data", JSON.stringify(data));
	};
	if(typeof(BX.Crm.EntityEditorClientLight.messages) === "undefined")
	{
		BX.Crm.EntityEditorClientLight.messages = {};
	}
	BX.Crm.EntityEditorClientLight.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClientLight();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClient === "undefined")
{
	BX.Crm.EntityEditorClient = function()
	{
		BX.Crm.EntityEditorClient.superclass.constructor.apply(this);
		this._info = null;

		this._enablePrimaryEntity = true;
		this._primaryEntityTypeName = "";
		this._primaryEntityInfo = null;
		this._primaryEntityBindingInfos = null;
		this._primaryEntityEditor = null;

		this._secondaryEntityTypeName = "";
		this._secondaryEntityInfos = null;

		this._secondaryEntityEditor = null;
		this._dataElements = null;
		this._map = null;
		this._bindingTracker = null;

		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorClient, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorClient.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorClient.superclass.doInitialize.apply(this);
		this._map = this._schemeElement.getDataObjectParam("map", {});
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClient.prototype.initializeFromModel = function()
	{
		this._info = this._model.getSchemeField(this._schemeElement, "info", {});

		this._enablePrimaryEntity = this._schemeElement.getDataBooleanParam(
			"enablePrimaryEntity",
			true
		);

		if(this._enablePrimaryEntity)
		{
			var primaryEntityData = BX.prop.getObject(this._info, "PRIMARY_ENTITY_DATA", null);
			var primaryEntityInfo = primaryEntityData ? BX.CrmEntityInfo.create(primaryEntityData) : null;

			if(primaryEntityInfo)
			{
				this.setPrimaryEntity(primaryEntityInfo);
			}
			else
			{
				this.setPrimaryEntityTypeName(
					this._schemeElement.getDataStringParam(
						"primaryEntityTypeName",
						BX.CrmEntityType.names.company
					)
				);
			}
		}

		this.setSecondaryEntityTypeName(
			this._schemeElement.getDataStringParam(
				"secondaryEntityTypeName",
				BX.CrmEntityType.names.contact
			)
		);

		var secondaryEntityData = null;
		var secondaryEntityDataKey =  this._schemeElement.getDataStringParam("secondaryEntityInfo", "");
		if(secondaryEntityDataKey !== "")
		{
			secondaryEntityData = this._model.getField(secondaryEntityDataKey, [])
		}
		else
		{
			secondaryEntityData = BX.prop.getArray(this._info, "SECONDARY_ENTITY_DATA", []);
		}

		this._secondaryEntityInfos = BX.Collection.create();
		this._primaryEntityBindingInfos = BX.Collection.create();
		var companyEntityId = primaryEntityInfo && primaryEntityInfo.getTypeName() === BX.CrmEntityType.names.company
			? primaryEntityInfo.getId() : 0;
		var i, length, info;
		for(i = 0, length = secondaryEntityData.length; i < length; i++)
		{
			info = BX.CrmEntityInfo.create(secondaryEntityData[i]);
			if(info.getId() <= 0)
			{
				continue;
			}

			if(companyEntityId > 0 && info.checkEntityBinding(BX.CrmEntityType.names.company, companyEntityId))
			{
				this._primaryEntityBindingInfos.add(info);
			}
			else
			{
				this._secondaryEntityInfos.add(info);
			}
		}
		this._bindingTracker = BX.Crm.EntityBindingTracker.create();
	};
	BX.Crm.EntityEditorClient.prototype.hasContentToDisplay = function()
	{
		return(this._primaryEntityInfo !== null
			|| (this._secondaryEntityInfos !== null && this._secondaryEntityInfos.length() > 0)
		);
	};
	BX.Crm.EntityEditorClient.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorClient.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorClient.prototype.getEntityCreateUrl = function(entityTypeName)
	{
		return this._editor.getEntityCreateUrl(entityTypeName);
	};
	BX.Crm.EntityEditorClient.prototype.getEntityRequisiteSelectUrl = function(entityTypeName, entityId)
	{
		return this._editor.getEntityRequisiteSelectUrl(entityTypeName, entityId);
	};
	BX.Crm.EntityEditorClient.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClient.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorClient.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorClient.prototype.createDataElement = function(key, value)
	{
		var name = BX.prop.getString(this._map, key, "");

		if(name === "")
		{
			return;
		}

		var input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });

		if(!this._dataElements)
		{
			this._dataElements = {};
		}

		this._dataElements[key] = input;
		if(this._wrapper)
		{
			this._wrapper.appendChild(input);
		}
	};
	BX.Crm.EntityEditorClient.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this._schemeElement.getTitle();

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}


		this._dataElements = {};

		if(!this.hasContentToDisplay() && this.isInViewMode())
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					text: this.getMessage("isEmpty")
				}
			);
		}
		else
		{
			this._innerWrapper = BX.create("div",{ props: { className: "crm-entity-widget-clients-block" } });
			this._innerWrapper.appendChild(this.createTitleNode(title));

			if(this.isInEditMode())
			{
				if(this._enablePrimaryEntity)
				{
					this.createDataElement("primaryEntityType", this.getPrimaryEntityTypeName());
					this.createDataElement("primaryEntityId", this.getPrimaryEntityId());

					this.createDataElement("unboundSecondaryEntityIds", "");
					this.createDataElement("boundSecondaryEntityIds", "");
				}

				this.createDataElement("secondaryEntityType", this.getSecondaryEntityTypeName());
				this.createDataElement("secondaryEntityIds", this.getAllSecondaryEntityIds().join(","));
			}

			var editorWrapper = BX.create(
				"div",
				{
					props: { className: this.isInEditMode() ? "crm-entity-widget-content-block-clients" : "" }
				}
			);
			this._innerWrapper.appendChild(editorWrapper);

			var primaryEntityAnchor = BX.create("div", {});
			editorWrapper.appendChild(primaryEntityAnchor);

			var loaders = this._schemeElement.getDataObjectParam("loaders", {});
			var primaryLoader = BX.prop.getObject(loaders, "primary", {});
			var secondaryLoader = BX.prop.getObject(loaders, "secondary", {});

			if(this._enablePrimaryEntity)
			{
				this._primaryEntityEditor = BX.Crm.PrimaryClientEditor.create(
					this._id + "_PRIMARY",
					{
						"entityInfo": this._primaryEntityInfo,
						"entityTypeName": this._primaryEntityTypeName,
						"lastEntityInfos":	this._model.getSchemeField(
							this._schemeElement,
							"lastPrimaryEntityInfos",
							[]
						),
						"loaderConfig": primaryLoader,
						"requisiteBinding": this._model.getField("REQUISITE_BINDING", {}),
						"editor": this,
						"mode": this._mode,
						"onChange": BX.delegate(this.onPrimaryEntityChange, this),
						"onDelete": BX.delegate(this.onPrimaryEntityDelete, this),
						"onBindingAdd": BX.delegate(this.onPrimaryEntityBindingAdd, this),
						"onBindingDelete": BX.delegate(this.onPrimaryEntityBindingDelete, this),
						"onBindingRelease": BX.delegate(this.onPrimaryEntityBindingRelease, this),
						"container": editorWrapper,
						"achor": primaryEntityAnchor
					}
				);
				this._primaryEntityEditor.layout();
			}

			var secondaryEntityWrapper = BX.create("div", { props: { className: "crm-entity-widget-participants-container" } });
			editorWrapper.appendChild(secondaryEntityWrapper);
			this._secondaryEntityEditor = BX.Crm.SecondaryClientEditor.create(
				this._id + "_SECONDARY",
				{
					"entityInfos":     this._secondaryEntityInfos.getItems(),
					"entityTypeName":  this._secondaryEntityTypeName,
					"entityLegend":    this._schemeElement.getDataStringParam("secondaryEntityLegend", ""),
					"lastEntityInfos":	this._model.getSchemeField(
						this._schemeElement,
						"lastSecondaryEntityInfos",
						[]
					),
					"primaryLoader":   primaryLoader,
					"secondaryLoader": secondaryLoader,
					"mode":            this._mode,
					"onAdd":           BX.delegate(this.onSecondaryEntityAdd, this),
					"onDelete":        BX.delegate(this.onSecondaryEntityDelete, this),
					"onBeforeAdd":     BX.delegate(this.onSecondaryEntityBeforeAdd, this),
					"editor":          this,
					"container":       secondaryEntityWrapper
				}
			);
			this._secondaryEntityEditor.layout();

			if(this._primaryEntityEditor)
			{
				if(this.isInEditMode())
				{
					this._secondaryEntityEditor.setVisible(this._primaryEntityInfo !== null);
				}
				else
				{
					this._secondaryEntityEditor.setVisible(this._secondaryEntityInfos.length() > 0);
				}
			}
		}
		this._wrapper.appendChild(this._innerWrapper);


		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorClient.prototype.doClearLayout = function(options)
	{
		if(this._primaryEntityEditor)
		{
			this._primaryEntityEditor.clearLayout();
			this._primaryEntityEditor = null;
		}

		if(this._secondaryEntityEditor)
		{
			this._secondaryEntityEditor.clearLayout();
			this._secondaryEntityEditor = null;
		}

		for(var key in this._dataElements)
		{
			if(this._dataElements.hasOwnProperty(key))
			{
				BX.remove(this._dataElements[key]);
			}
		}
		this._dataElements = null;

		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityTypeName = function()
	{
		return this._primaryEntityTypeName;
	};
	BX.Crm.EntityEditorClient.prototype.setPrimaryEntityTypeName = function(entityType)
	{
		if(this._primaryEntityTypeName !== entityType)
		{
			this._primaryEntityTypeName = entityType;
		}
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityId = function()
	{
		return this._primaryEntityInfo ? this._primaryEntityInfo.getId() : 0;
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntity = function()
	{
		return this._primaryEntityInfo;
	};
	BX.Crm.EntityEditorClient.prototype.setPrimaryEntity = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			this._primaryEntityInfo = entityInfo;
			this.setPrimaryEntityTypeName(entityInfo.getTypeName());
		}
		else
		{
			this._primaryEntityInfo = null;
		}
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindings = function()
	{
		return this._primaryEntityBindingInfos;
	};
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntityTypeName = function()
	{
		return this._secondaryEntityTypeName;
	};
	BX.Crm.EntityEditorClient.prototype.setSecondaryEntityTypeName = function(entityType)
	{
		if(this._secondaryEntityTypeName !== entityType)
		{
			this._secondaryEntityTypeName = entityType;
		}
	};
	//region SecondaryEntities
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntities = function()
	{
		return this._secondaryEntityInfos.getItems();
	};
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntityById = function(id)
	{
		if(!this._secondaryEntityInfos)
		{
			return null;
		}
		return this._secondaryEntityInfos.search(function(item){ return item.getId() === id; });
	};
	BX.Crm.EntityEditorClient.prototype.removeSecondaryEntity = function(entityInfo)
	{
		if(this._secondaryEntityInfos)
		{
			this._secondaryEntityInfos.remove(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.addSecondaryEntity = function(entityInfo)
	{
		if(this._secondaryEntityInfos)
		{
			this._secondaryEntityInfos.add(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityDelete = function(editor, entityInfo)
	{
		this.removeSecondaryEntity(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityBeforeAdd = function(editor, entityInfo, eventArgs)
	{
		if(this._primaryEntityEditor && this._primaryEntityInfo && this._primaryEntityInfo.getTypeName() === BX.CrmEntityType.names.company)
		{
			var primaryEntityId = this._primaryEntityInfo.getId();
			if(entityInfo.checkEntityBinding(BX.CrmEntityType.names.company, primaryEntityId)
				&& !this._bindingTracker.isUnbound(entityInfo))
			{
				this._primaryEntityEditor.addBinding(
					this._primaryEntityEditor.createBinding(entityInfo)
				);
				eventArgs["cancel"] = true;
			}
		}
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityAdd = function(editor, entityInfo)
	{
		this.addSecondaryEntity(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityBind = function(editor, entityInfo)
	{
		this._secondaryEntityEditor.removeItem(
			this._secondaryEntityEditor.getItemById(entityInfo.getId())
		);

		if(this._primaryEntityEditor)
		{
			this._primaryEntityEditor.addBinding(this._primaryEntityEditor.createBinding(entityInfo));
		}

		this._bindingTracker.bind(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.getAllSecondaryEntityIds = function()
	{
		var entityInfos = this.getAllSecondaryEntityInfos();
		var results = [];
		for(var i = 0, length = entityInfos.length; i < length; i++)
		{
			results.push(entityInfos[i].getId());
		}
		return results;
	};
	BX.Crm.EntityEditorClient.prototype.getAllSecondaryEntityInfos = function()
	{
		return (
			[].concat(
				this._primaryEntityBindingInfos.getItems(),
				this._secondaryEntityInfos.getItems()
			)
		);
	};
	//endregion
	//region PrimaryEntityBindings
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindings = function()
	{
		return this._primaryEntityBindingInfos.getItems();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindingById = function(id)
	{
		if(!this._primaryEntityBindingInfos)
		{
			return null;
		}
		return this._primaryEntityBindingInfos.search(function(item){ return item.getId() === id; });
	};
	BX.Crm.EntityEditorClient.prototype.addPrimaryEntityBinding = function(entityInfo)
	{
		if(this._primaryEntityBindingInfos)
		{
			this._primaryEntityBindingInfos.add(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.removePrimaryEntityBinding = function(entityInfo)
	{
		if(this._primaryEntityBindingInfos)
		{
			this._primaryEntityBindingInfos.remove(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingAdd = function(editor, entityInfo)
	{
		this.addPrimaryEntityBinding(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingDelete = function(editor, entityInfo)
	{
		this.removePrimaryEntityBinding(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingRelease = function(editor, entityInfo)
	{
		this._bindingTracker.unbind(entityInfo);
		this._secondaryEntityEditor.addItem(this._secondaryEntityEditor.createItem(entityInfo));
	};
	//endregion
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityDelete = function(editor, entityInfo)
	{
		var secondaryEntityInfos = [].concat(this._primaryEntityBindingInfos.getItems(), this._secondaryEntityInfos.getItems());

		this._secondaryEntityInfos = BX.Collection.create();
		this._primaryEntityBindingInfos = BX.Collection.create();

		var primaryEntityInfo = null;
		if(secondaryEntityInfos.length > 0)
		{
			primaryEntityInfo = secondaryEntityInfos.shift();
		}

		this.setPrimaryEntity(primaryEntityInfo);
		this._primaryEntityEditor.setEntity(primaryEntityInfo);

		this._secondaryEntityEditor.setEntities(secondaryEntityInfos);
		this._secondaryEntityEditor.setVisible(primaryEntityInfo !== null);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityChange = function(editor, entityInfo)
	{
		this.setPrimaryEntity(entityInfo);

		if(this._primaryEntityTypeName === BX.CrmEntityType.names.company)
		{
			this._bindingTracker.reset();
			this._primaryEntityBindingInfos = BX.Collection.create();

			this._secondaryEntityInfos = BX.Collection.create();
			this._secondaryEntityEditor.clearItems();
			this._secondaryEntityEditor.reloadEntities();
		}

		this._secondaryEntityEditor.setVisible(true);
	};
	BX.Crm.EntityEditorClient.prototype.save = function()
	{
		var i, length, entityInfo;
		var map = this._schemeElement.getDataObjectParam("map", {});

		if(this._enablePrimaryEntity)
		{
			this._model.setMappedField(map, "primaryEntityType", this._primaryEntityTypeName);
			var primaryEntityId = this._primaryEntityInfo ? this._primaryEntityInfo.getId() : 0;
			this._model.setMappedField(map, "primaryEntityId", primaryEntityId);

			if(this._primaryEntityInfo)
			{
				this._info["PRIMARY_ENTITY_DATA"] = this._primaryEntityInfo.getSettings();
			}
			else
			{
				delete  this._info["PRIMARY_ENTITY_DATA"];
			}

			if(primaryEntityId > 0)
			{
				var unboundSecondaryEntities = this._bindingTracker.getUnboundEntities();
				var unboundSecondaryEntityIds = [];
				for(i = 0, length = unboundSecondaryEntities.length; i < length; i++)
				{
					unboundSecondaryEntityIds.push(unboundSecondaryEntities[i].getId());
				}
				if(unboundSecondaryEntityIds.length > 0)
				{
					for(i = 0, length = unboundSecondaryEntityIds.length; i < length; i++)
					{
						entityInfo = this.getSecondaryEntityById(unboundSecondaryEntityIds[i]);
						if(entityInfo)
						{
							entityInfo.removeEntityBinding(this._primaryEntityTypeName, primaryEntityId);
						}
					}
				}
				this._model.setMappedField(map, "unboundSecondaryEntityIds", unboundSecondaryEntityIds.join(","));

				var boundSecondaryEntities = this._bindingTracker.getBoundEntities();
				var boundSecondaryEntityIds = [];
				for(i = 0, length = boundSecondaryEntities.length; i < length; i++)
				{
					boundSecondaryEntityIds.push(boundSecondaryEntities[i].getId());
				}
				if(boundSecondaryEntityIds.length > 0)
				{
					for(i = 0, length = boundSecondaryEntityIds.length; i < length; i++)
					{
						entityInfo = this.getPrimaryEntityBindingById(boundSecondaryEntityIds[i]);
						if(entityInfo)
						{
							entityInfo.addEntityBinding(this._primaryEntityTypeName, primaryEntityId);
						}
					}
				}
				this._model.setMappedField(map, "boundSecondaryEntityIds", boundSecondaryEntityIds.join(","));

				this._bindingTracker.reset();
			}
		}

		this._model.setMappedField(map, "secondaryEntityType", this._secondaryEntityTypeName);
		var secondaryEntityInfos = this.getAllSecondaryEntityInfos();
		var secondaryEntityData = [];
		var secondaryEntityIds = [];
		for(i = 0, length = secondaryEntityInfos.length; i < length; i++)
		{
			entityInfo = secondaryEntityInfos[i];
			secondaryEntityData.push(entityInfo.getSettings());
			secondaryEntityIds.push(entityInfo.getId());
		}
		this._model.setMappedField(map, "secondaryEntityIds", secondaryEntityIds.join(","));
		this._info["SECONDARY_ENTITY_DATA"] = secondaryEntityData;
	};
	BX.Crm.EntityEditorClient.prototype.onBeforeSubmit = function()
	{
		if(!this._dataElements)
		{
			return;
		}

		for(var key in this._dataElements)
		{
			if(!this._dataElements.hasOwnProperty(key))
			{
				continue;
			}
			var name = BX.prop.getString(this._map, key, "");
			if(name !== "")
			{
				this._dataElements[key].value = this._model.getField(name, "");
			}
		}
	};
	BX.Crm.EntityEditorClient.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClient();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.PrimaryClientEditor === "undefined")
{
	BX.Crm.PrimaryClientEditor = function()
	{
		this._id = "";
		this._settings = {};
		this._editor = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._entityInfo = null;
		this._entityTypeName = "";
		this._container = null;
		this._wrapper = null;

		this._bindingWrapper = null;

		this._externalEventHandler = null;
		this._externalContext = null;

		this._entityBindSelector = null;

		this._searchWrapper = null;
		this._searchInput = null;
		this._searchControl = null;

		this._item = null;
		this._itemBindings = null;
		this._skeleton = null;
		this._loaderConfig = null;
		this._hasLayout = false;
	};
	BX.Crm.PrimaryClientEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor");
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);

			if(this._entityInfo)
			{
				this.setEntity(this._entityInfo);
			}
			else
			{
				this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			}

			this._loaderConfig = BX.prop.getObject(this._settings, "loaderConfig", {});
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-clients-container" } });
			this._bindingWrapper = null;

			if(!isViewMode)
			{
				//region Search
				this._searchWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
				this._wrapper.appendChild(this._searchWrapper);

				this.prepareSearchLayout();
				this.adjustSearchLayout();
				//endregion
			}
			this._wrapper.appendChild(BX.create("div", { style: { clear: "both" } }));

			if(this._item)
			{
				this._item.setContainer(this._wrapper);
				this._item.layout();

				this._bindingWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-block-children" } });
				this._wrapper.appendChild(this._bindingWrapper);

				var bindingInfos = this._editor.getPrimaryEntityBindings();
				this._itemBindings = [];
				var i, length;
				for(i = 0, length = bindingInfos.length; i < length; i++)
				{
					var bindingInfo = bindingInfos[i];
					var binding = BX.Crm.ClientEditorEntityBindingPanel.create(
						this._id +  "_" + bindingInfo.getId().toString(),
						{
							entityInfo: bindingInfo,
							editor: this._editor,
							mode: this._mode,
							container: this._bindingWrapper,
							onChange: BX.delegate(this.onItemBindingChange, this)
						}
					);
					binding.layout();
					this._itemBindings.push(binding);
				}
			}

			var anchor = BX.prop.getElementNode(this._settings, "achor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._hasLayout = true;
		},
		adjustLayout: function()
		{
		},
		clearLayout: function()
		{
			if(this._item)
			{
				this._item.clearLayout();
			}

			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					this._itemBindings[i].clearLayout();
				}
				this._itemBindings = null;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._searchWrapper = null;
			this._bindingWrapper = null;
			this._entityCreateButton = null;

			this._hasLayout = false;
		},
		//region Search
		prepareSearchLayout: function()
		{
			this._searchInput = BX.create(
				"input",
				{
					props:
						{
							id: "dropdown-input",
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input"
						},
					attrs: { autocomplete: "nope" }
				}
			);
			this._searchWrapper.appendChild(this._searchInput);
			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ BX.CrmEntityType.names.contact, BX.CrmEntityType.names.company ] },
					//TODO: Implement CRM renderer
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					footerItems:
						[
							{
								caption: this.getMessage("create"),
								buttons:
									[
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(BX.CrmEntityType.enumeration.contact),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity(BX.CrmEntityType.names.contact);
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										},
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(BX.CrmEntityType.enumeration.company),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity(BX.CrmEntityType.names.company);
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										}
									]
							}
						],
					events:
						{
							onSelect: this.onEntitySelect.bind(this),
							onSearch: function(word) {}
						}
				}
			);
		},
		adjustSearchLayout: function()
		{
			if(this._searchWrapper)
			{
				this._searchWrapper.style.display = this._item ? "none" : "";
			}
		},
		//endregion
		getEntityTypeName: function()
		{
			return this._entityTypeName;
		},
		setEntityTypeName: function(entityType)
		{
			if(this._entityTypeName === entityType)
			{
				return;
			}

			this._entityTypeName = entityType;
		},
		setEntity: function(entityInfo)
		{
			if(this._item)
			{
				if(this._hasLayout)
				{
					this._item.clearLayout();
				}
				this._item = null;
			}

			if(!(entityInfo instanceof BX.CrmEntityInfo))
			{
				this._entityInfo = null;
			}
			else
			{
				this._entityInfo = entityInfo;
				this.setEntityTypeName(this._entityInfo.getTypeName());
				this._item = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + this._entityInfo.getId().toString(),
					{
						editor: this._editor,
						entityInfo: this._entityInfo,
						enableEntityTypeCaption: true,
						enableRequisite: true,
						requisiteBinding: BX.prop.getObject(this._settings, "requisiteBinding", {}),
						mode: this._mode,
						onDelete: BX.delegate(this.onItemDelete, this)
					}
				);

				if(this._hasLayout)
				{
					this._item.setContainer(this._wrapper);
					this._item.layout();
				}
			}

			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					this._itemBindings[i].clearLayout();
				}
				this._itemBindings = null;
			}

			this.adjustSearchLayout();
		},
		setupEntity: function(entityId)
		{
			if(this._entityInfo && this._entityInfo.getId() === entityId)
			{
				return;
			}

			this.setEntity(null);

			var callback = BX.prop.getFunction(this._settings, "onChange");
			if(callback)
			{
				callback(this, this._entityInfo);
			}

			var entityLoader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
			if(entityLoader)
			{
				this.showSkeleton();

				BX.CrmDataLoader.create(
					this._id,
					{
						serviceUrl: entityLoader["url"],
						action: entityLoader["action"],
						params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId }
					}
				).load(BX.delegate(this.onEntityInfoLoad, this));
			}
		},
		showSkeleton: function()
		{
			if(!this._skeleton)
			{
				this._skeleton = BX.Crm.ClientEditorEntitySkeleton.create(this._id, { container: this._wrapper });
			}
			this._skeleton.layout();
		},
		hideSkeleton: function()
		{
			if(this._skeleton)
			{
				this._skeleton.clearLayout();
			}
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(entityData)
			{
				var hasLayout = this._hasLayout;
				if(hasLayout)
				{
					this.clearLayout();
				}

				this.hideSkeleton();

				var entityInfo = BX.CrmEntityInfo.create(entityData);
				this.setEntity(entityInfo);

				var callback = BX.prop.getFunction(this._settings, "onChange");
				if(callback)
				{
					callback(this, this._entityInfo);
				}

				if(hasLayout)
				{
					this.layout();
				}
			}
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._editor.getEntityCreateUrl(entityTypeName);
		},
		createEntity: function(entityTypeName)
		{
			var url = this.getEntityCreateUrl(entityTypeName);
			if(url === "")
			{
				return "";
			}

			var contextId = this._editor.getContextId();
			url = BX.util.add_url_param(url, { external_context_id: contextId });

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalContext)
			{
				this._externalContext = {};
			}
			this._externalContext[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onEntitySelect: function(sender, item)
		{
			this._entityTypeName = BX.prop.getString(item, "type", "");
			var entityId = BX.prop.getInteger(item, "id", 0);
			if(entityId > 0)
			{
				this.setupEntity(entityId);
				this._searchControl.destroyPopupWindow();
			}
		},
		onExternalEvent: function(params)
		{
			if(BX.prop.getString(params, "key", "") !== "onCrmEntityCreate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			var context = BX.prop.getString(value, "context", "");

			if(this._externalContext && typeof(this._externalContext[context]) !== "undefined")
			{
				var entityTypeName = BX.prop.getString(value, "entityTypeName", "");
				var entityId = BX.prop.getInteger(value, "entityId", 0);

				if(this._entityTypeName !== entityTypeName)
				{
					this._entityTypeName = entityTypeName;
				}
				this.setupEntity(entityId);

				BX.Crm.Page.close(this._externalContext[context]);
				delete this._externalContext[context];
			}
		},
		onItemBindingChange: function(item, action)
		{
			if(action === "unbind")
			{
				var callback = BX.prop.getFunction(this._settings, "onBindingRelease");
				if(callback)
				{
					callback(this, item.getEntity());
				}

				this.removeBinding(item);
			}
			else if(action === "delete")
			{
				this.removeBinding(item);
			}
		},
		onItemDelete: function(item)
		{
			var entityInfo = this._entityInfo;

			var hasLayout = this._hasLayout;
			if(hasLayout)
			{
				this.clearLayout();
			}
			this.setEntity(null);

			if(hasLayout)
			{
				this.layout();
			}

			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this, entityInfo);
			}
		},
		getBindings: function()
		{
			return this._itemBindings;
		},
		createBinding: function(entityInfo)
		{
			return(
				BX.Crm.ClientEditorEntityBindingPanel.create(
					this._id +  "_" + entityInfo.getId().toString(),
					{
						entityInfo: entityInfo,
						editor: this._editor,
						mode: this._mode,
						onChange: BX.delegate(this.onItemBindingChange, this)
					}
				)
			);
		},
		findBindingById: function(entityId)
		{
			for(var i = 0, length = this._itemBindings.length; i < length; i++)
			{
				var item = this._itemBindings[i];
				if(item.getEntity().getId() === entityId)
				{
					return item;
				}
			}

			return null;
		},
		getBindingIndex: function(binding)
		{
			for(var i = 0, length = this._itemBindings.length; i < length; i++)
			{
				if(this._itemBindings[i] === binding)
				{
					return i;
				}
			}

			return -1;
		},
		addBinding: function(item)
		{
			this._itemBindings.push(item);

			if(this._hasLayout)
			{
				item.setContainer(this._bindingWrapper);
				item.layout();
			}

			var callback = BX.prop.getFunction(this._settings, "onBindingAdd");
			if(callback)
			{
				callback(this, item.getEntity());
			}
		},
		removeBinding: function(item)
		{
			var index = this.getBindingIndex(item);
			if(index < 0)
			{
				return;
			}

			item.clearLayout();
			this._itemBindings.splice(index, 1);

			var callback = BX.prop.getFunction(this._settings, "onBindingDelete");
			if(callback)
			{
				callback(this, item.getEntity());
			}
		},
		getBindingEntities: function()
		{
			var results = [];
			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					results.push(this._itemBindings[i].getEntity());
				}
			}
			return results;
		}
	};
	BX.Crm.PrimaryClientEditor.prototype.getMessage = function(name)
	{
		var m = BX.Crm.PrimaryClientEditor.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	if(typeof(BX.Crm.PrimaryClientEditor.messages) === "undefined")
	{
		BX.Crm.PrimaryClientEditor.messages = {};
	}
	BX.Crm.PrimaryClientEditor.create = function(id, settings)
	{
		var self = new BX.Crm.PrimaryClientEditor();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.SecondaryClientEditor === "undefined")
{
	BX.Crm.SecondaryClientEditor = function()
	{
		this._id = "";
		this._settings = {};
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._container = null;
		this._wrapper = null;
		this._entityTypeName = "";
		this._entityInfos = null;
		this._items = null;

		this._externalEventHandler = null;
		this._externalContext = null;

		this._isMultiple = true;

		this._primaryLoaderConfig = null;
		this._secondaryLoaderConfig = null;

		this._editor = null;

		this._searchWrapper = null;
		this._searchInput = null;
		this._searchControl = null;

		this._addButton = null;
		this._addButtonHandler = BX.delegate(this.onAddButtonClick, this);

		this._bindButton = null;
		this._bindButtonClickHandler = BX.delegate(this.onBindButtonClick, this);
		this._bindingSelector = null;
		this._bindingSelectHandler = BX.delegate(this.onBindingSelect, this);

		this._isVisible = true;
		this._hasLayout = false;
	};

	BX.Crm.SecondaryClientEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._editor = BX.prop.get(this._settings, "editor", null);

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			this._entityInfos = BX.prop.getArray(this._settings, "entityInfos", "");
			this._isMultiple = BX.prop.getBoolean(this._settings, "isMultiple", true);

			this._items = [];
			var itemCount = this._entityInfos.length;
			if(!this._isMultiple && itemCount > 1)
			{
				itemCount = 1;
			}
			for(var i = 0; i < itemCount; i++)
			{
				var item = this.createItem(this._entityInfos[i]);
				this._items.push(item);
			}

			this._primaryLoaderConfig = BX.prop.getObject(this._settings, "primaryLoader", {});
			this._secondaryLoaderConfig = BX.prop.getObject(this._settings, "secondaryLoader", {});
		},
		getMessage: function(name)
		{
			var m = BX.Crm.SecondaryClientEditor.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getEntityTypeName: function()
		{
			return this._entityTypeName;
		},
		getEntities: function()
		{
			return this._entityInfos;
		},
		setEntities: function(entityInfos)
		{
			this._entityInfos = entityInfos;
			this.clearItems();
			var itemCount = this._entityInfos.length;
			if(!this._isMultiple && itemCount > 1)
			{
				itemCount = 1;
			}
			for(var i = 0; i < itemCount; i++)
			{
				this.addItem(this.createItem(this._entityInfos[i]));
			}
		},
		findItemIndex: function(item)
		{
			for(var i = 0, j = this._items.length; i < j; i++)
			{
				if(this._items[i] === item)
				{
					return i;
				}
			}
			return -1;
		},
		getFirstItem: function()
		{
			return this._items.length > 0 ? this._items[0] : null;
		},
		getItemById: function(id)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getEntity().getId() === id)
				{
					return item;
				}
			}
			return null;
		},
		getItems: function()
		{
			return this._items;
		},
		getItemCount: function()
		{
			return this._items.length;
		},
		createItem: function(entityInfo)
		{
			return (
				BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + entityInfo.getId().toString(),
					{
						editor: this._editor,
						entityInfo: entityInfo,
						mode: this._mode,
						onDelete: BX.delegate(this.onItemDelete, this)
					}
				)
			);
		},
		clearItems: function()
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				item.clearLayout();
				item.setContainer(null);
			}
			this._items = [];
		},
		addItemById: function(id)
		{
			var entityLoader = BX.prop.getObject(this._primaryLoaderConfig, this._entityTypeName, null);
			if(!entityLoader)
			{
				return;
			}

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: entityLoader["url"],
					action: entityLoader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": id }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		},
		addItem: function(item)
		{
			var beforeCallback = BX.prop.getFunction(this._settings, "onBeforeAdd");
			if(beforeCallback)
			{
				var eventArgs = { cancel: false };
				beforeCallback(this, item.getEntity(), eventArgs);
				if(eventArgs["cancel"])
				{
					return false;
				}
			}

			if(!this._isMultiple)
			{
				this.clearItems();
			}

			this._items.push(item);
			if(this._hasLayout)
			{
				item.setContainer(this._itemsWrapper);
				item.layout();
			}

			var afterCallback = BX.prop.getFunction(this._settings, "onAdd");
			if(afterCallback)
			{
				afterCallback(this, item.getEntity());
			}

			this.adjustLayout();

			return true;
		},
		removeItem: function(item)
		{
			var index = this.findItemIndex(item);
			if(index < 0)
			{
				return;
			}

			this._items.splice(index, 1);
			if(this._hasLayout)
			{
				item.clearLayout();
				item.setContainer(null);
			}

			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this, item.getEntity());
			}

			this.adjustLayout();
		},
		reloadEntities: function()
		{
			if(!this._editor)
			{
				return;
			}

			var primaryEntity = this._editor.getPrimaryEntity();
			if(!primaryEntity)
			{
				return;
			}

			var entityLoader = BX.prop.getObject(this._secondaryLoaderConfig, primaryEntity.getTypeName(), null);
			if(entityLoader)
			{
				BX.CrmDataLoader.create(
					this._id,
					{
						serviceUrl: entityLoader["url"],
						action: entityLoader["action"],
						params:
							{
								"PRIMARY_TYPE_NAME": primaryEntity.getTypeName(),
								"PRIMARY_ID": primaryEntity.getId(),
								"SECONDARY_TYPE_NAME": this._entityTypeName,
								"OWNER_TYPE_NAME": this._editor.getOwnerTypeName()
							}
					}
				).load(BX.delegate(this.onEntityInfosReload, this));
			}
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			if(this._wrapper)
			{
				this._wrapper.style.display = visible ? "" : "none";
			}
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", {});
			if(!this._isVisible)
			{
				this._wrapper.style.display = "none";
			}
			this._container.appendChild(this._wrapper);

			var legendText = BX.prop.getString(this._settings, "entityLegend", "");

			this._addButton = null;
			this._bindButton = null;

			if(isViewMode)
			{
				this._wrapper.appendChild(
					BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-title" },
							children: [
								BX.create(
									"span",
									{
										attrs: { className: "crm-entity-widget-content-block-title-text" },
										text: legendText
									}
								)
							]
						}
					)
				);
			}
			else
			{
				this._bindButton = BX.create('span',
					{
						props: { className: 'crm-entity-widget-actions-btn-bind' },
						text: this.getMessage('bind'),
						events: { click: this._bindButtonClickHandler }
					}
				);

				this._wrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-participants-title" },
							children:
								[
									BX.create("div",
										{
											props: { className: "crm-entity-widget-clients-actions-block" },
											children:
												[
													BX.create("span",
														{
															props: { className: "crm-entity-widget-actions-btn-participants" },
															children:
																[
																	BX.create("span",
																		{
																			props: { className: "crm-entity-widget-participants-title-text" },
																			text: legendText
																		}
																	)
																]
														}
													),
													this._bindButton
												]
										}
									)
								]
						}
					)
				);
			}

			//region Search
			this._searchWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
			this._searchWrapper.style.display = "none";

			this._itemsWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-item-container" } });

			this._wrapper.appendChild(this._searchWrapper);

			this._wrapper.appendChild(this._itemsWrapper);

			if(!isViewMode)
			{
				this._addButton = BX.create("span",
					{
						props: { className: "crm-entity-widget-actions-btn-add" },
						text: this.getMessage('addParticipant'),
						events: { click: this._addButtonHandler }
					}
				);
				this._wrapper.appendChild(this._addButton);
			}

			this.prepareSearchLayout();
			//endregion

			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemsWrapper);
				this._items[i].layout();
			}

			this.adjustLayout();
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			for(var i = 0, j = this._items.length; i < j; i++)
			{
				this._items[i].clearLayout();
				this._items[i].setContainer(null);
			}

			this._addButton = null;
			this._bindButton = null;

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		adjustLayout: function()
		{
			if(!this._bindButton)
			{
				return;
			}

			this._bindButton.style.display =
				this._editor.getPrimaryEntityTypeName() === BX.CrmEntityType.names.company
				&& BX.util.array_diff(
					this._editor.getSecondaryEntities(),
					this._editor.getPrimaryEntityBindings(),
					BX.CrmEntityInfo.getHashCode
				).length > 0 ? "" : "none";
		},
		//region Search
		prepareSearchLayout: function()
		{
			var entityTypeId = BX.CrmEntityType.resolveId(this._entityTypeName);

			this._searchInput = BX.create(
				"input",
				{
					props:
						{
							id: "dropdown-input",
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input"
						},
					attrs: { autocomplete: "nope" }
				}
			);
			this._searchWrapper.appendChild(this._searchInput);
			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ this._entityTypeName ] },
					//TODO: Implement CRM renderer
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					footerItems:
						[
							{
								caption: this.getMessage("create"),
								buttons:
									[
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(entityTypeId),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity();
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										}
									]
							}
						],
					events:
						{
							onSelect: this.onItemSelect.bind(this),
							onSearch: function(word) {}
						}
				}
			);
		},
		//endregion
		onAddButtonClick: function(e)
		{
			this._searchWrapper.style.display = this._searchWrapper.style.display === "none" ? "" : "none";
		},
		onBindButtonClick: function(e)
		{
			if(this._bindingSelector && this._bindingSelector.isOpened())
			{
				this._bindingSelector.close();
				return;
			}

			if(!this._bindingSelector)
			{
				this._bindingSelector = BX.CmrSelectorMenu.create(this._id, { items: [] });
				this._bindingSelector.addOnSelectListener(this._bindingSelectHandler);
			}

			var bindings = this._editor.getPrimaryEntityBindings();
			var bindingInfos = [];
			var i, length;
			for(i = 0, length = bindings.length; i < length; i++)
			{
				bindingInfos.push(bindings[i]);
			}

			var unboundEntities = BX.util.array_diff(
				this._editor.getSecondaryEntities(),
				bindingInfos,
				BX.CrmEntityInfo.getHashCode
			);

			var items = [];
			for(i = 0, length = unboundEntities.length; i < length; i++)
			{
				var entityInfo = unboundEntities[i];
				items.push({ text: entityInfo.getTitle(), value: entityInfo.getId() });
			}

			this._bindingSelector.setupItems(items);
			this._bindingSelector.open(this._bindButton);
		},
		onBindingSelect: function(sender, item)
		{
			this._editor.onSecondaryEntityBind(this, this._editor.getSecondaryEntityById(item.getValue()));
		},
		onItemSelect: function(sender, item)
		{
			var entityId = BX.prop.getInteger(item, "id", 0);
			if(entityId > 0)
			{
				this.addItemById(entityId);
				this._searchWrapper.style.display = "none";
				this._searchControl.destroyPopupWindow();
			}
		},
		onItemDelete: function(item)
		{
			this.removeItem(item);
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(!entityData)
			{
				return;
			}

			var entityInfo = BX.CrmEntityInfo.create(entityData);
			if(this.getItemById(entityInfo.getId()) !== null)
			{
				return;
			}

			this.addItem(this.createItem(entityInfo));
		},
		onEntityInfosReload: function(sender, result)
		{
			var entityData = BX.type.isArray(result['ENTITY_INFOS']) ? result['ENTITY_INFOS'] : [];
			var entityInfos = [];
			for(var i = 0; i < entityData.length; i++)
			{
				entityInfos.push(BX.CrmEntityInfo.create(entityData[i]));
			}
			this.setEntities(entityInfos);
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._editor.getEntityCreateUrl(entityTypeName);
		},
		createEntity: function()
		{
			var url = this.getEntityCreateUrl(this.getEntityTypeName());
			if(url === "")
			{
				return;
			}

			var contextId = this._editor.getContextId();
			url = BX.util.add_url_param(url, { external_context_id: contextId });

			//region add company binding if required
			var ownerTypeName = this._editor.getOwnerTypeName();
			var ownerId = this._editor.getOwnerId();

			if(ownerId > 0 && ownerTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.util.add_url_param(url, { company_id: ownerId });
			}
			//endregion

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalContext)
			{
				this._externalContext = {};
			}
			this._externalContext[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onExternalEvent: function(params)
		{
			if(!this._externalContext)
			{
				return;
			}

			var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
			if(key !== "onCrmEntityCreate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			if(BX.prop.getString(value, "entityTypeName", "") !== this.getEntityTypeName())
			{
				return;
			}

			var entityId = BX.prop.getInteger(value, "entityId", 0);
			var context = BX.prop.getString(value, "context", "");

			if(typeof(this._externalContext[context]) !== "undefined")
			{
				this.addItemById(entityId);
				BX.Crm.Page.close(this._externalContext[context]);
				delete this._externalContext[context];
			}
		}
	};
	if(typeof(BX.Crm.SecondaryClientEditor.messages) === "undefined")
	{
		BX.Crm.SecondaryClientEditor.messages = {};
	}
	BX.Crm.SecondaryClientEditor.create = function(id, settings)
	{
		var self = new BX.Crm.SecondaryClientEditor();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorEntity === "undefined")
{
	BX.Crm.EntityEditorEntity = function()
	{
		BX.Crm.EntityEditorEntity.superclass.constructor.apply(this);

		this._entityTypeName = "";
		this._entityInfo = null;

		this._entitySelectClickHandler = BX.delegate(this.onEntitySelectClick, this);
		this._entitySelectButton = null;
		this._entitySelector = null;

		this._entityWrapper = null;
		this._dataInput = null;
		this._skeleton = null;
	};
	BX.extend(BX.Crm.EntityEditorEntity, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorEntity.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorEntity.superclass.doInitialize.apply(this);

		this._loaderConfig = this._schemeElement.getDataObjectParam("loader", {});
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorEntity.prototype.initializeFromModel = function()
	{
		var entityInfo = this._model.getSchemeField(this._schemeElement, "info", null);
		if(entityInfo)
		{
			this.setEntity(BX.CrmEntityInfo.create(entityInfo));
		}
		else
		{
			this.setEntityTypeName(this._schemeElement.getDataStringParam("entityTypeName", ""));
		}
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorEntity.prototype.getEntityTypeName = function()
	{
		return this._entityTypeName;
	};
	BX.Crm.EntityEditorEntity.prototype.setEntityTypeName = function(entityType)
	{
		if(this._entityTypeName === entityType)
		{
			return;
		}

		this._entityTypeName = entityType;
		if(this._entitySelector)
		{
			this._entitySelector = null;
		}
	};
	BX.Crm.EntityEditorEntity.prototype.setEntity = function(entityInfo)
	{
		if(this._item)
		{
			if(this._hasLayout)
			{
				this._item.clearLayout();
			}
			this._item = null;
		}

		if(!(entityInfo instanceof BX.CrmEntityInfo))
		{
			this._entityInfo = null;
		}
		else
		{
			this._entityInfo = entityInfo;
			this.setEntityTypeName(this._entityInfo.getTypeName());
			this._item = BX.Crm.ClientEditorEntityPanel.create(
				this._id +  "_" + this._entityInfo.getId().toString(),
				{
					editor: this,
					entityInfo: this._entityInfo,
					enableEntityTypeCaption: false,
					enableRequisite: true,
					//requisiteBinding: BX.prop.getObject(this._settings, "requisiteBinding", {}),
					mode: this._mode,
					onDelete: BX.delegate(this.onItemDelete, this)
				}
			);

			if(this._hasLayout)
			{
				this._item.setContainer(this._entityWrapper);
				this._item.layout();
			}
		}
	};
	BX.Crm.EntityEditorEntity.prototype.setupEntity = function(entityId)
	{
		if(this._entityInfo && this._entityInfo.getId() === entityId)
		{
			return;
		}

		this.setEntity(null);

		var entityLoader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
		if(entityLoader)
		{
			this.showSkeleton();

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: entityLoader["url"],
					action: entityLoader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		}
	};
	BX.Crm.EntityEditorEntity.prototype.showSkeleton = function()
	{
		if(!this._skeleton)
		{
			this._skeleton = BX.Crm.ClientEditorEntitySkeleton.create(this._id, { container: this._entityWrapper });
		}
		this._skeleton.layout();
	};
	BX.Crm.EntityEditorEntity.prototype.hideSkeleton = function()
	{
		if(this._skeleton)
		{
			this._skeleton.clearLayout();
		}
	};
	BX.Crm.EntityEditorEntity.prototype.onEntityInfoLoad = function(sender, result)
	{
		var entityData = BX.prop.getObject(result, "DATA", null);
		if(entityData)
		{
			this.hideSkeleton();

			var entityInfo = BX.CrmEntityInfo.create(entityData);
			this.setEntity(entityInfo);
		}
	};
	BX.Crm.EntityEditorEntity.prototype.onItemDelete = function(item)
	{
		this.setEntity(null);
	};
	BX.Crm.EntityEditorEntity.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorEntity.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorEntity.prototype.doSetMode = function(mode)
	{
		this.rollback();
		if(this._item)
		{
			this._item.setMode(mode);
		}
	};
	BX.Crm.EntityEditorEntity.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var name = this.getName();
		var title = this._schemeElement.getTitle();
		var value = this.getValue();

		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });

		if(isViewMode && !this._item)
		{
			//There is nothing to show
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var innerWrapper = BX.create("div",{ props: { className: "crm-entity-widget-clients-block" } });
		this._wrapper.appendChild(innerWrapper);
		innerWrapper.appendChild(this.createTitleNode(title));

		var editorWrapper = BX.create("div",{ props: { className: !isViewMode ? "crm-entity-widget-content-block-clients" : "" } });
		innerWrapper.appendChild(editorWrapper);

		this._entityWrapper = BX.create("div", { props: { className: "crm-entity-widget-clients-container" } });
		editorWrapper.appendChild(this._entityWrapper);
		if(!isViewMode)
		{
			this._entitySelectButton = BX.create("span",
				{
					props: { className: "crm-entity-widget-actions-btn-select" },
					text: this.getMessage("select"),
					events: { click: this._entitySelectClickHandler }
				}
			);

			var actionWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-clients-actions-block" },
					children: [ this._entitySelectButton ]
				}
			);

			this._entityWrapper.appendChild(actionWrapper);

			this._dataInput = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._entityWrapper.appendChild(this._dataInput);
		}

		if(this._item)
		{
			this._item.setContainer(this._entityWrapper);
			this._item.layout();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorEntity.prototype.clearLayout = function()
	{
		if(this._item)
		{
			this._item.clearLayout();
		}

		this._wrapper = BX.remove(this._wrapper);
		this._entityWrapper = null;
		this._dataInput = null;

		if(this._entitySelector)
		{
			if(this._entitySelector.isOpened())
			{
				this._entitySelector.close();
			}
			this._entitySelector = null;
		}

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorEntity.prototype.onEntitySelectClick = function(e)
	{
		if(this._entitySelector && this._entitySelector.isOpened())
		{
			this._entitySelector.close();
			return;
		}

		if(!this._entitySelector)
		{
			this._entitySelector = BX.Crm.EntityEditorCrmSelector.create(
				this._id,
				{
					entityTypeIds: [ BX.CrmEntityType.resolveId(this._entityTypeName) ],
					enableMyCompanyOnly: this._schemeElement.getDataBooleanParam("enableMyCompanyOnly", false),
					callback: BX.delegate(this.onEntitySelect, this)
				}
			);
		}
		this._entitySelector.open(this._entitySelectButton);
	};
	BX.Crm.EntityEditorEntity.prototype.onEntitySelect = function(sender, item)
	{
		var id = BX.prop.getInteger(item, "entityId", 0);
		if(this._entityInfo && this._entityInfo.getId() === id)
		{
			return;
		}

		this._entitySelector.close();
		this.setupEntity(id);
	};
	BX.Crm.EntityEditorEntity.prototype.save = function()
	{
		this._model.setField(this.getName(), this._entityInfo ? this._entityInfo.getId() : 0);
	};
	BX.Crm.EntityEditorEntity.prototype.onBeforeSubmit = function()
	{
		if(this._dataInput)
		{
			this._dataInput.value = this._model.getField(this.getName(), "");
		}
	};
	BX.Crm.EntityEditorEntity.prototype.getMessage = function(name)
	{
		return BX.prop.getString(BX.Crm.EntityEditorEntity.messages, name, name);
	};
	if(typeof(BX.Crm.EntityEditorEntity.messages) === "undefined")
	{
		BX.Crm.EntityEditorEntity.messages = {};
	}
	BX.Crm.EntityEditorEntity.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorEntity();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorFieldConfigurator === "undefined")
{
	BX.Crm.EntityEditorFieldConfigurator = function()
	{
		BX.Crm.EntityEditorFieldConfigurator.superclass.constructor.apply(this);
		this._field = null;
		this._name = null;
		this._isLocked = false;

		this._labelInput = null;
		this._isRequiredCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._optionWrapper = null;

		this._mandatoryConfigurator = null;
	};
	BX.extend(BX.Crm.EntityEditorFieldConfigurator, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorFieldConfigurator.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorFieldConfigurator.superclass.doInitialize.apply(this);
		this._field = BX.prop.get(this._settings, "field", null);
		this._name = BX.prop.getString(this._fieldData, "name", "");

		this._mandatoryConfigurator = BX.prop.get(this._settings, "mandatoryConfigurator", null);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorFieldConfigurator.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			throw "EntityEditorFieldConfigurator. View mode is not supported by this control type.";
		}

		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-new-fields" } });
		this._labelInput = BX.create(
			"input",
			{
				attrs:
				{
					className: "crm-entity-widget-content-input",
					type: "text",
					value: this._field.getTitle()
				}
			}
		);

		this._saveButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-primary" },
				text: BX.message("CRM_EDITOR_SAVE"),
				events: {  click: BX.delegate(this.onSaveButtonClick, this) }
			}
		);
		this._cancelButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-light-border" },
				text: BX.message("CRM_EDITOR_CANCEL"),
				events: {  click: BX.delegate(this.onCancelButtonClick, this) }
			}
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" },
					children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-title" },
								children:
								[
									BX.create(
										"span",
										{
											attrs: { className: "crm-entity-widget-content-block-title-text" },
											text: this.getMessage("labelField")
										}
									)
								]
							}
						),
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-inner" },
								children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-field-container" },
											children: [ this._labelInput ]
										}
									)
								]
							}
						)
					]
				}
			)
		);

		this._optionWrapper = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block crm-entity-widget-content-block-checkbox" },
					children: [ this._optionWrapper ]
				}
			)
		);

		if(this._field.areAttributesEnabled() && !this._field.isRequired() && this._mandatoryConfigurator)
		{
			this._isRequiredCheckBox = this.createOption(
				{
					caption: this._mandatoryConfigurator.getTitle() + ":",
					labelSettings: { props: { className: "crm-entity-new-field-addiction-label" } },
					containerSettings: { style: { alignItems: "center" } },
					elements: this._mandatoryConfigurator.getButton().prepareLayout()
				}
			);
			this._isRequiredCheckBox.checked = !this._mandatoryConfigurator.isEmpty();

			this._mandatoryConfigurator.setSwitchCheckBox(this._isRequiredCheckBox);
			this._mandatoryConfigurator.setLabel(this._isRequiredCheckBox.nextSibling);

			this._mandatoryConfigurator.setEnabled(this._isRequiredCheckBox.checked);
			this._mandatoryConfigurator.adjust();
		}

		//region Show Always
		this._showAlwaysCheckBox = this.createOption(
			{ caption: this.getMessage("showAlways"), help: { code: "7046149" } }
		);
		this._showAlwaysCheckBox.checked = this._field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		//endregion

		this._wrapper.appendChild(
			BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
		);

		this._wrapper.appendChild(
			BX.create (
				"div",
				{
					props: {
						className: "crm-entity-widget-content-block-new-fields-btn-container"
					},
					children:
						[
							this._saveButton,
							this._cancelButton
						]
				}
			)
		);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);

		this._labelInput = null;
		this._isRequiredCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._optionWrapper = null;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.onSaveButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		if(this._mandatoryConfigurator)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}
			this._mandatoryConfigurator.close();
		}

		var params =
			{
				field: this._field,
				label: this._labelInput.value,
				showAlways: this._showAlwaysCheckBox.checked
			};

		BX.onCustomEvent(this, "onSave", [ this, params ]);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.onCancelButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		var params = { field: this._field };
		BX.onCustomEvent(this, "onCancel", [ this, params ]);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.setLocked = function(locked)
	{
		locked = !!locked;
		if(this._isLocked === locked)
		{
			return;
		}

		this._isLocked = locked;
		if(this._isLocked)
		{
			BX.addClass(this._saveButton, "ui-btn-clock");
		}
		else
		{
			BX.removeClass(this._saveButton, "ui-btn-clock");
		}
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.getField = function()
	{
		return this._field;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.createOption = function(params)
	{
		var element = BX.create("input", { props: { type: "checkbox" } });
		var label = BX.create(
			"label",
			{ children: [ element, BX.create("span", { text: BX.prop.getString(params, "caption", "") }) ] }
		);

		var labelSettings = BX.prop.getObject(params, "labelSettings", null);
		if(labelSettings)
		{
			BX.adjust(label, labelSettings);
		}

		var help = BX.prop.getObject(params, "help", null);
		if(help)
		{
			var helpLink = BX.create("a", { props: { className: "crm-entity-new-field-helper-icon" } });

			var helpUrl = BX.prop.getString(help, "url", "");
			if(helpUrl !== "")
			{
				helpLink.href = helpUrl;
				helpLink.target = "_blank";
			}
			else
			{
				helpLink.href = "#";
				BX.bind(
					helpLink,
					"click",
					function(e) {
						window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(help, "code", ""));
						e.preventDefault();
					}
				);
			}
			label.appendChild(helpLink);
		}

		var childElements = [ label ];
		var elements = BX.prop.getArray(params, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			childElements.push(elements[i]);
		}

		var container = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-field-container" },
				children: childElements
			}
		);

		var containerSettings = BX.prop.getObject(params, "containerSettings", null);
		if(containerSettings)
		{
			BX.adjust(container, containerSettings);
		}
		this._optionWrapper.appendChild(container);

		return element;
	};
	if(typeof(BX.Crm.EntityEditorFieldConfigurator.messages) === "undefined")
	{
		BX.Crm.EntityEditorFieldConfigurator.messages = {};
	}
	BX.Crm.EntityEditorFieldConfigurator.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFieldConfigurator();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorUserFieldConfigurator === "undefined")
{
	BX.Crm.EntityEditorUserFieldConfigurator = function()
	{
		BX.Crm.EntityEditorUserFieldConfigurator.superclass.constructor.apply(this);
		this._field = null;
		this._typeId = "";
		this._isLocked = false;

		this._labelInput = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._isTimeEnabledCheckBox = null;
		this._isRequiredCheckBox = null;
		this._isMultipleCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._enumItemWrapper = null;
		this._enumItemContainer = null;
		this._enumButtonWrapper = null;
		this._optionWrapper = null;

		this._enumItems = null;

		this._mandatoryConfigurator = null;
	};
	BX.extend(BX.Crm.EntityEditorUserFieldConfigurator, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorUserFieldConfigurator.superclass.doInitialize.apply(this);
		this._field = BX.prop.get(this._settings, "field", null);
		if(this._field && !(this._field instanceof BX.Crm.EntityEditorUserField))
		{
			throw "EntityEditorUserFieldConfigurator. The 'field' param must be EntityEditorUserField.";
		}
		this._mandatoryConfigurator = BX.prop.get(this._settings, "mandatoryConfigurator", null);

		this._typeId = BX.prop.getString(this._settings, "typeId", "");
		this._enumItems = [];
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorUserFieldConfigurator.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			throw "EntityEditorUserFieldConfigurator. View mode is not supported by this control type.";
		}

		var isNew = this._field === null;

		var title = this.getMessage("labelField");
		var manager = this._editor.getUserFieldManager();
		var label = this._field ? this._field.getTitle() : manager.getDefaultFieldLabel(this._typeId);
		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-new-fields" } });

		this._labelInput = BX.create("input",
			{
				attrs:
				{
					className: "crm-entity-widget-content-input",
					type: "text",
					value: label
				}
			}
		);

		this._saveButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-primary" },
				text: BX.message("CRM_EDITOR_SAVE"),
				events: {  click: BX.delegate(this.onSaveButtonClick, this) }
			}
		);
		this._cancelButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-light-border" },
				text: BX.message("CRM_EDITOR_CANCEL"),
				events: {  click: BX.delegate(this.onCancelButtonClick, this) }
			}
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" },
					children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-title" },
								children:
								[
									BX.create(
										"span",
										{
											attrs: { className: "crm-entity-widget-content-block-title-text" },
											text: title
										}
									)
								]
							}
						),
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-inner" },
								children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-field-container" },
											children: [ this._labelInput ]
										}
									)
								]
							}
						)
					]
				}
			)
		);

		if(this._typeId === "enumeration")
		{
			this._wrapper.appendChild(
				BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
			);

			this._enumItemWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" }
				}
			);

			this._wrapper.appendChild(this._enumItemWrapper);
			this._enumItemWrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-title" },
						children: [
							BX.create(
								"span",
								{
									attrs: { className: "crm-entity-widget-content-block-title-text" },
									text: this.getMessage("enumItems")
								}
							)
						]
					}
				)
			);

			this._enumItemContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });
			this._enumItemWrapper.appendChild(this._enumItemContainer);

			this._enumButtonWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-add-field" } });
			this._enumItemWrapper.appendChild(this._enumButtonWrapper);

			this._enumButtonWrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-content-add-field" },
						events: { click: BX.delegate(this.onEnumerationItemAddButtonClick, this) },
						text: this.getMessage("add")
					}
				)
			);

			if(this._field)
			{
				var fieldInfo = this._field.getFieldInfo();
				var enums = BX.prop.getArray(fieldInfo, "ENUM", []);
				for(var i = 0, length = enums.length; i < length; i++)
				{
					this.createEnumerationItem(enums[i]);
				}
			}

			this.createEnumerationItem();
		}

		this._optionWrapper = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block crm-entity-widget-content-block-checkbox" },
					children: [ this._optionWrapper ]
				}
			)
		);

		var flagCount = 0;
		if(isNew && (this._typeId === "datetime" || this._typeId === "date"))
		{
			this._isTimeEnabledCheckBox = this.createOption({ caption: this.getMessage("enableTime") });
			flagCount++;
		}

		if(this._typeId !== "boolean")
		{
			if(this._mandatoryConfigurator)
			{
				this._isRequiredCheckBox = this.createOption(
					{
						caption: this._mandatoryConfigurator.getTitle() + ":",
						labelSettings: { props: { className: "crm-entity-new-field-addiction-label" } },
						containerSettings: { style: { alignItems: "center" } },
						elements: this._mandatoryConfigurator.getButton().prepareLayout()
					}
				);

				this._isRequiredCheckBox.checked = (this._field && this._field.isRequired())
					|| this._mandatoryConfigurator.isCustomized();

				this._mandatoryConfigurator.setSwitchCheckBox(this._isRequiredCheckBox);
				this._mandatoryConfigurator.setLabel(this._isRequiredCheckBox.nextSibling);

				this._mandatoryConfigurator.setEnabled(this._isRequiredCheckBox.checked);
				this._mandatoryConfigurator.adjust();
			}
			else
			{
				this._isRequiredCheckBox = this.createOption({ caption: this.getMessage("isRequiredField") });
				this._isRequiredCheckBox.checked = this._field && this._field.isRequired();
			}

			flagCount++;

			if(isNew)
			{
				this._isMultipleCheckBox = this.createOption({ caption: this.getMessage("isMultipleField") });
				flagCount++;
			}
		}

		//region Show Always
		this._showAlwaysCheckBox = this.createOption(
			{ caption: this.getMessage("showAlways"), help: { code: "7046149" } }
		);
		this._showAlwaysCheckBox.checked = isNew
			? BX.prop.getBoolean(this._settings, "showAlways", true)
			: this._field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		flagCount++;
		//endregion

		if(flagCount > 0)
		{
			this._wrapper.appendChild(
				BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
			);
		}

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: {
						className: "crm-entity-widget-content-block-new-fields-btn-container"
					},
					children: [
						this._saveButton,
						this._cancelButton
					]
				}
			)
		);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);

		this._labelInput = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._isTimeEnabledCheckBox = null;
		this._isRequiredCheckBox = null;
		this._isMultipleCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._enumItemWrapper = null;
		this._enumButtonWrapper = null;
		this._enumItemContainer = null;
		this._optionWrapper = null;

		this._enumItems = [];

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onEnumerationItemAddButtonClick = function(e)
	{
		this.createEnumerationItem().focus();
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.createEnumerationItem = function(data)
	{
		var item = BX.Crm.EntityEditorUserFieldListItem.create(
			"",
			{
				configurator: this,
				container: this._enumItemContainer,
				data: data
			}
		);

		this._enumItems.push(item);
		item.layout();
		return item;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.removeEnumerationItem = function(item)
	{
		for(var i = 0, length = this._enumItems.length; i < length; i++)
		{
			if(this._enumItems[i] === item)
			{
				this._enumItems[i].clearLayout();
				this._enumItems.splice(i, 1);
				break;
			}
		}
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.createOption = function(params)
	{
		var element = BX.create("input", { props: { type: "checkbox" } });
		var label = BX.create(
			"label",
			{ children: [ element, BX.create("span", { text: BX.prop.getString(params, "caption", "") }) ] }
		);

		var labelSettings = BX.prop.getObject(params, "labelSettings", null);
		if(labelSettings)
		{
			BX.adjust(label, labelSettings);
		}

		var help = BX.prop.getObject(params, "help", null);
		if(help)
		{
			var helpLink = BX.create("a", { props: { className: "crm-entity-new-field-helper-icon" } });

			var helpUrl = BX.prop.getString(help, "url", "");
			if(helpUrl !== "")
			{
				helpLink.href = helpUrl;
				helpLink.target = "_blank";
			}
			else
			{
				helpLink.href = "#";
				BX.bind(
					helpLink,
					"click",
					function(e) {
						window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(help, "code", ""));
						e.preventDefault();
					}
				);
			}
			label.appendChild(helpLink);
		}

		var childElements = [ label ];
		var elements = BX.prop.getArray(params, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			childElements.push(elements[i]);
		}

		var container = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-field-container" },
				children: childElements
			}
		);

		var containerSettings = BX.prop.getObject(params, "containerSettings", null);
		if(containerSettings)
		{
			BX.adjust(container, containerSettings);
		}
		this._optionWrapper.appendChild(container);

		return element;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onSaveButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		if(this._mandatoryConfigurator)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}
			this._mandatoryConfigurator.close();
		}

		var params =
		{
			typeId: this._typeId,
			label: this._labelInput.value
		};

		if(this._field)
		{
			params["field"] = this._field;
			if(this._isRequiredCheckBox)
			{
				params["mandatory"] = this._isRequiredCheckBox.checked;
			}
		}
		else
		{
			if(this._typeId === "boolean")
			{
				params["multiple"] = false;
			}
			else
			{
				if(this._isMultipleCheckBox)
				{
					params["multiple"] = this._isMultipleCheckBox.checked;
				}
				params["mandatory"] = this._isRequiredCheckBox.checked;
			}

			if(this._typeId === "datetime")
			{
				params["enableTime"] = this._isTimeEnabledCheckBox.checked;
			}
		}

		if(this._typeId === "enumeration")
		{
			params["enumeration"] = [];
			var hashes = [];
			for(var i = 0, length = this._enumItems.length; i < length; i++)
			{
				var enumData = this._enumItems[i].prepareData();
				if(!enumData)
				{
					continue;
				}

				var hash = BX.util.hashCode(enumData["VALUE"]);
				if(BX.util.in_array(hash, hashes))
				{
					continue;
				}

				hashes.push(hash);
				enumData["SORT"] = (params["enumeration"].length + 1) * 100;
				params["enumeration"].push(enumData);
			}
		}

		params["showAlways"] = this._showAlwaysCheckBox.checked;

		BX.onCustomEvent(this, "onSave", [ this, params]);
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onCancelButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		var params = { typeId: this._typeId };
		if(this._field)
		{
			params["field"] = this._field;
		}

		BX.onCustomEvent(this, "onCancel", [ this, params ]);
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.setLocked = function(locked)
	{
		locked = !!locked;
		if(this._isLocked === locked)
		{
			return;
		}

		this._isLocked = locked;
		if(this._isLocked)
		{
			BX.addClass(this._saveButton, "ui-btn-clock");
		}
		else
		{
			BX.removeClass(this._saveButton, "ui-btn-clock");
		}
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.getField = function()
	{
		return this._field;
	};
	if(typeof(BX.Crm.EntityEditorUserFieldConfigurator.messages) === "undefined")
	{
		BX.Crm.EntityEditorUserFieldConfigurator.messages = {};
	}
	BX.Crm.EntityEditorUserFieldConfigurator.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserFieldConfigurator();
		self.initialize(id, settings);
		return self;
	};
	BX.onCustomEvent(window, "BX.Crm.EntityEditorUserFieldConfigurator:onDefine");
}

if(typeof BX.Crm.EntityEditorUserFieldListItem === "undefined")
{
	BX.Crm.EntityEditorUserFieldListItem = function()
	{
		this._id = "";
		this._settings = null;
		this._data = null;
		this._configurator = null;
		this._container = null;
		this._labelInput = null;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorUserFieldListItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = BX.type.isPlainObject(settings) ? settings : {};

			this._data = BX.prop.getObject(this._settings, "data", {});
			this._configurator = BX.prop.get(this._settings, "configurator");
			this._container = BX.prop.getElementNode(this._settings, "container");
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container" } });

			this._labelInput = BX.create(
				"input",
				{
					props:
						{
							className: "crm-entity-widget-content-input",
							type: "input",
							value: BX.prop.getString(this._data, "VALUE", "")
						}
				}
			);

			this._wrapper.appendChild(this._labelInput);
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-remove-block" },
						events: { click: BX.delegate(this.onDeleteButtonClick, this) }
					}
				)
			);

			var anchor = BX.prop.getElementNode(this._settings, "anchor");
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		focus: function()
		{
			if(this._labelInput)
			{
				this._labelInput.focus();
			}
		},
		prepareData: function()
		{
			var value = this._labelInput ? BX.util.trim(this._labelInput.value) : "";
			if(value === "")
			{
				return null;
			}

			var data = { "VALUE": value };
			var id = BX.prop.getInteger(this._data, "ID", 0);
			if(id > 0)
			{
				data["ID"] = id;
			}

			var xmlId = BX.prop.getString(this._data, "XML_ID", "");
			if(id > 0)
			{
				data["XML_ID"] = xmlId;
			}

			return data;
		},
		onDeleteButtonClick: function(e)
		{
			this._configurator.removeEnumerationItem(this);
		}
	};
	BX.Crm.EntityEditorUserFieldListItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserFieldListItem();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorUserField === "undefined")
{
	BX.Crm.EntityEditorUserField = function()
	{
		BX.Crm.EntityEditorUserField.superclass.constructor.apply(this);
		this._innerWrapper = null;

		this._isLoaded = false;
		this._focusOnLoad = false;
	};

	BX.extend(BX.Crm.EntityEditorUserField, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorUserField.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorUserField.superclass.doInitialize.apply(this);
		this._manager = this._editor.getUserFieldManager();
	};
	BX.Crm.EntityEditorUserField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorUserField.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldInfo = function()
	{
		return this._schemeElement.getDataParam("fieldInfo", {});
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldType = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "USER_TYPE_ID", "");
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldSettings = function()
	{
		return BX.prop.getObject(this.getFieldInfo(), "SETTINGS", {});
	};
	BX.Crm.EntityEditorUserField.prototype.isMultiple = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "MULTIPLE", "N") === "Y";
	};
	BX.Crm.EntityEditorUserField.prototype.getEntityValueId = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "ENTITY_VALUE_ID", "");
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldValue = function()
	{
		var fieldData = this.getValue();
		var value = BX.prop.getArray(fieldData, "VALUE", null);
		if(value === null)
		{
			value = BX.prop.getString(fieldData, "VALUE", "");
		}
		return value;
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldSignature = function()
	{
		return BX.prop.getString(this.getValue(), "SIGNATURE", "");
	};
	BX.Crm.EntityEditorUserField.prototype.isTitleEnabled = function()
	{
		var info = this.getFieldInfo();
		var typeName = BX.prop.getString(info, "USER_TYPE_ID", "");

		if(typeName !== 'boolean')
		{
			return true;
		}

		//Disable title for checkboxes only.
		return BX.prop.getString(BX.prop.getObject(info, "SETTINGS", {}), "DISPLAY", "") !== "CHECKBOX";
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldNode = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorUserField.prototype.doGetEditPriority = function()
	{
		return (BX.prop.get(BX.prop.getObject(this.getFieldInfo(), "SETTINGS"), "DEFAULT_VALUE")
			? BX.Crm.EntityEditorPriority.high
			: BX.Crm.EntityEditorPriority.normal
		);
	};
	BX.Crm.EntityEditorUserField.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.prop.getBoolean(value, "IS_EMPTY", false))
		{
			return false;
		}

		var fieldValue;
		if(this.getFieldType() === BX.Crm.EntityUserFieldType.boolean)
		{
			fieldValue = BX.prop.getString(value, "VALUE", "");
			return fieldValue !== "";
		}

		fieldValue = BX.prop.getArray(value, "VALUE", null);
		if(fieldValue === null)
		{
			fieldValue = BX.prop.getString(value, "VALUE", "");
		}
		return BX.type.isArray(fieldValue) ? fieldValue.length > 0 : fieldValue !== "";
	};
	BX.Crm.EntityEditorUserField.prototype.getValue = function(defaultValue)
	{
		if(defaultValue === undefined)
		{
			defaultValue = null;
		}

		if(!this._model)
		{
			return defaultValue;
		}

		return this._model.getField(this.getName(), defaultValue);
	};
	BX.Crm.EntityEditorUserField.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}
		return this.checkIfNotEmpty(this.getValue());
	};
	BX.Crm.EntityEditorUserField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var name = this.getName();
		var title = this.getTitle();

		var fieldInfo = this.getFieldInfo();
		var fieldData = this.getValue();

		var signature = BX.prop.getString(fieldData, "SIGNATURE", "");

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.string)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-text");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.integer || fieldType === BX.Crm.EntityUserFieldType.double)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-number");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.money)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-money");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.date || fieldType === BX.Crm.EntityUserFieldType.datetime)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-date");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-checkbox");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.enumeration)
		{
			BX.addClass(
				this._wrapper,
				this.isMultiple()
					? "crm-entity-widget-content-block-field-custom-multiselect"
					: "crm-entity-widget-content-block-field-custom-select"
			);
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.file)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-file");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.url)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-link");
		}

		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this.isTitleEnabled())
			{
				this._wrapper.appendChild(this.createTitleNode(title));
			}

			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		//It is strongly required to append wrapper to container before "setupContentHtml" will be called otherwise user field initialization will fail.
		this.registerLayout(options);

		if(this.hasContentToDisplay())
		{
			var html = BX.prop.getString(options, "html", "");
			if(html === "")
			{
				//Try get preloaded HTML
				html = BX.prop.getString(
					BX.prop.getObject(fieldData, "HTML", {}),
					BX.Crm.EntityEditorMode.getName(this._mode).toUpperCase(),
					""
				);

			}
			if(html !== "")
			{
				this.setupContentHtml(html);
				this._hasLayout = true;
			}
			else
			{
				this._isLoaded = false;

				var loader = null;
				//Ignore group loader for single edit mode
				if(!this.isInSingleEditMode())
				{
					loader = BX.prop.get(options, "userFieldLoader", null);
				}

				if(!loader)
				{
					loader = BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: this._mode, enableBatchMode: false }
					);
				}


				var fieldParams = BX.clone(fieldInfo);
				fieldParams["SIGNATURE"] = signature;
				if(fieldType === BX.Crm.EntityUserFieldType.file && BX.type.isObject(fieldParams["ADDITIONAL"]))
				{
					var ownerToken = BX.prop.getString(
						BX.prop.getObject(fieldData, "EXTRAS", {}),
						"OWNER_TOKEN",
						""
					);
					if(ownerToken !== "")
					{
						fieldParams["ADDITIONAL"]["URL_TEMPLATE"] += "&owner_token=" + encodeURIComponent(ownerToken);
					}
				}
				if(this.checkIfNotEmpty(fieldData))
				{
					var value = BX.prop.getArray(fieldData, "VALUE", null);
					if(value === null)
					{
						value = BX.prop.getString(fieldData, "VALUE", "");
					}
					fieldParams["VALUE"] = value;
				}

				this.adjustFieldParams(fieldParams, true);
				loader.addItem(
					{
						name: name,
						field: fieldParams,
						callback: BX.delegate(this.onLayoutLoaded, this)
					}
				);
				loader.run();
			}
		}
		else
		{
			this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			this._hasLayout = true;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doRegisterLayout = function()
	{
	};
	BX.Crm.EntityEditorUserField.prototype.adjustFieldParams = function(fieldParams, isLayoutContext)
	{
		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			//HACK: Overriding original label for boolean field
			if(!BX.type.isPlainObject(fieldParams["SETTINGS"]))
			{
				fieldParams["SETTINGS"] = {};
			}
			fieldParams["SETTINGS"]["LABEL_CHECKBOX"] = this.getTitle();
		}

		//HACK: We have to assign fake ENTITY_VALUE_ID for render predefined value of new entity
		if(isLayoutContext
			&& typeof fieldParams["VALUE"] !== "undefined"
			&& this._mode === BX.Crm.EntityEditorMode.edit
			&& BX.prop.getInteger(fieldParams, "ENTITY_VALUE_ID") <= 0
		)
		{
			fieldParams["ENTITY_VALUE_ID"] = 1;
		}

	};
	BX.Crm.EntityEditorUserField.prototype.doClearLayout = function(options)
	{
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorUserField.prototype.validate = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUserField.prototype.save = function()
	{
	};
	BX.Crm.EntityEditorUserField.prototype.focus = function()
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			return;
		}

		if(this._isLoaded)
		{
			this.doFocus();
		}
		else
		{
			this._focusOnLoad = true;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doFocus = function()
	{
		BX.Main.UF.Factory.focus(this.getName());
	};
	BX.Crm.EntityEditorUserField.prototype.setupContentHtml = function(html)
	{
		if(this._innerWrapper)
		{
			//console.log("setupContentHtml: %s->%s->%s", this._editor.getId(), this._id, BX.Crm.EntityEditorMode.getName(this._mode));

			BX.html(this._innerWrapper, html).then(
				function()
				{
					this.onLayoutSuccess();

					this._isLoaded = true;
					if(this._focusOnLoad === true)
					{
						this.doFocus();
						this._focusOnLoad = false;
					}
				}.bind(this)
			);
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doSetActive = function()
	{
		//We can't call this._manager.registerActiveField. We have to wait field layout load(see onLayoutSuccess)
		if(!this._isActive)
		{
			this._manager.unregisterActiveField(this);
		}
	};
	BX.Crm.EntityEditorUserField.prototype.rollback = function()
	{
		this._manager.unregisterActiveField(this);
	};
	BX.Crm.EntityEditorUserField.prototype.onLayoutSuccess = function()
	{
		if(this._isActive)
		{
			this._manager.registerActiveField(this);
		}

		//Add Change Listener after timeout for prevent markAsChanged call in process of field initialization.
		window.setTimeout(
			function(){
				BX.bindDelegate(
					this._innerWrapper,
					"bxchange",
					{ tag: [ "input", "select", "textarea" ] },
					this._changeHandler
				);
			}.bind(this),
			200
		);

		//HACK: Try to resolve employee change button
		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.employee)
		{
			var button = this._innerWrapper.querySelector('.feed-add-destination-link');
			if(button)
			{
				BX.bind(button, "click", BX.delegate(this.onEmployeeSelectorOpen, this));
			}
		}

		//HACK: Mark empty boolean field as changed because of default value
		if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			if(this._mode === BX.Crm.EntityEditorMode.edit && !this.checkIfNotEmpty(this.getValue()))
			{
				this.markAsChanged();
			}
		}

		//Field content is added successfully. Layout is ready.
		if(!this._hasLayout)
		{
			this._hasLayout = true;
		}

		// Handler could be called by UF to trigger _changeHandler in complicated cases
		BX.removeCustomEvent(window, "onCrmEntityEditorUserFieldExternalChanged", BX.proxy(this.userFieldExternalChangedHandler, this));
		BX.addCustomEvent(window, "onCrmEntityEditorUserFieldExternalChanged", BX.proxy(this.userFieldExternalChangedHandler, this));

		BX.removeCustomEvent(window, "onCrmEntityEditorUserFieldSetValidator", BX.proxy(this.userFieldSetValidatorHandler, this));
		BX.addCustomEvent(window, "onCrmEntityEditorUserFieldSetValidator", BX.proxy(this.userFieldSetValidatorHandler, this));
	};

	BX.Crm.EntityEditorUserField.prototype.userFieldExternalChangedHandler = function(fieldId)
	{
		if (fieldId == this._id && BX.type.isFunction(this._changeHandler))
		{
			this._changeHandler();
		}
	};
	BX.Crm.EntityEditorUserField.prototype.userFieldSetValidatorHandler = function(fieldId, callback)
	{
		if (fieldId == this._id && BX.type.isFunction(callback))
		{
			this.validate = callback;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.onLayoutLoaded = function(result)
	{
		var html = BX.prop.getString(result, "HTML", "");
		if(html !== "")
		{
			this.setupContentHtml(html);
			this._hasLayout = true;
			this.raiseLayoutEvent();
		}
	};
	BX.Crm.EntityEditorUserField.prototype.onEmployeeSelectorOpen = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button)
		{
			return;
		}

		//HACK: Try to resolve UserFieldEmployee object
		var match = button.id.match(/^add_user_([a-z_0-9-]+)/i);
		if(BX.type.isArray(match) && match.length > 1)
		{
			var selector = BX.Intranet.UserFieldEmployee.instance(match[1]);
			if(selector)
			{
				BX.addCustomEvent(selector, 'onUpdateValue', this._changeHandler);
			}
		}
	};
	BX.Crm.EntityEditorUserField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserField();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorProductRowSummary === "undefined")
{
	BX.Crm.EntityEditorProductRowSummary = function()
	{
		BX.Crm.EntityEditorProductRowSummary.superclass.constructor.apply(this);
		this._loader = null;
		this._table = null;

		this._itemCount = 0;
		this._totalCount = 0;

		this._moreButton = null;
		this._moreButtonRow = null;
		this._moreButtonClickHandler = BX.delegate(this._onMoreButtonClick, this);
	};
	BX.extend(BX.Crm.EntityEditorProductRowSummary, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorProductRowSummary.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorProductRowSummary.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({});
		this.adjustWrapper();

		var data = this.getValue();

		if(!BX.type.isPlainObject(data))
		{
			return;
		}

		var title = this.getTitle();
		var items = BX.prop.getArray(data, "items", []);
		this._totalCount = BX.prop.getInteger(data, "count", 0);

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		this._table = BX.create("table", { props: { className: "crm-entity-widget-content-block-products-list" } });

		var length = this._itemCount = items.length;
		var restLength = 0;
		if(length > 5)
		{
			restLength = this._totalCount - 5;
			length = 5;
		}

		for(var i = 0; i < length; i++)
		{
			this.addProductRow(items[i], -1);
		}

		var row, cell;
		this._moreButton = null;
		if(restLength > 0)
		{
			row = this._moreButtonRow = this._table.insertRow(-1);
			row.className = "crm-entity-widget-content-block-products-item";
			cell = row.insertCell(-1);
			cell.className = "crm-entity-widget-content-block-products-item-name";

			this._moreButton = BX.create(
				"span",
				{
					attrs: { className: "crm-entity-widget-content-block-products-show-more" },
					events: { click: this._moreButtonClickHandler },
					text: this.getMessage("notShown").replace(/#COUNT#/gi, restLength.toString())
				}
			);

			cell.appendChild(this._moreButton);
			cell = row.insertCell(-1);
			cell.className = "crm-entity-widget-content-block-products-price";
		}

		row = this._table.insertRow(-1);
		row.className = "crm-entity-widget-content-block-products-item";
		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-item-name";
		cell.innerHTML = this.getMessage("total");

		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-price";
		cell.appendChild(
			BX.create(
				"div",
				{
					attrs: { className: "crm-entity-widget-content-block-products-price-value" },
					html: data["total"]
				}
			)
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-products" },
					children: [ this._table ]
				}
			)
		);

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype._onMoreButtonClick = function(e)
	{
		if(this._totalCount > 10)
		{
			BX.onCustomEvent(window, "OpenEntityDetailTab", ["tab_products"]);
			return;
		}

		this._moreButtonRow.style.display = "none";
		var data = this.getValue();
		var items = BX.prop.getArray(data, "items", []);
		for(var i = 5; i < this._itemCount; i++)
		{
			this.addProductRow(items[i], i);
		}
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._table = null;
		this._moreButton = null;
		this._moreButtonRow = null;
		this._wrapper = BX.remove(this._wrapper);
		this._hasLayout = false;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.addProductRow = function(data, index)
	{
		if(typeof(index) === "undefined")
		{
			index = -1;
		}

		var row, cell;
		row = this._table.insertRow(index);
		row.className = "crm-entity-widget-content-block-products-item";
		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-item-name";

		var url = BX.prop.getString(data, "URL", "");
		if(url !== "")
		{
			cell.appendChild(
				BX.create("a", { attrs: { target: "_blank", href: url }, text: data["PRODUCT_NAME"] })
			);
		}
		else
		{
			cell.innerHTML = BX.util.htmlspecialchars(data["PRODUCT_NAME"]);
		}

		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-price";
		cell.appendChild(
			BX.create(
				"div",
				{
					attrs: { className: "crm-entity-widget-content-block-products-price-value" },
					html: data["SUM"]
				}
			)
		);
	};

	if(typeof(BX.Crm.EntityEditorProductRowSummary.messages) === "undefined")
	{
		BX.Crm.EntityEditorProductRowSummary.messages = {};
	}

	BX.Crm.EntityEditorProductRowSummary.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorProductRowSummary();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteSelector === "undefined")
{
	BX.Crm.EntityEditorRequisiteSelector = function()
	{
		BX.Crm.EntityEditorRequisiteSelector.superclass.constructor.apply(this);
		this._requisiteId = 0;
		this._bankDetailId = 0;

		this._itemWrappers = {};
		this._itemButtons = {};
		this._itemBankDetailButtons = {};
	};
	BX.extend(BX.Crm.EntityEditorRequisiteSelector, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRequisiteSelector.prototype.doInitialize = function()
	{
		this._requisiteId = this._model.getIntegerField("REQUISITE_ID", 0);
		this._bankDetailId = this._model.getIntegerField("BANK_DETAIL_ID", 0);
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRequisiteSelector.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getPrefix = function()
	{
		return this._id.toLowerCase() + "_";
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var data = this.getData();
		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: this._requisiteId,
				bankDetailId: this._bankDetailId,
				data: BX.prop.getArray(data, "data", {})
			}
		);

		var items = this._requisiteInfo.getItems();

		this._wrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-wrapper" } });
		var contentWrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-content" } });
		this._wrapper.appendChild(contentWrapper);

		var innerContentWrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-widget-content" } });
		contentWrapper.appendChild(innerContentWrapper);

		var selectContainer = BX.create("div", { props: { className: "crm-entity-requisites-select-container" } });
		innerContentWrapper.appendChild(selectContainer);

		for(var i = 0, length = items.length; i < length; i++)
		{
			selectContainer.appendChild(this.prepareItemLayout(items[i]));
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getItemData = function(itemId)
	{
		var items = this._requisiteInfo.getItems();
		for(var i = 0, length = items.length; i < length; i++)
		{
			var itemData = items[i];
			if(itemId === BX.prop.getInteger(itemData, "requisiteId", 0))
			{
				return itemData;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.prepareItemLayout = function(itemData)
	{
		var viewData = BX.prop.getObject(itemData, "viewData", null);
		if(!viewData)
		{
			return;
		}

		var isSelected = BX.prop.getBoolean(itemData, "selected", false);

		var prefix  = this.getPrefix();
		var itemId = BX.prop.getInteger(itemData, "requisiteId", 0);

		var wrapper = BX.create("label", { props: { className: "crm-entity-requisites-select-item" } });
		wrapper.appendChild(BX.create("strong", { text: BX.prop.getString(viewData, "title", "") }));
		if(isSelected)
		{
			BX.addClass(wrapper, "crm-entity-requisites-select-item-selected");
		}
		this._itemWrappers[itemId] = wrapper;

		var i, length;

		var fields = BX.prop.getArray(viewData, "fields", []);
		for(i = 0, length = fields.length; i < length; i++)
		{
			var field = fields[i];

			var fieldTitle = BX.prop.getString(field, "title", "");
			var fieldValue = BX.prop.getString(field, "textValue", "");

			if(fieldTitle !== "" && fieldValue !== "")
			{
				wrapper.appendChild(BX.create("br"));
				wrapper.appendChild(BX.create("span", { text: fieldTitle + ": " + fieldValue }));
			}
		}

		var button = BX.create("input",
			{
				props:
					{
						type: "radio",
						name: prefix + "requisite",
						checked: isSelected,
						className: "crm-entity-requisites-select-item-field"
					},
				attrs: { "data-requisiteid": itemId }
			}
		);
		wrapper.appendChild(button);
		this._itemButtons[itemId] = button;
		BX.bind(button, "change", BX.delegate(this.onItemChange, this));

		var bankDetailList = BX.prop.getArray(itemData, "bankDetailViewDataList", []);

		if(bankDetailList.length > 0)
		{
			var bankDetailWrapper = BX.create("span",
				{
					props: { className: "crm-entity-requisites-select-item-bank-requisites-container" }
				}
			);
			wrapper.appendChild(bankDetailWrapper);
			bankDetailWrapper.appendChild(
				BX.create("span",
					{
						props: { className: "crm-entity-requisites-select-item-bank-requisites-title" },
						html: this.getMessage("bankDetails")
					}
				)
			);

			var bankDetailContainer = BX.create("span",
				{
					props: { className: "crm-entity-requisites-select-item-bank-requisites-field-container" }
				}
			);
			bankDetailWrapper.appendChild(bankDetailContainer);

			this._itemBankDetailButtons[itemId] = {};
			for(i = 0, length = bankDetailList.length; i < length; i++)
			{
				var bankDetailItem = bankDetailList[i];
				var bankDetailItemId = BX.prop.getInteger(bankDetailItem, "pseudoId", 0);

				var bankDetailViewData = BX.prop.getObject(bankDetailItem, "viewData", null);
				if(!bankDetailViewData)
				{
					continue;
				}

				var isBankDetailItemSelected = isSelected && BX.prop.getBoolean(bankDetailItem, "selected", false);

				var bankDetailItemWrapper = BX.create("label",
					{
						props: { className: "crm-entity-requisites-select-item-bank-requisites-field-item" }
					}
				);
				bankDetailContainer.appendChild(bankDetailItemWrapper);

				var bankDetailButton = BX.create("input",
					{
						props:
							{
								type: "radio",
								name: prefix + "bankrequisite" + itemId,
								checked: isBankDetailItemSelected,
								className: "crm-entity-requisites-select-item-bank-requisites-field"
							},
						attrs:
							{
								"data-requisiteid": itemId,
								"data-bankdetailid": bankDetailItemId
							}
					}
				);
				bankDetailItemWrapper.appendChild(bankDetailButton);
				BX.bind(bankDetailButton, "change", BX.delegate(this.onItemBankDetailChange, this));
				this._itemBankDetailButtons[itemId][bankDetailItemId] = bankDetailButton;

				bankDetailItemWrapper.appendChild(
					document.createTextNode(BX.prop.getString(bankDetailViewData, "title", ""))
				);
			}

			wrapper.appendChild(
				BX.create("span", { style: { display: "block", clear: "both" } })
			);
		}

		return wrapper;

	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);
		this._itemWrappers = {};
		this._itemButtons = {};
		this._itemBankDetailButtons = {};

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.save = function()
	{
		this._model.setField("REQUISITE_ID", this._requisiteId, { originator: this });
		this._model.setField("BANK_DETAIL_ID", this._bankDetailId, { originator: this });
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.onItemChange = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button.checked)
		{
			return;
		}

		var requisiteId = parseInt(button.getAttribute("data-requisiteid"));
		if(isNaN(requisiteId) || requisiteId <= 0)
		{
			return;
		}

		this._requisiteId = requisiteId;
		this._bankDetailId = 0;

		var itemData = this.getItemData(this._requisiteId);
		var itemBankDetailList = BX.prop.getArray(itemData, "bankDetailViewDataList", []);
		for(var i = 0, length = itemBankDetailList.length; i < length; i++)
		{
			var itemBankDetailItem = itemBankDetailList[i];
			var itemBankDetailItemId = BX.prop.getInteger(itemBankDetailItem, "pseudoId", 0);
			if(itemBankDetailItemId > 0 && BX.prop.getBoolean(itemBankDetailItem, "selected", false))
			{
				this._bankDetailId = itemBankDetailItemId;
				break;
			}
		}

		for(var key in this._itemWrappers)
		{
			if(!this._itemWrappers.hasOwnProperty(key))
			{
				continue;
			}

			var itemWrapper = this._itemWrappers[key];
			var isSelected = this._requisiteId === parseInt(key);
			if(isSelected)
			{
				BX.addClass(itemWrapper, "crm-entity-requisites-select-item-selected");
			}
			else
			{
				BX.removeClass(itemWrapper, "crm-entity-requisites-select-item-selected");
			}

			if(this._itemButtons.hasOwnProperty(key))
			{
				var itemButton = this._itemButtons[key];
				if(itemButton.checked !== isSelected)
				{
					itemButton.checked = isSelected;
				}
			}

			if(this._itemBankDetailButtons.hasOwnProperty(key))
			{
				var itemBankDetailButtons = this._itemBankDetailButtons[key];
				for(var bankDetailItemId in itemBankDetailButtons)
				{
					if(!itemBankDetailButtons.hasOwnProperty(bankDetailItemId))
					{
						continue;
					}

					var isBankDetailItemSelected = isSelected && this._bankDetailId === parseInt(bankDetailItemId);
					var itemBankDetailButton = itemBankDetailButtons[bankDetailItemId];
					if(itemBankDetailButton.checked !== isBankDetailItemSelected)
					{
						itemBankDetailButton.checked = isBankDetailItemSelected;
					}
				}
			}
		}

		this.markAsChanged();
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.onItemBankDetailChange = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button.checked)
		{
			return;
		}

		var requisiteId = parseInt(button.getAttribute("data-requisiteid"));
		if(isNaN(requisiteId) || requisiteId <= 0)
		{
			return;
		}

		if(this._requisiteId !== requisiteId)
		{
			return;
		}

		var bankdetailId = parseInt(button.getAttribute("data-bankdetailid"));
		if(isNaN(bankdetailId) || bankdetailId <= 0)
		{
			return;
		}

		this._bankDetailId = bankdetailId;

	};
	if(typeof(BX.Crm.EntityEditorRequisiteSelector.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteSelector.messages = {};
	}
	BX.Crm.EntityEditorRequisiteSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteSelector();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteListItem === "undefined")
{
	BX.Crm.EntityEditorRequisiteListItem = function()
	{
		this._id = "";
		this._settings = null;
		this._owner = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._data = null;
		this._requisiteId = 0;

		this._container = null;
		this._wrapper = null;
		this._innerWrapper = null;
		this._editButton = null;
		this._deleteButton = null;

		this._hasLayout = false;
	};

	BX.Crm.EntityEditorRequisiteListItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = BX.type.isPlainObject(settings) ? settings : {};

			this._owner = BX.prop.get(this._settings, "owner", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.intermediate);

			this._data = BX.prop.getObject(this._settings, "data", {});
			this._requisiteId = BX.prop.getInteger(this._data, "requisiteId", 0);

			this._container = BX.prop.getElementNode(this._settings, "container");
		},
		getId: function()
		{
			return this._id;
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorRequisiteListItem.messages, name, name);
		},
		getRequisiteId: function()
		{
			return this._requisiteId;
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data)
		{
			this._data = data;
		},
		layout: function(options)
		{
			if(this._hasLayout)
			{
				return;
			}

			var viewData = BX.prop.getObject(this._data, "viewData", null);
			if(!viewData)
			{
				viewData = {};
			}

			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create(
				"div",
				{ props: { className: "crm-entity-widget-client-requisites-container crm-entity-widget-client-requisites-container-opened" } }
			);

			this._innerWrapper = BX.create("dl", { props: { className: "crm-entity-widget-client-requisites-list" } });

			this.prepareViewLayout(viewData, [ "RQ_ADDR" ]);
			this.prepareFieldViewLayout(viewData, "RQ_ADDR");

			var bankDetails = BX.prop.getArray(this._data, "bankDetailViewDataList", []);
			for(var i = 0, length = bankDetails.length; i < length; i++)
			{
				var bankDetail = bankDetails[i];
				if(!BX.prop.getBoolean(bankDetail, "isDeleted", false))
				{
					this.prepareViewLayout(BX.prop.getObject(bankDetail, "viewData", null), []);
				}
			}

			if(!isViewMode)
			{
				this._deleteButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-client-requisites-remove-icon" },
						events: { click: BX.delegate(this.onRemoveButtonClick, this) }
					}
				);

				this._editButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-client-requisites-edit-icon" },
						events: { click: BX.delegate(this.onEditButtonClick, this) }
					}
				);
			}

			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-client-requisites-inner-container" },
						children: [ this._deleteButton, this._editButton, this._innerWrapper ]
					}
				)
			);

			var anchor = BX.prop.getElementNode(options, "anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}
			this._hasLayout = true;
		},
		prepareViewLayout: function(viewData, skipFields)
		{
			if(!viewData)
			{
				return;
			}

			var title = BX.prop.getString(viewData, "title", "");
			if(title !== "")
			{
				this._innerWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);
			}

			var i, length;
			var skipMap = {};
			if(BX.type.isArray(skipFields))
			{
				for(i = 0, length = skipFields.length; i < length; i++)
				{
					skipMap[skipFields[i]] = true;
				}
			}

			var fieldContent = [];
			var fields = BX.prop.getArray(viewData, "fields", []);
			for(i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");
				if(skipMap.hasOwnProperty(name))
				{
					continue;
				}

				var fieldTitle = BX.prop.getString(field, "title", "");
				var fieldValue = BX.prop.getString(field, "textValue", "");
				if(fieldTitle !== "" && fieldValue !== "")
				{
					fieldContent.push(fieldTitle + ": " + fieldValue);
				}
			}

			this._innerWrapper.appendChild(
				BX.create("dd",
					{
						props: { className: "crm-entity-widget-client-requisites-value" },
						text: fieldContent.join(", ")
					}
				)
			);
		},
		prepareFieldViewLayout: function(viewData, fieldName)
		{
			if(!viewData)
			{
				return;
			}

			var fields = BX.prop.getArray(viewData, "fields", []);
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");

				if(name !== fieldName)
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				this._innerWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);

				this._innerWrapper.appendChild(
					BX.create("dd",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: text
						}
					)
				);
			}
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._innerWrapper = null;
			this._editButton = null;
			this._deleteButton = null;

			this._hasLayout = false;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		getWrapper: function()
		{
			return this._wrapper;
		},
		prepareData: function()
		{
			var value = this._labelInput ? BX.util.trim(this._labelInput.value) : "";
			if(value === "")
			{
				return null;
			}

			var data = { "VALUE": value };
			var id = BX.prop.getInteger(this._data, "ID", 0);
			if(id > 0)
			{
				data["ID"] = id;
			}

			var xmlId = BX.prop.getString(this._data, "XML_ID", "");
			if(id > 0)
			{
				data["XML_ID"] = xmlId;
			}

			return data;
		},
		onEditButtonClick: function(e)
		{
			this._owner.onEditItem(this);
		},
		onRemoveButtonClick: function(e)
		{
			var dlg = BX.Crm.EditorAuxiliaryDialog.create(
				this._id,
				{
					title: this.getMessage("deleteTitle"),
					content: this.getMessage("deleteConfirm"),
					buttons:
					[
						{
							id: "accept",
							type: BX.Crm.DialogButtonType.accept,
							text: BX.message("CRM_EDITOR_DELETE"),
							callback: BX.delegate(this.onRemovalConfirmationDialogButtonClick, this)
						},
						{
							id: "cancel",
							type: BX.Crm.DialogButtonType.cancel,
							text: BX.message("CRM_EDITOR_CANCEL"),
							callback: BX.delegate(this.onRemovalConfirmationDialogButtonClick, this)
						}
					]
				}
			);
			dlg.open();
			this._owner.onOpenItemRemovalConfirmation(this);
		},
		onRemovalConfirmationDialogButtonClick: function(button)
		{
			var dlg = button.getDialog();
			if(button.getId() === "accept")
			{
				this._owner.onRemoveItem(this);
			}
			dlg.close();
			this._owner.onCloseItemRemovalConfirmation(this);
		}
	};
	if(typeof(BX.Crm.EntityEditorRequisiteListItem.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteListItem.messages = {};
	}
	BX.Crm.EntityEditorRequisiteListItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteListItem();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteList === "undefined")
{
	BX.Crm.EntityEditorRequisiteList = function()
	{
		BX.Crm.EntityEditorRequisiteList.superclass.constructor.apply(this);
		this._items = null;

		this._data = null;
		this._externalContext = null;
		this._externalEventHandler = null;

		this._createButton = null;

		this._dataInputs = {};
		this._dataSignInputs = {};

		this._itemWrapper = null;
		this._dataWrapper = null;

		this._isPresetMenuOpened = false;
		this._newItemIndex = -1;
		this._sliderUrls = {};
	};
	BX.extend(BX.Crm.EntityEditorRequisiteList, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRequisiteList.prototype.doInitialize = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.initializeFromModel = function()
	{
		var value = this.getValue();
		this._data = BX.type.isArray(value) ? BX.clone(value, true) : [];
		var i, length;
		for(i = 0, length = this._data.length; i < length; i++)
		{
			this.prepareRequisiteData(this._data[i]);
		}

		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: 0,
				bankDetailId: 0,
				data: this._data
			}
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.initializeFromModel();
		this.refreshLayout();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.reset = function()
	{
		this.initializeFromModel();

		//Destroy cached requisite sliders
		for(var key in this._sliderUrls)
		{
			if(this._sliderUrls.hasOwnProperty(key))
			{
				BX.Crm.Page.removeSlider(this._sliderUrls[key]);
			}
		}
		this._sliderUrls = {};
	};
	BX.Crm.EntityEditorRequisiteList.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.reset();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRequisiteList.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorRequisiteList.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.prepareDataInputName = function(requisiteKey, fieldName)
	{
		return this.getName() + "[" + requisiteKey.toString() + "]" + "[" + fieldName + "]";
	};
	BX.Crm.EntityEditorRequisiteList.prototype.prepareRequisiteData = function(data)
	{
		var id = BX.prop.getInteger(data, "requisiteId", 0);
		var pseudoId = BX.prop.getString(data, "pseudoId", "");

		if(id > 0)
		{
			data["key"] = id.toString();
			data["isNew"] = false;
			data["isChanged"] = BX.prop.getBoolean(data, "isChanged", false);
		}
		else
		{
			data["key"] = pseudoId;
			data["isNew"] = true;
			data["isChanged"] = BX.prop.getBoolean(data, "isChanged", true);
		}
		data["isDeleted"] = false;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.findRequisiteDataIndexByKey = function(key)
	{
		for(var i = 0, length = this._data.length; i < length; i++)
		{
			if(BX.prop.getString(this._data[i], "key", 0) === key)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getRequisiteDataByKey = function(key)
	{
		var index = this.findRequisiteDataIndexByKey(key);
		return index >= 0 ? this._data[index] : null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.setupRequisiteData = function(data)
	{
		var key = BX.prop.getString(data, "key", "");
		if(key === "")
		{
			return;
		}

		var index = this.findRequisiteDataIndexByKey(key);
		if(index >= 0)
		{
			this._data[index] = data;
		}
		else
		{
			this._data.push(data);
		}

		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: 0,
				bankDetailId: 0,
				data: this._data
			}
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.refreshRequisiteDataInputs = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		BX.cleanNode(this._dataWrapper);
		for(var i = 0, length = this._data.length; i < length; i++)
		{
			var item = this._data[i];

			var key = BX.prop.getString(item, "key", "");
			if(key === "")
			{
				continue;
			}

			var isChanged = BX.prop.getBoolean(item, "isChanged", false);
			var isDeleted = BX.prop.getBoolean(item, "isDeleted", false);
			if(!isChanged && !isDeleted)
			{
				continue;
			}

			if(isDeleted)
			{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "DELETED"),
									value: "Y"
								}
							}
						)
					);
			}
			else
			{
				var requisiteDataSign = BX.prop.getString(item, "requisiteDataSign", "");
				if(requisiteDataSign !== "")
				{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "SIGN"),
									value: requisiteDataSign
								}
							}
						)
					);
				}

				var requisiteData = BX.prop.getString(item, "requisiteData", "");
				if(requisiteData !== "")
				{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "DATA"),
									value: requisiteData
								}
							}
						)
					);
				}
			}
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}
		return this._requisiteInfo && this._requisiteInfo.getItems().length > 0;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.layout = function(options)
	{
		if (this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		this._items = [];

		if (!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		var i, length;
		var itemInfos = this._requisiteInfo.getItems();
		for(i = 0, length = itemInfos.length; i < length; i++)
		{
			var  data = itemInfos[i];
			var item = BX.Crm.EntityEditorRequisiteListItem.create(
				BX.prop.getString(data, "key", ""),
				{
					owner: this,
					mode: this._mode,
					data: data
				}
			);
			this._items.push(item);
		}

		if(this.isInEditMode())
		{
			this._dataWrapper = BX.create("div");
			this._wrapper.appendChild(this._dataWrapper);

			this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
			this._itemWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-requisites" } });
			this._wrapper.appendChild(this._itemWrapper);
			for(i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemWrapper);
				this._items[i].layout();
			}

			this._createButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-widget-client-requisites-add-btn" },
					text: BX.message("CRM_EDITOR_ADD")
				}
			);
			this._itemWrapper.appendChild(this._createButton);
			BX.bind(this._createButton, "click", BX.delegate(this.onCreateButtonClick, this));
		}
		else
		{
			this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
			this._itemWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-colums-block" } });
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						children: [ this._itemWrapper ]
					}
				)
			);

			this._wrapper.appendChild(this._itemWrapper);
			for(i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemWrapper);
				this._items[i].layout();
			}
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.doClearLayout = function(options)
	{
		if(this._items)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].clearLayout();
			}
		}
		this._items = [];

		this._itemWrapper = null;
		this._createButton = null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemByIndex = function(index)
	{
		return index >= 0 && index <= (this._items.length - 1) ? this._items[index] : null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemById = function(requisiteId)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			if(item.getId() === requisiteId)
			{
				return item;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemCount = function()
	{
		return this._items.length;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemIndex = function(item)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.removeItemByIndex = function(index)
	{
		if(index < this._items.length)
		{
			this._items.splice(index, 1);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.removeItem = function(item)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		var data = this.getRequisiteDataByKey(item.getId());
		if(data)
		{
			data["isDeleted"] = true;
		}
		item.clearLayout();
		this.removeItemByIndex(index);

		this.refreshRequisiteDataInputs();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.openEditor = function(params)
	{
		var requisiteId = BX.prop.getInteger(params, "requisiteId", 0);
		var contextId = this._editor.getContextId();

		var urlParams =
			{
				etype: this._editor.getEntityTypeId(),
				eid: this._editor.getEntityId(),
				external_context_id: contextId
			};

		var presetId = BX.prop.getInteger(params, "presetId", 0);
		if(presetId > 0)
		{
			urlParams["pid"] = presetId;
		}

		var pseudoId = "";
		if(requisiteId <= 0)
		{
			this._newItemIndex++;
			pseudoId = "n" + this._newItemIndex.toString();
			urlParams["pseudo_id"] = pseudoId;
		}

		var url = BX.util.add_url_param(
			this._editor.getRequisiteEditUrl(requisiteId),
			urlParams
		);

		if(!this._externalEventHandler)
		{
			this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
			BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
		}

		if(!this._externalContext)
		{
			this._externalContext = {};
		}

		if(requisiteId > 0)
		{
			this._externalContext[requisiteId] = { requisiteId: requisiteId, url: url };
		}
		else
		{
			this._externalContext[pseudoId] = { pseudoId: pseudoId, url: url };
		}

		if(requisiteId > 0)
		{
			this._sliderUrls[requisiteId] = url;
		}

		BX.Crm.Page.openSlider(url, { width: 950 });
	};

	/*
	BX.Crm.EntityEditorRequisiteList.prototype.loadEditor = function(params)
	{
		var requisiteId = BX.prop.getInteger(params, "requisiteId", 0);
		var contextId = this._editor.getContextId();

		var urlParams =
			{
				etype: this._editor.getEntityTypeId(),
				eid: this._editor.getEntityId(),
				external_context_id: contextId
			};

		var presetId = BX.prop.getInteger(params, "presetId", 0);
		if(presetId > 0)
		{
			urlParams["pid"] = presetId;
		}

		var pseudoId = "";
		if(requisiteId <= 0)
		{
			this._newItemIndex++;
			pseudoId = "n" + this._newItemIndex.toString();
			urlParams["pseudo_id"] = pseudoId;
		}

		var url = BX.util.add_url_param(
			this._editor.getRequisiteEditUrl(requisiteId),
			urlParams
		);

		if(!this._externalEventHandler)
		{
			this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
			BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
		}

		if(!this._externalContext)
		{
			this._externalContext = {};
		}

		if(requisiteId > 0)
		{
			this._externalContext[requisiteId] = { requisiteId: requisiteId, url: url };
		}
		else
		{
			this._externalContext[pseudoId] = { pseudoId: pseudoId, url: url };
		}

		var promise = new top.BX.Promise();
		var onEditorLoad = function(data)
		{
			var node = top.document.createElement("div");
			node.innerHTML = data;
			promise.fulfill(node);
		};
		BX.ajax(
			{
				'method': 'POST',
				'dataType': 'html',
				'url': url,
				'processData': false,
				'data':  {},
				'onsuccess': onEditorLoad
			}
		);

		return promise;
	};
	*/
	BX.Crm.EntityEditorRequisiteList.prototype.onEditItem = function(item)
	{
		this.openEditor( { requisiteId: item.getRequisiteId() });
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onRemoveItem = function(item)
	{
		this.removeItem(item);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onOpenItemRemovalConfirmation = function(item)
	{
		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(false);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onCloseItemRemovalConfirmation = function(item)
	{
		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(true);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onExternalEvent = function(params)
	{
		var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
		if(key !== "BX.Crm.RequisiteSliderEditor:onSave")
		{
			return;
		}

		var value = BX.type.isPlainObject(params["value"]) ? params["value"] : {};
		var contextId = BX.prop.getString(value, "context", "");
		if(contextId !== this._editor.getContextId())
		{
			return;
		}

		var presetId = BX.prop.getInteger(value, "presetId", 0);
		var pseudoId = BX.prop.getString(value, "pseudoId", "");
		var requisiteId = BX.prop.getInteger(value, "requisiteId", 0);
		var requisiteDataSign = BX.prop.getString(value, "requisiteDataSign", "");
		var requisiteData = BX.prop.getString(value, "requisiteData", "");

		var itemData =
		{
			entityTypeId: this._editor.getEntityTypeId(),
			entityId: this._editor.getEntityId(),
			presetId: presetId,
			pseudoId: pseudoId,
			requisiteId: requisiteId,
			requisiteData: requisiteData,
			requisiteDataSign: requisiteDataSign,
			isChanged: true
		};

		this.prepareRequisiteData(itemData);
		this.setupRequisiteData(itemData);
		this.refreshRequisiteDataInputs();
		this.markAsChanged();

		var requisiteKey = BX.prop.getString(itemData, "key", "");
		var contextData = BX.prop.getObject(this._externalContext, requisiteKey, null);
		if(!contextData)
		{
			return;
		}

		var item = this.getItemById(requisiteKey);
		var layoutOptions;
		if(item)
		{
			item.setData(itemData);
			item.clearLayout();
			layoutOptions = {};
			var itemIndex = this.getItemIndex(item);
			if(itemIndex < (this.getItemCount() - 1))
			{
				layoutOptions["anchor"] = this.getItemByIndex(itemIndex + 1).getWrapper();
			}
			else if(this._createButton)
			{
				layoutOptions["anchor"] = this._createButton;
			}
			item.layout(layoutOptions);
		}
		else
		{
			item = BX.Crm.EntityEditorRequisiteListItem.create(
				requisiteKey,
				{
					owner: this,
					mode: this._mode,
					data: itemData,
					container: this._itemWrapper
				}
			);
			this._items.push(item);
			layoutOptions = {};
			if(this._createButton)
			{
				layoutOptions["anchor"] = this._createButton;
			}
			item.layout(layoutOptions);
		}

		var url = BX.prop.getString(contextData, "url", "");
		if(url !== "")
		{
			BX.Crm.Page.closeSlider(url, true);
		}

		delete this._externalContext[requisiteId];
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onCreateButtonClick = function(e)
	{
		this.togglePresetMenu();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.togglePresetMenu = function()
	{
		if(this._isPresetMenuOpened)
		{
			this.closePresetMenu();
		}
		else
		{
			this.openPresetMenu();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.openPresetMenu = function()
	{
		if(this._isPresetMenuOpened)
		{
			return;
		}

		var menu = [];
		var items = BX.prop.getArray(this._schemeElement.getData(), "presets");
		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];
			var value = BX.prop.getString(item, "VALUE", i);
			var name = BX.prop.getString(item, "NAME", value);
			menu.push(
				{
					text: name,
					value: value,
					onclick: BX.delegate( this.onPresetSelect, this)
				}
			);
		}

		BX.PopupMenu.show(
			this._id,
			this._createButton,
			menu,
			{
				angle: false,
				events:
					{
						onPopupShow: BX.delegate( this.onPresetMenuShow, this),
						onPopupClose: BX.delegate( this.onPresetMenuClose, this)
					}
			}
		);
		//BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.closePresetMenu = function()
	{
		if(!this._isPresetMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetMenuShow = function()
	{
		this._isPresetMenuOpened = true;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);
		this._isPresetMenuOpened = false;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetSelect = function(e, item)
	{
		this.openEditor({ presetId: item.value });
		this.closePresetMenu();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.save = function()
	{
	};
	if(typeof(BX.Crm.EntityEditorRequisiteList.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteList.messages = {};
	}
	BX.Crm.EntityEditorRequisiteList.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteList();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.ClientEditorEntityRequisitePanel === "undefined")
{
	BX.Crm.ClientEditorEntityRequisitePanel = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;

		this._entityInfo = null;
		this._requisiteInfo = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._selectedRequisiteId = 0;
		this._selectedBankDetailId = 0;

		this._container = null;
		this._wrapper = null;
		this._contentWrapper = null;

		this._requisiteInput = null;
		this._bankDetailInput = null;

		this._toggleButton = null;
		this._editButton = null;

		this._toggleButtonHandler = BX.delegate(this.onToggleButtonClick, this);
		this._editButtonHandler = BX.delegate(this.onEditButtonClick, this);

		this._isExpanded = false;
		this._hasLayout = false;

		this._externalEventHandler = BX.delegate(this.onExternalEvent, this);

		this._changeNotifier = null;
	};
	BX.Crm.ClientEditorEntityRequisitePanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor");

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);

			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._requisiteInfo = BX.prop.get(this._settings, "requisiteInfo", null);

			this._selectedRequisiteId = this._requisiteInfo.getRequisiteId();
			this._selectedBankDetailId = this._requisiteInfo.getBankDetailId();

			this._changeNotifier = BX.CrmNotifier.create(this);

			if(BX.Crm.ClientEditorEntityRequisitePanel.options.hasOwnProperty(this._id))
			{
				this._isExpanded = BX.prop.getBoolean(
					BX.Crm.ClientEditorEntityRequisitePanel.options[this._id],
					"expanded",
					false
				);
			}
		},
		getMessage: function(name)
		{
			var m = BX.Crm.ClientEditorEntityRequisitePanel.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		isExpanded: function()
		{
			return this._isExpanded;
		},
		setExpanded: function(expand)
		{
			expand = !!expand;
			if(this._isExpanded === expand)
			{
				return;
			}
			this._isExpanded = expand;

			if(!BX.Crm.ClientEditorEntityRequisitePanel.options.hasOwnProperty(this._id))
			{
				BX.Crm.ClientEditorEntityRequisitePanel.options[this._id] = {};
			}
			BX.Crm.ClientEditorEntityRequisitePanel.options[this._id]["expanded"] = this._isExpanded;

			if(expand)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}
		},
		toggle: function()
		{
			this.setExpanded(!this._isExpanded);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			var requisite = null;
			var bankDetail = null;

			var requisiteId = this._selectedRequisiteId;
			var bankDetailId = this._selectedBankDetailId;

			if(requisiteId > 0)
			{
				requisite = this._requisiteInfo.getItemById(requisiteId);
			}

			if(!requisite)
			{
				requisite = this._requisiteInfo.getSelectedItem();
			}

			if(!requisite)
			{
				requisite = this._requisiteInfo.getFirstItem();
			}

			if(requisite)
			{
				if(bankDetailId > 0)
				{
					bankDetail = this._requisiteInfo.getItemBankDetailById(requisiteId, bankDetailId);
				}
				if(!bankDetail)
				{
					bankDetail = this._requisiteInfo.getSelectedItemBankDetail(requisiteId);
				}
				if(!bankDetail)
				{
					bankDetail = this._requisiteInfo.getFirstItemBankDetail(requisiteId);
				}
			}

			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-container" } });
			this._container.appendChild(this._wrapper);

			if(this._isExpanded)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}

			if(!isViewMode)
			{
				this._requisiteInput = BX.create("input", { props: { type: "hidden", name: "REQUISITE_ID", value: requisiteId } });
				this._wrapper.appendChild(this._requisiteInput);

				this._bankDetailInput = BX.create("input", { props: { type: "hidden", name: "BANK_DETAIL_ID", value: bankDetailId } });
				this._wrapper.appendChild(this._bankDetailInput);
			}

			if(requisite)
			{
				this._toggleButton = BX.create("a",
					{
						props: { className: "crm-entity-widget-client-requisites-show-btn" },
						text: this.getMessage("toggle").toLowerCase()
					}
				);
				this._wrapper.appendChild(this._toggleButton);
				BX.bind(this._toggleButton, "click", this._toggleButtonHandler);

				var innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-inner-container" } });
				this._wrapper.appendChild(innerWrapper);

				if(!isViewMode)
				{
					this._editButton = BX.create("span",
						{ props: { className: "crm-entity-widget-client-requisites-edit-icon" } }
					);
					this._editButton.setAttribute("data-editor-control-type", "button");

					innerWrapper.appendChild(this._editButton);
					BX.bind(this._editButton, "click", this._editButtonHandler);
				}

				this._contentWrapper = BX.create("dl", { props: { className: "crm-entity-widget-client-requisites-list" } });
				innerWrapper.appendChild(this._contentWrapper);

				//HACK: addresses must be rendered as separate items
				var requisiteView = BX.prop.getObject(requisite, "viewData", null);
				this.prepareItemView(requisiteView, ["RQ_ADDR"]);
				this.prepareItemFieldView(requisiteView, "RQ_ADDR");

				if(bankDetail)
				{
					this.prepareItemView(BX.prop.getObject(bankDetail, "viewData", null));
				}
			}

			this._hasLayout = true;
		},
		prepareItemView: function(viewData, skipFields)
		{
			if(!viewData)
			{
				return;
			}

			var fieldTitle = BX.prop.getString(viewData, "title", "");
			if(fieldTitle !== "")
			{
				this._contentWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: fieldTitle
						}
					)
				);
			}

			var i, length;
			var skipMap = {};
			if(BX.type.isArray(skipFields))
			{
				for(i = 0, length = skipFields.length; i < length; i++)
				{
					skipMap[skipFields[i]] = true;
				}
			}

			var fieldContent = [];
			var fields = BX.prop.getArray(viewData, "fields", []);
			for(i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");
				if(skipMap.hasOwnProperty(name))
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title !== "" && text !== "")
				{
					fieldContent.push(title + ": " + text);
				}
			}

			this._contentWrapper.appendChild(
				BX.create("dd",
					{
						props: { className: "crm-entity-widget-client-requisites-value" },
						text: fieldContent.join(", ")
					}
				)
			);
		},
		prepareItemFieldView: function(viewData, fieldName)
		{
			if(!viewData)
			{
				return;
			}

			var fields = BX.prop.getArray(viewData, "fields", []);
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");

				if(name !== fieldName)
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				this._contentWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);

				this._contentWrapper.appendChild(
					BX.create("dd",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: text
						}
					)
				);
			}
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(this._toggleButton)
			{
				BX.unbind(this._toggleButton, "click", this._toggleButtonHandler);
				this._toggleButton = null;
			}

			if(this._editButton)
			{
				BX.unbind(this._editButton, "click", this._editButtonHandler);
				this._editButton = null;
			}

			this._isExpanded = false;
			this._requisiteInput = null;
			this._bankDetailInput = null;
			this._contentWrapper = null;
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		refreshLayout: function()
		{
			var expanded = this.isExpanded();
			this.clearLayout();
			this.layout();
			this.setExpanded(expanded);
		},
		getRuntimeValue: function()
		{
			return {
				REQUISITE_ID: this._selectedRequisiteId,
				BANK_DETAIL_ID: this._selectedBankDetailId
			}
		},
		onToggleButtonClick: function(e)
		{
			this.toggle();
			return BX.eventReturnFalse(e);
		},
		onEditButtonClick: function(e)
		{
			if(!this._editor)
			{
				return;
			}

			var url = BX.prop.getString(this._settings, "requisiteSelectUrl", "");
			if(url === "" && BX.type.isFunction(this._editor.getEntityRequisiteSelectUrl))
			{
				url = this._editor.getEntityRequisiteSelectUrl(
					this._entityInfo.getTypeName(),
					this._entityInfo.getId()
				);
			}

			if(url !== "")
			{
				url = BX.util.add_url_param(
					url,
					{
						external_context_id: this._editor.getContextId(),
						requisite_id: this._selectedRequisiteId,
						bank_detail_id: this._selectedBankDetailId
					}
				);

				BX.Crm.Page.openSlider(url);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			BX.eventCancelBubble(e);
		},
		onExternalEvent: function(params)
		{
			if(this._mode === BX.Crm.EntityEditorMode.view)
			{
				return;
			}

			var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
			var value = BX.type.isPlainObject(params["value"]) ? params["value"] : {};

			if(!(this._editor && this._editor.getContextId() === BX.prop.getString(value, "context")))
			{
				return;
			}

			if(key === "BX.Crm.EntityRequisiteSelector:onCancel")
			{
				BX.removeCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}
			else if(key === "BX.Crm.EntityRequisiteSelector:onSave")
			{
				BX.removeCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);

				var requisiteId = BX.prop.getInteger(value, "requisiteId");
				if(requisiteId > 0)
				{
					this._selectedRequisiteId = requisiteId;
					if(this._requisiteInput)
					{
						this._requisiteInput.value = this._selectedRequisiteId;
					}
				}

				var bankDetailId = BX.prop.getInteger(value, "bankDetailId");
				if(bankDetailId)
				{
					this._selectedBankDetailId = bankDetailId;
					if(this._bankDetailInput)
					{
						this._bankDetailInput.value = this._selectedBankDetailId;
					}
				}

				this._changeNotifier.notify(
					[
						{
							requisiteId: this._selectedRequisiteId,
							bankDetailId: this._selectedBankDetailId
						}
					]
				);

				this.refreshLayout();
			}
		}
	};
	if(typeof(BX.Crm.ClientEditorEntityRequisitePanel.messages) === "undefined")
	{
		BX.Crm.ClientEditorEntityRequisitePanel.messages = {};
	}
	BX.Crm.ClientEditorEntityRequisitePanel.options = {};
	BX.Crm.ClientEditorEntityRequisitePanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityRequisitePanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.RequisiteNavigator) === "undefined")
{
	BX.Crm.RequisiteNavigator = function()
	{
		this._id = null;
		this._settings = {};

		this._requisite = null;
		this._bankDetail = null;
		this._bankDetailList = null;

		this._closingNotifier = null;

		this._nextButton = null;
		this._nextButtonHandler = BX.delegate(this.onNextButtonClick, this);

		this._wrapper = null;
		this._innerWrapper = null;
		this._titleContainer = null;
		this._contentContainer = null;
		this._bankDetailContainer = null;
		this._popup = null;

		this._isOpened = false;
		this._isExpanded = true;
		this._hasLayout = false;
	};

	BX.Crm.RequisiteNavigator.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._requisiteInfo = BX.prop.get(settings, "requisiteInfo");

			var requisiteId = this._requisiteInfo.getRequisiteId();
			var bankDetailId = this._requisiteInfo.getBankDetailId();

			this._requisite = requisiteId > 0 ? this._requisiteInfo.getItemById(requisiteId) : null;
			if(!this._requisite)
			{
				this._requisite = this._requisiteInfo.getSelectedItem();
			}
			if(!this._requisite)
			{
				this._requisite = this._requisiteInfo.getFirstItem();
			}

			if(this._requisite)
			{
				this._bankDetailList = this._requisiteInfo.getItemBankDetailList(requisiteId);
				if(this._bankDetailList)
				{
					if(bankDetailId > 0)
					{
						this._bankDetail = this._bankDetailList.getItemById(bankDetailId);
					}
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getSelectedItem();
					}
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getFirstItem();
					}
				}
			}

			this._closingNotifier = BX.CrmNotifier.create(this);
		},
		getId: function()
		{
			return this._id;
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.RequisiteNavigator.messages, name, name);
		},
		addClosingListener: function(listener)
		{
			this._closingNotifier.addListener(listener);
		},
		removeClosingListener: function(listener)
		{
			this._closingNotifier.removeListener(listener);
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function(anchor)
		{
			if(this._isOpened)
			{
				return;
			}

			var offsetLeft = 0, offsetTop = 0;
			if(BX.type.isElementNode(anchor))
			{
				offsetLeft = anchor.offsetWidth + 15;
				offsetTop = -(anchor.offsetHeight + 30);
			}

			this._popup = new BX.PopupWindow(
				this._id,
				anchor,
				{
					autoHide: true,
					draggable: false,
					offsetLeft: offsetLeft,
					offsetTop: offsetTop,
					noAllPaddings: true,
					bindOptions: { forceBindPosition: true },
					closeByEsc: true,
					events:
						{
							onPopupShow: BX.delegate(this.onPopupShow, this),
							onPopupClose: BX.delegate(this.onPopupClose, this),
							onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
						},
					content: this.prepareContent()
				}
			);
			//this._popup.setAngle({ position: "left" });
			this._popup.show();
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				this._popup.close();
			}
		},
		prepareContent: function()
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-wrap" } });
			this._titleContainer = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-info-box" } });
			this._wrapper.appendChild(this._titleContainer);

			this._requisiteTitleWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-info-wrapper" } });
			this._titleContainer.appendChild(this._requisiteTitleWrapper);

			this._nextButton = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-requisites-arrow-right" },
					children:
						[
							BX.create("div",
								{ props: { className: "crm-entity-widget-client-requisites-arrow-right-item" } }
							)
						]
				}
			);
			this._titleContainer.appendChild(this._nextButton);
			BX.bind(this._nextButton, "click", this._nextButtonHandler);

			this._contentWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-box crm-entity-widget-client-requisites-box-active" } });
			this._wrapper.appendChild(this._contentWrapper);

			this._contentInnerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-box-inner" } });
			this._contentWrapper.appendChild(this._contentInnerWrapper);

			this._requisiteWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list-container" } });
			this._contentInnerWrapper.appendChild(this._requisiteWrapper);

			this._bankDetailWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list-container" } });
			this._contentInnerWrapper.appendChild(this._bankDetailWrapper);

			this.renderRequisites();

			return this._wrapper;
		},
		renderTitleFields: function(fields, container)
		{
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				container.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-desc" },
							text: title
						}
					)
				);

				container.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-content" },
							children:
								[
									BX.create("div",
										{
											props: { className: "crm-entity-widget-client-requisites-info-content-item" },
											text: text
										}
									)
								]
						}
					)
				);
			}
		},
		renderContentFields: function(fields, caption, container)
		{
			var wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list" } });
			container.appendChild(wrapper);

			var innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-requisites-item" }
				}
			);
			wrapper.appendChild(innerWrapper);

			innerWrapper.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-client-requisites-name" },
						text: caption
					}
				)
			);

			var values = [];
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");

				if(title !== "" && text !== "")
				{
					values.push(title + ": " + text);
				}
			}

			if(values.length > 0)
			{
				innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: values.join(", ")
						}
					)
				);
			}
			else
			{
				BX.addClass(wrapper, "crm-entity-widget-client-requisites-empty-value");
				innerWrapper.appendChild(document.createTextNode(this.getMessage("stub")));
			}
		},
		renderRequisites: function()
		{
			BX.cleanNode(this._requisiteTitleWrapper);
			BX.cleanNode(this._requisiteWrapper);

			this._nextButton.style.display = this._requisiteInfo.getItemCount() > 1 ? "" : "none";

			if(this._requisite)
			{
				var viewData = BX.prop.getObject(this._requisite, "viewData", {});
				var fields = BX.prop.getArray(viewData, "fields", []);
				var titleFields = [];
				var contentFields = [];
				for(var i = 0, length = fields.length; i < length; i++)
				{
					var field = fields[i];
					var fieldName = BX.prop.getString(field, "name", "");
					if(fieldName === "RQ_ADDR")
					{
						titleFields.push(field);
					}
					else
					{
						contentFields.push(field);
					}
				}

				this._requisiteTitleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-title" },
							text: BX.prop.getString(viewData, "title", "")
						}
					)
				);

				this.renderTitleFields(titleFields, this._requisiteTitleWrapper);
				this.renderContentFields(contentFields, "", this._requisiteWrapper);

				this.renderBankDetails();
			}
		},
		renderBankDetails: function()
		{
			BX.cleanNode(this._bankDetailWrapper);

			if(this._bankDetailList && this._bankDetail)
			{
				var viewData = BX.prop.getObject(this._bankDetail, "viewData", {});
				this.renderContentFields(
					BX.prop.getArray(viewData, "fields", []),
					BX.prop.getString(viewData, "title", ""),
					this._bankDetailWrapper
				);

				var bankDetailQty = this._bankDetailList.getItemCount();
				if(bankDetailQty > 1)
				{
					var bankDetailControlContainer = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-control-box" } });
					this._bankDetailWrapper.appendChild(bankDetailControlContainer);

					bankDetailControlContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-requisites-control-value" },
								text: this.getMessage("legend")
									.replace(/#NUMBER#/gi, this._bankDetailList.getItemIndex(this._bankDetail) + 1).toString()
									.replace(/#TOTAL#/gi, bankDetailQty.toString())
							}
						)
					);
					bankDetailControlContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-requisites-control-btn" },
								html: this.getMessage("next") + "&rarr;",
								events: { click: BX.delegate(this.onNextBankDetailButtonClick, this) }
							}
						)
					);
				}
			}
		},
		getSelectedItemId: function()
		{
			return this._requisite ? BX.CrmEntityRequisiteInfo.resolveItemId(this._requisite) : 0;
		},
		getSelectedBankDetailId: function()
		{
			return this._bankDetail ? BX.CrmEntityBankDetailList.resolveItemId(this._bankDetail) : 0;
		},
		showNextItem: function()
		{
			if(!(this._requisiteInfo && this._requisite))
			{
				return;
			}

			var count = this._requisiteInfo.getItemCount();
			if(count === 0)
			{
				return;
			}

			var index = this._requisiteInfo.getItemIndex(this._requisite);
			if(index < 0)
			{
				index = 0;
			}

			index++;
			if(index === count)
			{
				index = 0;
			}

			this._requisite = this._requisiteInfo.getItemByIndex(index);

			if(this._requisite)
			{
				var requisiteId = BX.CrmEntityRequisiteInfo.resolveItemId(this._requisite);
				this._bankDetailList = this._requisiteInfo.getItemBankDetailList(requisiteId);
				if(this._bankDetailList)
				{
					this._bankDetail = this._bankDetailList.getSelectedItem();
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getFirstItem();
					}
				}
			}

			this.renderRequisites();
		},
		showNextBankDetail: function()
		{
			if(!(this._bankDetailList && this._bankDetail))
			{
				return;
			}

			var count = this._bankDetailList.getItemCount();
			if(count === 0)
			{
				return;
			}

			var index = this._bankDetailList.getItemIndex(this._bankDetail);
			if(index < 0)
			{
				index = 0;
			}

			index++;
			if(index === count)
			{
				index = 0;
			}

			this._bankDetail = this._bankDetailList.getItemByIndex(index);
			this.renderBankDetails();
		},
		onPopupShow: function()
		{
			this._isOpened = true;
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._popup.destroy();
			}

			this._closingNotifier.notify(
				[
					{
						requisiteId: this.getSelectedItemId(),
						bankDetailId: this.getSelectedBankDetailId()
					}
				]
			);
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;

			this._wrapper = null;
			this._innerWrapper = null;

			this._popup = null;
		},
		onNextButtonClick: function(e)
		{
			this.showNextItem();
		},
		onNextBankDetailButtonClick: function(e)
		{
			this.showNextBankDetail();
		}
	};
	BX.Crm.RequisiteNavigator.options = {};
	if(typeof(BX.Crm.RequisiteNavigator.messages) === "undefined")
	{
		BX.Crm.RequisiteNavigator.messages = {};
	}
	BX.Crm.RequisiteNavigator.create = function(id, settings)
	{
		var self = new BX.Crm.RequisiteNavigator();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorFileStorage === "undefined")
{
	BX.Crm.EntityEditorFileStorage = function()
	{
		BX.Crm.EntityEditorFileStorage.superclass.constructor.apply(this);
		this._uploaderName = "entity_editor_storage_" + this._id.toLowerCase();
		this._dataContainer = null;
		this._uploaderContainer = null;
	};

	BX.extend(BX.Crm.EntityEditorFileStorage, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorFileStorage.prototype.getStorageTypeId = function()
	{
		return this._model.getIntegerField("STORAGE_TYPE_ID", BX.Crm.EditorFileStorageType.undefined);
	};
	BX.Crm.EntityEditorFileStorage.prototype.getStorageElementInfos = function()
	{
		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			return this._model.getArrayField(
				this._schemeElement.getDataStringParam("diskFileInfo", "DISK_FILES"),
				[]
			);
		}

		return [];
	};
	BX.Crm.EntityEditorFileStorage.prototype.hasContentToDisplay = function()
	{
		return(this.getStorageElementInfos().length > 0);
	};
	BX.Crm.EntityEditorFileStorage.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-filestorage" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._dataContainer = BX.create("DIV", {});
			this._wrapper.appendChild(this._dataContainer);
		}

		this._uploaderContainer = BX.create(
			"DIV",
			{ attrs: { className: "bx-crm-dialog-activity-webdav-container" } }
		);
		this._wrapper.appendChild(this._uploaderContainer);

		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			var uploader = this.prepareDiskUploader();

			uploader.setMode(this._mode);
			uploader.clearValues();
			uploader.setValues(this.getStorageElementInfos());
			uploader.layout(this._uploaderContainer);
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorFileStorage.prototype.doClearLayout = function(options)
	{
		this._dataContainer = this._uploaderContainer = null;
	};
	BX.Crm.EntityEditorFileStorage.prototype.prepareDiskUploader = function()
	{
		var uploader = null;
		if(typeof(BX.CrmDiskUploader) !== "undefined" &&
			typeof(BX.CrmDiskUploader.items[this._uploaderName]) !== "undefined"
		)
		{
			uploader = BX.CrmDiskUploader.items[this._uploaderName];
		}

		if(uploader)
		{
			uploader.cleanLayout();
		}
		else
		{
			uploader = BX.CrmDiskUploader.create(
				this._uploaderName,
				{
					msg :
						{
							diskAttachFiles : this.getMessage('diskAttachFiles'),
							diskAttachedFiles : this.getMessage('diskAttachedFiles'),
							diskSelectFile : this.getMessage('diskSelectFile'),
							diskSelectFileLegend : this.getMessage('diskSelectFileLegend'),
							diskUploadFile : this.getMessage('diskUploadFile'),
							diskUploadFileLegend : this.getMessage('diskUploadFileLegend')
						}
				}
			)
		}

		return uploader;
	};
	BX.Crm.EntityEditorFileStorage.prototype.getDiskUploaderValues = function()
	{
		var uploader = BX.CrmDiskUploader.items[this._uploaderName];
		return uploader ? uploader.getFileIds() : [];
	};
	BX.Crm.EntityEditorFileStorage.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorFileStorage.messages;
		return m.hasOwnProperty(name) ? m[name] : BX.Crm.EntityEditorFileStorage.superclass.getMessage.apply(this, arguments);
	};
	BX.Crm.EntityEditorFileStorage.prototype.save = function()
	{
		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			this._model.setField(
				this._schemeElement.getDataStringParam("storageElementIds", "STORAGE_ELEMENT_IDS"),
				this.getDiskUploaderValues()
			);
		}
	};
	BX.Crm.EntityEditorFileStorage.prototype.onBeforeSubmit = function()
	{
		if(!this._dataContainer)
		{
			return;
		}

		BX.cleanNode(this._dataContainer, false);

		this._dataContainer.appendChild(
			BX.create(
				"INPUT",
				{
					attrs:
					{
						type: "hidden",
						name: this._schemeElement.getDataStringParam("storageTypeId", "STORAGE_TYPE_ID"),
						value: this.getStorageTypeId()
					}
				}
			)
		);

		var elementFieldName = this._schemeElement.getDataStringParam("storageElementIds", "STORAGE_ELEMENT_IDS");

		var values = this._model.getArrayField(elementFieldName, []);
		if(values.length > 0)
		{
			for(var i = 0, length = values.length; i < length; i++)
			{
				this._dataContainer.appendChild(
					BX.create("INPUT", { attrs: { type: "hidden", name: elementFieldName + "[]", value: values[i] } })
				);
			}
		}
		else
		{
			this._dataContainer.appendChild(
				BX.create("INPUT", { attrs: { type: "hidden", name: elementFieldName, value: "" } })
			);
		}
	};
	if(typeof(BX.Crm.EntityEditorFileStorage.messages) === "undefined")
	{
		BX.Crm.EntityEditorFileStorage.messages = {};
	}
	BX.Crm.EntityEditorFileStorage.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFileStorage();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorCustom === "undefined")
{
	BX.Crm.EntityEditorCustom = function()
	{
		BX.Crm.EntityEditorCustom.superclass.constructor.apply(this);
		this._innerWrapper = null;
		this._runtimeValue = null;
	};

	BX.extend(BX.Crm.EntityEditorCustom, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorCustom.prototype.hasContentToDisplay = function()
	{
		return this.getHtmlContent() !== "";
	};
	BX.Crm.EntityEditorCustom.prototype.doClearLayout = function(options)
	{
		this.setRuntimeValue(this.getValue());
	};
	BX.Crm.EntityEditorCustom.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorCustom.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var classNames = this._schemeElement.getDataArrayParam("classNames", []);
		classNames.push("crm-entity-widget-content-block-field-custom");

		this.ensureWrapperCreated({ classNames: classNames });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
		this._innerWrapper = BX.create("div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(this._innerWrapper);
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			BX.addClass(this._innerWrapper, "crm-entity-widget-content-block-inner-edit-mode");
		}

		var html = this.getHtmlContent();
		if(this._mode !== BX.Crm.EntityEditorMode.edit && !BX.type.isNotEmptyString(html))
		{
			html = this._model.getSchemeField(this._schemeElement, "empty",	"");
		}

		setTimeout(
			BX.delegate(function(){
				BX.html(this._innerWrapper, html);
				if (this._mode === BX.Crm.EntityEditorMode.edit)
				{
					BX.bindDelegate(
						this._innerWrapper,
						"bxchange",
						{ tag: [ "input", "select", "textarea" ] },
						this._changeHandler
					);
				}

			}, this),
			0
		);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorCustom.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorCustom.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorCustom.prototype.getHtmlContent = function()
	{
		return(
			this._model.getSchemeField(
				this._schemeElement,
				this.isInEditMode() ? "edit" : "view",
				""
			)
		);
	};

	BX.Crm.EntityEditorCustom.prototype.setRuntimeValue = function(value)
	{
		this._runtimeValue = value;
	};

	BX.Crm.EntityEditorCustom.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit ? this._runtimeValue : "");
	};

	BX.Crm.EntityEditorCustom.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorCustom();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorHidden === "undefined")
{
	BX.Crm.EntityEditorHidden = function()
	{
		BX.Crm.EntityEditorHidden.superclass.constructor.apply(this);
		this._input = null;
		this._view = null;
	};

	BX.extend(BX.Crm.EntityEditorHidden, BX.Crm.EntityEditorText);

	BX.Crm.EntityEditorHidden.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-text" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		if(this.hasContentToDisplay())
		{
			if(this.getLineCount() > 1)
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						html: BX.util.nl2br(BX.util.htmlspecialchars(value))
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: value
					}
				);
			}
		}
		else
		{
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					text: this.getMessage("isEmpty")
				}
			);
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input", {
				props: {
					id: 'crm-entity-widget-content-input',
					name: name,
					type: 'hidden',
					value: value
				}
			});
			this._innerWrapper.appendChild(this._input);
		}

		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};

	BX.Crm.EntityEditorHidden.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorHidden();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.EntityBindingTracker === "undefined")
{
	BX.Crm.EntityBindingTracker = function()
	{
		this._id = "";
		this._settings = {};
		this._boundEntityInfos = null;
		this._unboundEntityInfos = null;
	};

	BX.Crm.EntityBindingTracker.prototype =
	{
		initialize: function()
		{
			this._boundEntityInfos = [];
			this._unboundEntityInfos = [];
		},
		bind: function(entityInfo)
		{
			if(this.findIndex(entityInfo, this._boundEntityInfos) >= 0)
			{
				return;
			}

			var index = this.findIndex(entityInfo, this._unboundEntityInfos);
			if(index >= 0)
			{
				this._unboundEntityInfos.splice(index, 1);
			}
			else
			{
				this._boundEntityInfos.push(entityInfo);
			}
		},
		unbind: function(entityInfo)
		{
			if(this.findIndex(entityInfo, this._unboundEntityInfos) >= 0)
			{
				return;
			}

			var index = this.findIndex(entityInfo, this._boundEntityInfos);
			if(index >= 0)
			{
				this._boundEntityInfos.splice(index, 1);
			}
			else
			{
				this._unboundEntityInfos.push(entityInfo);
			}
		},
		getBoundEntities: function()
		{
			return this._boundEntityInfos;
		},
		getUnboundEntities: function()
		{
			return this._unboundEntityInfos;
		},
		isBound: function(entityInfo)
		{
			return this.findIndex(entityInfo, this._boundEntityInfos) >= 0;
		},
		isUnbound: function(entityInfo)
		{
			return this.findIndex(entityInfo, this._unboundEntityInfos) >= 0;
		},
		reset: function()
		{
			this._boundEntityInfos = [];
			this._unboundEntityInfos = [];
		},
		findIndex: function(item, collection)
		{
			var id = item.getId();
			for(var i = 0, length = collection.length; i < length; i++)
			{
				if(id === collection[i].getId())
				{
					return i;
				}
			}
			return -1;
		}
	};
	BX.Crm.EntityBindingTracker.create = function()
	{
		var self = new BX.Crm.EntityBindingTracker();
		self.initialize();
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntitySkeleton === "undefined")
{
	BX.Crm.ClientEditorEntitySkeleton = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._wrapper = null;
		this._hasLayout = false;
	};
	BX.Crm.ClientEditorEntitySkeleton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
		},
		layout: function()
		{
			this._wrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-block crm-entity-widget-client-block-skeleton" },
					children: [ BX.create("div", { props: { className: "crm-entity-widget-client-box" } }) ]
				}
			);
			this._container.appendChild(this._wrapper);
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		}
	};
	BX.Crm.ClientEditorEntitySkeleton.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntitySkeleton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntityPanel === "undefined")
{
	BX.Crm.ClientEditorEntityPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._editor = null;
		this._entityInfo = null;
		this._enableCommunications = true;
		this._isRequisiteEnabled = true;
		this._requisiteInfo = null;
		this._requisiteNavigator = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._communicationButtons = null;
		this._deleteButton = null;

		this._container = null;
		this._wrapper = null;

		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);
		this._requisiteChangeHandler = BX.delegate(this.onRequisiteChange, this);
		this._requisiteChangeNotifier = null;
		this._hasLayout = false;
	};
	BX.Crm.ClientEditorEntityPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor");
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);

			this._enableCommunications = BX.prop.getBoolean(this._settings, "enableCommunications", true);
			this._isRequisiteEnabled = (this._entityInfo.hasRequisites()
				&& BX.prop.getBoolean(this._settings, "enableRequisite", false)
			);

			this._requisiteChangeNotifier = BX.CrmNotifier.create(this);
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			this._mode = mode;
		},
		isRequisiteEnabled: function()
		{
			return this._isRequisiteEnabled;
		},
		addRequisiteChangeListener: function(listener)
		{
			this._requisiteChangeNotifier.addListener(listener);
		},
		removeRequisiteChangeListener: function(listener)
		{
			this._requisiteChangeNotifier.removeListener(listener);
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-block" } });
			this._container.appendChild(this._wrapper);

			var innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-box" } });
			this._wrapper.appendChild(innerWrapper);

			if(BX.prop.getBoolean(this._settings, "enableEntityTypeCaption", false))
			{
				innerWrapper.appendChild(
					BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-client-box-type" },
							text: this._entityInfo.getTypeCaption()
						}
					)
				);
			}

			this._deleteButton = null;
			if(!isViewMode)
			{
				this._deleteButton = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-client-block-remove" },
						events: { click: this._deleteButtonHandler }
					}
				);
				innerWrapper.appendChild(this._deleteButton);
			}


			var titleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-box-name-container" }
				}
			);
			innerWrapper.appendChild(titleWrapper);

			var buttonWrapper = BX.create("div",
				{ props: { className: "crm-entity-widget-client-actions-container" } }
			);

			var showUrl = this._entityInfo.getShowUrl();
			if(showUrl !== "")
			{
				var titleLink = BX.create("a",
					{
						props:
							{
								className: "crm-entity-widget-client-box-name",
								href: this._entityInfo.getShowUrl()
							},
						text: this._entityInfo.getTitle()
					}
				);

				if(this.isRequisiteEnabled())
				{
					BX.bind(titleLink, "mouseover", BX.debounce(this.onMouseOver, 300, this));
					BX.bind(titleLink, "mouseout", BX.debounce(this.onMouseOut, 300, this));
				}

				titleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-name-row" },
							children: [ titleLink, buttonWrapper ]
						}
					)
				);
			}
			else
			{
				var titleNone = BX.create("span",
					{
						props:{ className: "crm-entity-widget-client-box-name" },
						text: this._entityInfo.getTitle()
					}
				);

				titleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-name-row" },
							children: [ titleNone, buttonWrapper ]
						}
					)
				);
			}

			if(this._enableCommunications)
			{
				this._communicationButtons = [];
				var commTypes = [ "PHONE", "EMAIL", "IM" ];
				for(var i = 0, j = commTypes.length; i < j; i++)
				{
					var commType = commTypes[i];
					var button = BX.Crm.ClientEditorCommunicationButton.create(
						this._id +  "_" + commType,
						{
							entityInfo: this._entityInfo,
							type: commType,
							ownerTypeId: this._editor.getOwnerTypeId(),
							ownerId: this._editor.getOwnerId(),
							container: buttonWrapper
						}
					);
					button.layout();
					this._communicationButtons.push(button);
				}
			}

			var description = this._entityInfo.getDescription();
			if(description !== "")
			{
				innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-position" },
							text: description
						}
					)
				);
			}

			var phones = this._entityInfo.getPhones();
			var emails = this._entityInfo.getEmails();
			if(phones.length > 0 || emails.length > 0)
			{
				var communicationContainer = BX.create("div", { props: { className: "crm-entity-widget-client-contact" } });
				innerWrapper.appendChild(communicationContainer);

				if(phones.length > 0)
				{
					communicationContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-contact-item crm-entity-widget-client-contact-phone" },
								//HACK: Disable autodetection of phone number for Microsoft Edge
								attrs: { "x-ms-format-detection": "none" },
								text: phones[0]["VALUE_FORMATTED"]
							}
						)
					);
				}

				if(emails.length > 0)
				{
					communicationContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-contact-item crm-entity-widget-client-contact-email" },
								text: emails[0]["VALUE_FORMATTED"]
							}
						)
					);
				}
			}

			var callback = BX.prop.getFunction(this._settings, "onLayout", null);
			if(callback)
			{
				callback(this, this._wrapper);
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(this._requisiteNavigator)
			{
				this._requisiteNavigator.removeClosingListener(this._requisiteChangeHandler);
				this._requisiteNavigator.close();
				this._requisiteNavigator = null;
			}

			this._communicationButtons = null;
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		checkOwership: function(element)
		{
			return this._wrapper && BX.isParentForNode(this._wrapper, element);
		},
		onMouseOver: function(e)
		{
			if(this._requisiteHandle > 0)
			{
				window.clearTimeout(this._requisiteHandle);
				this._requisiteHandle = 0;
			}

			this._requisiteHandle = window.setTimeout(
				BX.delegate(this.openRequisiteNavigator, this),
				300
			);
		},
		onMouseOut: function(e)
		{
			if(this._requisiteHandle > 0)
			{
				window.clearTimeout(this._requisiteHandle);
				this._requisiteHandle = 0;
			}
		},
		openRequisiteNavigator: function()
		{
			if(!this.isRequisiteEnabled())
			{
				return;
			}

			if(this._requisiteHandle === 0)
			{
				return;
			}
			this._requisiteHandle = 0;

			if(!this._requisiteNavigator)
			{
				if(!this._requisiteInfo)
				{
					var requisiteBinding = BX.prop.getObject(this._settings, "requisiteBinding", {});
					this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
						{
							requisiteId: BX.prop.getInteger(requisiteBinding, "REQUISITE_ID", 0),
							bankDetailId: BX.prop.getInteger(requisiteBinding, "BANK_DETAIL_ID", 0),
							data: this._entityInfo.getRequisites()
						}
					);
				}

				this._requisiteNavigator = BX.Crm.RequisiteNavigator.create(this._id, { requisiteInfo: this._requisiteInfo });
				this._requisiteNavigator.addClosingListener(this._requisiteChangeHandler);
			}
			this._requisiteNavigator.open(this._wrapper);
		},
		closeRequisiteNavigator: function()
		{
			if(this._requisiteHandle === 0)
			{
				return;
			}
			this._requisiteHandle = 0;

			if(this._requisiteNavigator)
			{
				this._requisiteNavigator.close();
			}
		},
		onDeleteButtonClick: function(e)
		{
			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this);
			}
		},
		onRequisiteChange: function(sender, eventArgs)
		{
			var requisiteId = BX.prop.getInteger(eventArgs, "requisiteId", 0);
			var bankDetailId = BX.prop.getInteger(eventArgs, "bankDetailId", 0);

			if(!this._requisiteInfo
				|| this._requisiteInfo.getRequisiteId() !== requisiteId
				|| this._requisiteInfo.getBankDetailId() !== bankDetailId
			)
			{
				this._requisiteChangeNotifier.notify([ eventArgs ]);
			}
		}
	};
	BX.Crm.ClientEditorEntityPanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityPanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntityBindingPanel === "undefined")
{
	BX.Crm.ClientEditorEntityBindingPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._entityInfo = null;
		this._editor = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._item = null;
	};
	BX.Crm.ClientEditorEntityBindingPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor");
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);

			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._item = BX.Crm.ClientEditorEntityPanel.create(
				this._id +  "_" + this._entityInfo.getId().toString(),
				{
					editor: this._editor,
					entityInfo: this._entityInfo,
					mode: this._mode,
					onLayout: BX.delegate(this.onItemLayout, this),
					onDelete: BX.delegate(this.onItemDelete, this)
				}
			);
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		layout: function()
		{
			this._button = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-child-link" },
					events: { click: BX.delegate(this.onButtonClick, this) }
				}
			);

			this._item.setContainer(this._container);
			this._item.layout();
		},
		onItemLayout: function(item, wrapper)
		{
			BX.addClass(wrapper, "crm-entity-widget-client-block-child");
			var anchor = wrapper.firstChild;
			if(anchor)
			{
				wrapper.insertBefore(this._button, anchor);
			}
			else
			{
				wrapper.appendChild(this._button);
			}
		},
		clearLayout: function()
		{
			this._item.clearLayout();
		},
		onItemDelete: function(item)
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return;
			}
			var callback = BX.prop.getFunction(this._settings, "onChange", null);
			if(callback)
			{
				callback(this, "delete");
			}
		},
		onButtonClick: function(e)
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return;
			}
			var callback = BX.prop.getFunction(this._settings, "onChange", null);
			if(callback)
			{
				callback(this, "unbind");
			}
		}
	};
	BX.Crm.ClientEditorEntityBindingPanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityBindingPanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorCommunicationButton === "undefined")
{
	BX.Crm.ClientEditorCommunicationButton = function()
	{
		this._id = "";
		this._settings = {};
		this._entityInfo = null;
		this._type = "";

		this._items = null;

		this._container = null;
		this._wrapper = null;
		this._menu = null;
	};
	BX.Crm.ClientEditorCommunicationButton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._type = BX.prop.getString(this._settings, "type", "");

			this._container = BX.prop.getElementNode(this._settings, "container", "");
			if(this._type === "")
			{
				this._type = "PHONE";
			}

			this._items = this._entityInfo.getMultiFieldsByType(this._type);
		},
		layout: function()
		{
			var className = "";
			if(this._type === "EMAIL")
			{
				className = "crm-entity-widget-client-action-mail";
			}
			else if(this._type === "IM")
			{
				className = "crm-entity-widget-client-action-im";
			}
			else// if(this._type === "PHONE")
			{
				className = "crm-entity-widget-client-action-call";
			}

			if(this._items.length > 0)
			{
				className += " crm-entity-widget-client-action-available";
			}

			this._wrapper = BX.create("a", { props: { className: className } });
			BX.bind(this._wrapper, "click", BX.delegate(this.onClick, this));
			this._container.appendChild(this._wrapper);
		},
		onClick: function(e)
		{
			if(this._items.length === 0)
			{
				return BX.eventReturnFalse(e);
			}

			if(this._items.length === 1)
			{
				var item = this._items[0];
				var value = BX.prop.getString(item, "VALUE");
				if(value !== "")
				{
					if(this._type === "PHONE")
					{
						this.addCall(value);
					}
					else if(this._type === "EMAIL")
					{
						this.addEmail(value);
					}
					else if(this._type === "IM")
					{
						this.openChat(value);
					}
				}
				return BX.eventReturnFalse(e);
			}

			this.toggleMenu();
			BX.eventReturnFalse(e);
		},
		toggleMenu: function()
		{
			if(!this._menu)
			{
				var menuItems = [];
				for(var i = 0, l = this._items.length; i < l; i++)
				{
					var value = BX.prop.getString(this._items[i], "VALUE");
					var formattedValue = BX.prop.getString(this._items[i], "VALUE_FORMATTED");
					var complexName = BX.prop.getString(this._items[i], "COMPLEX_NAME");
					var itemText = (complexName ? complexName + ': ' : '') + (formattedValue ? formattedValue : value);

					if(value !== "")
					{
						menuItems.push({ id: value, text:  itemText });
					}
				}

				this._menu = BX.Crm.ClientEditorMenu.create(
					this._id.toLowerCase() + "_menu",
					{
						anchor: this._wrapper,
						items: menuItems,
						callback: BX.delegate(this.onMenuItemSelect, this)
					}
				);
			}
			this._menu.toggle();
		},
		onMenuItemSelect: function(menu, item)
		{
			if(this._type === "EMAIL")
			{
				this.addEmail(item["id"])
			}
			else if(this._type === "IM")
			{
				this.openChat(item["id"]);
			}
			else// if(this._type === "PHONE")
			{
				this.addCall(item["id"])
			}

			this._menu.close();
		},
		addCall: function(phone)
		{
			if(typeof(window.top['BXIM']) === 'undefined')
			{
				window.alert(this.getMessage("telephonyNotSupported"));
				return;
			}

			var params =
			{
				"ENTITY_TYPE_NAME": this._entityInfo.getTypeName(),
				"ENTITY_ID": this._entityInfo.getId(),
				"AUTO_FOLD": true
			};

			var ownerTypeId = BX.prop.getInteger(this._settings, "ownerTypeId", 0);
			var ownerId = BX.prop.getInteger(this._settings, "ownerId", 0);
			if(ownerTypeId !== this._entityInfo.getTypeId() || ownerId !== this._entityInfo.getId())
			{
				 params["BINDINGS"] = [ { "OWNER_TYPE_NAME": BX.CrmEntityType.resolveName(ownerTypeId), "OWNER_ID": ownerId } ];
			}

			window.top['BXIM'].phoneTo(phone, params);
		},
		addEmail: function(email)
		{
			BX.CrmActivityEditor.addEmail(
				{
					communicationsLoaded: true,
					communications:
						[
							{
								type: "EMAIL",
								entityType: this._entityInfo.getTypeName(),
								entityId: this._entityInfo.getId(),
								value: email
							}
						]
				}
			);
		},
		openChat: function (messengerValue)
		{
			if(typeof(window.top["BXIM"]) === "undefined")
			{
				window.alert(this.getMessage("messagingNotSupported"));
				return;
			}
			window.top["BXIM"].openMessengerSlider(messengerValue, {RECENT: 'N', MENU: 'N'});
		}
	};
	BX.Crm.ClientEditorCommunicationButton.prototype.getMessage = function(name)
	{
		var m = BX.Crm.ClientEditorCommunicationButton.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	if(typeof(BX.Crm.ClientEditorCommunicationButton.messages) === "undefined")
	{
		BX.Crm.ClientEditorCommunicationButton.messages = {};
	}
	BX.Crm.ClientEditorCommunicationButton.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorCommunicationButton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorMenu === "undefined")
{
	BX.Crm.ClientEditorMenu = function()
	{
		this._id = null;
		this._settings = {};
		this._items = null;
		this._isOpened = false;
		this._popup = null;
	};

	BX.Crm.ClientEditorMenu.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._items = BX.prop.getArray(this._settings, "items", []);
			for(var i = 0, l = this._items.length; i < l; i++)
			{
				this._items[i]["onclick"] = BX.delegate(this.onItemSelect, this);
			}
		},
		onItemSelect: function(e, item)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function()
		{
			if(this._isOpened)
			{
				return;
			}

			BX.PopupMenu.show(
				this._id,
				BX.prop.getElementNode(this._settings, "anchor", null),
				this._items,
				{
					offsetTop: 0,
					offsetLeft: 0,
					events:
						{
							onPopupShow: BX.delegate(this.onPopupShow, this),
							onPopupClose: BX.delegate(this.onPopupClose, this),
							onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
						}
				}
			);
			this._popup = BX.PopupMenu.currentItem;
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				if(this._popup.popupWindow)
				{
					this._popup.popupWindow.close();
				}
			}
		},
		toggle: function()
		{
			if(!this._isOpened)
			{
				this.open();
			}
			else
			{
				this.close();
			}
		},
		onPopupShow: function()
		{
			this._isOpened = true;
		},
		onPopupClose: function()
		{
			if(this._popup && this._popup.popupWindow)
			{
				this._popup.popupWindow.destroy();
			}
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;
			this._popup = null;

			if(typeof(BX.PopupMenu.Data[this._id]) !== "undefined")
			{
				delete(BX.PopupMenu.Data[this._id]);
			}
		}
	};
	BX.Crm.ClientEditorMenu.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorMenu();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.UserFieldTypeMenu) === "undefined")
{
	BX.Crm.UserFieldTypeMenu = function()
	{
		this._id = null;
		this._settings = {};
		this._items = null;
		this._isOpened = false;

		this._wrapper = null;
		this._innerWrapper = null;

		this._topScrollButton = null;
		this._bottomScrollButton = null;

		this._bottomButtonMouseOverHandler = BX.delegate(this.onBottomButtonMouseOver, this);
		this._bottomButtonMouseOutHandler = BX.delegate(this.onBottomButtonMouseOut, this);

		this._topButtonMouseOverHandler = BX.delegate(this.onTopButtonMouseOver, this);
		this._topButtonMouseOutHandler = BX.delegate(this.onTopButtonMouseOut, this);

		this._scrollHandler = BX.throttle(this.onScroll, 100, this);

		this._enableScrollToBottom = false;
		this._enableScrollToTop = false;

		this._popup = null;
	};

	BX.Crm.UserFieldTypeMenu.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._items = [];
			var itemData = BX.prop.getArray(settings, "items");
			for(var i = 0, length = itemData.length; i < length; i++)
			{
				var data = itemData[i];
				data["menu"] = this;
				this._items.push(
					BX.Crm.UserFieldTypeMenuItem.create(
						BX.prop.getString(data, "value"),
						data
					)
				);
			}
		},
		getId: function()
		{
			return this._id;
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function(anchor)
		{
			if(this._isOpened)
			{
				return;
			}

			this._popup = new BX.PopupWindow(
				this._id,
				anchor,
				{
					autoHide: true,
					draggable: false,
					offsetLeft: 0,
					offsetTop: 0,
					noAllPaddings: true,
					bindOptions: { forceBindPosition: true },
					closeByEsc: true,
					events:
					{
						onPopupShow: BX.delegate(this.onPopupShow, this),
						onPopupClose: BX.delegate(this.onPopupClose, this),
						onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
					},
					content: this.prepareContent()
				}
			);
			this._popup.show();
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				this._popup.close();
			}
		},
		prepareContent: function()
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-card-widget-create-field-popup" } });

			var scrollIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"13\" viewBox=\"0 0 42 13\">\n" +
				"  <polyline fill=\"none\" stroke=\"#CACDD1\" stroke-width=\"2\" points=\"274 98 284 78.614 274 59\" transform=\"rotate(90 186 -86.5)\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n" +
				"</svg>\n";

			this._topScrollButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-popup-scroll-control-top" },
					html: scrollIcon
				}
			);
			this._wrapper.appendChild(this._topScrollButton);

			this._bottomScrollButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-popup-scroll-control-bottom" },
					html: scrollIcon
				}
			);
			this._wrapper.appendChild(this._bottomScrollButton);

			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-card-widget-create-field-list" } });
			this._wrapper.appendChild(this._innerWrapper);

			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._innerWrapper.appendChild(this._items[i].prepareContent());
			}
			return this._wrapper;
		},
		adjust: function()
		{
			var height = this._innerWrapper.offsetHeight;
			var scrollTop = this._innerWrapper.scrollTop;
			var scrollHeight = this._innerWrapper.scrollHeight;

			if(scrollTop === 0)
			{
				BX.addClass(this._topScrollButton, "control-hide");
			}
			else
			{
				BX.removeClass(this._topScrollButton, "control-hide");
			}

			if((scrollTop + height) === scrollHeight)
			{
				BX.addClass(this._bottomScrollButton, "control-hide");
			}
			else
			{
				BX.removeClass(this._bottomScrollButton, "control-hide");
			}
		},
		onItemSelect: function(item)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		},
		onPopupShow: function()
		{
			this._isOpened = true;

			BX.bind(this._bottomScrollButton, "mouseover", this._bottomButtonMouseOverHandler);
			BX.bind(this._bottomScrollButton, "mouseout", this._bottomButtonMouseOutHandler);

			BX.bind(this._topScrollButton, "mouseover", this._topButtonMouseOverHandler);
			BX.bind(this._topScrollButton, "mouseout", this._topButtonMouseOutHandler);

			BX.bind(this._innerWrapper, "scroll", this._scrollHandler);

			window.setTimeout(this.adjust.bind(this), 100);
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;

			BX.unbind(this._bottomScrollButton, "mouseover", this._bottomButtonMouseOverHandler);
			BX.unbind(this._bottomScrollButton, "mouseout", this._bottomButtonMouseOutHandler);

			BX.unbind(this._topScrollButton, "mouseover", this._topButtonMouseOverHandler);
			BX.unbind(this._topScrollButton, "mouseout", this._topButtonMouseOutHandler);

			BX.unbind(this._innerWrapper, "scroll", this._scrollHandler);

			this._wrapper = null;
			this._innerWrapper = null;
			this._topScrollButton = null;
			this._bottomScrollButton = null;

			this._popup = null;
		},
		onBottomButtonMouseOver: function(e)
		{
			if(this._enableScrollToBottom)
			{
				return;
			}

			this._enableScrollToBottom = true;
			this._enableScrollToTop = false;

			(function scroll()
			{
				if(!this._enableScrollToBottom)
				{
					return;
				}

				var el = this._innerWrapper;
				if((el.scrollTop + el.offsetHeight) !== el.scrollHeight)
				{
					el.scrollTop += 3;
				}

				if((el.scrollTop + el.offsetHeight) === el.scrollHeight)
				{
					this._enableScrollToBottom = false;
					//console.log("scrollToBottom: completed");
				}
				else
				{
					window.setTimeout(scroll.bind(this), 20);
				}
			}).bind(this)();
		},
		onBottomButtonMouseOut: function()
		{
			this._enableScrollToBottom = false;
		},
		onTopButtonMouseOver: function(e)
		{
			if(this._enableScrollToTop)
			{
				return;
			}

			this._enableScrollToBottom = false;
			this._enableScrollToTop = true;

			(function scroll()
			{
				if(!this._enableScrollToTop)
				{
					return;
				}

				var el = this._innerWrapper;
				if(el.scrollTop > 0)
				{
					el.scrollTop -= 3;
				}

				if(el.scrollTop === 0)
				{
					this._enableScrollToTop = false;
					//console.log("scrollToTop: completed");
				}
				else
				{
					window.setTimeout(scroll.bind(this), 20);
				}
			}).bind(this)();
		},
		onTopButtonMouseOut: function()
		{
			this._enableScrollToTop = false;
		},
		onScroll: function(e)
		{
			this.adjust();
		}
	};
	BX.Crm.UserFieldTypeMenu.create = function(id, settings)
	{
		var self = new BX.Crm.UserFieldTypeMenu();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.UserFieldTypeMenuItem) === "undefined")
{
	BX.Crm.UserFieldTypeMenuItem = function()
	{
		this._id = "";
		this._settings = null;
		this._menu = "";
		this._value = "";
		this._text = "";
		this._legend = "";
	};
	BX.Crm.UserFieldTypeMenuItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._menu = BX.prop.get(settings, "menu");
			this._value = BX.prop.getString(settings, "value");
			this._text = BX.prop.getString(settings, "text");
			this._legend = BX.prop.getString(settings, "legend");
		},
		getId: function()
		{
			return this._id;
		},
		getValue: function()
		{
			return this._value;
		},
		getText: function()
		{
			return this._text;
		},
		getLegend: function()
		{
			return this._legend;
		},
		prepareContent: function()
		{
			var wrapper = BX.create(
				"span",
				{
					props: { className: "crm-entity-card-widget-create-field-item" },
					events: { click: BX.delegate(this.onClick, this) }
				}
			);

			wrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-card-widget-create-field-item-title" },
						text: this._text
					}
				)
			);

			wrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-card-widget-create-field-item-desc" },
						text: this._legend
					}
				)
			);

			return wrapper;
		},
		onClick: function(e)
		{
			this._menu.onItemSelect(this);
		}
	};
	BX.Crm.UserFieldTypeMenuItem.create = function(id, settings)
	{
		var self = new BX.Crm.UserFieldTypeMenuItem();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorSubsection === "undefined")
{
	BX.Crm.EntityEditorSubsection = function()
	{
		BX.Crm.EntityEditorSubsection.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityEditorSubsection, BX.Crm.EntityEditorSection);
	BX.Crm.EntityEditorSubsection.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorSubsection.superclass.initialize.call(this, id, settings);
		this.initializeFromModel();
	};

	BX.Crm.EntityEditorSubsection.prototype.ensureWrapperCreated = function(params)
	{
		if(!this._wrapper)
		{
			this._wrapper = BX.create("div");
		}

		return this._wrapper;
	};
	BX.Crm.EntityEditorSubsection.prototype.layout = function(options)
	{
		//Create wrapper
		this._contentContainer = BX.create("div");
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;
		this.ensureWrapperCreated();
		this.layoutTitle();

		this._wrapper.appendChild(this._contentContainer);

		//Layout fields
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this.layoutChild(this._fields[i]);
		}

		this._addChildButton = this._createChildButton = null;

		if (this.isDragEnabled())
		{
			this._dragContainerController = BX.Crm.EditorDragContainerController.create(
				"section_" + this.getId(),
				{
					charge: BX.Crm.EditorFieldDragContainer.create(
						{
							section: this,
							context: this._draggableContextId
						}
					),
					node: this._wrapper
				}
			);
			this._dragContainerController.addDragFinishListener(this._dropHandler);

			this.initializeDragDropAbilities();
		}

		this._addChildButton = this._createChildButton = null;

		if(!isViewMode)
		{
			this.createButtonPanel();
			this._contentContainer.appendChild(this._buttonPanelWrapper);

		}

		this._hasLayout = true;
		this.registerLayout(options);
	};
	BX.Crm.EntityEditorSubsection.prototype.getChildDragScope = function()
	{
		return BX.Crm.EditorDragScope.parent;
	};
	BX.Crm.EntityEditorSubsection.prototype.createButtonPanel = function()
	{
		this._buttonPanelWrapper = BX.create("div", {
			props: { className: "crm-entity-widget-content-block" }
		});
	};

	BX.Crm.EntityEditorSubsection.prototype.layoutChild = function(field)
	{
		field.setContainer(this._contentContainer);
		field.setDraggableContextId(this._draggableContextId);
		this.setChildVisible(field);
		//Force layout reset because of animation implementation
		field.releaseLayout();
		field.layout();
		if(this._mode !== BX.Crm.EntityEditorMode.view && field.isHeading())
		{
			field.focus();
		}
	};

	BX.Crm.EntityEditorSubsection.prototype.setChildVisible = function(field)
	{
		field.setVisible(BX.prop.getBoolean(field._schemeElement._settings, "isVisible", true));
	};

	BX.Crm.EntityEditorSubsection.prototype.isDragEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.layoutTitle = function()
	{
	};

	BX.Crm.EntityEditorSubsection.prototype.isCreationEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.isContextMenuEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.isRequired = function()
	{
		return true;
	};

	BX.Crm.EntityEditorSubsection.prototype.getRuntimeValue = function()
	{
		var data = [];

		for (var i=0; i < this.getChildCount();i++)
		{
			var fieldValue = this._fields[i].getRuntimeValue();

			if (BX.type.isArray(fieldValue))
			{
				for (var key in fieldValue)
				{
					if(fieldValue.hasOwnProperty(key))
					{
						data[key] = fieldValue[key];
					}
				}
			}
			else
			{
				data[this._fields[i].getName()] = fieldValue
			}
		}
		return data;
	};
	BX.Crm.EntityEditorSubsection.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-widget-content-block-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorSubsection.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"field_" +  this.getId(),
			{
				charge: BX.Crm.EditorFieldDragItem.create(
					{
						control: this,
						contextId: this._draggableContextId,
						scope: this.getDragScope()
					}
				),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorSubsection.prototype.processChildControlChange = function(child, params)
	{
		if(this._isChanged)
		{
			return;
		}

		this.markAsChanged(params);
	};
	BX.Crm.EntityEditorSubsection.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorSubsection();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorRecurring === "undefined")
{
	BX.Crm.EntityEditorRecurring = function()
	{
		BX.Crm.EntityEditorRecurring.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityEditorRecurring, BX.Crm.EntityEditorSubsection);
	BX.Crm.EntityEditorRecurring.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorRecurring.superclass.initialize.call(this, id, settings);
		var data = this._schemeElement.getData();
		this._schemeFieldData = BX.prop.getObject(data, 'fieldData', {});
		this._enableRecurring = BX.prop.getBoolean(this._schemeElement._settings, "enableRecurring", true);
		this._recurringModel = this._model.getField(this.getName());
	};

	BX.Crm.EntityEditorRecurring.prototype.initializeFromModel =  function()
	{
		BX.Crm.EntityEditorRecurring.superclass.initializeFromModel.call(this);
		var _this = this;
		for (var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].getValue = function(name){
				if (!BX.type.isNotEmptyString(name))
				{
					name = this.getName();
				}
				return _this.getRecurringFieldValue(name);
			};
		}
	};

	BX.Crm.EntityEditorRecurring.prototype.getRecurringModel =  function()
	{
		var parent = this.getParent();
		if (parent instanceof BX.Crm.EntityEditorRecurring)
		{
			return parent.getRecurringModel();
		}

		return this._recurringModel;
	};
	BX.Crm.EntityEditorRecurring.prototype.isContextMenuEnabled = function()
	{
		return BX.Crm.EntityEditorSubsection.superclass.isContextMenuEnabled.call(this);
	};
	BX.Crm.EntityEditorRecurring.prototype.isNeedToDisplay = function()
	{
		return false;
	};
	BX.Crm.EntityEditorRecurring.prototype.isRequired = function()
	{
		return this._schemeElement && this._schemeElement.isRequired();
	};
	BX.Crm.EntityEditorRecurring.prototype.prepareContextMenuItems = function()
	{
		var results = [];
		results.push({ value: "hide", text: this.getMessage("hide") });

		return results;
	};
	BX.Crm.EntityEditorRecurring.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "hide")
		{
			window.setTimeout(BX.delegate(this.hide, this), 500);
		}
		else if (this._parent && this._parent.hasAdditionalMenu())
		{
			this._parent.processChildAdditionalMenuCommand(this, command);
		}
		this.closeContextMenu();
	};
	BX.Crm.EntityEditorRecurring.prototype.isDragEnabled = function()
	{
		return BX.Crm.EntityEditorSubsection.superclass.isDragEnabled.call(this);
	};
	BX.Crm.EntityEditorRecurring.prototype.getDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EntityEditorRecurring.prototype.hasContentToDisplay = function()
	{
		return true;
	};
	BX.Crm.EntityEditorRecurring.prototype.getRecurringMode =  function()
	{
		var parent = this.getParent();
		if (parent instanceof BX.Crm.EntityEditorRecurring)
		{
			return parent.getRecurringMode();
		}

		return this.getRecurringFieldValue('RECURRING[MODE]');
	};

	BX.Crm.EntityEditorRecurring.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRecurring.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRecurring.prototype.processChildControlChange = function(child, params)
	{
		var childName = child.getName();
		var refreshLayout = false;
		var previousValue = child.getValue();
		var changedValue = child.getRuntimeValue();
		if (previousValue !== changedValue)
		{
			switch (childName)
			{
				case 'RECURRING[MODE]':
				case 'RECURRING[MULTIPLE_TYPE_LIMIT]':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
					refreshLayout = true;
					break;
				case 'RECURRING[MULTIPLE_TYPE]':
					if (
						previousValue === this.getSchemeFieldValue('MULTIPLE_CUSTOM')
						|| changedValue === this.getSchemeFieldValue('MULTIPLE_CUSTOM')
					)
					{
						refreshLayout = true;
					}
			}
		}
		var recurringModel = this.getRecurringModel();
		this.setChangedValue(childName, changedValue, recurringModel);
		BX.Crm.EntityEditorRecurring.superclass.processChildControlChange.call(this, child, params);
		if (refreshLayout)
		{
			this.refreshLayout();
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.setChangedValue = function(childName, value, model)
	{
		if (typeof value === "object")
		{
			for (var key in value)
			{
				if(value.hasOwnProperty(key))
				{
					this.setChangedValue(key, value[key], model);
				}
			}
		}
		else
		{
			model[childName] = value;
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.layout = function(options)
	{
		//Create wrapper
		this._contentContainer = BX.create("div");

		if (this.isMainSubsection())
		{
			this._contentContainer.classList.add("crm-entity-widget-content");
		}

		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;
		this.ensureWrapperCreated();
		this.layoutTitle();

		this._wrapper.appendChild(this._contentContainer);

		if (isViewMode)
		{
			var viewNode = BX.create("div", {
				props:{
					className: "crm-entity-widget-content-block crm-entity-widget-content-block-click-editable"
				},
				children: [this.createTitleNode(this.getTitle())]
			});
			this._contentContainer.appendChild(viewNode);

			var textNode = BX.create("div");
			var layoutData = this._schemeElement.getData();
			if (this._schemeElement._promise instanceof BX.Promise)
			{
				this.loadViewText();
				this._schemeElement._promise.then(
					BX.proxy(function() {
						textNode.classList = "crm-entity-widget-content-block-inner";
						textNode.innerHTML = BX.util.htmlspecialchars(layoutData.view.text);
						viewNode.innerHTML = '';
						viewNode.appendChild(textNode);
						this._schemeElement._promise = null;
					}, this)
				);
			}
			else if (BX.type.isNotEmptyString(layoutData.view.text))
			{
				textNode.classList = "crm-entity-widget-content-block-inner";
				textNode.innerHTML = layoutData.view.text;
				viewNode.appendChild(textNode)
			}
			if (this._enableRecurring)
			{
				BX.bind(textNode, "click", BX.delegate(this.toggle, this));
			}

			if(this.isContextMenuEnabled())
			{
				viewNode.appendChild(this.createContextMenuButton());
			}
			if(this.isDragEnabled())
			{
				viewNode.appendChild(this.createDragButton());
				this.initializeDragDropAbilities();
			}
		}
		else if(!this._enableRecurring)
		{
			var viewNode = BX.create("div", {
				props:{
					className: "crm-entity-widget-content-block"
				},
				children: [this.createTitleNode(this.getMessage('modeTitle'))]
			});

			var disabledField = BX.create("div",{
				props: {
					className:'crm-entity-widget-content-block-inner'
				},
				children:[
					BX.create("div",{
						type:"text",
						props: {
							className:'crm-entity-widget-content-input',
							disabled: "disabled"
						},
						text: this.getMessage('notRepeat'),
						events: {
							click: BX.delegate(this.showLicencePopup,this)
						}
					})
				]

			});
			viewNode.appendChild(disabledField);
			var lock = BX.create("button",{
				props: {
					className:'crm-entity-widget-content-block-locked-icon'
				},
				events: {
					click: BX.delegate(this.showLicencePopup,this)
				}
			});
			viewNode.appendChild(lock);
			this._contentContainer.appendChild(viewNode);
		}
		else
		{
			for(var i = 0, l = this._fields.length; i < l; i++)
			{
				this._fields[i].isDragEnabled = function(){
					return false;
				};
				this.layoutChild(this._fields[i]);
			}
		}
		//Layout fields

		this._addChildButton = this._createChildButton = null;
		this._hasLayout = true;
		this.registerLayout(options);
	};
	BX.Crm.EntityEditorRecurring.prototype.createTitleNode = function(title)
	{
		var titleNode = BX.create(
			"div",
			{
				attrs: { className: "crm-entity-widget-content-block-title" },
				children: [
					BX.create(
						"span",
						{
							attrs: { className: "crm-entity-widget-content-block-title-text" },
							text: title
						}
					)
				]
			}
		);

		return titleNode;
	};
	BX.Crm.EntityEditorRecurring.prototype.setChildVisible = function(field)
	{
		var value = false;
		var name = field.getName();
		var mode = this.getRecurringMode();
		if (name === 'RECURRING[MODE]')
		{
			value = true;
		}
		else if (mode === this.getSchemeFieldValue('SINGLE_EXECUTION'))
		{
			switch (name)
			{
				case 'SINGLE_PARAMS':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
				case 'SUBTITLE_NEW_ORDER_PARAMS':
				case 'NEW_BEGINDATE':
				case 'NEW_CLOSEDATE':
				case 'RECURRING[CATEGORY_ID]':
					value = true;
					break;
				case 'OFFSET_BEGINDATE':
					if (this.getRecurringFieldValue('RECURRING[BEGINDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
				case 'OFFSET_CLOSEDATE':
					if (this.getRecurringFieldValue('RECURRING[CLOSEDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
			}
		}
		else if (mode === this.getSchemeFieldValue('MULTIPLE_EXECUTION'))
		{
			switch (name)
			{
				case 'MULTIPLE_PARAMS':
				case 'RECURRING[MULTIPLE_TYPE]':
				case 'RECURRING[CATEGORY_ID]':
				case 'RECURRING[MULTIPLE_DATE_START]':
				case 'MULTIPLE_LIMIT':
				case 'RECURRING[MULTIPLE_TYPE_LIMIT]':
				case 'SUBTITLE_NEW_ORDER_PARAMS':
				case 'NEW_BEGINDATE':
				case 'NEW_CLOSEDATE':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
					value = true;
					break;
				case 'MULTIPLE_CUSTOM':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE]') === this.getSchemeFieldValue('MULTIPLE_CUSTOM'))
					{
						value = true;
					}
					break;
				case 'RECURRING[MULTIPLE_DATE_LIMIT]':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE_LIMIT]') === this.getSchemeFieldValue('LIMITED_BY_DATE'))
					{
						value = true;
					}
					break;
				case 'RECURRING[MULTIPLE_TIMES_LIMIT]':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE_LIMIT]') === this.getSchemeFieldValue('LIMITED_BY_TIMES'))
					{
						value = true;
					}
					break;
				case 'OFFSET_BEGINDATE':
					if (this.getRecurringFieldValue('RECURRING[BEGINDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
				case 'OFFSET_CLOSEDATE':
					if (this.getRecurringFieldValue('RECURRING[CLOSEDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
			}
		}
		field.setVisible(value);
	};
	BX.Crm.EntityEditorRecurring.prototype.getRecurringFieldValue = function(name)
	{
		return BX.prop.get(this.getRecurringModel(), name)
	};
	BX.Crm.EntityEditorRecurring.prototype.getSchemeFieldValue = function(name)
	{
		return BX.prop.get(this._schemeFieldData, name, "")
	};
	BX.Crm.EntityEditorRecurring.prototype.isMainSubsection = function()
	{
		return !(this.getParent() instanceof BX.Crm.EntityEditorRecurring);
	};
	BX.Crm.EntityEditorRecurring.prototype.onBeforeSubmit = function()
	{
		if (this.isMainSubsection())
		{
			this._wrapper.appendChild(
				BX.create('input',{
					props:{
						type: 'hidden',
						name: 'IS_RECURRING',
						value: (this._model.getStringField('IS_RECURRING') === 'Y') ? 'Y' : 'N'
					}
				})
			);
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.save = function()
	{
		if (this.isMainSubsection())
		{
			this._schemeElement._promise = new BX.Promise();
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.loadViewText = function()
	{
		var data = this._schemeElement.getData();
		if (
			BX.type.isPlainObject(data.loaders)
			&& BX.type.isNotEmptyString(data.loaders["url"])
			&& BX.type.isNotEmptyString(data.loaders["action"])
		)
		{
			BX.ajax(
				{
					url: data.loaders["url"],
					method: "POST",
					dataType: "json",
					data: {
						ACTION: data.loaders["action"],
						PARAMS: {ID:this._model.getField('ID')}
					},
					onsuccess: BX.delegate(this.onEntityHintLoad, this)
				}
			);
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.onEntityHintLoad = function(result)
	{
		var entityData = BX.prop.getObject(result, "DATA", null);

		if(!entityData)
		{
			return;
		}
		if (BX.type.isNotEmptyString(entityData.HINT))
		{
			this._schemeElement._data.view.text = entityData.HINT;
		}

		if (this._schemeElement._promise instanceof BX.Promise)
		{
			this._schemeElement._promise.fulfill();
			this._schemeElement._promise = null;
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.showLicencePopup = function(e)
	{
		e.preventDefault();

		if(!B24 || !B24['licenseInfoPopup'])
		{
			return;
		}

		var layoutData = this._schemeElement.getData();
		var restrictionScript = layoutData.restrictScript;
		if (BX.type.isNotEmptyString(restrictionScript))
		{
			eval(restrictionScript);
		}
	};
	BX.Crm.EntityEditorRecurring.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurring();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorRecurringCustomRowField === "undefined")
{
	BX.Crm.EntityEditorRecurringCustomRowField = function()
	{
		BX.Crm.EntityEditorRecurringCustomRowField.superclass.constructor.apply(this);
		// this._currencyEditor = null;
		this._amountInput = null;
		this._selectInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
		this._selectedValue = "";
		this._selectClickHandler = BX.delegate(this.onSelectorClick, this);
		this._isMesureMenuOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorRecurringCustomRowField, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.focus = function()
	{
		if(this._amountInput)
		{
			BX.focus(this._amountInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._amountInput);
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getStringField(
				this.getAmountFieldName(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-recurring-custom" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this.getTitle();
		var data = this.getData();

		var selectInputName = this.getSelectFieldName();
		this._selectedValue = this.getValue(selectInputName);
		var selectItems = BX.prop.getArray(BX.prop.getObject(data, "select"), "items");
		var selectName = '';
		if(!this._selectedValue)
		{
			var firstItem =  selectItems.length > 0 ? selectItems[0] : null;
			if(firstItem)
			{
				this._selectedValue = firstItem["VALUE"];
				selectName = firstItem["NAME"];
			}
		}
		else
		{
			selectName = this._editor.findOption(
				this._selectedValue,
				selectItems
			);
		}

		var amountInputName = this.getAmountFieldName();
		var amountValue = this.getValue(amountInputName);

		// this._amountValue = null;
		this._amountInput = null;
		this._selectInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountInput = BX.create("input",
				{
					attrs:
						{
							className: "crm-entity-widget-content-input",
							name: amountInputName,
							type: "text",
							value: amountValue
						}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			this._selectInput = BX.create("input",
				{
					attrs:
						{
							name: selectInputName,
							type: "hidden",
							value: this._selectedValue
						}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: selectName
				}
			);
			BX.bind(this._selectContainer, "click", this._selectClickHandler);

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-input-wrapper" },
					children:
						[
							this._amountInput,
							this._selectInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" },
									children: [ this._selectContainer ]
								}
							)
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-colums-input" },
					children: [ this._inputWrapper ]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.doClearLayout = function(options)
	{
		BX.PopupMenu.destroy(this._id);
		this._amountInput = null;
		this._selectInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getAmountFieldName = function()
	{
		return this._schemeElement.getDataStringParam("amount", "");
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getSelectFieldName = function()
	{
		return BX.prop.getString(
			this._schemeElement.getDataObjectParam("select", {}),
			"name",
			""
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onSelectorClick = function (e)
	{
		this.openListMenu();
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.openListMenu = function()
	{
		if(this._isListMenuOpened)
		{
			return;
		}

		var data = this._schemeElement.getData();
		var selectList = BX.prop.getArray(BX.prop.getObject(data, "select"), "items"); //{NAME, VALUE}

		var key = 0;
		var menu = [];
		while (key < selectList.length)
		{
			menu.push(
				{
					text: selectList[key]["NAME"],
					value: selectList[key]["VALUE"],
					onclick: BX.delegate( this.onSelectItem, this)
				}
			);
			key++
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onListMenuOpen, this),
						onPopupClose: BX.delegate( this.onListMenuClose, this)
					}
			}
		);
		BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.closeListMenu = function()
	{
		if(!this._isListMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onListMenuOpen = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isListMenuOpened = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onListMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isListMenuOpened = false;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onSelectItem = function(e, item)
	{
		this.closeListMenu();

		this._selectedValue = this._selectInput.value = item.value;
		this._selectContainer.innerHTML = BX.util.htmlspecialchars(item.text);

		this.markAsChanged(
			{
				fieldName: this.getSelectFieldName(),
				fieldValue: this._selectedValue
			}
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountInput)
			{
				data[this.getAmountFieldName()] = this._amountInput.value;
			}
			data[this.getSelectFieldName()] = this._selectedValue;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.save = function()
	{
		this._model.setField(
			this.getSelectFieldName(),
			this._selectedValue
		);

		if(this._amountInput)
		{
			this._model.setField(this.getAmountFieldName(), this._amountInput.value);
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurringCustomRowField();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRecurringSingleField === "undefined")
{
	BX.Crm.EntityEditorRecurringSingleField = function()
	{
		BX.Crm.EntityEditorRecurringSingleField.superclass.constructor.apply(this);
		this._dateInput = null;
	};
	BX.extend(BX.Crm.EntityEditorRecurringSingleField, BX.Crm.EntityEditorRecurringCustomRowField);

	BX.Crm.EntityEditorRecurringSingleField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-recurring-single" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this.getTitle();
		var data = this.getData();

		var amountInputName = this.getAmountFieldName();
		var amountValue = this.getValue(amountInputName);
		var selectInputName = this.getSelectFieldName();
		this._selectedValue = this.getValue(selectInputName);
		var dateInputName = this.getDateFieldName();
		this._dateValue = this.getValue(dateInputName);

		var selectItems = BX.prop.getArray(BX.prop.getObject(data, "select"), "items");
		var selectName = '';
		if(!this._selectedValue)
		{
			var firstItem =  selectItems.length > 0 ? selectItems[0] : null;
			if(firstItem)
			{
				this._selectedValue = firstItem["VALUE"];
				selectName = firstItem["NAME"];
			}
		}
		else
		{
			selectName = this._editor.findOption(
				this._selectedValue,
				selectItems
			);
		}
		this._amountInput = null;
		this._selectInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountInput = BX.create("input",
				{
					attrs:
						{
							className: "crm-entity-widget-content-input",
							name: amountInputName,
							type: "text",
							value: amountValue
						}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			this._selectInput = BX.create("input",
				{
					attrs:
						{
							name: selectInputName,
							type: "hidden",
							value: this._selectedValue
						}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: selectName
				}
			);

			this._dateInput = BX.create('input',{
				style:{
					display:'inline-block'
				},
				props:{
					name: dateInputName,
					className:'crm-entity-widget-content-input crm-entity-widget-content-input-date',
					value: this._dateValue
				},
				events: {
					click: function(){
						BX.calendar({node: this, field: this, bTime: false})
					},
					change: BX.delegate(
						function(e){
							this.markAsChanged();
						}, this)
				}
			});

			BX.bind(this._selectContainer, "click", this._selectClickHandler);

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-input-wrapper" },
					children:
						[
							this._amountInput,
							this._selectInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" },
									children: [ this._selectContainer ]
								}
							),
							BX.create('span',{ text: this.getMessage('until')}),
							this._dateInput
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-colums-input" },
					children: [ this._inputWrapper ]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getDateFieldName = function()
	{
		return this._schemeElement.getDataStringParam("date", "");
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountInput)
			{
				data[this.getAmountFieldName()] = this._amountInput.value;
			}
			data[this.getSelectFieldName()] = this._selectedValue;
			data[this.getDateFieldName()] = this._dateInput.value;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		this._model.setField(
			BX.prop.getString(BX.prop.getObject(data, "select"), "name"),
			this._selectedValue
		);

		if(this._amountInput)
		{
			this._model.setField(BX.prop.getString(data, "amount"), this._amountInput.value);
		}
		if(this._dateInput)
		{
			this._model.setField(BX.prop.getString(data, "date"), this._dateInput.value);
		}
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRecurringSingleField.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRecurringSingleField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurringSingleField();
		self.initialize(id, settings);
		return self;
	}
}
//region CONTROLLERS
if(typeof BX.Crm.EditorFieldSingleEditController === "undefined")
{
	BX.Crm.EditorFieldSingleEditController = function()
	{
		this._id = "";
		this._settings = null;
		this._field = null;
		this._wrapper = null;

		this._fieldWrapperHandler = BX.delegate(this.onFieldWrapperClick, this);
		this._documentHandler = BX.delegate(this.onDocumentClick, this);
		this._documentTimeoutHandle = 0;

		this._isInitialized = false;
		this._isActive = false;
	};
	BX.Crm.EditorFieldSingleEditController.prototype =
		{
			initialize: function(id, settings)
			{
				this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
				this._settings = settings ? settings : {};

				this._time = (new Date()).toString();

				this._field = BX.prop.get(this._settings, "field");
				if(!(this._field instanceof BX.Crm.EntityEditorField))
				{
					throw "EditorFieldSingleEditController: The 'field' param must be EntityEditorField.";
				}

				this._wrapper = this._field.getWrapper();
				if(!BX.type.isElementNode(this._wrapper))
				{
					throw "EditorFieldSingleEditController: Could not find the wrapper element.";
				}

				window.setTimeout(BX.delegate(this.bind, this), 100);
				this._isActive = this._isInitialized = true;
			},
			isActive: function()
			{
				return this._isActive;
			},
			setActive: function(active)
			{
				this._isActive = !!active;
			},
			setActiveDelayed: function(active, delay)
			{
				if(typeof(delay) === "undefined")
				{
					delay = 0;
				}

				window.setTimeout(
					BX.delegate(function(){ this.setActive(active); }, this),
					delay
				);
			},
			release: function()
			{
				this._isActive = this._isInitialized = false;
				this.unbind();
			},
			bind: function()
			{
				if(this._isInitialized)
				{
					BX.bind(this._wrapper, "click", this._fieldWrapperHandler);
					BX.bind(document, "click", this._documentHandler);
				}
			},
			unbind: function()
			{
				BX.unbind(this._wrapper, "click", this._fieldWrapperHandler);
				BX.unbind(document, "click", this._documentHandler);
			},
			saveControl: function()
			{
				if(!this._isActive)
				{
					return;
				}

				var editor = this._field.getEditor();
				if(editor)
				{
					editor.switchControlMode(this._field, BX.Crm.EntityEditorMode.view, BX.Crm.EntityEditorModeOptions.none);
					//Is not supported by the all controls
					//editor.saveControl(this._field);
				}

				this._isActive = false;
			},
			onFieldWrapperClick: function(e)
			{
				//The call of "preventDefault" is not allowed because of the checkbox controls
				BX.eventCancelBubble(e);
			},
			onDocumentClick: function(e)
			{
				if(this._documentTimeoutHandle > 0)
				{
					window.clearTimeout(this._documentTimeoutHandle);
					this._documentTimeoutHandle = 0;
				}

				this._documentTimeoutHandle = window.setTimeout(
					BX.delegate(this.saveControl, this),
					400
				);
			}
		};
	BX.Crm.EditorFieldSingleEditController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorFieldSingleEditController();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EditorFieldViewController === "undefined")
{
	BX.Crm.EditorFieldViewController = function()
	{
		this._id = "";
		this._settings = null;
		this._field = null;
		this._wrapper = null;

		this._timeoutHandle = 0;
		this._time = 0;
		this._pos = { x: 0, y: 0 };

		this._mouseDownHandler = BX.delegate(this.onMouseDown, this);
		this._mouseUpHandler = BX.delegate(this.onMouseUp, this);

		this._isInitialized = false;
		this._isActive = false;
	};
	BX.Crm.EditorFieldViewController.prototype =
		{
			initialize: function (id, settings)
			{
				this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
				this._settings = settings ? settings : {};

				this._field = BX.prop.get(this._settings, "field");
				if (!(this._field instanceof BX.Crm.EntityEditorField)) {
					throw "EditorFieldViewController: The 'field' param must be EntityEditorField.";
				}

				this._wrapper = BX.prop.getElementNode(this._settings, "wrapper");
				if (!BX.type.isElementNode(this._wrapper)) {
					throw "EditorFieldSingleEditController: Could not find the wrapper element.";
				}

				window.setTimeout(BX.delegate(this.bind, this), 100);
				this._isActive = this._isInitialized = true;
			},
			release: function()
			{
				this._isActive = this._isInitialized = false;
				this.unbind();
			},
			bind: function()
			{
				if(this._isInitialized)
				{
					BX.bind(this._wrapper, "mousedown", this._mouseDownHandler);
					BX.bind(this._wrapper, "mouseup", this._mouseUpHandler);
				}
			},
			unbind: function()
			{
				BX.unbind(this._wrapper, "mousedown", this._mouseDownHandler);
				BX.unbind(this._wrapper, "mouseup", this._mouseUpHandler);
			},
			onMouseDown: function(e)
			{
				if(this._timeoutHandle > 0)
				{
					window.clearTimeout(this._timeoutHandle);
					this._timeoutHandle = 0;
				}

				if(!this.isHandleableEvent(e))
				{
					return;
				}

				this._time = new Date().valueOf();
				this._pos = { x: e.clientX, y: e.clientY };
			},
			onMouseUp: function(e)
			{
				if(this._timeoutHandle > 0)
				{
					window.clearTimeout(this._timeoutHandle);
					this._timeoutHandle = 0;
				}

				if(!this.isHandleableEvent(e))
				{
					return;
				}

				//console.log(new Date().valueOf() - this._time);
				//console.log(Math.abs(this._pos.x - e.clientX));
				if((new Date().valueOf() - this._time) < 400 || Math.abs(this._pos.x - e.clientX) < 2)
				{
					this._timeoutHandle = window.setTimeout(
						function()
						{
							this.switchTo(BX.getEventTarget(e));
						}.bind(this),
						0
					);
				}

				this._time = 0;
			},
			isHandleableEvent: function(e)
			{
				var node = BX.getEventTarget(e);
				if(node.tagName === "A")
				{
					return false;
				}

				if(node.getAttribute("data-editor-control-type") === "button")
				{
					return false;
				}

				return !BX.findParent(node, { tagName: "a" }, this._wrapper);
			},
			switchTo: function(targetNode)
			{
				this._field.switchToSingleEditMode(targetNode);
			}
		};
	BX.Crm.EditorFieldViewController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorFieldViewController();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorController === "undefined")
{
	BX.Crm.EntityEditorController = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;
		this._model = null;
		this._config = null;

		this._isChanged = false;
	};
	BX.Crm.EntityEditorController.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._model = BX.prop.get(this._settings, "model", null);
			this._config = BX.prop.getObject(this._settings, "config", {});

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getConfig: function()
		{
			return this._config;
		},
		getConfigStringParam: function(name, defaultValue)
		{
			return BX.prop.getString(this._config, name, defaultValue);
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		markAsChanged: function()
		{
			if(this._isChanged)
			{
				return;
			}

			this._isChanged = true;
			if(this._editor)
			{
				this._editor.processControllerChange(this);
			}
		},
		rollback: function()
		{
		},
		innerCancel: function()
		{
		},
		onBeforeSubmit: function()
		{
		},
		onAfterSave: function()
		{
			if(this._isChanged)
			{
				this._isChanged = false;
			}
		},
		onBeforesSaveControl: function(data)
		{
			return data;
		}
	};
}

if(typeof BX.Crm.EntityEditorProductRowProxy === "undefined")
{
	BX.Crm.EntityEditorProductRowProxy = function()
	{
		BX.Crm.EntityEditorProductRowProxy.superclass.constructor.apply(this);
		this._externalEditor = null;
		this._editorCreateHandler = null;
		this._sumTotalChangeHandler = null;
		this._productAddHandler = null;
		this._productChangeHandler = null;
		this._productRemoveHandler = null;
		this._editorModeChangeHandler = BX.delegate(this.onEditorModeChange, this);
		this._editorControlChangeHandler = BX.delegate(this.onEditorControlChange, this);

		this._currencyId = "";
	};
	BX.extend(BX.Crm.EntityEditorProductRowProxy, BX.Crm.EntityEditorController);
	BX.Crm.EntityEditorProductRowProxy.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorProductRowProxy.superclass.doInitialize.apply(this);

		this._sumTotalChangeHandler = BX.delegate(this.onSumTotalChange, this);
		this._productAddHandler = BX.delegate(this.onProductAdd, this);
		this._productChangeHandler = BX.delegate(this.onProductChange, this);
		this._productRemoveHandler = BX.delegate(this.onProductRemove, this);

		var externalEditor = typeof BX.CrmProductEditor !== "undefined"
			? BX.CrmProductEditor.get(this.getExternalEditorId()) : null;
		if(externalEditor)
		{
			this.setExternalEditor(externalEditor);
		}
		else
		{
			this._editorCreateHandler = BX.delegate(this.onEditorCreate, this);
			BX.addCustomEvent(window, "ProductRowEditorCreated", this._editorCreateHandler);
		}

		this._editor.addModeChangeListener(this._editorModeChangeHandler);

		BX.addCustomEvent(window, "onEntityDetailsTabShow", BX.delegate(this.onTabShow, this));

	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onTabShow = function(tab)
	{
		if(tab.getId() !== "tab_products")
		{
			return;
		}

		if(this._externalEditor && !this._externalEditor.hasLayout())
		{
			this._externalEditor.layout();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.getExternalEditorId = function()
	{
		return this.getConfigStringParam("editorId", "");
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.setExternalEditor = function(editor)
	{
		if(this._externalEditor === editor)
		{
			return;
		}

		if(this._externalEditor)
		{
			this._externalEditor.setForm(null);
			BX.removeCustomEvent(this._externalEditor, "sumTotalChange", this._sumTotalChangeHandler);
			BX.removeCustomEvent(this._externalEditor, "productAdd", this._productAddHandler);
			BX.removeCustomEvent(this._externalEditor, "productChange", this._productChangeHandler);
			BX.removeCustomEvent(this._externalEditor, "productRemove", this._productRemoveHandler);
		}

		this._externalEditor = editor;

		if(this._externalEditor)
		{
			this._externalEditor.setForm(this._editor.getFormElement());
			BX.addCustomEvent(this._externalEditor, "sumTotalChange", this._sumTotalChangeHandler);
			BX.addCustomEvent(this._externalEditor, "productAdd", this._productAddHandler);
			BX.addCustomEvent(this._externalEditor, "productChange", this._productChangeHandler);
			BX.addCustomEvent(this._externalEditor, "productRemove", this._productRemoveHandler);

			this.adjustLocks();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.adjustLocks = function()
	{
		if(!this._externalEditor)
		{
			return;
		}

		if(this._externalEditor.getProductCount() > 0)
		{
			this._model.lockField("OPPORTUNITY");
		}
		else
		{
			this._model.unlockField("OPPORTUNITY");
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.adjustTotals = function(totals)
	{
		this._model.setField(
			"FORMATTED_OPPORTUNITY",
			totals["FORMATTED_SUM"],
			{ enableNotification: false }
		);

		this._model.setField(
			"FORMATTED_OPPORTUNITY_WITH_CURRENCY",
			totals["FORMATTED_SUM_WITH_CURRENCY"],
			{ enableNotification: false }
		);

		this._model.setField(
			"OPPORTUNITY",
			totals["SUM"],
			{ enableNotification: true }
		);
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorCreate = function(sender)
	{
		if(sender.getId() !== this.getExternalEditorId())
		{
			return;
		}

		BX.removeCustomEvent(window, "ProductRowEditorCreated", this._editorCreateHandler);
		delete(this._editorCreateHandler);
		this.setExternalEditor(sender);
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorModeChange = function(sender)
	{
		if(this._editor.getMode() === BX.Crm.EntityEditorMode.edit)
		{
			this._editor.addControlChangeListener(this._editorControlChangeHandler);
		}
		else
		{
			this._editor.removeControlChangeListener(this._editorControlChangeHandler);
		}

		this._isChanged = false;
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorControlChange = function(sender, params)
	{
		if(!this._externalEditor)
		{
			return;
		}

		var name = BX.prop.getString(params, "fieldName", "");
		if(name !== "CURRENCY_ID")
		{
			return;
		}

		var currencyId = BX.prop.getString(params, "fieldValue", "");
		if(currencyId !== "")
		{
			this._currencyId = currencyId;
			this._externalEditor.setCurrencyId(this._currencyId);
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductAdd = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductChange = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductRemove = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onSumTotalChange = function(totalSum, allTotals)
	{
		this.adjustTotals(
			{
				"FORMATTED_SUM_WITH_CURRENCY": allTotals["TOTAL_SUM_FORMATTED"],
				"FORMATTED_SUM": allTotals["TOTAL_SUM_FORMATTED_SHORT"],
				"SUM": allTotals["TOTAL_SUM"]
			}
		);
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.rollback = function()
	{
		var currencyId = this._model.getField("CURRENCY_ID", "");
		if(this._currencyId !== currencyId)
		{
			this._currencyId = currencyId;
			if(this._externalEditor)
			{
				this._externalEditor.setCurrencyId(this._currencyId);
			}
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onBeforeSubmit = function()
	{
		if(this._externalEditor)
		{
			this._externalEditor.handleFormSubmit();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onBeforesSaveControl = function(data)
	{
		if(this._externalEditor)
		{
			data = this._externalEditor.handleControlSave(data);
		}
		return data;
	};
	BX.Crm.EntityEditorProductRowProxy.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorProductRowProxy();
		self.initialize(id, settings);
		return self;
	}
}

//endregion

//region TOOL PANEL
if(typeof BX.Crm.EntityEditorToolPanel === "undefined")
{
	BX.Crm.EntityEditorToolPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._wrapper = null;
		this._editor = null;
		this._isVisible = false;
		this._isLocked = false;
		this._hasLayout = false;
		this._keyPressHandler = BX.delegate(this.onKeyPress, this);
	};

	BX.Crm.EntityEditorToolPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor", null);
			this._isVisible = BX.prop.getBoolean(this._settings, "visible", false);
		},
		getId: function()
		{
			return this._id;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function (container)
		{
			this._container = container;
		},
		isVisible: function()
		{
			return this._isVisible;
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			this.adjustLayout();
		},
		isLocked: function()
		{
			return this._isLocked;
		},
		setLocked: function(locked)
		{
			locked = !!locked;
			if(this._isLocked === locked)
			{
				return;
			}

			this._isLocked = locked;

			if(locked)
			{
				BX.addClass(this._editButton, "ui-btn-clock");
			}
			else
			{
				BX.removeClass(this._editButton, "ui-btn-clock");
			}
		},
		disableSaveButton: function()
		{
			if(!this._editButton)
			{
				return;
			}

			this._editButton.disabled = true;
			BX.addClass(this._editButton, 'ui-btn-disabled');
		},
		enableSaveButton: function()
		{
			if(!this._editButton)
			{
				return;
			}

			this._editButton.disabled = false;
			BX.removeClass(this._editButton, 'ui-btn-disabled');
		},
		isSaveButtonEnabled: function()
		{
			return this._editButton && !this._editButton.disabled;
		},
		layout: function()
		{
			this._editButton = BX.create("button",
				{
					props: { className: "ui-btn ui-btn-success", title: "[Ctrl+Enter]" },
					text: BX.message("CRM_EDITOR_SAVE"),
					events: { click: BX.delegate(this.onSaveButtonClick, this) }
				}
			);

			this._cancelButton = BX.create("a",
				{
					props:  { className: "ui-btn ui-btn-link", title: "[Esc]" },
					text: BX.message("CRM_EDITOR_CANCEL"),
					attrs:  { href: "#" },
					events: { click: BX.delegate(this.onCancelButtonClick, this) }
				}
			);

			this._errorContainer = BX.create("DIV", { props: { className: "crm-entity-section-control-error-block" } });
			this._errorContainer.style.maxHeight = "0";

			this._wrapper = BX.create("DIV",
				{
					props: { className: "crm-entity-wrap" },
					children :
						[
							BX.create("DIV",
								{
									props: { className: "crm-entity-section crm-entity-section-control" },
									children : [ this._editButton, this._cancelButton, this._errorContainer ]
								}
							)
						]
				}
			);

			this._container.appendChild(this._wrapper);

			this._hasLayout = true;
			this.adjustLayout();
		},
		adjustLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(!this._isVisible)
			{
				BX.removeClass(this._wrapper, "crm-section-control-active");
				BX.unbind(document, "keydown", this._keyPressHandler);
			}
			else
			{
				BX.addClass(this._wrapper, "crm-section-control-active");
				BX.bind(document, "keydown", this._keyPressHandler);
			}
		},
		getPosition: function()
		{
			return this._hasLayout ? BX.pos(this._wrapper) : null;
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.onSaveButtonClick = function(e)
	{
		if(!this._isLocked)
		{
			this._editor.saveChanged();
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.onCancelButtonClick = function(e)
	{
		if(!this._isLocked)
		{
			this._editor.cancel();
		}
		return BX.eventReturnFalse(e);
	};
	BX.Crm.EntityEditorToolPanel.prototype.onKeyPress = function(e)
	{
		if(!this._isVisible)
		{
			return;
		}

		//Emulation of dialog modal mode
		if(BX.Crm.EditorAuxiliaryDialog.hasOpenItems())
		{
			return;
		}

		if(BX.type.isFunction(BX.PopupWindowManager.isAnyPopupShown) && BX.PopupWindowManager.isAnyPopupShown())
		{
			return;
		}

		e = e || window.event;
		if (e.keyCode == 27)
		{
			//Esc pressed
			this._editor.cancel();
			BX.eventCancelBubble(e);
		}
		else if (e.keyCode == 13 && e.ctrlKey)
		{
			//Ctrl+Enter pressed
			this._editor.saveChanged();
			BX.eventCancelBubble(e);
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.addError = function(error)
	{
		this._errorContainer.appendChild(
			BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-section-control-error-text" },
					html: error
				}
			)
		);
		this._errorContainer.style.maxHeight = "";
	};
	BX.Crm.EntityEditorToolPanel.prototype.clearErrors = function()
	{
		this._errorContainer.innerHTML = "";
		this._errorContainer.style.maxHeight = "0px";
	};
	BX.Crm.EntityEditorToolPanel.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorToolPanel.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.Crm.EntityEditorToolPanel.messages) === "undefined")
	{
		BX.Crm.EntityEditorToolPanel.messages = {};
	}
	BX.Crm.EntityEditorToolPanel.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorToolPanel();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region FIELD SELECTOR
if(typeof(BX.Crm.EntityEditorFieldSelector) === "undefined")
{
	BX.Crm.EntityEditorFieldSelector = function()
	{
		this._id = "";
		this._settings = {};
		this._scheme = null;
		this._excludedNames = null;
		this._closingNotifier = null;
		this._contentWrapper = null;
		this._popup = null;
	};

	BX.Crm.EntityEditorFieldSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._scheme = BX.prop.get(this._settings, "scheme", null);
			if(!this._scheme)
			{
				throw "BX.Crm.EntityEditorFieldSelector. Parameter 'scheme' is not found.";
			}
			this._excludedNames = BX.prop.getArray(this._settings, "excludedNames", []);
			this._closingNotifier = BX.CrmNotifier.create(this);
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorFieldSelector.messages, name, name);
		},
		isSchemeElementEnabled: function(schemeElement)
		{
			var name = schemeElement.getName();
			for(var i = 0, length = this._excludedNames.length; i < length; i++)
			{
				if(this._excludedNames[i] === name)
				{
					return false;
				}
			}
			return true;
		},
		addClosingListener: function(listener)
		{
			this._closingNotifier.addListener(listener);
		},
		removeClosingListener: function(listener)
		{
			this._closingNotifier.removeListener(listener);
		},
		isOpened: function()
		{
			return this._popup && this._popup.isShown();
		},
		open: function()
		{
			if(this.isOpened())
			{
				return;
			}

			this._popup = new BX.PopupWindow(
				this._id,
				null,
				{
					autoHide: false,
					draggable: true,
					bindOptions: { forceBindPosition: false },
					closeByEsc: true,
					closeIcon: {},
					zIndex: 1,
					titleBar: BX.prop.getString(this._settings, "title", ""),
					content: this.prepareContent(),
					lightShadow : true,
					contentNoPaddings: true,
					buttons: [
						new BX.PopupWindowButton(
							{
								text : this.getMessage("select"),
								className : "ui-btn ui-btn-success",
								events:
								{
									click: BX.delegate(this.onAcceptButtonClick, this)
								}
							}
						),
						new BX.PopupWindowButtonLink(
							{
								text : this.getMessage("cancel"),
								className : "ui-btn ui-btn-link",
								events:
								{
									click: BX.delegate(this.onCancelButtonClick, this)
								}
							}
						)
					]
				}
			);

			this._popup.show();
		},
		close: function()
		{
			if(!(this._popup && this._popup.isShown()))
			{
				return;
			}

			this._popup.close();
		},
		prepareContent: function()
		{
			this._contentWrapper = BX.create("div", { props: { className: "crm-entity-field-selector-window" } });
			var container = BX.create("div", { props: { className: "crm-entity-field-selector-window-list" } });
			this._contentWrapper.appendChild(container);

			var elements = this._scheme.getElements();
			for(var i = 0; i < elements.length; i++)
			{
				var element = elements[i];
				if(!this.isSchemeElementEnabled(element))
				{
					continue;
				}

				var effectiveElements = [];
				var elementChildren = element.getElements();
				var childElement;
				for(var j = 0; j < elementChildren.length; j++)
				{
					childElement = elementChildren[j];
					if(childElement.isTransferable() && childElement.getName() !== "")
					{
						effectiveElements.push(childElement);
					}
				}

				if(effectiveElements.length === 0)
				{
					continue;
				}

				var parentName = element.getName();
				var parentTitle = element.getTitle();

				container.appendChild(
					BX.create(
						"div",
						{
							attrs: { className: "crm-entity-field-selector-window-list-caption" },
							text: parentTitle
						}
					)
				);

				for(var k = 0; k < effectiveElements.length; k++)
				{
					childElement = effectiveElements[k];

					var childElementName = childElement.getName();
					var childElementTitle = childElement.getTitle();

					var itemId = parentName + "\\" + childElementName;
					var itemWrapper = BX.create(
						"div",
						{
							attrs: { className: "crm-entity-field-selector-window-list-item" }
						}
					);
					container.appendChild(itemWrapper);

					itemWrapper.appendChild(
						BX.create(
							"input",
							{
								attrs:
								{
									id: itemId,
									type: "checkbox",
									className: "crm-entity-field-selector-window-list-checkbox"
								}
							}
						)
					);

					itemWrapper.appendChild(
						BX.create(
							"label",
							{
								attrs:
								{
									for: itemId,
									className: "crm-entity-field-selector-window-list-label"
								},
								text: childElementTitle
							}
						)
					);
				}
			}
			return this._contentWrapper;
		},
		getSelectedItems: function()
		{
			if(!this._contentWrapper)
			{
				return [];
			}

			var results = [];
			var checkBoxes = this._contentWrapper.querySelectorAll("input.crm-entity-field-selector-window-list-checkbox");
			for(var i = 0, length = checkBoxes.length; i < length; i++)
			{
				var checkBox = checkBoxes[i];
				if(checkBox.checked)
				{
					var parts = checkBox.id.split("\\");
					if(parts.length >= 2)
					{
						results.push({ sectionName: parts[0], fieldName: parts[1] });
					}
				}
			}

			return results;
		},
		onAcceptButtonClick: function()
		{
			this._closingNotifier.notify([ { isCanceled: false, items: this.getSelectedItems() } ]);
			this.close();
		},
		onCancelButtonClick: function()
		{
			this._closingNotifier.notify([{ isCanceled: true }]);
			this.close();
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._contentWrapper = null;
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			if(!this._popup)
			{
				return;
			}

			this._contentWrapper = null;
			this._popup = null;
		}
	};

	if(typeof(BX.Crm.EntityEditorFieldSelector.messages) === "undefined")
	{
		BX.Crm.EntityEditorFieldSelector.messages = {};
	}

	BX.Crm.EntityEditorFieldSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFieldSelector(id, settings);
		self.initialize(id, settings);
		return self;
	}
}
//endregion

//region USER SELECTOR
if(typeof(BX.Crm.EntityEditorUserSelector) === "undefined")
{
	BX.Crm.EntityEditorUserSelector = function()
	{
		this._id = "";
		this._settings = {};
	};

	BX.Crm.EntityEditorUserSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._isInitialized = false;
		},
		getId: function()
		{
			return this._id;
		},
		open: function(anchor)
		{
			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				return;
			}

			if(!this._isInitialized)
			{
				BX.SocNetLogDestination.init(
					{
						name: this._id,
						extranetUser:  false,
						userSearchArea: "I",
						bindMainPopup: { node: anchor, offsetTop: "5px", offsetLeft: "15px" },
						callback: { select : BX.delegate(this.onSelect, this) },
						showSearchInput: true,
						departmentSelectDisable: true,
						items:
						{
							users: BX.Crm.EntityEditorUserSelector.users,
							groups: {},
							sonetgroups: {},
							department: BX.Crm.EntityEditorUserSelector.department,
							departmentRelation : BX.SocNetLogDestination.buildDepartmentRelation(BX.Crm.EntityEditorUserSelector.department)
						},
						itemsLast: BX.Crm.EntityEditorUserSelector.last,
						itemsSelected: {},
						isCrmFeed: false,
						useClientDatabase: false,
						destSort: {},
						allowAddUser: false,
						allowSearchCrmEmailUsers: false,
						allowUserSearch: true
					}
				);
				this._isInitialized = true;
			}

			BX.SocNetLogDestination.openDialog(this._id, { bindNode: anchor });
			this._mainWindow = BX.SocNetLogDestination.containerWindow;
		},
		close: function()
		{
			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				BX.SocNetLogDestination.closeDialog();
				this._mainWindow = null;
				this._isInitialized = false;
			}

		},
		onSelect: function(item, type, search, bUndeleted)
		{
			if(type !== "users")
			{
				return;
			}

			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		}
	};

	BX.Crm.EntityEditorUserSelector.items = {};
	BX.Crm.EntityEditorUserSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserSelector(id, settings);
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}
//endregion

//region CRM SELECTOR
if(typeof(BX.Crm.EntityEditorCrmSelector) === "undefined")
{
	BX.Crm.EntityEditorCrmSelector = function()
	{
		this._id = "";
		this._settings = {};
		this._entityTypeIds = [];
		this._supportedItemTypes = {};
	};

	BX.Crm.EntityEditorCrmSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._isInitialized = false;

			this._entityTypeIds = BX.prop.getArray(this._settings, "entityTypeIds", []);
			this._supportedItemTypes = [];
			for(var i = 0, l = this._entityTypeIds.length; i < l; i++)
			{
				var entityTypeId = this._entityTypeIds[i];
				if(entityTypeId === BX.CrmEntityType.enumeration.contact)
				{
					this._supportedItemTypes.push({ name: "contacts", altName: "CRMCONTACT" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.company)
				{
					this._supportedItemTypes.push({ name: "companies", altName: "CRMCOMPANY" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.lead)
				{
					this._supportedItemTypes.push({ name: "leads", altName: "CRMLEAD" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.deal)
				{
					this._supportedItemTypes.push({ name: "deals", altName: "CRMDEAL" });
				}
			}
		},
		getId: function()
		{
			return this._id;
		},
		isOpened: function()
		{
			return BX.SocNetLogDestination.isOpenDialog();
		},
		open: function(anchor)
		{
			if(this.isOpened())
			{
				return;
			}

			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				return;
			}

			if(!this._isInitialized)
			{
				var items = {};
				var itemsLast = {};
				var allowedCrmTypes = [];

				for(var i = 0, l = this._supportedItemTypes.length; i < l; i++)
				{
					var typeInfo = this._supportedItemTypes[i];
					items[typeInfo.name] = BX.Crm.EntityEditorCrmSelector[typeInfo.name];
					itemsLast[typeInfo.name] = BX.Crm.EntityEditorCrmSelector[typeInfo.name + "Last"];
					allowedCrmTypes.push(typeInfo.altName);
				}

				itemsLast["crm"] = {};

				var initParams =
				{
					name: this._id,
					extranetUser:  false,
					bindMainPopup: { node: anchor, offsetTop: "20px", offsetLeft: "20px" },
					callback: { select : BX.delegate(this.onSelect, this) },
					showSearchInput: true,
					departmentSelectDisable: true,
					items: items,
					itemsLast: itemsLast,
					itemsSelected: {},
					useClientDatabase: false,
					destSort: {},
					allowAddUser: false,
					allowSearchCrmEmailUsers: false,
					allowUserSearch: false,
					isCrmFeed: true,
					CrmTypes: allowedCrmTypes
				};

				if(BX.prop.getBoolean(this._settings, "enableMyCompanyOnly", false))
				{
					initParams["enableMyCrmCompanyOnly"] = true;
				}

				BX.SocNetLogDestination.init(initParams);
				this._isInitialized = true;
			}

			BX.SocNetLogDestination.openDialog(this._id, { bindNode: anchor });
			this._mainWindow = BX.SocNetLogDestination.containerWindow;
		},
		close: function()
		{
			if(!this.isOpened())
			{
				return;
			}

			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				BX.SocNetLogDestination.closeDialog();
				this._mainWindow = null;
			}
		},
		onSelect: function(item, type, search, bUndeleted, name, state)
		{
			if(state !== "select")
			{
				return;
			}

			var isSupported = false;
			for(var i = 0, l = this._supportedItemTypes.length; i < l; i++)
			{
				var typeInfo = this._supportedItemTypes[i];
				if(typeInfo.name === type)
				{
					isSupported = true;
					break;
				}
			}

			if(!isSupported)
			{
				return;
			}

			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		}
	};

	if(typeof(BX.Crm.EntityEditorCrmSelector.contacts) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.contacts = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.contactsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.contactsLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.companies) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.companies = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.companiesLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.companiesLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.leads) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.leads = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.leadsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.leadsLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.deals) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.deals = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.dealsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.dealsLast = {};
	}

	BX.Crm.EntityEditorCrmSelector.items = {};
	BX.Crm.EntityEditorCrmSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorCrmSelector(id, settings);
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}
//endregion

//region BIZPROC
if(typeof BX.Crm.EntityBizprocManager === "undefined")
{
	BX.Crm.EntityBizprocManager = function()
	{
		this._id = "";
		this._settings = {};
		this._moduleId = "";
		this._entity = "";
		this._documentType = "";
		this._autoExecuteType = 0;

		this._containerId = null;
		this._fieldName = null;

		this._validParameters = null;
		this._formInput = null;

		this._editor = null;
		this._starter = null;
	};
	BX.Crm.EntityBizprocManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._hasParameters = BX.prop.getBoolean(this._settings, "hasParameters", false);
			this._moduleId = BX.prop.getString(this._settings, "moduleId", "");
			this._entity = BX.prop.getString(this._settings, "entity", "");
			this._documentType = BX.prop.getString(this._settings, "documentType", "");
			this._autoExecuteType = BX.prop.getInteger(this._settings, "autoExecuteType", 0);
			this._containerId = BX.prop.getString(this._settings, "containerId", '');
			this._fieldName = BX.prop.getString(this._settings, "fieldName", '');
			this._contentNode = this._containerId ? BX(this._containerId) : null;

			if (this._hasParameters)
			{
				this._starter = new BX.Bizproc.Starter({
					moduleId: this._moduleId,
					entity: this._entity,
					documentType: this._documentType
				});
			}
		},
		/**
		 *
		 * @param {BX.Crm.EntityValidationResult} result
		 * @returns {BX.Promise}
		 */
		onBeforeSave: function(result)
		{
			var promise = new BX.Promise();

			var deferredWaiter = function()
			{
				window.setTimeout(
					BX.delegate(
						function()
						{
							promise.fulfill();
						},
						this
					),
					0
				);
			};

			if(result.getStatus() && this._hasParameters && this._validParameters === null)
			{
				try
				{
					this._starter.showAutoStartParametersPopup(
						this._autoExecuteType,
						{
							contentNode: this._contentNode,
							callback: this.onFillParameters.bind(this, promise)
						}
					);
					this._contentNode = null;
				}
				catch (e)
				{
					if ('console' in window)
					{
						window.console.log('Error occurred when bizproc popup is going to show', e);
					}
					deferredWaiter();
				}
			}
			else
			{
				deferredWaiter();
			}

			return promise;
		},

		onAfterSave: function()
		{
			this._validParameters = null;
		},

		onFillParameters: function(promise, data)
		{
			this._validParameters = data.parameters;

			if (!this._formInput && this._editor)
			{
				var form = this._editor.getFormElement();
				this._formInput = BX.create("input", { props: { type: "hidden", name: this._fieldName } });
				form.appendChild(this._formInput);
			}

			if (this._formInput)
			{
				this._formInput.value = this._validParameters;
			}

			promise.fulfill();
		}
	};
	if(typeof(BX.Crm.EntityBizprocManager.messages) === "undefined")
	{
		BX.Crm.EntityBizprocManager.messages = {};
	}
	BX.Crm.EntityBizprocManager.items = {};
	BX.Crm.EntityBizprocManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityBizprocManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

if(typeof BX.Crm.EntityRestPlacementManager === "undefined")
{
	BX.Crm.EntityRestPlacementManager = function()
	{
		this._id = "";
		this._entity = "";

		this._editor = null;
	};

	BX.Crm.EntityRestPlacementManager.items = {};
	BX.Crm.EntityRestPlacementManager.prototype = {
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entity = this.getSetting("entity");

			var bottomButton = BX(this.getSetting("bottom_button_id"));
			if(bottomButton)
			{
				BX.bind(bottomButton, 'click', BX.proxy(this.openMarketplace, this));
			}

			BX.defer(this.initializeInterface, this)();
		},

		openMarketplace: function()
		{
			BX.rest.Marketplace.open({
				PLACEMENT: this.getSetting("placement")
			});
		},

		getSetting: function(name)
		{
			return BX.prop.getString(this._settings, name, '')
		},

		initializeInterface: function()
		{
			if(!!BX.rest && !!BX.rest.AppLayout)
			{
				var PlacementInterface = BX.rest.AppLayout.initializePlacement('CRM_' + this._entity + '_DETAIL_TAB');

				var entityTypeId = this._editor._entityTypeId, entityId = this._editor._entityId;

				PlacementInterface.prototype.resizeWindow = function(params, cb)
				{
					var f = BX(this.params.layoutName);
					params.height = parseInt(params.height);

					if(!!params.height)
					{
						f.style.height = params.height + 'px';
					}

					var p = BX.pos(f);
					cb({width: p.width, height: p.height});
				};

				PlacementInterface.prototype.reloadData = function(params, cb)
				{
					BX.Crm.EntityEvent.fireUpdate(entityTypeId, entityId, '');
					cb();
				};
			}
		}
	};

	BX.Crm.EntityRestPlacementManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityRestPlacementManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

//endregion

/* End */
;
; /* Start:"a:4:{s:4:"full";s:97:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js?165484154145567";s:6:"source";s:77:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.js";s:3:"min";s:81:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js";s:3:"map";s:81:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.map.js";}"*/
BX.namespace("BX.Main");if(typeof BX.Main.interfaceButtons==="undefined"){BX.Main.interfaceButtons=function(t,e){this.classItem="main-buttons-item";this.classItemSublink="main-buttons-item-sublink";this.classItemText="main-buttons-item-text";this.classItemCounter="main-buttons-item-counter";this.classItemIcon="main-buttons-item-icon";this.classItemMore="main-buttons-item-more";this.classOnDrag="main-buttons-drag";this.classDropzone="main-buttons-submenu-dropzone";this.classSeporator="main-buttons-submenu-separator";this.classHiddenLabel="main-buttons-hidden-label";this.classSubmenuItem="main-buttons-submenu-item";this.classItemDisabled="main-buttons-disabled";this.classItemOver="over";this.classItemActive="main-buttons-item-active";this.classSubmenu="main-buttons-submenu";this.classSecret="secret";this.classItemLocked="locked";this.submenuIdPrefix="main_buttons_popup_";this.childMenuIdPrefix="main_buttons_popup_child_";this.submenuWindowIdPrefix="menu-popup-";this.classSettingMenuItem="main-buttons-submenu-setting";this.classEditState="main-buttons-edit";this.classEditItemButton="main-buttons-item-edit-button";this.classDragItemButton="main-buttons-item-drag-button";this.classSettingsApplyButton="main-buttons-submenu-settings-apply";this.classSettingsResetButton="main-buttons-submenu-settings-reset";this.classSetHome="main-buttons-set-home";this.classSetHide="main-buttons-set-hide";this.classManage="main-buttons-manage";this.classContainer="main-buttons";this.classSubmenuNoHiddenItem="main-buttons-submenu-item-no-hidden";this.classDefaultSubmenuItem="menu-popup-item";this.classInner="main-buttons-inner-container";this.listContainer=null;this.pinContainer=null;this.dragItem=null;this.overItem=null;this.moreButton=null;this.messages=null;this.licenseParams=null;this.ajaxSettings=null;this.isSubmenuShown=false;this.isSubmenuShownOnDragStart=false;this.isSettingsEnabled=true;this.containerId=e.containerId;this.tmp={};this.init(t,e);return{getItemById:BX.delegate(this.getItemById,this),getAllItems:BX.delegate(this.getAllItems,this),getHiddenItems:BX.delegate(this.getHiddenItems,this),getVisibleItems:BX.delegate(this.getVisibleItems,this),getDisabledItems:BX.delegate(this.getDisabledItems,this),getMoreButton:BX.delegate(this.getMoreButton,this),adjustMoreButtonPosition:BX.delegate(this.adjustMoreButtonPosition,this),getSubmenu:BX.delegate(this.getSubmenu,this),showSubmenu:BX.delegate(this.showSubmenu,this),closeSubmenu:BX.delegate(this.closeSubmenu,this),refreshSubmenu:BX.delegate(this.refreshSubmenu,this),getCurrentSettings:BX.delegate(this.getCurrentSettings,this),saveSettings:BX.delegate(this.saveSettings,this),setCounterValueByItemId:BX.delegate(this.setCounterValueByItemId,this),getCounterValueByItemId:BX.delegate(this.getCounterValueByItemId,this),updateCounter:BX.delegate(this.updateCounter,this),getActive:BX.delegate(this.getActive,this),isEditEnabled:BX.delegate(this.isEditEnabled,this),isActiveInMoreMenu:BX.delegate(this.isActiveInMoreMenu,this),isSettingsEnabled:this.isSettingsEnabled,classes:{item:this.classItem,itemText:this.classItemText,itemCounter:this.classItemCounter,itemIcon:this.classItemIcon,itemDisabled:this.classItemDisabled,itemOver:this.classItemOver,itemActive:this.classItemActive,itemLocked:this.classItemLocked,submenu:this.classSubmenu,submenuItem:this.classSubmenuItem,containerOnDrag:this.classOnDrag,classSettingMenuItem:this.classSettingMenuItem},itemsContainer:this.listContainer,itemsContainerId:this.listContainer.id}};BX.Main.interfaceButtons.prototype={init:function(t,e){this.listContainer=BX(this.getId());if(!BX.type.isPlainObject(e)){throw"BX.MainButtons: params is not Object"}if(!("containerId"in e)||!BX.type.isNotEmptyString(e.containerId)){throw"BX.MainButtons: containerId not set in params"}if(!BX.type.isDomNode(this.listContainer)){throw"BX.MainButtons: #"+e.containerId+" is not dom node"}if("classes"in e&&BX.type.isPlainObject(e.classes)){this.setCustomClasses(e.classes)}if("messages"in e&&BX.type.isPlainObject(e.messages)){this.setMessages(e.messages)}if("licenseWindow"in e&&BX.type.isPlainObject(e.licenseWindow)){this.setLicenseWindowParams(e.licenseWindow)}if("disableSettings"in e&&e.disableSettings==="true"){this.isSettingsEnabled=false;this.visibleControlMoreButton()}this.initSaving(e.ajaxSettings);this.moreButton=this.getMoreButton();this.listChildItems={};if(this.isSettingsEnabled){this.dragAndDropInit()}this.adjustMoreButtonPosition();this.bindOnClickOnMoreButton();this.bindOnScrollWindow();this.setContainerHeight();BX.bind(this.getContainer(),"click",BX.delegate(this._onDocumentClick,this));BX.addCustomEvent("onPullEvent-main",BX.delegate(this._onPush,this));this.updateMoreButtonCounter();if(this.isActiveInMoreMenu()){this.activateItem(this.moreButton)}var i=this.getVisibleItems();var s=BX.type.isArray(i)&&i.length>0?i[0]:null;var n=BX.Buttons.Utils.getByTag(s,"a");if(!BX.type.isDomNode(n)){return}var a=n.getAttribute("href");if(a.charAt(0)==="?"){a=n.pathname+n.search}if(!this.lastHomeLink){this.lastHomeLink=a}this.bindOnResizeFrame();var o=Array.from(this.container.querySelectorAll(".main-buttons-item-child-button"));o.forEach(function(t){var e=t.closest(".main-buttons-item-child");if(e.dataset.isOpened){this.realChildButton=e;var i=e.closest(".main-buttons-item-child-button-cloned");if(i){this.clonedChildButton=i}}BX.Event.bind(t,"click",this.onShowChildButtonClick.bind(this))},this)},calculateChildListWidth:function(){if(this.realChildButton){var t=this.realChildButton.querySelectorAll(".main-buttons-item-child-list-inner .main-buttons-item");var e=10;return Array.from(t).reduce(function(t,e){var i=BX.Text.toNumber(BX.Dom.style(e,"width"));var s=BX.Text.toNumber(BX.Dom.style(e,"margin-left"));var n=BX.Text.toNumber(BX.Dom.style(e,"margin-right"));return t+i+s+n},e)}return 0},onShowChildButtonClick:function(t){t.preventDefault();if(!this.realChildButton){this.realChildButton=t.currentTarget.closest(".main-buttons-item-child")}var e=this.realChildButton.querySelector(".main-buttons-item-child-list");var i=BX.Dom.attr(this.realChildButton,"data-child-items");var s=BX.Dom.attr(this.realChildButton,"data-is-opened");var n={};if(s){BX.Dom.attr(this.realChildButton,"data-is-opened",null);i.forEach(function(t){var e=this.getContainer().querySelector('[data-id="'+t+'"]');BX.Dom.style(e,"display",null);if(t.hasOwnProperty("PARENT_ITEM_ID")){n[t["PARENT_ITEM_ID"]]="N"}},this);if(this.clonedChildButton){BX.Dom.remove(this.clonedChildButton)}BX.Dom.style(e,{overflow:null,"max-width":null});n=JSON.stringify(n);this.saveOptions("expanded_lists",n)}else{BX.Dom.attr(this.realChildButton,"data-is-opened",true);BX.Dom.style(e,"max-width",this.calculateChildListWidth()+"px");this.cloneChildButton(this.realChildButton);i.forEach(function(t){var e=this.getContainer().querySelector('[data-id="'+t+'"]');BX.Dom.insertBefore(e,this.realChildButton);BX.Dom.style(e,"display","inline-block");if(t.hasOwnProperty("PARENT_ITEM_ID")){n[t["PARENT_ITEM_ID"]]="Y"}},this);setTimeout(function(){BX.Dom.style(e,"overflow","unset")}.bind(this),200);n=JSON.stringify(n);this.saveOptions("expanded_lists",n)}setTimeout(function(){this._onResizeHandler()}.bind(this),200)},cloneChildButton:function(t){this.clonedChildButton=BX.Runtime.clone(t);var e=this.clonedChildButton.querySelector(".main-buttons-item-child-list");if(e){BX.Dom.remove(e)}BX.Dom.addClass(this.clonedChildButton,"main-buttons-item-child-button-cloned");BX.Dom.style(this.clonedChildButton,"transition","none");BX.Dom.insertBefore(this.clonedChildButton,t);BX.Event.bind(this.clonedChildButton,"click",this.onShowChildButtonClick.bind(this));setTimeout(function(){BX.Dom.style(this.clonedChildButton,"transition",null)}.bind(this))},_onDocumentClick:function(t){var e=this.getItem(t);var i,s,n,a,o,r;if(this.isDragButton(t.target)){t.preventDefault();t.stopPropagation()}if(BX.type.isDomNode(e)){if(this.isSettings(e)){this.enableEdit();BX.hide(this.getSettingsButton());BX.show(this.getSettingsApplyButton());return false}if(this.isApplySettingsButton(e)){t.preventDefault();t.stopPropagation();this.disableEdit();BX.show(this.getSettingsButton());BX.hide(this.getSettingsApplyButton());return false}if(this.isResetSettingsButton(e)){this.resetSettings();return false}if(this.isLocked(e)){t.preventDefault();this.showLicenseWindow();return false}if(this.isEditButton(t.target)){var u,h;t.preventDefault();t.stopPropagation();if(this.isSubmenuItem(e)){e=this.getItemAlias(e)}try{u=JSON.parse(BX.data(e,"item"))}catch(t){}h=this.getItemEditMenu();if(h&&h.popupWindow.isShown()&&this.lastEditNode===e){h.popupWindow.close()}else{this.showItemEditMenu(u,t.target)}this.lastEditNode=e;return false}if(this.isSetHide(e)){o=this.getVisibleItems();r=BX.type.isArray(o)?o.length:null;a=this.editItemData.ID.replace(this.listContainer.id+"_","");s=this.getItemById(a);n=this.getItemAlias(s);s=this.isVisibleItem(s)?s:n;if(this.isDisabled(n)){this.enableItem(n)}else if(!this.isDisabled(n)&&r>2){this.disableItem(n)}if(r===2){BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onHideLastVisibleItem",[s,this])}this.refreshSubmenu();this.saveSettings();this.adjustMoreButtonPosition();if(this.isEditEnabled()){this.enableEdit();BX.hide(this.getSettingsButton());BX.show(this.getSettingsApplyButton())}this.editMenu.popupWindow.close();return false}if(this.isSetHome(e)){a=this.editItemData.ID.replace(this.listContainer.id+"_","");s=this.getItemById(a);n=this.getItemAlias(s);if(this.isDisabled(n)){this.enableItem(n)}this.listContainer.insertBefore(s,BX.firstChild(this.listContainer));this.adjustMoreButtonPosition();this.refreshSubmenu();this.saveSettings();if(this.isEditEnabled()){this.enableEdit();BX.hide(this.getSettingsButton());BX.show(this.getSettingsApplyButton())}this.editMenu.popupWindow.close();return false}if(!this.isSublink(t.target)){i=this.dataValue(e,"onclick");if(BX.type.isNotEmptyString(i)){t.preventDefault();this.execScript(i)}}}if(this.isEditEnabled()){this.getSubmenu().popupWindow.setAutoHide(false)}},isActiveInMoreMenu:function(){var t=this.getHiddenItems();var e=this.getDisabledItems();var i=t.concat(e);return i.some(function(t){var e;try{e=JSON.parse(BX.data(t,"item"))}catch(t){}return BX.type.isPlainObject(e)&&("IS_ACTIVE"in e&&e.IS_ACTIVE===true||e.IS_ACTIVE==="true"||e.IS_ACTIVE==="Y")},this)},_onPush:function(t,e){if(t==="user_counter"&&e&&BX.message("SITE_ID")in e){var i=e[BX.message("SITE_ID")];for(var s in i){if(i.hasOwnProperty(s)){this.updateCounter(s,i[s])}}}},bindOnScrollWindow:function(){BX.bind(window,"scroll",BX.delegate(this._onScroll,this))},getActive:function(){var t=this.getAllItems();var e,i;var s=null;if(BX.type.isArray(t)){t.forEach(function(t){try{e=JSON.parse(BX.data(t,"item"))}catch(t){e=null}if(BX.type.isPlainObject(e)&&"IS_ACTIVE"in e&&(e.IS_ACTIVE===true||e.IS_ACTIVE==="true"||e.IS_ACTIVE==="Y")){s=e}},this)}if(BX.type.isPlainObject(s)){i=BX(s.ID);if(BX.type.isDomNode(i)){s.NODE=i}else{s.NODE=null}}return s},isSetHome:function(t){return BX.hasClass(t,this.classSetHome)},isSetHide:function(t){return BX.hasClass(t,this.classSetHide)},getSettingsButton:function(){return BX.Buttons.Utils.getByClass(this.getSubmenuContainer(),this.classSettingMenuItem)},getSettingsApplyButton:function(){return BX.Buttons.Utils.getByClass(this.getSubmenuContainer(),this.classSettingsApplyButton)},isApplySettingsButton:function(t){return BX.hasClass(t,this.classSettingsApplyButton)},enableEdit:function(){var t=this.getSubmenu();if(t&&"popupWindow"in t){t.popupWindow.setAutoHide(false)}BX.addClass(this.listContainer,this.classEditState);BX.addClass(this.getSubmenuContainer(),this.classEditState);this.isEditEnabledState=true},disableEdit:function(){var t=this.getSubmenu();if(t&&"popupWindow"in t){t.popupWindow.setAutoHide(true)}BX.removeClass(this.listContainer,this.classEditState);BX.removeClass(this.getSubmenuContainer(),this.classEditState);this.isEditEnabledState=false},isEditEnabled:function(){return this.isEditEnabledState},showItemEditMenu:function(t,e){if(BX.type.isPlainObject(t)&&"ID"in t){var i=[this.listContainer.id,"_edit_item"].join("");var s=BX.PopupMenu.getMenuById(i);if(s){BX.PopupMenu.destroy(i)}s=this.createItemEditMenu(t,i,e);s.popupWindow.show()}},getContainer:function(){if(!BX.type.isDomNode(this.container)){this.container=BX(this.containerId).parentNode}return this.container},getItemEditMenu:function(){return BX.PopupMenu.getMenuById([this.listContainer.id,"_edit_item"].join(""))},createItemEditMenu:function(t,e,i){var s;var n=[{text:this.message("MIB_SET_HOME"),className:"main-buttons-set-home menu-popup-no-icon"}];var a=t.ID.replace(this.listContainer.id+"_","");var o=this.getItemById(a);if(this.isDisabled(o)){n.push({text:this.message("MIB_SET_SHOW"),className:"main-buttons-set-hide menu-popup-no-icon"})}else{n.push({text:this.message("MIB_SET_HIDE"),className:"main-buttons-set-hide menu-popup-no-icon"})}var r=BX.pos(i);var u={menuId:e,anchor:i,menuItems:n,settings:{autoHide:true,offsetTop:0,offsetLeft:r.width/2,zIndex:20,angle:{position:"top",offset:r.width/2}}};s=BX.PopupMenu.create(u.menuId,u.anchor,u.menuItems,u.settings);if(this.isVisibleItem(o)){t.NODE=o}else{t.NODE=this.getItemAlias(o)}this.editItemData=t;if("menuItems"in s&&BX.type.isArray(s.menuItems)){s.menuItems.forEach(function(t){BX.bind(t.layout.item,"click",BX.delegate(this._onDocumentClick,this))},this)}BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onBeforeCreateEditMenu",[s,t,this]);this.editMenu=s;return s},setHome:function(){var t=this.getVisibleItems();var e=BX.type.isArray(t)&&t.length>0?t[0]:null;var i=BX.Buttons.Utils.getByTag(e,"a");if(!BX.type.isDomNode(i)){return}var s=i.getAttribute("href");if(s.charAt(0)==="?"){s=i.pathname+i.search}if(!this.lastHomeLink){this.lastHomeLink=s}if(this.lastHomeLink!==s){this.saveOptions("firstPageLink",s);BX.onCustomEvent("BX.Main.InterfaceButtons:onFirstItemChange",[s,e])}this.lastHomeLink=s},isEditButton:function(t){return BX.hasClass(t,this.classEditItemButton)},isDragButton:function(t){return BX.hasClass(t,this.classDragItemButton)},isResetSettingsButton:function(t){return BX.hasClass(t,this.classSettingsResetButton)},getContainerHeight:function(){var t=this.getAllItems().map(function(t){var e=getComputedStyle(t);return BX.height(t)+parseInt(e.marginTop)+parseInt(e.marginBottom)});return Math.max.apply(Math,t)},setContainerHeight:function(){var t=this.getContainerHeight();var e=8;BX.height(this.listContainer,t-e)},setLicenseWindowParams:function(t){this.licenseParams=t||{}},message:function(t){var e;try{e=this.messages[t]}catch(t){e=""}return e},setCustomClasses:function(t){if(!BX.type.isPlainObject(t)){return}this.classItem=t.item||this.classItem;this.classItemSublink=t.itemSublink||this.classItemSublink;this.classItemText=t.itemText||this.classItemText;this.classItemCounter=t.itemCounter||this.classItemCounter;this.classItemIcon=t.itemIcon||this.classItemIcon;this.classItemMore=t.itemMore||this.classItemMore;this.classItemOver=t.itemOver||this.classItemOver;this.classItemActive=t.itemActive||this.classItemActive;this.classItemDisabled=t.itemDisabled||this.classItemDisabled;this.classOnDrag=t.onDrag||this.classOnDrag;this.classDropzone=t.dropzone||this.classDropzone;this.classSeporator=t.separator||this.classSeporator;this.classSubmenuItem=t.submenuItem||this.classSubmenuItem;this.classSubmenu=t.submenu||this.classSubmenu;this.classSecret=t.secret||this.classSecret;this.classItemLocked=t.itemLocked||this.classItemLocked},setMessages:function(t){if(!BX.type.isPlainObject(t)){return}this.messages=t},makeFullItemId:function(t){if(!BX.type.isNotEmptyString(t)){return}return[this.listContainer.id,t.replace("-","_")].join("_")},getItemById:function(t){var e=null;var i;if(BX.type.isNotEmptyString(t)){i=this.makeFullItemId(t);e=BX.Buttons.Utils.getBySelector(this.listContainer,"#"+i)}return e},getItemCounterObject:function(t){var e=null;if(BX.type.isDomNode(t)){e=BX.Buttons.Utils.getByClass(t,this.classItemCounter)}return e},setCounterValue:function(t,e){var i=this.getItemCounterObject(t);if(BX.type.isDomNode(i)){i.innerText=e>99?"99+":e>0?e:"";t.dataset.counter=e}this.updateMoreButtonCounter()},updateCounter:function(t,e){if(t.indexOf("crm")===0&&e<0){return}var i,s,n;var a=null;var o=this.getAllItems();if(BX.type.isArray(o)){o.forEach(function(e){try{s=JSON.parse(BX.data(e,"item"))}catch(t){s={}}if(BX.type.isPlainObject(s)&&"COUNTER_ID"in s&&s.COUNTER_ID===t){a=e}},this)}i=this.getItemCounterObject(a);if(BX.type.isDomNode(i)){a=this.getItem(i);i.innerText=e>99?"99+":e>0?e:"";a.dataset.counter=e}n=this.getItemAlias(a);if(BX.type.isDomNode(n)){i=this.getItemCounterObject(n);if(BX.type.isDomNode(i)){i.innerText=e>99?"99+":e>0?e:"";n.dataset.counter=e}}this.updateMoreButtonCounter()},setCounterValueByItemId:function(t,e){var i=e!==null?parseFloat(e):null;var s,n;if(!BX.type.isNotEmptyString(t)){throw"Bad first arg. Need string as item id"}if(i!==null&&!BX.type.isNumber(i)){throw"Bad two arg. Need number counter value - Integer, Float or string with number"}s=this.getItemById(t);if(!BX.type.isDomNode(s)){console.info("Not found node with id #"+t);return}n=this.getItemAlias(s);this.setCounterValue(s,i);this.setCounterValue(n,i)},getCounterValueByItemId:function(t){var e,i;var s=NaN;if(!BX.type.isNotEmptyString(t)){throw"Bad first arg. Need string item id"}else{e=this.getItemById(t);s=this.dataValue(e,"counter");s=parseFloat(s);if(!BX.type.isNumber(s)){i=this.getItemCounterObject(e);s=parseFloat(i.innerText)}}return s},setMoreButtonCounter:function(t){var e=this.getItemCounterObject(this.moreButton);var i=t>99?"99+":t>0?t:"";i=parseInt(i);i=BX.type.isNumber(i)?i:"";e.innerText=i},bindOnClickOnMoreButton:function(){BX.bind(this.moreButton,"click",BX.delegate(this._onClickMoreButton,this))},bindOnResizeFrame:function(){window.frames["maininterfacebuttonstmpframe-"+this.getId()].onresize=BX.throttle(this._onResizeHandler,20,this)},getId:function(){return BX.Buttons.Utils.getByClass(this.getContainer(),this.classInner).id},getAllItems:function(){return BX.Buttons.Utils.getByClass(this.listContainer,this.classItem,true)},getVisibleItems:function(){var t=this.getAllItems();var e=this;var i=[];if(t&&t.length){i=t.filter(function(t){return e.isVisibleItem(t)&&!e.isDisabled(t)})}return i},getHiddenItems:function(){var t=this.getAllItems();var e=[];var i=this;if(t&&t.length){e=t.filter(function(t){return!i.isVisibleItem(t)&&!i.isDisabled(t)})}return e},getDisabledItems:function(){return this.getAllItems().filter(function(t){return this.isDisabled(t)},this)},getMoreButton:function(){var t=null;this.getAllItems().forEach(function(e){!t&&BX.hasClass(e,this.classItemMore)&&(t=e)},this);return t},getLastVisibleItem:function(){var t=this.getVisibleItems();var e=null;if(BX.type.isArray(t)&&t.length){e=t[t.length-1]}if(!BX.type.isDomNode(e)){e=null}return e},adjustMoreButtonPosition:function(){var t=this.getLastVisibleItem();var e=this.isMoreButton(t);if(!e&&t.parentNode===this.listContainer){this.listContainer.insertBefore(this.moreButton,t)}this.updateMoreButtonCounter()},getSubmenuId:function(t){var e="";if(BX.type.isDomNode(this.listContainer)&&BX.type.isNotEmptyString(this.listContainer.id)){e=this.submenuIdPrefix+this.listContainer.id}if(t){e=this.submenuWindowIdPrefix+e}return e},getChildMenuId:function(){var t="";if(BX.type.isDomNode(this.listContainer)&&BX.type.isNotEmptyString(this.listContainer.id)){t=this.childMenuIdPrefix+this.listContainer.id}return t},getSubmenuItemText:function(t){var e,i,s;if(!BX.type.isDomNode(t)){return null}e=this.findChildrenByClassName(t,this.classItemText);i=this.findChildrenByClassName(t,this.classItemCounter);if(BX.type.isDomNode(i)&&BX.type.isDomNode(e)){i.dataset.counter=this.dataValue(t,"counter");s=e.outerHTML+i.outerHTML}else{e=this.dataValue(t,"text");i=this.dataValue(t,"counter");s=e}return s},getChildMenuItemText:function(t){var e,i,s;if(!BX.type.isDomNode(t)){return null}e=this.findChildrenByClassName(t,this.classItemText);i=this.findChildrenByClassName(t,this.classItemCounter);if(BX.type.isDomNode(i)&&BX.type.isDomNode(e)){i.dataset.counter=this.dataValue(t,"counter");s=e.outerHTML+i.outerHTML}else{e=this.dataValue(t,"text");s=e}return s},getLockedClass:function(t){var e="";if(BX.type.isDomNode(t)&&this.isLocked(t)){e=this.classItemLocked}return e},getSubmenuItems:function(){var t=this.getAllItems();var e=this.getHiddenItems();var i=this.getDisabledItems();var s=[];var n,a;if(t.length){t.forEach(function(t){if(e.indexOf(t)===-1&&i.indexOf(t)===-1){s.push({html:this.getSubmenuItemText(t),href:this.dataValue(t,"url"),onclick:this.dataValue(t,"onclick"),title:t.getAttribute("title"),className:[this.classSubmenuItem,this.getIconClass(t),this.classSecret,this.getAliasLink(t),this.getLockedClass(t)].join(" ")})}},this)}if(e.length){e.forEach(function(t){try{n=JSON.parse(this.dataValue(t,"item"))}catch(t){n=null}a=[this.classSubmenuItem,this.getIconClass(t),this.getAliasLink(t),this.getLockedClass(t)];if(BX.type.isPlainObject(n)&&("IS_ACTIVE"in n&&n.IS_ACTIVE===true||n.IS_ACTIVE==="true"||n.IS_ACTIVE==="Y")){a.push(this.classItemActive)}s.push({html:this.getSubmenuItemText(t),href:this.dataValue(t,"url"),onclick:this.dataValue(t,"onclick"),title:t.getAttribute("title"),className:a.join(" "),items:this.getChildMenuItems(t)})},this)}if(this.isSettingsEnabled){s.push({html:"<span>"+this.message("MIB_HIDDEN")+"</span>",className:[this.classSeporator,this.classSubmenuItem,this.classHiddenLabel].join(" ")});if(!i.length){s.push({html:"<span>"+this.message("MIB_NO_HIDDEN")+"</span>",className:[this.classSubmenuItem,this.classSubmenuNoHiddenItem].join(" ")})}if(i.length){i.forEach(function(t){try{n=JSON.parse(this.dataValue(t,"item"))}catch(t){n=null}a=[this.classSubmenuItem,this.classItemDisabled,this.getIconClass(t),this.getAliasLink(t),this.getLockedClass(t)];if(BX.type.isPlainObject(n)&&("IS_ACTIVE"in n&&n.IS_ACTIVE===true||n.IS_ACTIVE==="true"||n.IS_ACTIVE==="Y")){a.push(this.classItemActive)}s.push({html:this.getSubmenuItemText(t),href:this.dataValue(t,"url"),onclick:this.dataValue(t,"onclick"),title:t.getAttribute("title"),className:a.join(" "),items:this.getChildMenuItems(t)})},this)}s.push({html:"<span>"+this.message("MIB_MANAGE")+"</span>",className:[this.classSeporator,this.classSubmenuItem,this.classHiddenLabel,this.classManage].join(" ")});s.push({html:this.message("MIB_SETTING_MENU_ITEM"),className:[this.classSettingMenuItem,this.classSubmenuItem].join(" ")});s.push({html:this.message("MIB_APPLY_SETTING_MENU_ITEM"),className:[this.classSettingsApplyButton,this.classSubmenuItem].join(" ")});s.push({html:this.message("MIB_RESET_SETTINGS"),className:[this.classSettingsResetButton,this.classSubmenuItem].join(" ")})}return s},getChildMenuItems:function(t){var e;try{e=JSON.parse(this.dataValue(t,"item"))}catch(t){e=null}if(!BX.type.isPlainObject(e)){return[]}if(!BX.type.isArray(this.listChildItems[t.id])){var i={};this.setListAllItems(i,e);var s=this.getListItems(i,"");if(s.length){this.listChildItems[t.id]=BX.type.isArray(s[0].items)?s[0].items:[]}}return this.listChildItems[t.id]},setListAllItems:function(t,e){var i=[];if(BX.type.isPlainObject(e)){i.push(e)}else{i=e}i.forEach(function(e){t[e["ID"].replace(this.containerId+"_","")]=e;if(BX.type.isArray(e["ITEMS"])){this.setListAllItems(t,e["ITEMS"])}},this)},getListItems:function(t,e){var i=[];for(var s in t){if(!t.hasOwnProperty(s)){continue}var n=t[s];if(n["PARENT_ID"]===e){var a={},o=[],r=n.hasOwnProperty("AJAX_OPTIONS");if(r){a=this._getEvents(n["AJAX_OPTIONS"]);o=[{id:"loading",text:this.message("MIB_MAIN_BUTTONS_LOADING")}]}var u,h={text:n["TEXT"],href:n["URL"],onclick:n["ON_CLICK"],title:n["TITLE"],events:a,items:o};if(r){h.cacheable=true}else{u=this.getListItems(t,s);if(u.length){h.items=u}}i.push(h);delete t[s]}}return i},_setAjaxMode:function(t){for(var e in t){if(!t.hasOwnProperty(e)){continue}if(t[e].hasOwnProperty("ajaxOptions")){t[e].cacheable=true;t[e].events=this._getEvents(t[e]["ajaxOptions"]);t[e].items=[{id:"loading",text:this.message("MIB_MAIN_BUTTONS_LOADING")}]}}},_getEvents:function(t){var e=this;return{onSubMenuShow:function(){if(this.subMenuLoaded){return}var i=this.getSubMenu();i.removeMenuItem("loading");var s=i.getMenuItem("loading");e.getSubItems(t).then(function(t){e._setAjaxMode(t);this.subMenuLoaded=true;this.addSubMenu(t);this.showSubMenu()}.bind(this)).catch(function(t){if(s){s.getLayout().text.innerText=t}})}}},getSubItems:function(t){return new Promise(function(e,i){if(this.progress){i(this.message("MIB_MAIN_BUTTONS_LOADING"));return}if(t.mode==="component"){this.progress=true;BX.ajax.runComponentAction(t.component,t.action,{mode:t.componentMode,signedParameters:t.signedParameters?t.signedParameters:{},data:t.data}).then(function(t){this.progress=false;e(t.data)}.bind(this))}else{this.progress=true;BX.ajax.runAction(t.action,{data:t.data}).then(function(t){this.progress=false;e(t.data)}.bind(this))}})},getSubmenuArgs:function(){var t=this.getSubmenuId();var e=this.moreButton;var i=BX.pos(e);var s=this.getSubmenuItems();var n={autoHide:true,offsetLeft:i.width/2-80,angle:{position:"top",offset:100},zIndex:0,events:{onPopupClose:BX.delegate(this._onSubmenuClose,this)}};return[t,e,s,n]},getChildMenuArgs:function(t){var e=this.getChildMenuId();var i=this.getChildMenuItems(t);if(!i||BX.type.isArray(i)&&!i.length){return[]}var s={autoHide:true,angle:true,offsetLeft:t.getBoundingClientRect().width/2};return[e,t,i,s]},visibleControlMoreButton:function(){var t=this.getHiddenItems();if(!t.length||t.length===1&&this.isMoreButton(t[0])){this.getMoreButton().style.display="none"}else{this.getMoreButton().style.display=""}},createSubmenu:function(){var t=BX.PopupMenu.create.apply(BX.PopupMenu,this.getSubmenuArgs());if(this.isSettingsEnabled){this.dragAndDropInitInSubmenu()}t.menuItems.forEach(function(t){BX.bind(t.layout.item,"click",BX.delegate(this._onDocumentClick,this))},this);return t},createChildMenu:function(t){return BX.PopupMenu.create.apply(BX.PopupMenu,this.getChildMenuArgs(t))},showSubmenu:function(){var t=this.getSubmenu();if(t!==null){t.popupWindow.show()}else{this.destroySubmenu();t=this.createSubmenu();t.popupWindow.show()}this.setSubmenuShown(true);this.activateItem(this.moreButton);if(this.isEditEnabled()){t.popupWindow.setAutoHide(false)}},showChildMenu:function(t){var e=BX.PopupMenu.getMenuById(this.getChildMenuId()),i=null;if(e&&e.bindElement){if(e.bindElement.id!==t.id){this.destroyChildMenu(t);i=this.createChildMenu(t);i.popupWindow.show()}else{e.popupWindow.show()}}else{this.destroyChildMenu(t);i=this.createChildMenu(t);i.popupWindow.show()}},closeSubmenu:function(){var t=this.getSubmenu();if(t===null){return}t.popupWindow.close();if(!this.isActiveInMoreMenu()){this.deactivateItem(this.moreButton)}this.setSubmenuShown(false)},closeChildMenu:function(t){var e=this.getChildMenu(t);if(e===null){return}e.popupWindow.close()},getSubmenu:function(){return BX.PopupMenu.getMenuById(this.getSubmenuId())},getChildMenu:function(){return BX.PopupMenu.getMenuById(this.getChildMenuId())},destroySubmenu:function(){BX.PopupMenu.destroy(this.getSubmenuId())},destroyChildMenu:function(){BX.PopupMenu.destroy(this.getChildMenuId())},refreshSubmenu:function(){var t=this.getSubmenu();var e;if(t===null){return}e=this.getSubmenuArgs();if(BX.type.isArray(e)){this.destroySubmenu();this.createSubmenu();this.showSubmenu()}},setSubmenuShown:function(t){this.isSubmenuShown=false;if(BX.type.isBoolean(t)){this.isSubmenuShown=t}},activateItem:function(t){if(!BX.type.isDomNode(t)){return}if(!BX.hasClass(t,this.classItemActive)){BX.addClass(t,this.classItemActive)}},deactivateItem:function(t){if(!BX.type.isDomNode(t)){return}if(BX.hasClass(t,this.classItemActive)){BX.removeClass(t,this.classItemActive)}},getCurrentSettings:function(){var t={};this.getAllItems().forEach(function(e,i){t[e.id]={sort:i,isDisabled:this.isDisabled(e)}},this);return t},initSaving:function(t){this.sendOptions=this.sendOptions.bind(this);this.optionsToSave=[];this.debouncedSendOptions=BX.debounce(this.sendOptions,5e3);if(BX.type.isPlainObject(t)){this.ajaxSettings={componentName:t.componentName,signedParams:t.signedParams}}},sendOptions:function(){if(this.optionsToSave.length<=0){return}var t={};this.optionsToSave.forEach(function(e){t[e.name]=e.value});this.optionsToSave=[];window.removeEventListener("beforeunload",this.sendOptions);BX.removeCustomEvent("SidePanel.Slider:onClose",this.sendOptions);BX.ajax.runComponentAction(this.ajaxSettings.componentName,"save",{mode:"class",signedParameters:this.ajaxSettings.signedParams,data:{options:t}})},saveOptions:function(t,e){if(this.ajaxSettings){if(this.optionsToSave.length<=0){window.addEventListener("beforeunload",this.sendOptions);BX.addCustomEvent("SidePanel.Slider:onClose",this.sendOptions)}this.optionsToSave.push({name:t,value:e});this.debouncedSendOptions()}else if(this.listContainer.id){BX.userOptions.save("ui",this.listContainer.id,t,e)}},saveSettings:function(){var t=this.getCurrentSettings();var e="settings";if(!BX.type.isPlainObject(t)){return}if(BX.type.isDomNode(this.listContainer)){if("id"in this.listContainer){this.saveOptions(e,JSON.stringify(t));this.setHome()}}},resetSettings:function(){var t=null;var e=BX.PopupWindowManager.create(this.listContainer.id+"_reset_popup",null,{content:this.message("MIB_RESET_ALERT"),autoHide:false,overlay:true,closeByEsc:true,closeIcon:true,draggable:{restrict:true},titleBar:this.message("MIB_RESET_SETTINGS"),buttons:[t=new BX.PopupWindowButton({text:this.message("MIB_RESET_BUTTON"),className:"popup-window-button-create",events:{click:function(){if(BX.hasClass(t.buttonNode,"popup-window-button-wait")){return}BX.addClass(t.buttonNode,"popup-window-button-wait");this.handleResetSettings(function(i){if(i){BX.removeClass(t.buttonNode,"popup-window-button-wait");e.setContent(i)}else{this.saveOptions("settings",JSON.stringify({}));this.saveOptions("firstPageLink","");window.location.reload()}}.bind(this))}.bind(this)}}),new BX.PopupWindowButtonLink({text:this.message("MIB_CANCEL_BUTTON"),className:"popup-window-button-link-cancel",events:{click:function(){this.popupWindow.close()}}})]});e.show()},handleResetSettings:function(t){var e=[];BX.onCustomEvent("BX.Main.InterfaceButtons:onBeforeResetMenu",[e,this]);var i=new BX.Promise;var s=i;for(var n=0;n<e.length;n++){i=i.then(e[n])}i.then(function(e){t(null,e)},function(e){t(e,null)});s.fulfill()},moveButtonAlias:function(t){var e,i;if(!t||!this.dragItem){return}e=this.getItemAlias(this.dragItem);i=this.getItemAlias(t);if(this.isListItem(e)){if(!i){this.listContainer.appendChild(e)}else{this.listContainer.insertBefore(e,i)}}},moveButton:function(t){var e;if(!BX.type.isDomNode(t)||!BX.type.isDomNode(this.dragItem)){return}if(this.isListItem(t)){if(this.isDisabled(this.dragItem)){this.dragItem.dataset.disabled="false"}if(BX.type.isDomNode(t)){this.listContainer.insertBefore(this.dragItem,t)}else{this.listContainer.appendChild(this.dragItem)}}if(this.isSubmenuItem(t)){if(this.isDisabled(this.dragItem)&&!this.isDisabled(t)){this.enableItem(this.dragItem)}e=this.getSubmenuContainer();e.insertBefore(this.dragItem,t)}},getSubmenuContainer:function(){var t=this.getSubmenu();var e=null;if(t!==null){e=t.itemsContainer}return e},findNextSiblingByClass:function(t,e){var i=t;for(;!!t;t=t.nextElementSibling){if(e){if(BX.hasClass(t,e)&&t!==i){return t}}else{return null}}},findParentByClassName:function(t,e){for(;t&&t!==document;t=t.parentNode){if(e){if(BX.hasClass(t,e)){return t}}else{return null}}},findChildrenByClassName:function(t,e){var i=null;if(BX.type.isDomNode(t)&&BX.type.isNotEmptyString(e)){i=BX.Buttons.Utils.getByClass(t,e)}return i},dragAndDropInit:function(){this.getAllItems().forEach(function(t,e){if(!this.isSeparator(t)&&!this.isSettings(t)&&!this.isApplySettingsButton(t)&&!this.isResetSettingsButton(t)){t.setAttribute("draggable","true");t.setAttribute("tabindex","-1");t.dataset.link="item"+e;BX.bind(t,"dragstart",BX.delegate(this._onDragStart,this));BX.bind(t,"dragend",BX.delegate(this._onDragEnd,this));BX.bind(t,"dragenter",BX.delegate(this._onDragEnter,this));BX.bind(t,"dragover",BX.delegate(this._onDragOver,this));BX.bind(t,"dragleave",BX.delegate(this._onDragLeave,this));BX.bind(t,"drop",BX.delegate(this._onDrop,this))}BX.bind(t,"mouseover",BX.delegate(this._onMouse,this));BX.bind(t,"mouseout",BX.delegate(this._onMouse,this))},this)},dragAndDropInitInSubmenu:function(){var t=this.getSubmenu();var e=t.menuItems;e.forEach(function(t){if(!this.isSeparator(t.layout.item)&&!this.isSettings(t.layout.item)&&!this.isApplySettingsButton(t.layout.item)&&!this.isResetSettingsButton(t.layout.item)){t.layout.item.draggable=true;t.layout.item.dataset.sortable=true;BX.bind(t.layout.item,"dragstart",BX.delegate(this._onDragStart,this));BX.bind(t.layout.item,"dragenter",BX.delegate(this._onDragEnter,this));BX.bind(t.layout.item,"dragover",BX.delegate(this._onDragOver,this));BX.bind(t.layout.item,"dragleave",BX.delegate(this._onDragLeave,this));BX.bind(t.layout.item,"dragend",BX.delegate(this._onDragEnd,this));BX.bind(t.layout.item,"drop",BX.delegate(this._onDrop,this))}if(BX.hasClass(t.layout.item,this.classHiddenLabel)&&!BX.hasClass(t.layout.item,this.classManage)){BX.bind(t.layout.item,"dragover",BX.delegate(this._onDragOver,this))}},this)},getItem:function(t){if(!BX.type.isDomNode(t)){if(!t||!BX.type.isDomNode(t.target)){return null}}else{t={target:t}}var e=this.findParentByClassName(t.target,this.classItem);if(!BX.type.isDomNode(e)){e=this.findParentByClassName(t.target,this.classDefaultSubmenuItem)}return e},setOpacity:function(t){if(!BX.type.isDomNode(t)){return}BX.style(t,"opacity",".1")},unsetOpacity:function(t){if(!BX.type.isDomNode(t)){return}BX.style(t,"opacity","1")},setDragStyles:function(){BX.addClass(this.listContainer,this.classOnDrag);BX.addClass(BX(this.getSubmenuId(true)),this.classOnDrag);this.setOpacity(this.dragItem)},unsetDragStyles:function(){var t=this.getSubmenu();this.getAllItems().forEach(function(t){this.unsetOpacity(t);BX.removeClass(t,"over")},this);if(t&&"menuItems"in t&&BX.type.isArray(t.menuItems)&&t.menuItems.length){t.menuItems.forEach(function(t){this.unsetOpacity(t);BX.removeClass(t.layout.item,"over")},this)}BX.removeClass(this.listContainer,this.classOnDrag);BX.removeClass(BX(this.getSubmenuId(true)),this.classOnDrag)},getIconClass:function(t){var e="";if(BX.type.isDomNode(t)&&"dataset"in t&&"class"in t.dataset&&BX.type.isNotEmptyString(t.dataset.class)){e=t.dataset.class}return e},disableItem:function(t){var e=this.getItemAlias(t);if(t&&"dataset"in t){t.dataset.disabled="true";if(e){e.dataset.disabled="true"}}},enableItem:function(t){var e;if(!BX.type.isDomNode(t)){return}if(this.isSubmenuItem(t)){BX.removeClass(t,this.classItemDisabled);e=this.getItemAlias(t);if(BX.type.isDomNode(e)){e.dataset.disabled="false"}}},getAliasLink:function(t){return this.dataValue(t,"link")||""},getItemAlias:function(t){var e=null;if(!BX.type.isDomNode(t)){return e}var i=this.getAllItems();var s=this.isSubmenuItem(t);var n=this.isListItem(t);if(!s&&!n){return e}if(s){i.forEach(function(i){BX.hasClass(t,this.getAliasLink(i))&&(e=i)},this)}if(n){e=BX.Buttons.Utils.getByClass(document,this.getAliasLink(t))}return e},hideItem:function(t){!!t&&BX.addClass(t,this.classSecret)},showItem:function(t){!!t&&BX.removeClass(t,this.classSecret)},fakeDragItem:function(){var t=null;if(!BX.type.isDomNode(this.dragItem)||!BX.type.isDomNode(this.overItem)){return}if(this.isDragToSubmenu()){t=this.getItemAlias(this.dragItem);if(t!==this.dragItem){this.listContainer.appendChild(this.dragItem);this.dragItem=t;this.showItem(this.dragItem);this.adjustMoreButtonPosition();this.updateSubmenuItems();this.tmp.moved=false;this.tmp.movetToSubmenu=true;this.setOpacity(this.dragItem)}}if(this.isDragToList()&&!this.tmp.movetToSubmenu){t=this.getItemAlias(this.dragItem);if(t!==this.dragItem){this.hideItem(this.dragItem);this.dragItem=t;this.adjustMoreButtonPosition();this.updateSubmenuItems();this.setOpacity(this.dragItem)}}this.tmp.movetToSubmenu=false},updateSubmenuItems:function(){var t=this.getHiddenItems();var e=this.getDisabledItems();var i=this;var s=[];var n,a,o;n=this.getSubmenu();if(n===null){return}a=n.menuItems;if(!BX.type.isArray(a)||!a.length){return}s=e.concat(t);a.forEach(function(t){o=[].some.call(s,function(e){return BX.hasClass(t.layout.item,i.dataValue(e,"link"))||i.isDisabled(t.layout.item)||i.isSeparator(t.layout.item)||i.isDropzone(t.layout.item)});if(o||(i.isSettings(t.layout.item)||i.isApplySettingsButton(t.layout.item)||i.isResetSettingsButton(t.layout.item)||i.isNotHiddenItem(t.layout.item)||i.isSeparator(t.layout.item)||t.layout.item===i.dragItem)&&!i.isMoreButton(t.layout.item)){i.showItem(t.layout.item)}else{i.hideItem(t.layout.item)}})},isNotHiddenItem:function(t){return BX.hasClass(t,this.classSubmenuNoHiddenItem)},getNotHidden:function(){return BX.Buttons.Utils.getByClass(this.getSubmenuContainer(),this.classSubmenuNoHiddenItem)},setOverStyles:function(t){if(BX.type.isDomNode(t)&&!BX.hasClass(t,this.classItemOver)){BX.addClass(t,this.classItemOver)}},unsetOverStyles:function(t){if(BX.type.isDomNode(t)&&BX.hasClass(t,this.classItemOver)){BX.removeClass(t,this.classItemOver)}},dataValue:function(t,e){var i="";var s;if(BX.type.isDomNode(t)){s=BX.data(t,e);if(typeof s!=="undefined"){i=s}}return i},execScript:function(script){if(BX.type.isNotEmptyString(script)){eval(script)}},showLicenseWindow:function(){var t;if(!B24.licenseInfoPopup){return}t=B24.licenseInfoPopup;t.init({B24_LICENSE_BUTTON_TEXT:this.message("MIB_LICENSE_BUY_BUTTON"),B24_TRIAL_BUTTON_TEXT:this.message("MIB_LICENSE_TRIAL_BUTTON"),IS_FULL_DEMO_EXISTS:this.licenseParams.isFullDemoExists,HOST_NAME:this.licenseParams.hostname,AJAX_URL:this.licenseParams.ajaxUrl,LICENSE_ALL_PATH:this.licenseParams.licenseAllPath,LICENSE_DEMO_PATH:this.licenseParams.licenseDemoPath,FEATURE_GROUP_NAME:this.licenseParams.featureGroupName,AJAX_ACTIONS_URL:this.licenseParams.ajaxActionsUrl,B24_FEATURE_TRIAL_SUCCESS_TEXT:this.message("MIB_LICENSE_WINDOW_TRIAL_SUCCESS_TEXT")});t.show("main-buttons",this.message("MIB_LICENSE_WINDOW_HEADER_TEXT"),this.message("MIB_LICENSE_WINDOW_TEXT"))},_onDragStart:function(t){var e=this.getVisibleItems();var i=BX.type.isArray(e)?e.length:null;this.dragItem=this.getItem(t);if(!BX.type.isDomNode(this.dragItem)){return}if(i===2&&this.isListItem(this.dragItem)){t.preventDefault();BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onHideLastVisibleItem",[this.dragItem,this]);return}if(this.isMoreButton(this.dragItem)||this.isSeparator(this.dragItem)||this.isNotHiddenItem(this.dragItem)||BX.Dom.attr(this.dragItem,"data-parent-item-id")||BX.Dom.attr(this.dragItem,"data-has-child")){t.preventDefault();return}this.isSubmenuShownOnDragStart=!!this.isSubmenuShown;if(this.isListItem(this.dragItem)){this.showSubmenu()}this.setDragStyles();if(!this.isEditEnabled()){this.enableEdit()}},_onDragEnd:function(t){t.preventDefault();var e=this.getItem(t);var i,s;if(!BX.type.isDomNode(e)){return}this.unsetDragStyles();if(!this.isSubmenuShownOnDragStart){this.refreshSubmenu();if(!this.isEditEnabled()){this.closeSubmenu()}}else{this.refreshSubmenu()}i=BX.findNextSibling(this.dragItem,BX.delegate(function(t){return this.isVisibleItem(t)},this));s=BX.findPreviousSibling(this.dragItem,BX.delegate(function(t){return this.isVisibleItem(t)},this));if(BX.type.isDomNode(s)&&(BX.hasClass(s,this.classHiddenLabel)||this.isDisabled(s)&&this.isSubmenuItem(s))||(BX.type.isDomNode(i)&&BX.hasClass(i,this.classManage)||this.isDisabled(i)&&this.isSubmenuItem(i))){this.disableItem(this.dragItem);this.refreshSubmenu()}if(this.isEditEnabled()){this.enableEdit();BX.show(this.getSettingsApplyButton());BX.hide(this.getSettingsButton())}else{this.disableEdit();BX.hide(this.getSettingsApplyButton());BX.show(this.getSettingsButton())}this.updateMoreButtonCounter();this.saveSettings();this.dragItem=null;this.overItem=null;this.tmp.moved=false},updateMoreButtonCounter:function(){var t,e,i,s;t=this.getHiddenItems();s=this.getDisabledItems();t=t.concat(s);e=0;if(BX.type.isArray(t)){t.forEach(function(t){e+=parseInt(this.dataValue(t,"counter"))||0},this)}if(BX.type.isNumber(e)){this.setMoreButtonCounter(e)}},_onDragEnter:function(t){var e=this.getItem(t);if(BX.type.isDomNode(e)&&this.isNotHiddenItem(e)){this.setOverStyles(e)}},_onDragOver:function(t){t.preventDefault();var e=null;this.overItem=this.getItem(t);if(!BX.type.isDomNode(this.overItem)||!BX.type.isDomNode(this.dragItem)||this.overItem===this.dragItem||this.isNotHiddenItem(this.overItem)||BX.Dom.attr(this.overItem,"data-parent-item-id")||BX.Dom.attr(this.overItem,"data-has-child")){return}this.fakeDragItem();if(this.isNext(t)&&this.isGoodPosition(t)&&!this.isMoreButton(this.overItem)){e=this.findNextSiblingByClass(this.overItem,this.classItem);if(this.isMoreButton(e)&&!this.tmp.moved){e=e.previousElementSibling;this.tmp.moved=true}if(!BX.type.isDomNode(e)){e=this.findNextSiblingByClass(this.overItem,this.classSubmenuItem)}if(BX.type.isDomNode(e)){this.moveButton(e);this.moveButtonAlias(e);this.adjustMoreButtonPosition();this.updateSubmenuItems()}}if(!this.isNext(t)&&this.isGoodPosition(t)&&!this.isMoreButton(this.overItem)||!this.isGoodPosition(t)&&this.isMoreButton(this.overItem)&&this.getVisibleItems().length===1){this.moveButton(this.overItem);this.moveButtonAlias(this.overItem);this.adjustMoreButtonPosition();this.updateSubmenuItems()}},_onDragLeave:function(t){var e=this.getItem(t);if(BX.type.isDomNode(e)){this.unsetOverStyles(t.target)}},_onDrop:function(t){var e=this.getItem(t);if(!BX.type.isDomNode(e)){return}if(this.isNotHiddenItem(e)||this.isDisabled(e)){this.disableItem(this.dragItem);this.adjustMoreButtonPosition()}this.unsetDragStyles();t.preventDefault()},getIndex:function(t,e){return[].indexOf.call(t||[],e)},_onSubmenuClose:function(){this.setSubmenuShown(false);if(this.isEditEnabled()){this.activateItem(this.moreButton)}else{if(!this.isActiveInMoreMenu()){this.deactivateItem(this.moreButton)}}},_onResizeHandler:function(){this.adjustMoreButtonPosition();this.updateSubmenuItems();if(!this.isSettingsEnabled){this.visibleControlMoreButton()}},_onClickMoreButton:function(t){t.preventDefault();this.showSubmenu()},_onMouse:function(t){var e=this.getItem(t);if(t.type==="mouseover"&&!BX.hasClass(e,this.classItemOver)){if(!BX.hasClass(e,this.classItemMore)){this.showChildMenu(e)}BX.addClass(e,this.classItemOver)}if(t.type==="mouseout"&&BX.hasClass(e,this.classItemOver)){BX.removeClass(e,this.classItemOver)}},getSettingsResetButton:function(){return BX.Buttons.Utils.getByClass(this.getSubmenuContainer(),this.classSettingsResetButton)},_onScroll:function(){if(BX.style(this.pinContainer,"position")==="fixed"){this.closeSubmenu()}},isDisabled:function(t){var e=false;if(BX.type.isDomNode(t)){e=this.dataValue(t,"disabled")==="true"||BX.hasClass(t,this.classItemDisabled)}return e},isSettings:function(t){var e=false;if(BX.type.isDomNode(t)){e=BX.hasClass(t,this.classSettingMenuItem)}return e},isLocked:function(t){var e=false;if(BX.type.isDomNode(t)){e=this.dataValue(t,"locked")==="true"||BX.hasClass(t,this.classItemLocked)}return e},isDropzone:function(t){return BX.hasClass(t,this.classDropzone)},isNext:function(t){var e=this.dragItem.getBoundingClientRect();var i=this.overItem.getBoundingClientRect();var s=getComputedStyle(this.dragItem);var n=parseInt(s.marginRight.replace("px",""));var a=null;if(this.isListItem(this.overItem)){a=t.clientX>i.left-n&&t.clientX>e.right}if(this.isSubmenuItem(this.overItem)){a=t.clientY>e.top}return a},isGoodPosition:function(t){var e=this.overItem;var i,s;if(!BX.type.isDomNode(e)){return false}i=e.getBoundingClientRect();if(this.isListItem(e)){s=this.isNext(t)&&t.clientX>=i.left+i.width/2||!this.isNext(t)&&t.clientX<=i.left+i.width/2}if(this.isSubmenuItem(e)){s=this.isNext(t)&&t.clientY>=i.top+i.height/2||!this.isNext(t)&&t.clientY<=i.top+i.height/2}return s},isSubmenuItem:function(t){return BX.hasClass(t,this.classSubmenuItem)},isVisibleItem:function(t){if(!BX.type.isDomNode(t)){return false}return t.offsetTop===0},isMoreButton:function(t){var e=false;if(BX.type.isDomNode(t)&&BX.hasClass(t,this.classItemMore)){e=true}return e},isListItem:function(t){var e=false;if(BX.type.isDomNode(t)&&BX.hasClass(t,this.classItem)){e=true}return e},isSublink:function(t){var e=false;if(BX.type.isDomNode(t)){e=BX.hasClass(t,this.classItemSublink)}return e},isSeparator:function(t){var e=false;if(BX.type.isDomNode(t)){e=BX.hasClass(t,this.classSeporator)}return e},isDragToSubmenu:function(){return!this.isSubmenuItem(this.dragItem)&&this.isSubmenuItem(this.overItem)},isDragToList:function(){return this.isSubmenuItem(this.dragItem)&&!this.isSubmenuItem(this.overItem)}}}if(typeof BX.Main.interfaceButtonsManager==="undefined"){BX.Main.interfaceButtonsManager={data:{},init:function(t){var e=null;if(!BX.type.isPlainObject(t)||!("containerId"in t)){throw"BX.Main.interfaceButtonsManager: containerId not set in params Object"}e=BX(t.containerId);if(BX.type.isDomNode(e)){this.data[t.containerId]=new BX.Main.interfaceButtons(e,t)}else{BX(BX.delegate(function(){e=BX(t.containerId);if(!BX.type.isDomNode(e)){throw"BX.Main.interfaceButtonsManager: container is not dom node"}this.data[t.containerId]=new BX.Main.interfaceButtons(e,t)},this))}},getById:function(t){var e=null;if(BX.type.isString(t)&&BX.type.isNotEmptyString(t)){try{e=this.data[t]}catch(t){}}return e},getObjects:function(){return this.data}}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:94:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js?1654841541575";s:6:"source";s:76:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.js";s:3:"min";s:80:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js";s:3:"map";s:80:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.map.js";}"*/
(function(){"use strict";BX.namespace("BX.Buttons");BX.Buttons.Utils={getByClass:function(e,t,l){var n=[];if(t){n=(e||document.body).getElementsByClassName(t);if(!l){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getByTag:function(e,t,l){var n=[];if(t){n=(e||document.body).getElementsByTagName(t);if(!l){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getBySelector:function(e,t,l){var n=[];if(t){if(!l){n=(e||document.body).querySelector(t)}else{n=(e||document.body).querySelectorAll(t);n=[].slice.call(n)}}return n}}})();
/* End */
;
; /* Start:"a:4:{s:4:"full";s:87:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js?165484184530971";s:6:"source";s:67:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.js";s:3:"min";s:71:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js";s:3:"map";s:71:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.map.js";}"*/
(function(e){var t=false,i=false,s=0,o=null,n=null,a={},l={};BX.namespace("BX.Disk");if(BX.Disk.UF)return;BX.Disk.UF=function(){var t=function(t){this.dialogName="DiskFileDialog";this.params=t;this.CID=t["UID"];this.controller=t.controller;this.values=t.values||[];this.prefix="diskuf-doc";this.onUploaderIsAlmostInited=BX.delegate(this.onUploaderIsAlmostInited,this);this._checkFileName=this.checkFileName.bind(this);this._selectFolder=this.selectFolder.bind(this);this._openSection=this.openSection.bind(this);this._selectItem=this.selectItem.bind(this);this._unSelectItem=this.unSelectItem.bind(this);BX.addCustomEvent(e,"onUploaderIsAlmostInited",this.onUploaderIsAlmostInited);this.agent=BX.Uploader.getInstance({id:t["UID"],streams:3,allowUpload:"A",uploadFormData:"N",uploadMethod:"immediate",uploadFileUrl:t["urlUpload"],showImage:false,sortItems:false,input:t["input"],dropZone:t["dropZone"],placeHolder:t["placeHolder"],queueFields:{thumb:{tagName:"TR",className:"wd-inline-file"}},fields:{thumb:{tagName:"",template:BX.message("DISK_TMPLT_THUMB")}}});this.urlSelect=!!t["urlSelect"]?t["urlSelect"]:null;this.urlRenameFile=!!t["urlRenameFile"]?t["urlRenameFile"]:null;this.urlDeleteFile=!!t["urlDeleteFile"]?t["urlDeleteFile"]:null;this.urlSelect=this._addUrlParam(this.urlSelect,"dialog2=Y&ACTION=SELECT&MULTI=Y");this.urlUpload=!!t["urlUpload"]?t["urlUpload"]:null;this.urlShow=!!t["urlShow"]?t["urlShow"]:null;this.params.controlName=this.params.controlName||"FILES[]";this.init();return this};t.prototype={_addUrlParam:function(e,t){if(!e)return null;if(e.indexOf(t)==-1)e+=(e.indexOf("?")==-1?"?":"&")+t;return e},_camelToSNAKE:function(e){var t={},i,s;for(i in e){s=i.replace(/(.)([A-Z])/g,"$1_$2").toUpperCase();t[s]=e[i];t[i]=e[i]}return t},onUploaderIsAlmostInited:function(t,i){if(this.CID!=i["id"])return;BX.removeCustomEvent(e,"onUploaderIsAlmostInited",this.onUploaderIsAlmostInited);var s=BX.findChild(this.controller,{className:"diskuf-simple"},true),o=BX.findChild(this.controller,{className:"diskuf-extended"},true);if(t=="BX.UploaderSimple"){BX.remove(o);BX.show(s)}else{BX.remove(s);BX.show(o)}i.input=BX.findChild(this.controller,{className:"diskuf-fileUploader"},true);i.dropZone=BX.findChild(this.controller,{className:"diskuf-extended"},false);this.params.placeHolder=i["placeHolder"]=BX.findChild(this.controller,{className:"diskuf-placeholder-tbody"},true)},init:function(){this._onItemIsAdded=BX.delegate(this.onItemIsAdded,this);this._onFileIsAppended=BX.delegate(this.onFileIsAppended,this);this._onFileIsAttached=BX.delegate(this.onFileIsAttached,this);this._onFileIsBound=BX.delegate(this.onFileIsBound,this);this._onFileIsInited=BX.delegate(this.onFileIsInited,this);this._onError=BX.delegate(this.onError,this);BX.addCustomEvent(this.agent,"onItemIsAdded",this._onItemIsAdded);BX.addCustomEvent(this.agent,"onFileIsInited",this._onFileIsInited);BX.addCustomEvent(this.agent,"onError",this._onError);this._onUploadProgress=BX.delegate(this.onUploadProgress,this);this._onUploadDone=BX.delegate(this.onUploadDone,this);this._onUploadError=BX.delegate(this.onUploadError,this);this._onUploadRestore=BX.delegate(this.onUploadRestore,this);BX.onCustomEvent(BX(this.controller.parentNode),"DiskDLoadFormControllerInit",[this]);var e=[],t=[],i;for(var s=0;s<this.values.length;s++){i=BX.findChild(this.values[s],{className:"f-wrap"},true);if(!!i){e.push({name:i.innerHTML});t.push(this.values[s])}}this.values=[];this.agent.onAttach(e,t);var o=BX.findChild(this.controller,{className:"diskuf-selector-link"},true);if(!!o){BX.bind(o,"click",BX.proxy(this.showSelectDialog,this))}var n=BX.findChildren(this.controller,{className:"diskuf-selector-link-cloud"},true);if(!!n){for(var a in n){if(!n.hasOwnProperty(a))continue;BX.bind(n[a],"click",BX.proxy(this.showSelectDialogCloudImport,this))}}return false},addFile:function(e){return this.agent&&this.agent.onChange([e])},onItemIsAdded:function(){BX.removeCustomEvent(this.agent,"onItemIsAdded",this._onItemIsAdded);BX.show(BX.findParent(this.params.placeHolder,{className:"diskuf-files-block"}))},onFileIsInited:function(e,t){BX.addCustomEvent(t,"onFileIsAttached",this._onFileIsAttached);BX.addCustomEvent(t,"onFileIsAfterCreated",function(e,t,i,s){if(t&&!t.sizeInt){e.size=" "}});BX.addCustomEvent(t,"onFileIsAppended",this._onFileIsAppended);BX.addCustomEvent(t,"onFileIsBound",this._onFileIsBound);BX.addCustomEvent(t,"onUploadProgress",this._onUploadProgress);BX.addCustomEvent(t,"onUploadDone",this._onUploadDone);BX.addCustomEvent(t,"onUploadError",this._onUploadError)},onFileIs:function(e,t,i){this.bindEventsHandlers(e,t,i);var s={element_id:i.element_id,element_name:i.element_name||t.name,element_url:i.element_name||i.previewUrl||i.preview_url,place:e,storage:"disk"};this.values.push(e);BX.onCustomEvent(this.params.controller.parentNode,"OnFileUploadSuccess",[s,this,t.file,t]);t.__disk_element_id=i.element_id;BX.onCustomEvent(t,"OnFileUploadSuccess",[s,this])},onFileIsAppended:function(e,t){var i=this.agent.getItem(e),s=i.node;this.bindEventsHandlers(s,t,{});BX.onCustomEvent(this.params.controller.parentNode,"onFileIsAppended",[e,t])},onFileIsBound:function(e,t){var i=this.agent.getItem(e),s=i.node,o=s.getAttribute("id").replace("disk-edit-attach","");this.onFileIs(s,t,{element_id:o})},onFileIsAttached:function(e,t,i,s){if(!!s["sizeFormatted"])s["size"]=s["sizeFormatted"];if(!s.hasOwnProperty("service")){this.onUploadDone(t,{file:s});return}BX.Disk.ExternalLoader.startLoad({file:{id:s.id,name:s.name,service:s.service},onFinish:BX.delegate(function(e){var i=this.agent.getItem(t.id).node;BX.hide(i);var s={id:e.ufId,name:e.name,storage:e.storage,ext:t.ext,size:e.sizeFormatted,previewUrl:e.previewUrl,preview_url:e.previewUrl,element_url:e.previewUrl,size_int:parseInt(e.size,10)};var o;var n=BX.message("DISK_TMPLT_THUMB2").replace("#control_name#",this.params.controlName).replace("#CONTROL_NAME#",this.params.controlName);for(var a in s){o=s[a];if(s.hasOwnProperty(a)){if(a.toLowerCase()=="size"){if(s.hasOwnProperty("size_int")){if(parseInt(s["size_int"],10)==0||isNaN(s["size_int"])){o=""}}if(s.hasOwnProperty("SIZE_INT")||isNaN(s["SIZE_INT"])){if(parseInt(s["SIZE_INT"],10)==0){o=""}}}n=n.replace(new RegExp("#"+a.toLowerCase()+"#","gi"),o).replace(new RegExp("#"+a.toUpperCase()+"#","gi"),o)}}var l={id:"disk-edit-attach"+s.id,"bx-agentFileId":t.id},r;r=BX.create("TR",{attrs:l,props:{className:"wd-inline-file"},html:n});var d=BX.findChild(r,{className:"files-name-edit-btn"},true);if(d){BX.remove(d)}i.parentNode.insertBefore(r,i);s.element_id=s.id;this.agent.onAttach([s],[r]);t.deleteFile()},this),onProgress:BX.delegate(function(e){this.onUploadProgress(t,e)},this)})},onUploadProgress:function(e,t){t=Math.min(t,98);var i=e.id;if(!e.__progressBarWidth)e.__progressBarWidth=5;if(t>e.__progressBarWidth){e.__progressBarWidth=Math.ceil(t);e.__progressBarWidth=e.__progressBarWidth>100?100:e.__progressBarWidth;if(BX("wdu"+i+"Progressbar"))BX.adjust(BX("wdu"+i+"Progressbar"),{style:{width:e.__progressBarWidth+"%"}});if(BX("wdu"+i+"ProgressbarText"))BX.adjust(BX("wdu"+i+"ProgressbarText"),{text:e.__progressBarWidth+"%"})}},onUploadDone:function(e,t){if(t["file"]&&t["file"]["attachId"]&&t["file"]["attachId"]!=t["file"]["id"]){t["file"]["id"]=t["file"]["attachId"];delete t["file"]["attachId"]}var i=this.agent.getItem(e.id).node,s=this._camelToSNAKE(t["file"]);if(BX(i)){var o=BX.message("DISK_TMPLT_THUMB2").replace("#control_name#",this.params.controlName).replace("#CONTROL_NAME#",this.params.controlName),n;for(var a in s){if(s.hasOwnProperty(a)){n=s[a];if(a.toLowerCase()=="size"){if(s.hasOwnProperty("size_int")){if(parseInt(s["size_int"],10)==0){n=""}}if(s.hasOwnProperty("SIZE_INT")){if(parseInt(s["SIZE_INT"],10)==0){n=""}}}if(a==="STORAGE"&&n==="disk"){r(s.id).then(function(e){if(e.crumbs){var t=e.crumbs.join(" / ");var i=BX("disk-edit-attach"+s.id);if(i){var o=BX.findChild(i,{className:"files-placement"},true);if(o){BX.adjust(o,{text:t})}}}})}o=o.replace(new RegExp("#"+a.toLowerCase()+"#","gi"),n).replace(new RegExp("#"+a.toUpperCase()+"#","gi"),n)}}o=o.replace(new RegExp("#(width|height)#","gi"),"0").replace(new RegExp("#preview_url#","gi"),"data:image/png;base64,");var l={id:"disk-edit-attach"+s.id,"bx-agentFileId":e.id},d;if(s["XML_ID"])l["bx-attach-xml-id"]=s["XML_ID"];if(s["FILE_ID"])l["bx-attach-file-id"]="n"+s["FILE_ID"];if(s["FILE_TYPE"])l["bx-attach-file-type"]=s["FILE_TYPE"];d=BX.create("TR",{attrs:l,props:{className:"wd-inline-file"},html:o});if(!t.file.canChangeName){var c=BX.findChild(d,{className:"files-name-edit-btn"},true);if(c){BX.remove(c)}}i.parentNode.replaceChild(d,i);s.element_id=s.id;this.onFileIs(d,e,s)}else{this.onUploadError(e,t,this.agent)}},onUploadError:function(e,t,i){var s=this.agent.getItem(e.id);if(!!s&&(s=s.node)&&BX(s)&&(i==true||!BX(s).hasAttribute("bx-disk-error"))){BX(s).setAttribute("bx-disk-error","Y");BX.adjust(s,{props:{className:"error-load"}});var o=t&&t["error"]?t["error"]:"Uploading error";s.cells[1].innerHTML="";s.cells[2].innerHTML='<span class="info-icon"></span><span class="error-text">'+o+"</span>";BX.onCustomEvent(e,"OnFileUploadFailed",[s,this]);BX.onCustomEvent(this.params.controller.parentNode,"OnFileUploadFailed",[s,this,e.file,e])}},onError:function(e,t,i){var s="Uploading error.",o=s,n,a;if(i){if(i["error"]&&typeof i["error"]=="string")o=i["error"];else if(i["message"]&&typeof i["message"]=="string")o=i["message"];else if(BX.type.isArray(i["errors"])&&i["errors"].length>0){o=[];for(var l=0;l<i["errors"].length;l++){if(typeof i["errors"][l]=="object"&&i["errors"][l]["message"])o.push(i["errors"][l]["message"])}if(o.length<=0)o.push("Uploading error.");o=o.join(" ")}}e.files=e.files||{};for(a in e.files){if(e.files.hasOwnProperty(a)){n=this.agent.queue.items.getItem(a);this.onUploadError(n,{error:o},o!=s)}}},onBlurRenameInput:function(e){var t=e.target||e.srcElement;var i=BX.findChild(t.parentNode,{className:"files-name-edit-btn"},true);if(!!i)BX.fireEvent(i,"click")},bindEventsHandlers:function(t,i,s){var o=s.element_id,n="file-action-control",a=BX.findChild(t,{className:"files-path"},true),l=BX.findChild(t,{className:"files-name-edit-btn"},true),r=BX.findChild(t,{className:"f-wrap"},true);if(!!l&&!!a&&!!r&&!a.getAttribute(n)){a.setAttribute(n,"enabled");BX.show(a,"inline");BX.hide(BX.findChild(t,{className:"files-placement"},true));BX.bind(a,"click",BX.delegate(function(){this.move(o,r.innerHTML,t)},this))}if(!!l){BX.bind(l,"click",BX.delegate(function(){BX.toggleClass(l.parentNode,"files-name-editable");this.rename(o,t)},this));var d=BX.findChild(t,{className:"files-name-edit-inp"},true);if(d){BX.bind(d,"keydown",BX.delegate(function(i){var s=(i||e.event).keyCode||(i||e.event).charCode;if(s==13){BX.unbind(d,"blur",BX.proxy(this.onBlurRenameInput,this));BX.toggleClass(l.parentNode,"files-name-editable");this.rename(o,t);return BX.PreventDefault(i)}if(s==27){BX.unbind(d,"blur",BX.proxy(this.onBlurRenameInput,this));BX.toggleClass(l.parentNode,"files-name-editable");this.revertRename(o,t);return BX.PreventDefault(i)}},this))}}var c=BX.findChild(t,{className:"feed-add-post-loading"},true),u=BX.delegate(function(){this.deleteFile(t,i)},this),h=BX.create("SPAN",{props:{className:"del-but"},events:{click:u}});if(!!c){var m=BX.findChild(c,{className:"del-but"},true);if(!!m)BX.bind(m,"click",u);else c.appendChild(h.cloneNode(true))}if(!BX.findChild(t,{className:"files-info"},true)){t.appendChild(BX.create("TD",{props:{className:"files-info"}}))}if(!BX.findChild(t,{className:"files-del-btn"},true)){t.appendChild(BX.create("TD",{props:{className:"files-del-btn"},children:[h]}))}if(!h.hasAttribute("bx-bound")){h.setAttribute("bx-bound","Y");BX.bind(h,"click",u);BX.onCustomEvent(t,"OnMkClose",[t])}var p=BX.findChild(t,{className:"transformer-upgrade-popup"},true);if(p){BX.show(p.parentNode);BX.bind(p,"click",BX.proxy(BX.Disk.UF.showTransformationUpgradePopup,this))}},deleteFile:function(e,t){if(!!t.__disk_element_id){BX.Disk.ajax({url:this.urlDeleteFile,method:"POST",dataType:"json",data:{attachedId:t.__disk_element_id},onsuccess:function(e){}});BX.onCustomEvent(this.controller.parentNode,"OnFileUploadRemove",[t.__disk_element_id,this])}BX.removeCustomEvent(t,"onFileIsAttached",this._onFileIsAttached);BX.removeCustomEvent(t,"onFileIsAppended",this._onFileIsAppended);BX.removeCustomEvent(t,"onFileIsBound",this._onFileIsBound);BX.removeCustomEvent(t,"onUploadProgress",this._onUploadProgress);BX.removeCustomEvent(t,"onUploadDone",this._onUploadDone);BX.removeCustomEvent(t,"onUploadError",this._onUploadError);delete t.hash;t.deleteFile("deleteFile");BX.remove(e);this.setHiddenUfValue()},setHiddenUfValue:function(){var e=BX.findChild(this.controller,{className:"diskuf-extended"},true);BX.append(BX.create("input",{props:{name:this.params.controlName,type:"hidden",value:""}}),e)},move:function(e,t,i){var s=this._addUrlParam(this.urlSelect.replace("ACTION=SELECT","").replace("MULTI=Y",""),"ID=E"+e+"&NAME="+t+"&wish=fakemove");while(s.indexOf("&&")>=0)s=s.replace("&&","&");var o=i||BX("disk-edit-attach"+e),n=BX.findChild(o,{className:"f-wrap"},true);BX.DiskFileDialog.arParams={};BX.DiskFileDialog.arParams[this.dialogName]={element_id:e,element_name:n.innerHTML};BX.addCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection);BX.addCustomEvent(BX.DiskFileDialog,"selectItem",this._selectItem);BX.addCustomEvent(BX.DiskFileDialog,"unSelectItem",this._unSelectItem);return BX.ajax.get(s,"dialogName="+this.dialogName,BX.delegate(function(){setTimeout(BX.delegate(function(){BX.DiskFileDialog.obCallback[this.dialogName]={saveButton:this._selectFolder};BX.DiskFileDialog.openDialog(this.dialogName)},this),100)},this))},rename:function(e,t){if(!this.urlRenameFile){return}var i=BX.findChild(t,{className:"files-name-editable"},true);var s=BX.findChild(t,{className:"files-name-edit-inp"},true);var o=BX.findChild(t,{className:"f-wrap"},true);var n=o.textContent||o.innerText;var a=n.split(".").pop();var l=s.value+"."+a;if(!!i){BX.focus(s);BX.bind(s,"blur",BX.proxy(this.onBlurRenameInput,this))}else if(s.value&&l!==n){BX.adjust(o,{text:l});var r=t.getAttribute("bx-agentFileId");var d=r?this.agent.getItem(r):null;if(!!d){d.item.file.name=l;d.item.name=l}var c=this.manager?this.manager.checkFile("disk_file"+e):null;if(!!c){c.name=l}BX.Disk.ajax({url:this.urlRenameFile,method:"POST",dataType:"json",data:{newName:l,attachedId:e},onsuccess:function(e){}})}},revertRename:function(e,t){if(!this.urlRenameFile){return}var i=BX.findChild(t,{className:"files-name-editable"},true);var s=BX.findChild(t,{className:"files-name-edit-inp"},true);var o=BX.findChild(t,{className:"f-wrap"},true);var n=o.textContent||o.innerText;var a=n.split(".");var l=a.pop();s.value=a.join(".")},showMovedFile:function(e,t,i){if(!e)return false;var s,o=e,n=BX("disk-edit-attach"+o),a=BX.findChild(n,{className:"files-path"},true);BX.cleanNode(a);i=i.split("/").join(" / ");a.innerHTML=i;var l=parseInt(a.offsetWidth);var r=parseInt(a.parentNode.offsetWidth)-150,d;s=r/(l/i.length);if(l>r){d=Math.floor(s/2)+1;i=i.substr(0,d)+" ... "+i.substr(i.length-d);a.innerHTML=i}var c=BX("diskuf-doc"+o);if(!!c){var u=this._fileUnserialize(c.value);u.section=t["sectionID"];u.iblock=t["iblockID"];c.value=this._fileSerialize(u)}return true},_fileUnserialize:function(e){if(!BX.type.isString(e))return false;var t=e.split("|");return{id:t[0]||0,section:t[1]||0,iblock:t[2]||0}},_fileSerialize:function(e){var t=[e.id,e.section,e.iblock];return t.join("|")},selectFolder:function(e,t,i,s){var o=false,n=false,a,l,r;if(BX.DiskFileDialog.arParams&&BX.DiskFileDialog.arParams[this.dialogName]&&BX.DiskFileDialog.arParams[this.dialogName]["element_id"])o=BX.DiskFileDialog.arParams[this.dialogName]["element_id"];var d=BX.delegate(function(e,t,i,s){BX.Disk.ajax({method:"POST",dataType:"json",url:BX.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","moveUploadedFile"),data:{attachedId:e,targetFolderId:t},onsuccess:BX.delegate(function(t){if(!t||t.status!="success"){BX.Disk.showModalWithStatusAction(t);return}this.showMovedFile(e,i,s)},this)})},this);for(a in i){if(i.hasOwnProperty(a)&&i[a].type==="folder"){l=e.name+i[a].path;r={sectionID:a,iblockID:e.iblock_id};d(o,i[a].id,r,l);n=true}}if(!n){l=e.name;r={sectionID:e.section_id,iblockID:e.iblock_id};if(!!s&&!!s.path&&s.path!="/"){l+=s.path;r.sectionID=s.id;if(!!s){d(o,s.id,r,l)}}}BX.removeCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection);BX.removeCustomEvent(BX.DiskFileDialog,"loadItemsDone",this._checkFileName);BX.removeCustomEvent(BX.DiskFileDialog,"selectItem",this._selectItem);BX.removeCustomEvent(BX.DiskFileDialog,"unSelectItem",this._unSelectItem)},checkFileName:function(e){if(this.noticeTimeout){clearTimeout(this.noticeTimeout);this.noticeTimeout=null}if(!!e&&e!=this.dialogName)return;var t=BX.DiskFileDialog.arParams[this.dialogName]["element_name"];var i=false,s;for(s in BX.DiskFileDialog.obItems[this.dialogName]){if(BX.DiskFileDialog.obItems[this.dialogName].hasOwnProperty(s)){if(BX.DiskFileDialog.obItems[this.dialogName][s]["name"]==t)i=true;if(i)break}}if(i)BX.DiskFileDialog.showNotice(BX.message("DISK_FILE_EXISTS"),this.dialogName);else BX.DiskFileDialog.closeNotice(this.dialogName)},selectItem:function(e,t,i){if(i!=this.dialogName)return;var s=t.substr(1);var o=BX.DiskFileDialog.obCurrentTab[i].link;o=o.replace("/index.php","")+"/element/upload/"+s+"/?use_light_view=Y&AJAX_CALL=Y&SIMPLE_UPLOAD=Y&IFRAME=Y&sessid="+BX.bitrix_sessid()+"&SECTION_ID="+s+"&CHECK_NAME="+BX.DiskFileDialog.arParams[this.dialogName]["element_name"];o=o.replace("/files/lib/","/files/");BX.ajax.loadJSON(o,BX.delegate(function(e){var t=e.permission===true&&e["okmsg"]!="";if(this.noticeTimeout){clearTimeout(this.noticeTimeout);this.noticeTimeout=null}this.noticeTimeout=setTimeout(BX.delegate(function(){if(t){BX.DiskFileDialog.showNotice(this.msg.file_exists,this.dialogName)}else{BX.DiskFileDialog.closeNotice(this.dialogName)}},this),200)},this))},unSelectItem:function(){if(this.noticeTimeout){clearTimeout(this.noticeTimeout);this.noticeTimeout=null}this.noticeTimeout=setTimeout(BX.delegate(function(){this.checkFileName()},this),200)},openSection:function(e,t){if(t==this.dialogName){BX.DiskFileDialog.target[t]=this._addUrlParam(e,"dialog2=Y")}},openSectionCloud:function(e,t){if(t==this.dialogName){BX.DiskFileDialog.target[t]=this._addUrlParam(e,"dialog2=Y");BX.DiskFileDialog.target[t]=this._addUrlParam(BX.DiskFileDialog.target[t],"cloudImport=1")}},selectFile:function(e,t,i){var s=[],o;for(o in i){if(i.hasOwnProperty(o)){if(i[o].type=="file"&&!BX(this.prefix+o)){i[o].sizeFormatted=i[o]["size"];i[o].size=i[o]["sizeInt"];if(!i[o]["ext"])i[o]["ext"]=i[o]["name"].split(".").pop();if(!i[o]["storage"])i[o]["storage"]="";s.push(i[o])}}}this.agent.onAttach(s,s);BX.removeCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection)},selectCloudFile:function(e,t,i){var s=[],o;for(o in i){if(i.hasOwnProperty(o)){if(i[o].type=="file"&&!BX(this.prefix+o)){if(i[o].hasOwnProperty("provider")){i[o].service=i[o].provider}else{i[o].service=n}i[o].sizeFormatted=i[o]["size"];i[o].size=i[o]["sizeInt"];if(!i[o]["ext"])i[o]["ext"]=i[o]["name"].split(".").pop();if(!i[o]["storage"])i[o]["storage"]="";s.push(i[o])}}}this.agent.onAttach(s,s);BX.removeCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection)},showSelectDialog:function(){this._openSection=BX.proxy(this.openSection,this);this._selectFile=BX.proxy(this.selectFile,this);BX.addCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection);BX.ajax.get(this.urlSelect,"dialogName="+this.dialogName,BX.delegate(function(){setTimeout(BX.delegate(function(){BX.DiskFileDialog.obCallback[this.dialogName]={saveButton:this._selectFile};BX.DiskFileDialog.openDialog(this.dialogName)},this),10)},this))},showSelectDialogCloudImport:function(e){var t=e.target||e.srcElement;if(!BX.hasClass(t,"diskuf-selector-link-cloud")){t=BX.findParent(t,{className:"diskuf-selector-link-cloud"})}if(!t||!t.getAttribute("data-bx-doc-handler"))return;n=t.getAttribute("data-bx-doc-handler");this._openSection=BX.proxy(this.openSectionCloud,this);this._selectFile=BX.proxy(this.selectFile,this);this._selectCloudFile=BX.proxy(this.selectCloudFile,this);BX.addCustomEvent(BX.DiskFileDialog,"loadItems",this._openSection);BX.ajax.get(this.urlSelect,"&cloudImport=1&service="+n+"&dialogName="+this.dialogName,BX.delegate(function(){setTimeout(BX.delegate(function(){BX.DiskFileDialog.obCallback[this.dialogName]={saveButton:this._selectCloudFile};BX.DiskFileDialog.openDialog(this.dialogName)},this),10)},this))}};return t}();BX.Disk.UF.dndCatcher={};BX.Disk.UF.add=function(e){e["controller"]=BX("diskuf-selectdialog-"+e["UID"]);if(e["controller"]&&BX.isNodeInDom(e["controller"])){e["values"]=BX.findChildren(e["controller"],{className:"wd-inline-file"},true);var t=BX(e["controller"]).parentNode;BX.onCustomEvent(e["controller"],"DiskLoadFormControllerWasBound",[e,"DiskLoadFormControllerWasBound"]);if(!BX(e["controller"]).hasAttribute("bx-disk-load-is-bound")){BX(e["controller"]).setAttribute("bx-disk-load-is-bound","Y");BX.addCustomEvent(t,"DiskLoadFormController",function(t){BX.Disk.UF.initialize(t,e)})}if(!!e["values"]&&e["values"].length>0&&!e["hideSelectDialog"])BX.onCustomEvent(e["controller"].parentNode,"DiskLoadFormController",["show"])}};BX.Disk.UF.initialize=function(e,t){e=e==="show"||e==="hide"?e:t["controller"].style.display!="none"?"hide":"show";if(!t["controller"].loaded){t["controller"].loaded=true;a[t["UID"]]=new BX.Disk.UF(t)}if(e=="show"){if(t["controller"].style.display!="block"){BX.fx.show(t["controller"],"fade",{time:.2});if(t["switcher"]&&t["switcher"].style.display!="none")BX.fx.hide(t["switcher"],"fade",{time:.1});BX.onCustomEvent(t["controller"],"onControllerIsShown",[t["controller"],a[t["UID"]]]);o=a[t["UID"]]}}else if(t["controller"].style.display!="none"){o=null;BX.fx.hide(t["controller"],"fade",{time:.2});BX.onCustomEvent(t["controller"],"onControllerIsHidden",[t["controller"],a[t["UID"]]])}return a[t["UID"]]};var r=function(e){return BX.Disk.ajaxPromise({url:BX.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","getBreadcrumbs"),method:"POST",dataType:"json",data:{attachedId:e}})};var d=function(e){if(!BX(e)||e.hasAttribute("bx-is-bound"))return;e.setAttribute("bx-is-bound","Y");this.img=e;this.node=e.parentNode.parentNode.parentNode;BX.unbindAll(e);BX.unbindAll(this.node);BX.show(this.node);BX.remove(this.node.nextSibling);this.id="wufdp_"+Math.random()};d.prototype={turnOn:function(){this.timeout=setTimeout(BX.delegate(function(){this.show()},this),500)},turnOff:function(){clearTimeout(this.timeout);this.timeout=null;this.hide()},show:function(){if(this.popup!=null)this.popup.close();if(this.popup==null){var e={width:this.img.naturalWidth,height:this.img.naturalHeight};if(BX["UploaderUtils"]){var t=BX.UploaderUtils.scaleImage(e,{width:parseInt(BX.message("DISK_THUMB_WIDTH")),height:parseInt(BX.message("DISK_THUMB_HEIGHT"))});e=t.destin}this.popup=new BX.PopupWindow("bx-wufd-preview-img-"+this.id,this.img.parentNode,{lightShadow:true,offsetTop:-7,offsetLeft:(51-28)/2+14,autoHide:true,closeByEsc:true,bindOptions:{position:"top"},events:{onPopupClose:function(){this.destroy()},onPopupDestroy:BX.proxy(function(){this.popup=null},this)},content:BX.create("DIV",{props:e,children:[BX.create("IMG",{props:e,attrs:{src:this.img.src}})]})});this.popup.show()}this.popup.setAngle({position:"bottom"});this.popup.bindOptions.forceBindPosition=true;this.popup.adjustPosition();this.popup.bindOptions.forceBindPosition=false},hide:function(){if(this.popup!=null)this.popup.close()}};BX.addCustomEvent("onDiskPreviewIsReady",function(e){new d(e)});BX.Disk.UF.runImport=function(e){BX.Disk.showActionModal({text:BX.message("DISK_UF_FILE_STATUS_PROCESS_LOADING"),showLoaderIcon:true,autoHide:false});BX.Disk.ExternalLoader.reloadLoadAttachedObject({attachedObject:{id:e.id,name:e.name,service:e.service},onFinish:BX.delegate(function(e){if(e.hasOwnProperty("hasNewVersion")&&!e.hasNewVersion){BX.Disk.showActionModal({text:BX.message("DISK_UF_FILE_STATUS_HAS_LAST_VERSION"),showSuccessIcon:true,autoHide:true})}else if(e.status==="success"){BX.Disk.showActionModal({text:BX.message("DISK_UF_FILE_STATUS_SUCCESS_LOADING"),showSuccessIcon:true,autoHide:true})}else{BX.Disk.showActionModal({text:BX.message("DISK_UF_FILE_STATUS_FAIL_LOADING"),autoHide:true})}},this),onProgress:BX.delegate(function(e){},this)}).start()};BX.Disk.UF.setDocumentHandlers=function(e){this.documentHandlers=e};BX.Disk.UF.getDocumentHandler=function(e){if(!this.documentHandlers){return""}var t=this.documentHandlers.find(function(t){return t.code===e});return t||{}};BX.Disk.UF.getDocumentHandlers=function(e){return this.documentHandlers};BX.Disk.UF.disableAutoCommentToAttachedObject=function(e){var t=e.attachedId;BX.Disk.ajax({method:"POST",dataType:"json",url:BX.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","disableAutoCommentToAttachedObject"),data:{attachedId:t},onsuccess:BX.delegate(function(e){},this)})};BX.Disk.UF.enableAutoCommentToAttachedObject=function(e){var t=e.attachedId;BX.Disk.ajax({method:"POST",dataType:"json",url:BX.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","enableAutoCommentToAttachedObject"),data:{attachedId:t},onsuccess:BX.delegate(function(e){},this)})};BX.Disk.UF.showTransformationUpgradePopup=function(e){B24.licenseInfoPopup.show("disk_transformation_video_limit",BX.message("DISK_UF_CONTROLLER_TRANSFORMATION_UPGRADE_POPUP_TITLE"),BX.message("DISK_UF_CONTROLLER_TRANSFORMATION_UPGRADE_POPUP_CONTENT"),false)};BX.Disk.UFShowController=function(e){if(!BX.type.isPlainObject(e)){e={}}this.entityType=BX.type.isNotEmptyString(e.entityType)?e.entityType:"";this.entityId=parseInt(e.entityId)>0?e.entityId:"";this.signedParameters=BX.type.isNotEmptyString(e.signedParameters)?e.signedParameters:"";this.loader=null;this.container=BX.type.isNotEmptyString(e.nodeId)?document.getElementById(e.nodeId):null;if(this.container){var t=this.container.querySelector(".disk-uf-file-switch-control");if(t){BX.Event.bind(t,"click",BX.Disk.UFShowController.onToggleView)}}if(BX.type.isNotEmptyString(e.nodeId)){l[e.nodeId]=this}};BX.Disk.UFShowController.getInstance=function(e){return BX.type.isNotEmptyString(e)&&l[e]?l[e]:null};BX.Disk.UFShowController.onToggleView=function(e){var t=e.currentTarget.closest(".diskuf-files-toggle-container"),i=e.currentTarget.getAttribute("data-bx-view-type");if(!BX.type.isDomNode(t)||!BX.type.isNotEmptyString(t.id)){return}var s=BX.Disk.UFShowController.getInstance(t.id);if(s){s.toggleViewType({viewType:i})}e.preventDefault()};BX.Disk.UFShowController.prototype.toggleViewType=function(e){this.showToggleViewLoader();BX.ajax.runComponentAction("bitrix:disk.uf.file","toggleViewType",{mode:"class",signedParameters:this.signedParameters,data:{params:{viewType:e.viewType}}}).then(function(e){this.hideToggleViewLoader();BX.clean(this.container);BX.html(this.container,e.data.html)}.bind(this),function(e){this.hideToggleViewLoader()})};BX.Disk.UFShowController.prototype.showToggleViewLoader=function(e){this.container.classList.add("diskuf-files-toggle-container-active");this.loader=new BX.Loader({target:this.container});this.loader.show()};BX.Disk.UFShowController.prototype.hideToggleViewLoader=function(e){this.container.classList.remove("diskuf-files-toggle-container-active");if(this.loader){this.loader.destroy()}};e.DiskCreateDocument=function(e,t){t.preventDefault();if(!BX.Disk.getDocumentService()){BX.Disk.saveDocumentService("l")}if(!o){return}if(!e){return}var i=function(e){var t=e.object.name.split(".");t.pop();var i={};i["E"+e.object.id]={type:"file",id:"n"+e.object.id,name:e.object.name,label:t.join("."),storage:e.folderName,size:e.object.size,sizeInt:e.object.sizeInt,ext:e.object.extension,canChangeName:true,link:e.link};setTimeout(function(){o.selectFile({},{},i)},200)};if(BX.Disk.Document.Local.Instance.isSetWorkWithLocalBDisk()){BX.Disk.Document.Local.Instance.createFile({type:e}).then(function(e){console.log("local createFile",e);i(e)}.bind(this));return}var s=new BX.Disk.Document.CreateProcess({typeFile:e,serviceCode:BX.Disk.getDocumentService(),onAfterSave:function(e,t){if(e.status!=="success"){return}if(!t){BX.ajax.runAction("disk.api.file.getMetaDataForCreatedFileInUf",{data:{id:e.object.id}}).then(function(e){i(e.data)})}else{i(t)}}});s.start()};e.DiskOpenMenuCreateService=function(e){var t=[BX.Disk.UF.getDocumentHandler("onlyoffice")?{text:BX.Disk.UF.getDocumentHandler("onlyoffice").name,className:"bx-viewer-popup-item item-b24-docs",onclick:function(t,i){i.getMenuWindow().close();BX.Disk.saveDocumentService("onlyoffice");BX.adjust(e,{text:BX.Disk.UF.getDocumentHandler("onlyoffice").name})}}:null,BX.Disk.Document.Local.Instance.isEnabled()?{text:BX.message("DISK_FOLDER_TOOLBAR_LABEL_LOCAL_BDISK_EDIT"),className:"bx-viewer-popup-item item-b24",onclick:function(t,i){i.getMenuWindow().close();BX.Disk.saveDocumentService("l");BX.adjust(e,{text:BX.message("DISK_FOLDER_TOOLBAR_LABEL_LOCAL_BDISK_EDIT")})}}:null,{text:BX.Disk.UF.getDocumentHandler("gdrive").name,className:"bx-viewer-popup-item item-gdocs",onclick:function(t,i){i.getMenuWindow().close();BX.Disk.saveDocumentService("gdrive");BX.adjust(e,{text:BX.Disk.UF.getDocumentHandler("gdrive").name})}},{text:BX.Disk.UF.getDocumentHandler("office365").name,className:"bx-viewer-popup-item item-office365",onclick:function(t,i){i.getMenuWindow().close();BX.Disk.saveDocumentService("office365");BX.adjust(e,{text:BX.Disk.UF.getDocumentHandler("office365").name})}},{text:BX.Disk.UF.getDocumentHandler("onedrive").name,className:"bx-viewer-popup-item item-office",onclick:function(t,i){i.getMenuWindow().close();BX.Disk.saveDocumentService("onedrive");BX.adjust(e,{text:BX.Disk.UF.getDocumentHandler("onedrive").name})}}];BX.PopupMenu.show("disk_open_menu_with_services",BX(e),t,{offsetTop:0,offsetLeft:25,angle:{position:"top",offset:45},autoHide:true,zIndex:1e4,overlay:{opacity:.01},events:{}})};e.DiskOpenMenuImportService=function(e,t){var i=[];for(var s in t){if(!t.hasOwnProperty(s))continue;i.push({text:t[s].name,code:t[s].id,href:"#",onclick:function(e,t){var i=t.layout.item;BX.addClass(i,"diskuf-selector-link-cloud");i.setAttribute("data-bx-doc-handler",t.code);BX.onCustomEvent("onManualChooseCloudImport",[{target:i}]);BX.removeClass(i,"diskuf-selector-link-cloud");i.removeAttribute("data-bx-doc-handler");BX.PopupMenu.destroy("disk_open_menu_with_import_services");return BX.PreventDefault(e)}})}var o=new BX.CViewer({});o.openMenu("disk_open_menu_with_import_services",BX(e),i,{offsetTop:0,offsetLeft:25});return BX.PreventDefault()};e.DiskActionFileMenu=function(e,t,i){s++;BX.PopupMenu.show("bx-viewer-wd-popup"+s+"_"+e,BX(t),i,{angle:{position:"top",offset:25},autoHide:true});return false};e.WDInlineElementClickDispatcher=function(e,t){var i=BX(t);if(i){BX.fireEvent(i,"click")}return false}})(window);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:92:"/local/templates/.default/components/bitrix/crm.timeline/.default/script.js?1654759818490818";s:6:"source";s:75:"/local/templates/.default/components/bitrix/crm.timeline/.default/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
if(typeof(BX.CrmTimelineManager) === "undefined")
{
	BX.CrmTimelineManager = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._ownerTypeId = 0;
		this._ownerId = 0;
		this._ownerInfo = null;
		this._progressSemantics = "";

		this._commentEditor = null;
		this._waitEditor = null;
		this._smsEditor = null;
		this._zoomEditor = null;
		this._chat = null;
		this._schedule = null;
		this._history = null;
		this._fixedHistory = null;
		this._activityEditor = null;
		this._menuBar = null;

		this._userId = 0;
		this._readOnly = false;
		this._pullTagName = "";
	};
	BX.CrmTimelineManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._ownerTypeId = parseInt(this.getSetting("ownerTypeId"));
			this._ownerId = parseInt(this.getSetting("ownerId"));
			this._ownerInfo = this.getSetting("ownerInfo");
			this._progressSemantics = BX.prop.getString(this._settings, "progressSemantics", "");
			this._spotlightFastenShowed = this.getSetting("spotlightFastenShowed", true);
			this._audioPlaybackRate = parseFloat(this.getSetting("audioPlaybackRate", 1));
			var containerId = this.getSetting("containerId");
			if(!BX.type.isNotEmptyString(containerId))
			{
				throw "BX.CrmTimelineManager. A required parameter 'containerId' is missing.";
			}

			this._container = BX(containerId);
			if(!BX.type.isElementNode(this._container))
			{
				throw "BX.CrmTimelineManager. Container node is not found.";
			}
			this._editorContainer = BX(this.getSetting("editorContainer"));

			this._userId = BX.prop.getInteger(this._settings, "userId", 0);
			this._readOnly = BX.prop.getBoolean(this._settings, "readOnly", false);

			var activityEditorId = this.getSetting("activityEditorId");
			if(BX.type.isNotEmptyString(activityEditorId))
			{
				this._activityEditor = BX.CrmActivityEditor.items[activityEditorId];
				if(!(this._activityEditor instanceof BX.CrmActivityEditor))
				{
					throw "BX.CrmTimeline. Activity editor instance is not found.";
				}
			}

			var ajaxId = this.getSetting("ajaxId");
			var currentUrl = this.getSetting("currentUrl");
			var serviceUrl = this.getSetting("serviceUrl");

			this._chat = BX.CrmEntityChat.create(
				this._id,
				{
					manager: this,
					container: this._container,
					data: this.getSetting("chatData"),
					isStubMode: this._ownerId <= 0,
					readOnly: this._readOnly
				}
			);

			this._schedule = BX.CrmSchedule.create(
				this._id,
				{
					manager: this,
					container: this._container,
					activityEditor: this._activityEditor,
					itemData: this.getSetting("scheduleData"),
					isStubMode: this._ownerId <= 0,
					ajaxId: ajaxId,
					serviceUrl: serviceUrl,
					currentUrl: currentUrl,
					userId: this._userId,
					readOnly: this._readOnly
				}
			);

			this._fixedHistory = BX.CrmFixedHistory.create(
				this._id,
				{
					manager: this,
					container: this._container,
					editorContainer: this._editorContainer,
					activityEditor: this._activityEditor,
					itemData: this.getSetting("fixedData"),
					isStubMode: this._ownerId <= 0,
					ajaxId: ajaxId,
					serviceUrl: serviceUrl,
					currentUrl: currentUrl,
					userId: this._userId,
					readOnly: this._readOnly
				}
			);

			this._history = BX.CrmHistory.create(
				this._id,
				{
					manager: this,
					container: this._container,
					fixedHistory: this._fixedHistory,
					activityEditor: this._activityEditor,
					itemData: this.getSetting("historyData"),
					navigation: this.getSetting("historyNavigation", {}),
					filterId: BX.prop.getString(this._settings, "historyFilterId", this._id),
					isFilterApplied: BX.prop.getBoolean(this._settings, "isHistoryFilterApplied", false),
					isStubMode: this._ownerId <= 0,
					ajaxId: ajaxId,
					serviceUrl: serviceUrl,
					currentUrl: currentUrl,
					userId: this._userId,
					readOnly: this._readOnly
				}
			);
			this._schedule.setHistory(this._history);
			this._fixedHistory.setHistory(this._history);

			this._commentEditor = BX.CrmTimelineCommentEditor.create(
				this._id,
				{
					manager: this,
					ownerTypeId: this._ownerTypeId,
					ownerId: this._ownerId,
					serviceUrl: this.getSetting("serviceUrl"),
					container: this.getSetting("editorCommentContainer"),
					input: this.getSetting("editorCommentInput"),
					editorName: this.getSetting("editorCommentEditorName"),
					button: this.getSetting("editorCommentButton"),
					cancelButton: this.getSetting("editorCommentCancelButton")
				}
			);
			this._commentEditor.setVisible(true);
			this._commentEditor.setHistory(this._history);

			if(this._readOnly)
			{
				this._commentEditor.setVisible(false);
			}

			if(BX.prop.getBoolean(this._settings, "enableWait", false))
			{
				this._waitEditor = BX.CrmTimelineWaitEditor.create(
					this._id,
					{
						manager: this,
						ownerTypeId: this._ownerTypeId,
						ownerId: this._ownerId,
						serviceUrl: this.getSetting("serviceUrl"),
						config: this.getSetting("editorWaitConfig", {}),
						targetDates: this.getSetting("editorWaitTargetDates", []),
						container: this.getSetting("editorWaitContainer"),
						configContainer: this.getSetting("editorWaitConfigContainer"),
						input: this.getSetting("editorWaitInput"),
						button: this.getSetting("editorWaitButton"),
						cancelButton: this.getSetting("editorWaitCancelButton")
					}
				);
				this._waitEditor.setVisible(false);
			}

			if(BX.prop.getBoolean(this._settings, "enableSms", false))
			{
				this._smsEditor = BX.CrmTimelineSmsEditor.create(
					this._id,
					{
						manager: this,
						ownerTypeId: this._ownerTypeId,
						ownerId: this._ownerId,
						serviceUrl: this.getSetting("serviceUrl"),
						config: this.getSetting("editorSmsConfig", {}),
						container: this.getSetting("editorSmsContainer"),
						input: this.getSetting("editorSmsInput"),
						button: this.getSetting("editorSmsButton"),
						cancelButton: this.getSetting("editorSmsCancelButton")
					}
				);
				this._smsEditor.setVisible(false);
			}

			if (BX.prop.getBoolean(this._settings, "enableZoom", false) && BX.prop.getBoolean(this._settings, "statusZoom", false))
			{
				this._zoomEditor = new BX.Crm.Zoom(
					{
						id: this._id,
						manager: this,
						ownerTypeId: this._ownerTypeId,
						ownerId: this._ownerId,
						container: this.getSetting("editorZoomContainer"),
						userId: this._userId
					}
				);
				this._zoomEditor.setVisible(false);
			}

			if(BX.prop.getBoolean(this._settings, "enableRest", false))
			{
				this._restEditor = BX.CrmTimelineRestEditor.create(
					this._id,
					{
						manager: this,
						ownerTypeId: this._ownerTypeId,
						ownerId: this._ownerId,
						placement: BX.prop.getString(this._settings, "restPlacement", '')
					}
				);
			}

			this._chat.layout();
			this._schedule.layout();
			this._fixedHistory.layout();
			this._history.layout();

			this._pullTagName = BX.prop.getString(this._settings, "pullTagName", "");
			if(this._pullTagName !== "")
			{
				BX.addCustomEvent("onPullEvent-crm", BX.delegate(this.onPullEvent, this));
				this.extendWatch();
			}
			this._menuBar = BX.CrmTimelineMenuBar.create(
				this._id,
				{
					container: BX(this.getSetting("menuBarContainer")),
					menuId: this.getSetting("menuBarObjectId"),
					ownerInfo: this._ownerInfo,
					activityEditor: this._activityEditor,
					commentEditor: this._commentEditor,
					waitEditor: this._waitEditor,
					smsEditor: this._smsEditor,
					zoomEditor: this._zoomEditor,
					restEditor: this._restEditor,
					readOnly: this._readOnly,
					manager: this
				}
			);

			if(!this._readOnly)
			{
				this._menuBar.reset();
			}

			BX.addCustomEvent(window, "Crm.EntityProgress.Change", BX.delegate(this.onEntityProgressChange, this));
			BX.ready(function() {
				window.addEventListener("scroll", BX.throttle(function() {
					BX.LazyLoad.onScroll();
				}, 80));
			});
		},
		extendWatch: function()
		{
			if(BX.type.isFunction(BX.PULL) && this._pullTagName !== "")
			{
				BX.PULL.extendWatch(this._pullTagName);
				window.setTimeout(BX.delegate(this.extendWatch, this), 60000);
			}
		},
		onPullEvent: function(command, params)
		{
			if(this._pullTagName !== BX.prop.getString(params, "TAG", ""))
			{
				return;
			}

			if(command === "timeline_chat_create")
			{
				this.processChatCreate(params);
			}
			else if(command === "timeline_activity_add")
			{
				this.processActivityExternalAdd(params);
			}
			else if(command === "timeline_activity_update")
			{
				this.processActivityExternalUpdate(params);
			}
			else if(command === "timeline_activity_delete")
			{
				this.processActivityExternalDelete(params);
			}
			else if(command === "timeline_comment_add")
			{
				this.processCommentExternalAdd(params);
			}
			else if(command === "timeline_link_add")
			{
				this.processLinkExternalAdd(params);
			}
			else if(command === "timeline_link_delete")
			{
				this.processLinkExternalDelete(params);
			}
			else if(command === "timeline_document_add")
			{
				this.processLinkExternalAdd(params);
			}
			else if(command === "timeline_document_update")
			{
				this.processDocumentExternalUpdate(params);
			}
			else if(command === "timeline_document_delete")
			{
				this.processDocumentExternalDelete(params);
			}
			else if(command === "timeline_comment_update")
			{
				this.processCommentExternalUpdate(params);
			}
			else if(command === "timeline_comment_delete")
			{
				this.processCommentExternalDelete(params);
			}
			else if(command === "timeline_changed_binding")
			{
				this.processChangeBinding(params);
			}
			else if(command === "timeline_item_change_fasten")
			{
				this.processItemChangeFasten(params);
			}
			else if(command === "timeline_item_update")
			{
				this.processItemExternalUpdate(params);
			}
			else if(command === "timeline_wait_add")
			{
				this.processWaitExternalAdd(params);
			}
			else if(command === "timeline_wait_update")
			{
				this.processWaitExternalUpdate(params);
			}
			else if(command === "timeline_wait_delete")
			{
				this.processWaitExternalDelete(params);
			}
			else if(command === "timeline_bizproc_status")
			{
				this.processBizprocStatus(params);
			}
			else if(command === "timeline_scoring_add")
			{
				this.processScoringExternalAdd(params);
			}
		},
		processChatCreate: function(params)
		{
			if(this._chat)
			{
				this._chat.setData(BX.prop.getObject(params, "CHAT_DATA", {}));
				this._chat.refreshLayout();
			}
		},
		processActivityExternalAdd: function(params)
		{
			var entityData, scheduleItemData, historyItemData, scheduleItem, historyItem;

			entityData = BX.prop.getObject(params, "ENTITY", null);
			scheduleItemData = BX.prop.getObject(params, "SCHEDULE_ITEM", null);
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);


			if(entityData && historyItemData && !BX.type.isPlainObject(historyItemData["ASSOCIATED_ENTITY"]))
			{
				historyItemData["ASSOCIATED_ENTITY"] = entityData;
			}

			if(scheduleItemData !== null && this._schedule.getItemByData(scheduleItemData) === null)
			{
				scheduleItem = this.addScheduleItem(scheduleItemData);
				scheduleItem.addWrapperClass("crm-entity-stream-section-updated", 1000);
			}

			if(historyItemData !== null)
			{
				historyItem = this._history.findItemById(BX.prop.getString(historyItemData, "ID"));
				if (!historyItem)
				{
					historyItem = this.addHistoryItem(historyItemData);
					BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
				}
			}
		},
		processActivityExternalUpdate: function(params)
		{
			var entityData, scheduleItemData, scheduleItem, historyItemData, historyItem, fixedHistoryItem;

			entityData = BX.prop.getObject(params, "ENTITY", null);
			scheduleItemData = BX.prop.getObject(params, "SCHEDULE_ITEM", null);
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);

			if(entityData)
			{
				if(historyItemData && !BX.type.isPlainObject(historyItemData["ASSOCIATED_ENTITY"]))
				{
					historyItemData["ASSOCIATED_ENTITY"] = entityData;
				}

				var entityId = BX.prop.getInteger(entityData, "ID", 0);
				var historyItems = this._history.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.activity, entityId);
				for(var i = 0, length = historyItems.length; i < length; i++)
				{
					historyItem = historyItems[i];
					historyItem.setAssociatedEntityData(entityData);
					historyItem.refreshLayout();
				}
				var fixedHistoryItems = this._fixedHistory.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.activity, entityId);
				for(var i = 0, length = fixedHistoryItems.length; i < length; i++)
				{
					fixedHistoryItem = fixedHistoryItems[i];
					fixedHistoryItem.setAssociatedEntityData(entityData);
					fixedHistoryItem.refreshLayout();
				}
			}

			if(scheduleItemData !== null)
			{
				scheduleItem = this._schedule.getItemByAssociatedEntity(
					BX.CrmEntityType.enumeration.activity,
					BX.prop.getInteger(scheduleItemData, "ASSOCIATED_ENTITY_ID")
				);

				if(scheduleItem)
				{
					scheduleItem.setData(scheduleItemData);
					if(!scheduleItem.isDone())
					{
						this._schedule.refreshItem(scheduleItem);
					}
					else
					{
						if(historyItemData)
						{
							this._schedule.transferItemToHistory(
								scheduleItem,
								historyItemData
							);
							//History data are already processed
							historyItemData = null;
						}
						else
						{
							this._schedule.deleteItem(scheduleItem);
						}
					}
				}
				else if(!BX.CrmScheduleItem.isDone(scheduleItemData))
				{
					scheduleItem = this.addScheduleItem(scheduleItemData);
					scheduleItem.addWrapperClass("crm-entity-stream-section-updated", 1000);
				}
			}

			if(historyItemData !== null)
			{
				historyItem = this._history.findItemById(BX.prop.getString(historyItemData, "ID"));
				if(!historyItem)
				{
					historyItem = this.addHistoryItem(historyItemData);
					BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
				}
				else
				{
					historyItem.setData(historyItemData);
					historyItem.refreshLayout();
					fixedHistoryItem = this._fixedHistory.findItemById(BX.prop.getString(historyItemData, "ID"));
					if (fixedHistoryItem)
					{
						fixedHistoryItem.setData(historyItemData);
						fixedHistoryItem.refreshLayout()
					}
				}
			}
		},
		processActivityExternalDelete: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			var historyItems = this._history.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.activity, entityId);
			for(var i = 0, length = historyItems.length; i < length; i++)
			{
				this._history.deleteItem(historyItems[i]);
			}

			var fixedHistoryItems = this._fixedHistory.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.activity, entityId);
			for(var i = 0, length = fixedHistoryItems.length; i < length; i++)
			{
				this._fixedHistory.deleteItem(fixedHistoryItems[i]);
			}

			var	scheduleItem = this._schedule.getItemByAssociatedEntity(BX.CrmEntityType.enumeration.activity, entityId);
			if(scheduleItem)
			{
				this._schedule.deleteItem(scheduleItem);
			}
		},
		processCommentExternalAdd: function(params)
		{
			var historyItemData, historyItem;
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			if(historyItemData !== null)
			{
				window.setTimeout(
					BX.delegate(function() {
						if (!this._history.findItemById(historyItemData['ID']))
						{
							historyItem = this.addHistoryItem(historyItemData);
							BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
						}
					}, this),
					1500
				);
			}
		},
		processLinkExternalAdd: function(params)
		{
			var historyItemData, historyItem;
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			if(historyItemData !== null)
			{
				historyItem = this.addHistoryItem(historyItemData);
				BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
			}
		},
		processLinkExternalDelete: function(params)
		{
			this.processLinkExternalAdd(params);
		},
		processCommentExternalUpdate: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			var historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			var updateItem = this._history.findItemById(entityId);
			if (updateItem instanceof BX.CrmHistoryItemComment && historyItemData !== null)
			{
				updateItem.setData(historyItemData);
				updateItem.switchToViewMode();
			}
			var updateFixedItem = this._fixedHistory.findItemById(entityId);
			if (updateFixedItem instanceof BX.CrmHistoryItemComment && historyItemData !== null)
			{
				updateFixedItem.setData(historyItemData);
				updateFixedItem.switchToViewMode();
			}
		},
		processCommentExternalDelete: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			window.setTimeout(
				BX.delegate(function() {
					var deleteItem = this._history.findItemById(entityId);
					if (deleteItem instanceof BX.CrmHistoryItemComment)
						this._history.deleteItem(deleteItem);
					var deleteFixedItem = this._fixedHistory.findItemById(entityId);
					if (deleteFixedItem instanceof BX.CrmHistoryItemComment)
						this._fixedHistory.deleteItem(deleteFixedItem);
				}, this),
				1200
			);
		},
		processDocumentExternalDelete: function(params)
		{
			window.setTimeout(
				BX.delegate(function() {
					var historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
					var i, length;
					var associatedEntityId = BX.prop.getInteger(historyItemData, "ASSOCIATED_ENTITY_ID", 0);
					var historyItems = this._history.getItemsByAssociatedEntity(
						BX.CrmEntityType.enumeration.document,
						associatedEntityId
					);
					for(i = 0, length = historyItems.length; i < length; i++)
					{
						if(historyItems[i] instanceof BX.CrmHistoryItemDocument)
						{
							this._history.deleteItem(historyItems[i]);
						}
					}
					historyItems = this._fixedHistory.getItemsByAssociatedEntity(
						BX.CrmEntityType.enumeration.document,
						associatedEntityId
					);
					for(i = 0, length = historyItems.length; i < length; i++)
					{
						if(historyItems[i] instanceof BX.CrmHistoryItemDocument)
						{
							this._fixedHistory.deleteItem(historyItems[i]);
						}
					}
				}, this),
				100
			);
		},
		processDocumentExternalUpdate: function(params)
		{
			var historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			var id = BX.prop.getInteger(historyItemData, "ID", 0);
			var updateItem = this._history.findItemById(id);
			if (updateItem instanceof BX.CrmHistoryItemDocument && historyItemData !== null)
			{
				updateItem.setData(historyItemData);
				updateItem.updateWrapper();
			}
			var updateFixedItem = this._fixedHistory.findItemById(id);
			if (updateFixedItem instanceof BX.CrmHistoryItemDocument && historyItemData !== null)
			{
				updateFixedItem.setData(historyItemData);
				updateFixedItem.updateWrapper();
			}
		},
		processChangeBinding: function(params)
		{
			var entityId = BX.prop.getString(params, "OLD_ID", 0);
			var entityNewId = BX.prop.getString(params, "NEW_ID", 0);
			var item = this._history.findItemById(entityId);
			if (item instanceof BX.CrmHistoryItem)
			{
				item._id = entityNewId;
				var itemData = item.getData();
				itemData.ID = entityNewId;
				item.setData(itemData);
			}

			var fixedItem = this._fixedHistory.findItemById(entityId);
			if (fixedItem instanceof BX.CrmHistoryItem)
			{
				fixedItem._id = entityNewId;
				var fixedItemData = fixedItem.getData();
				fixedItemData.ID = entityNewId;
				fixedItem.setData(fixedItemData);
			}
		},
		processItemChangeFasten: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			var historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			window.setTimeout(
				BX.delegate(function() {
					var fixedItem = this._fixedHistory.findItemById(entityId);
					if (historyItemData['IS_FIXED'] === 'N' && fixedItem)
					{
						fixedItem.onSuccessUnfasten();
					}
					else if (historyItemData['IS_FIXED'] === 'Y' && !fixedItem)
					{
						var historyItem = this._history.findItemById(entityId);
						if (historyItem)
						{
							historyItem.onSuccessFasten();
						}
						else
						{
							var newFixedItem = this._fixedHistory.createItem(this._data);
							newFixedItem._isFixed = true;
							this._fixedHistory.addItem(newFixedItem, 0);
							newFixedItem.layout();
						}
					}
				}, this),
				1200
			);
		},
		processItemExternalUpdate: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			var historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			var historyItem = this._history.findItemById(entityId);
			if (historyItem && historyItemData !== null)
			{
				historyItem.setData(historyItemData);
				historyItem.markAsTerminated(this._history.checkItemForTermination(historyItem));
				historyItem.refreshLayout();
				if (historyItem.isTerminated())
				{
					BX.addClass(historyItem._wrapper, "crm-entity-stream-section-last");
				}
			}
		},
		processWaitExternalAdd: function(params)
		{
			var scheduleItemData = BX.prop.getObject(params, "SCHEDULE_ITEM", null);
			if(scheduleItemData !== null)
			{
				this.addScheduleItem(scheduleItemData);
			}
		},
		processWaitExternalUpdate: function(params)
		{
			var entityData, scheduleItemData, scheduleItem, historyItemData, historyItem;

			entityData = BX.prop.getObject(params, "ENTITY", null);
			scheduleItemData = BX.prop.getObject(params, "SCHEDULE_ITEM", null);
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);

			if(entityData)
			{
				if(historyItemData && !BX.type.isPlainObject(historyItemData["ASSOCIATED_ENTITY"]))
				{
					historyItemData["ASSOCIATED_ENTITY"] = entityData;
				}

				var entityId = BX.prop.getInteger(entityData, "ID", 0);
				var historyItems = this._history.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.wait, entityId);
				for(var i = 0, length = historyItems.length; i < length; i++)
				{
					historyItem = historyItems[i];
					historyItem.setAssociatedEntityData(entityData);
					historyItem.refreshLayout();
				}
			}

			if(scheduleItemData !== null)
			{
				scheduleItem = this._schedule.getItemByAssociatedEntity(
					BX.CrmEntityType.enumeration.wait,
					BX.prop.getInteger(scheduleItemData, "ASSOCIATED_ENTITY_ID")
				);
				if(!scheduleItem)
				{
					this.addScheduleItem(scheduleItemData);
				}
				else
				{
					scheduleItem.setData(scheduleItemData);
					if(!scheduleItem.isDone())
					{
						this._schedule.refreshItem(scheduleItem);
					}
					else
					{
						if(historyItemData)
						{
							this._schedule.transferItemToHistory(
								scheduleItem,
								historyItemData
							);
							//History data are already processed
							historyItemData = null;
						}
						else
						{
							this._schedule.deleteItem(scheduleItem);
						}
					}
				}
			}

			if(historyItemData !== null)
			{
				historyItem = this._history.findItemById(BX.prop.getString(historyItemData, "ID"));
				if(!historyItem)
				{
					historyItem = this.addHistoryItem(historyItemData);
					BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
				}
				else
				{
					historyItem.setData(historyItemData);
					historyItem.refreshLayout();
				}
			}
		},
		processWaitExternalDelete: function(params)
		{
			var entityId = BX.prop.getInteger(params, "ENTITY_ID", 0);
			var historyItems = this._history.getItemsByAssociatedEntity(BX.CrmEntityType.enumeration.wait, entityId);
			for(var i = 0, length = historyItems.length; i < length; i++)
			{
				this._history.deleteItem(historyItems[i]);
			}

			var	scheduleItem = this._schedule.getItemByAssociatedEntity(BX.CrmEntityType.enumeration.wait, entityId);
			if(scheduleItem)
			{
				this._schedule.deleteItem(scheduleItem);
			}
		},
		processBizprocStatus: function(params)
		{
			var historyItemData, historyItem;

			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);

			if(historyItemData !== null)
			{
				historyItem = this.addHistoryItem(historyItemData);
				BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
			}
		},
		processScoringExternalAdd: function(params)
		{
			var historyItemData, historyItem;
			historyItemData = BX.prop.getObject(params, "HISTORY_ITEM", null);
			if(historyItemData !== null)
			{
				historyItem = this.addHistoryItem(historyItemData);
				BX.CrmTimelineItemExpand.create(historyItem.getWrapper(), null).run();
			}
		},
		onEntityProgressChange: function(sender, eventArgs)
		{
			if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this._ownerTypeId
				|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this._ownerId
			)
			{
				return;
			}

			var semantics = BX.prop.getString(eventArgs, "semantics", "");
			if(semantics === this._progressSemantics)
			{
				return;
			}

			this._progressSemantics = semantics;
			this._schedule.refreshLayout();
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		getOwnerTypeId: function()
		{
			return this._ownerTypeId;
		},
		getOwnerId: function()
		{
			return this._ownerId;
		},
		getOwnerInfo: function()
		{
			return this._ownerInfo;
		},
		isStubCounterEnabled: function()
		{
			if(this._ownerId <= 0)
			{
				return false;
			}

			return(
				(this._ownerTypeId === BX.CrmEntityType.enumeration.deal || this._ownerTypeId === BX.CrmEntityType.enumeration.lead)
					&& this._progressSemantics === "process"
			);
		},
		getSchedule: function()
		{
			return this._schedule;
		},
		getHistory: function()
		{
			return this._history;
		},
		getFixedHistory: function()
		{
			return this._fixedHistory;
		},
		getWaitEditor: function()
		{
			return this._waitEditor;
		},
		getSmsEditor: function()
		{
			return this._smsEditor;
		},
		processSheduleLayoutChange: function()
		{
		},
		processHistoryLayoutChange: function()
		{
			this._schedule.refreshLayout();
		},
		processEditingCompletion: function(editor)
		{
			if(this._waitEditor && editor === this._waitEditor)
			{
				this._waitEditor.setVisible(false);
				this._commentEditor.setVisible(true);
				this._menuBar.setActiveItemById("comment");
			}
			if(this._smsEditor && editor === this._smsEditor)
			{
				this._smsEditor.setVisible(false);
				this._commentEditor.setVisible(true);
				this._menuBar.setActiveItemById("comment");
			}
		},
		processEditingCancellation: function(editor)
		{
			if(this._waitEditor && editor === this._waitEditor)
			{
				this._waitEditor.setVisible(false);
				this._commentEditor.setVisible(true);
				this._menuBar.setActiveItemById("comment");
			}
			if(this._smsEditor && editor === this._smsEditor)
			{
				this._smsEditor.setVisible(false);
				this._commentEditor.setVisible(true);
				this._menuBar.setActiveItemById("comment");
			}
		},
		addScheduleItem: function(data)
		{
			var item = this._schedule.createItem(data);
			var index = this._schedule.calculateItemIndex(item);
			var anchor = this._schedule.createAnchor(index);
			this._schedule.addItem(item, index);
			item.layout({ anchor: anchor });

			return item;
		},
		addHistoryItem: function(data)
		{
			var item = this._history.createItem(data);
			var index = this._history.calculateItemIndex(item);
			var historyAnchor = this._history.createAnchor(index);
			this._history.addItem(item, index);
			item.layout({ anchor: historyAnchor });

			return item;
		},
		renderAudioDummy: function(durationText, onClick)
		{
			return BX.create("DIV", {
				attrs: { className: "crm-audio-cap-wrap-container"},
				children: [
					BX.create("DIV", {
						attrs: { className: "crm-audio-cap-wrap" },
						children:
							[
								BX.create("DIV", {
									attrs: { className: "crm-audio-cap-time" },
									text: durationText
								})
							],
						events: { click: onClick }
					})
				]
			});
		},
		loadMediaPlayer: function(id, filePath, mediaType, node, duration, options)
		{
			if(!duration)
			{
				duration = 0;
			}
			if(!options)
			{
				options = {};
			}
			var player = new BX.Fileman.Player(id, {
				sources: [
					{
						src: filePath,
						type: mediaType
					}
				],
				isAudio: !options.video,
				skin: options.hasOwnProperty('skin') ? options.skin : 'vjs-timeline_player-skin',
				width: options.width || 350,
				height: options.height || 30,
				duration: duration,
				playbackRate: options.playbackRate || null,
				onInit: function(player)
				{
					player.vjsPlayer.controlBar.removeChild('timeDivider');
					player.vjsPlayer.controlBar.removeChild('durationDisplay');
					player.vjsPlayer.controlBar.removeChild('fullscreenToggle');
					player.vjsPlayer.controlBar.addChild('timeDivider');
					player.vjsPlayer.controlBar.addChild('durationDisplay');
					if(!player.isPlaying())
					{
						player.play();
					}
				}
			});
			BX.cleanNode(node, false);
			node.appendChild(player.createElement());
			player.init();
			// todo remove this after player will be able to get float playbackRate
			if(options.playbackRate > 1)
			{
				player.vjsPlayer.playbackRate(options.playbackRate);
			}
			return player;
		},
		onActivityCreated: function(activity, data)
		{
			//Already processed in onPullEvent
		},
		isSpotlightShowed: function()
		{
			return this._spotlightFastenShowed;
		},
		setSpotlightShowed: function()
		{
			this._spotlightFastenShowed = true;
		},
		getAudioPlaybackRateSelector: function()
		{
			if(!this.audioPlaybackRateSelector)
			{
				this.audioPlaybackRateSelector = new BX.CrmTimelineAudioPlaybackRateSelector({
					name: 'timeline_audio_playback',
					currentRate: this._audioPlaybackRate,
					availableRates: [
						{
							rate: 1,
							html: BX.Loc.getMessage('CRM_TIMELINE_PLAYBACK_RATE_SELECTOR_RATE_1')
								.replace('#RATE#', '<span class="crm-audio-cap-speed-param">1x</span>')
						},
						{
							rate: 1.5,
							html: BX.Loc.getMessage('CRM_TIMELINE_PLAYBACK_RATE_SELECTOR_RATE_1.5')
								.replace('#RATE#', '<span class="crm-audio-cap-speed-param">1.5x</span>')
						},
						{
							rate: 2,
							html: BX.Loc.getMessage('CRM_TIMELINE_PLAYBACK_RATE_SELECTOR_RATE_2')
								.replace('#RATE#', '<span class="crm-audio-cap-speed-param">2x</span>')
						},
						{
							rate: 3,
							html: BX.Loc.getMessage('CRM_TIMELINE_PLAYBACK_RATE_SELECTOR_RATE_3')
								.replace('#RATE#', '<span class="crm-audio-cap-speed-param">3x</span>')
						}
					],
					textMessageCode: 'CRM_TIMELINE_PLAYBACK_RATE_SELECTOR_TEXT'
				});
			}

			return this.audioPlaybackRateSelector;
		},
	};
	BX.CrmTimelineManager.instances = {};
	BX.CrmTimelineManager.create = function(id, settings)
	{
		var self = new BX.CrmTimelineManager();
		self.initialize(id, settings);
		this.instances[self.getId()] = self;
		return self;
	}
}

if(typeof(BX.CrmTimeline) === "undefined")
{
	BX.CrmTimeline = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._manager = null;
		this._activityEditor = null;

		this._userTimezoneOffset = null;
		this._serverTimezoneOffset = null;
		this._timeFormat = "";
		this._year = 0;

		this._isStubMode = false;
		this._userId = 0;
		this._readOnly = false;

		this._serviceUrl = "";
	};
	BX.CrmTimeline.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._container = BX(this.getSetting("container"));
			if(!BX.type.isElementNode(this._container))
			{
				throw "BX.CrmTimeline. Container node is not found.";
			}
			this._editorContainer = BX(this.getSetting("editorContainer"));
			this._manager = this.getSetting("manager");
			if(!(this._manager instanceof BX.CrmTimelineManager))
			{
				throw "BX.CrmTimeline. Manager instance is not found.";
			}

			//
			var datetimeFormat = BX.message("FORMAT_DATETIME").replace(/:SS/, "");
			var dateFormat = BX.message("FORMAT_DATE");
			this._timeFormat = BX.date.convertBitrixFormat(BX.util.trim(datetimeFormat.replace(dateFormat, "")));
			//
			this._year = (new Date()).getFullYear();

			this._activityEditor = this.getSetting("activityEditor");

			this._isStubMode =  BX.prop.getBoolean(this._settings, "isStubMode", false);
			this._readOnly = BX.prop.getBoolean(this._settings, "readOnly", false);
			this._userId = BX.prop.getInteger(this._settings, "userId", 0);
			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");

			this.doInitialize();
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		doInitialize: function()
		{
		},
		layout: function()
		{
		},
		isStubMode: function()
		{
			return this._isStubMode;
		},
		isReadOnly: function()
		{
			return this._readOnly;
		},
		getUserId: function()
		{
			return this._userId;
		},
		getServiceUrl: function()
		{
			return this._serviceUrl;
		},
		refreshLayout: function()
		{
		},
		getManager: function()
		{
			return this._manager;
		},
		getOwnerInfo: function()
		{
			return this._manager.getOwnerInfo();
		},
		reload: function()
		{
			var currentUrl = this.getSetting("currentUrl");
			var ajaxId = this.getSetting("ajaxId");
			if(ajaxId !== "")
			{
				BX.ajax.insertToNode(BX.util.add_url_param(currentUrl, { bxajaxid: ajaxId }), "comp_" + ajaxId);
			}
			else
			{
				window.location = currentUrl;
			}
		},
		getUserTimezoneOffset: function()
		{
			if(!this._userTimezoneOffset)
			{
				this._userTimezoneOffset = parseInt(BX.message("USER_TZ_OFFSET"));
				if(isNaN(this._userTimezoneOffset))
				{
					this._userTimezoneOffset = 0;
				}
			}
			return this._userTimezoneOffset;
		},
		getServerTimezoneOffset: function()
		{
			if(!this._serverTimezoneOffset)
			{
				this._serverTimezoneOffset = parseInt(BX.message("SERVER_TZ_OFFSET"));
				if(isNaN(this._serverTimezoneOffset))
				{
					this._serverTimezoneOffset = 0;
				}
			}
			return this._serverTimezoneOffset;
		},
		formatTime: function(time, now, utc)
		{
			return BX.date.format(this._timeFormat, time, now, utc);
		},
		formatDate: function(date)
		{
			return (
				BX.date.format(
					[
						["today", "today"],
						["tommorow", "tommorow"],
						["yesterday", "yesterday"],
						["" , (date.getFullYear() === this._year) ? "j F" : "j F Y"]
					],
					date
				)
			);
		},
		cutOffText: function(text, length)
		{
			if(!BX.type.isNumber(length))
			{
				length = 0;
			}

			if(length <= 0 || text.length <= length)
			{
				return text;
			}

			var offset = length - 1;
			var whitespaceOffset = text.substring(offset).search(/\s/i);
			if(whitespaceOffset > 0)
			{
				offset += whitespaceOffset;
			}
			return text.substring(0, offset) + "...";
		}
	};
}
if(typeof(BX.CrmHistory) === "undefined")
{
	BX.CrmHistory = function()
	{
		BX.CrmHistory.superclass.constructor.apply(this);
		this._items = [];
		this._wrapper = null;
		this._fixedHistory = null;
		this._emptySection = null;
		this._currentDaySection = null;
		this._lastDaySection = null;
		this._lastDate = null;
		this._anchor = null;
		this._history = this;
		this._enableLoading = false;
		this._navigation = null;
		this._scrollHandler = null;
		this._loadingWaiter = null;

		this._filterId = "";
		this._isFilterApplied = false;
		this._isFilterShown = false;

		this._isRequestRunning = false;

		this._filterButton = null;
		this._filterWrapper = null;
		this._filterResultStub = null;
	};
	BX.extend(BX.CrmHistory, BX.CrmTimeline);
	BX.CrmHistory.prototype.doInitialize = function()
	{
		this._fixedHistory = this.getSetting("fixedHistory");
		this._ownerTypeId = this.getSetting("ownerTypeId");
		this._ownerId = this.getSetting("ownerId");
		this._serviceUrl = this.getSetting("serviceUrl", "");
		if(!this.isStubMode())
		{
			var itemData = this.getSetting("itemData");
			if(!BX.type.isArray(itemData))
			{
				itemData = [];
			}

			var i, length, item;
			for(i = 0, length = itemData.length; i < length; i++)
			{
				item = this.createItem(itemData[i]);
				if (item)
				{
					this._items.push(item);
				}
			}

			this._navigation = this.getSetting("navigation", {});

			this._filterWrapper = BX("timeline-filter");
			this._filterId = BX.prop.getString(this._settings, "filterId", this._id);
			this._isFilterShown = this._filterWrapper
				&& BX.hasClass(this._filterWrapper, "crm-entity-stream-section-filter-show");
			this._isFilterApplied = BX.prop.getBoolean(this._settings, "isFilterApplied", false);

			BX.addCustomEvent("BX.Main.Filter:apply", this.onFilterApply.bind(this));
		}
	};
	BX.CrmHistory.prototype.layout = function()
	{
		this._wrapper = BX.create("DIV", {});
		this._container.appendChild(this._wrapper);

		var now = BX.prop.extractDate(new Date());
		var i, length, item;

		if(!this.isStubMode())
		{
			if(this._filterWrapper)
			{
				var closeFilterButton = this._filterWrapper.querySelector(".crm-entity-stream-filter-close");
				if(closeFilterButton)
				{
					BX.bind(closeFilterButton, "click", this.onFilterClose.bind(this));
				}
			}

			for(i = 0, length = this._items.length; i < length; i++)
			{
				item = this._items[i];
				item.setContainer(this._wrapper);

				var created = item.getCreatedDate();
				if(this._lastDate === null || this._lastDate.getTime() !== created.getTime())
				{
					this._lastDate = created;
					if(now.getTime() === created.getTime())
					{
						this._currentDaySection = this._lastDaySection = this.createCurrentDaySection();
						this._wrapper.appendChild(this._currentDaySection);
					}
					else
					{
						this._lastDaySection = this.createDaySection(this._lastDate);
						this._wrapper.appendChild(this._lastDaySection);
					}
				}

				item._lastDate = this._lastDate;

				item.layout();
			}

			this.enableLoading(this._items.length > 0);
			this.refreshLayout();
		}
		else
		{
			this._currentDaySection = this._lastDaySection = this.createCurrentDaySection();
			this._wrapper.appendChild(this._currentDaySection);

			this._wrapper.appendChild(
				BX.create(
					"DIV",
					{
						attrs: { className: "crm-entity-stream-section crm-entity-stream-section-createEntity crm-entity-stream-section-last" },
						children:
						[
							BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-info" } }),
							BX.create(
								"DIV",
								{
									attrs: { className: "crm-entity-stream-section-content" },
									children:
									[
										BX.create(
											"DIV",
											{
												attrs: { className: "crm-entity-stream-content-event" },
												children:
												[
													BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } }),
													BX.create(
														"DIV",
														{
															attrs: { className: "crm-entity-stream-content-detail" },
															text: BX.message("CRM_TIMELINE_HISTORY_STUB")
														}
													)
												]
											}
										)
									]
								}
							)
						]
					}
				)
			);
		}

		this._manager.processHistoryLayoutChange();
	};
	BX.CrmHistory.prototype.refreshLayout = function()
	{
		if(this._filterWrapper)
		{
			if(this._wrapper.firstChild && this._filterWrapper !== this._wrapper.firstChild)
			{
				this._wrapper.insertBefore(this._filterWrapper, this._wrapper.firstChild);
			}
			else if(!this._wrapper.firstChild && this._filterWrapper.parentNode !== this._wrapper)
			{
				this._wrapper.appendChild(this._filterWrapper);
			}
		}

		this.adjustFilterButton();

		var length = this._items.length;
		if(length === 0 && this._isFilterApplied)
		{
			if(!this._filterEmptyResultSection)
			{
				this._filterEmptyResultSection = this.createFilterEmptyResultSection();
			}
			this._wrapper.appendChild(this._filterEmptyResultSection);

			return;
		}

		if(this._filterEmptyResultSection)
		{
			this._filterEmptyResultSection = BX.remove(this._filterEmptyResultSection);
		}

		if(length === 0)
		{
			return;
		}

		for(var i = 0;  i < (length - 1); i++)
		{
			var item = this._items[i];
			if(item.isTerminated())
			{
				item.markAsTerminated(false);
			}
		}

		this._items[length - 1].markAsTerminated(true);
	};
	BX.CrmHistory.prototype.calculateItemIndex = function(item)
	{
		return 0;
	};
	BX.CrmHistory.prototype.checkItemForTermination = function(item)
	{
		return this.getLastItem() === item;
	};
	BX.CrmHistory.prototype.hasContent = function()
	{
		return(this._items.length > 0 || this._isFilterApplied || this._isStubMode);
	};
	BX.CrmHistory.prototype.getLastItem = function()
	{
		return this._items.length > 0 ? this._items[this._items.length - 1] : null;
	};
	BX.CrmHistory.prototype.getItemByIndex = function(index)
	{
		return index < this._items.length ? this._items[index] : null;
	};
	BX.CrmHistory.prototype.getItemCount = function()
	{
		return this._items.length;
	};
	BX.CrmHistory.prototype.removeItemByIndex = function(index)
	{
		if(index < this._items.length)
		{
			this._items.splice(index, 1);
		}
	};
	BX.CrmHistory.prototype.getItemIndex = function(item)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}

		return -1;
	};
	BX.CrmHistory.prototype.getItemsByAssociatedEntity = function($entityTypeId, entityId)
	{
		if(!BX.type.isNumber($entityTypeId))
		{
			$entityTypeId = parseInt($entityTypeId);
		}

		if(!BX.type.isNumber(entityId))
		{
			entityId = parseInt(entityId);
		}

		if(isNaN($entityTypeId) || $entityTypeId <= 0 || isNaN(entityId) || entityId <= 0)
		{
			return [];
		}

		var results = [];
		for(var i = 0, l = this._items.length; i < l; i++)
		{
			var item = this._items[i];
			if(item.getAssociatedEntityTypeId() === $entityTypeId && item.getAssociatedEntityId() === entityId)
			{
				results.push(item);
			}
		}
		return results;
	};
	BX.CrmHistory.prototype.findItemById = function(id)
	{
		id = id.toString();
		for(var i = 0, l = this._items.length; i < l; i++)
		{
			if(this._items[i].getId() === id)
			{
				return this._items[i];
			}
		}
		return null;
	};
	BX.CrmHistory.prototype.createFilterEmptyResultSection = function()
	{
		return BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-filter-empty" },
				children:
					[
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-section-content" },
								children:
									[
										BX.create("DIV",
											{
												attrs: { className: "crm-entity-stream-filter-empty" },
												children:
													[
														BX.create("DIV",
															{
																attrs: { className: "crm-entity-stream-filter-empty-img" }
															}
														),
														BX.create("DIV",
															{
																attrs: { className: "crm-entity-stream-filter-empty-text" },
																text: this.getMessage("filterEmptyResultStub")
															}
														)
													]
											}
										)
									]
							}
						)
					]
			}
		);
	};
	BX.CrmHistory.prototype.adjustFilterButton = function()
	{
		if(!this._filterWrapper)
		{
			return;
		}

		if(!this._isFilterShown && this._items.length === 0)
		{
			if(!this._emptySection)
			{
				this._emptySection = this.createEmptySection();
			}
			this._wrapper.insertBefore(this._emptySection, this._filterWrapper);
		}
		else if(this._emptySection)
		{
			this._emptySection = BX.remove(this._emptySection);
		}

		if(!this._filterButton)
		{
			this._filterButton = BX.create("BUTTON",
				{
					attrs: { className: "crm-entity-stream-filter-label" },
					text: this.getMessage("filterButtonCaption")
				}
			);

			BX.bind(this._filterButton, "click", function(e){ this.showFilter(); }.bind(this));
		}

		var section = this._wrapper.querySelector(".crm-entity-stream-section-today-label, .crm-entity-stream-section-planned-label, .crm-entity-stream-section-history-label");
		if(section)
		{
			var sectionWrapper = section.querySelector(".crm-entity-stream-section-content");
			if(sectionWrapper)
			{
				if(this._filterButton.parentNode !== sectionWrapper)
				{
					sectionWrapper.appendChild(this._filterButton);
				}
			}
		}

		if(this._isFilterApplied)
		{
			BX.addClass(this._filterButton, "crm-entity-stream-filter-label-active");
		}
		else
		{
			BX.removeClass(this._filterButton, "crm-entity-stream-filter-label-active");
		}
	};
	BX.CrmHistory.prototype.showFilter = function(params)
	{
		if(!this._filterWrapper)
		{
			return;
		}

		BX.removeClass(this._filterWrapper, "crm-entity-stream-section-filter-hide");
		BX.addClass(this._filterWrapper, "crm-entity-stream-section-filter-show");

		this._isFilterShown = true;

		if(BX.prop.getBoolean(params, "enableAdjust", true))
		{
			this.adjustFilterButton();
		}
	};
	BX.CrmHistory.prototype.hideFilter = function(params)
	{
		if(!this._filterWrapper)
		{
			return;
		}

		BX.removeClass(this._filterWrapper, "crm-entity-stream-section-filter-show");
		BX.addClass(this._filterWrapper, "crm-entity-stream-section-filter-hide");

		this._isFilterShown = false;

		if(BX.prop.getBoolean(params, "enableAdjust", true))
		{
			this.adjustFilterButton();
		}
	};
	BX.CrmHistory.prototype.onFilterClose = function(e)
	{
		this.hideFilter();

		window.setTimeout(
			function()
			{
				var filter = BX.Main.filterManager.getById(this._filterId);
				if(filter)
				{
					filter.resetFilter();
				}
			}.bind(this),
			500
		);
	};
	BX.CrmHistory.prototype.createEmptySection = function()
	{
		return BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-planned-label" },
				children: [ BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" } }) ]
			}
		);
	};
	BX.CrmHistory.prototype.createCurrentDaySection = function()
	{
		return BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-today-label" },
				children:
					[
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-section-content" },
								children:
									[
										BX.create("DIV",
											{
												attrs: { className: "crm-entity-stream-today-label" },
												text: this.formatDate(BX.prop.extractDate(new Date()))
											}
										)
									]
							}
						)
					]
			}
		);
	};
	BX.CrmHistory.prototype.createDaySection = function(date)
	{
		return BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history-label" },
				children:
					[
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-section-content" },
								children:
									[
										BX.create("DIV",
											{
												attrs: { className: "crm-entity-stream-history-label" },
												text: this.formatDate(date)
											}
										)
									]
							}
						)
					]
			}
		);
	};
	BX.CrmHistory.prototype.createAnchor = function(index)
	{
		if(this._emptySection)
		{
			this._emptySection = BX.remove(this._emptySection);
		}

		if(this._currentDaySection === null)
		{
			this._currentDaySection = this.createCurrentDaySection();
			if(this._wrapper.firstChild)
			{
				this._wrapper.insertBefore(this._currentDaySection, this._wrapper.firstChild);
			}
			else
			{
				this._wrapper.appendChild(this._currentDaySection);
			}
		}

		if(this._anchor === null)
		{
			this._anchor = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-shadow" } });
			if(this._currentDaySection.nextSibling)
			{
				this._wrapper.insertBefore(this._anchor, this._currentDaySection.nextSibling);
			}
			else
			{
				this._wrapper.appendChild(this._anchor);
			}
		}
		return this._anchor;
	};
	BX.CrmHistory.prototype.createActivityItem = function(data)
	{
		var typeId = BX.prop.getInteger(data, "TYPE_ID", BX.CrmTimelineType.undefined);
		var typeCategoryId = BX.prop.getInteger(data, "TYPE_CATEGORY_ID", 0);
		var providerId = BX.prop.getString(
			BX.prop.getObject(data, "ASSOCIATED_ENTITY", {}),
			"PROVIDER_ID",
			""
		);
		var vueComponentId = 'TYPE_' + typeCategoryId + (providerId ? '_' + providerId : '');
		var vueComponentsMap = new Map([
			['TYPE_' + BX.CrmActivityType.provider + '_CRM_NOTIFICATION', BX.Crm.Timeline.Notification],
			['TYPE_' + BX.CrmActivityType.provider + '_CRM_DELIVERY', BX.Crm.Timeline.DeliveryActivity],
		]);
		var vueComponent = vueComponentsMap.has(vueComponentId) ? vueComponentsMap.get(vueComponentId) : null;

		if(typeId !== BX.CrmTimelineType.activity)
		{
			return null;
		}

		if(typeCategoryId === BX.CrmActivityType.email)
		{
			return BX.CrmHistoryItemEmail.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		if(typeCategoryId === BX.CrmActivityType.call)
		{
			return BX.CrmHistoryItemCall.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeCategoryId === BX.CrmActivityType.meeting)
		{
			return BX.CrmHistoryItemMeeting.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeCategoryId === BX.CrmActivityType.task)
		{
			return BX.CrmHistoryItemTask.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeCategoryId === BX.CrmActivityType.provider)
		{
			if(providerId === "CRM_WEBFORM")
			{
				return BX.CrmHistoryItemWebForm.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if (providerId === 'CRM_SMS')
			{
				return BX.CrmHistoryItemSms.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data,
						smsStatusDescriptions: this._manager.getSetting('smsStatusDescriptions', {}),
						smsStatusSemantics: this._manager.getSetting('smsStatusSemantics', {}),
					}
				);
			}
			else if (providerId === 'CRM_REQUEST')
			{
				return BX.CrmHistoryItemActivityRequest.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(providerId === "IMOPENLINES_SESSION")
			{
				return BX.CrmHistoryItemOpenLine.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if (providerId === 'REST_APP')
			{
				return BX.CrmHistoryItemActivityRestApplication.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(providerId === 'VISIT_TRACKER')
			{
				return BX.CrmHistoryItemVisit.create(
					data["ID"],
					{
						history: this,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(providerId === 'CRM_DELIVERY')
			{
				return BX.CrmHistoryItemActivity.create(
					data["ID"],
					{
						history: this._history,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data,
						vueComponent: vueComponent,
					}
				);
			}
			else if(providerId === 'ZOOM')
			{
				return BX.CrmHistoryItemZoom.create(
					data["ID"],
					{
						history: this,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(providerId === 'CRM_CALL_TRACKER')
			{
				return BX.CrmHistoryItemCallTracker.create(
					data["ID"],
					{
						history: this,
						fixedHistory: this._fixedHistory,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
		}

		return BX.CrmHistoryItemActivity.create(
			data["ID"],
			{
				history: this._history,
				fixedHistory: this._fixedHistory,
				container: this._wrapper,
				activityEditor: this._activityEditor,
				data: data,
				vueComponent: vueComponent,
			}
		);
	};
	BX.CrmHistory.prototype.createOrderEntityItem = function(data)
	{
		var entityId = BX.prop.getInteger(data, "ASSOCIATED_ENTITY_TYPE_ID", 0);
		var typeId = BX.prop.getInteger(data, "TYPE_CATEGORY_ID", 0);
		if(entityId !== BX.CrmEntityType.enumeration.order
			&& entityId !== BX.CrmEntityType.enumeration.orderpayment
			&& entityId !== BX.CrmEntityType.enumeration.ordershipment)
		{
			return null;
		}

		var settings = {
			history: this._history,
			fixedHistory: this._fixedHistory,
			container: this._wrapper,
			activityEditor: this._activityEditor,
			data: data
		};

		if (typeId === BX.CrmTimelineType.creation)
		{
			return BX.CrmHistoryItemOrderCreation.create(data["ID"], settings);
		}
		else if (typeId === BX.CrmTimelineType.modification)
		{
			return BX.CrmHistoryItemOrderModification.create(data["ID"], settings);
		}
		else if (typeId === BX.CrmTimelineOrderType.encourageBuyProducts)
		{
			settings.vueComponent = BX.Crm.Timeline.EncourageBuyProducts;
			return BX.CrmHistoryItem.create(data["ID"], settings);
		}
	};
	BX.CrmHistory.prototype.createExternalNotificationItem = function(data)
	{
		var typeId = BX.prop.getInteger(data, "TYPE_CATEGORY_ID", 0);
		var changedFieldName = BX.prop.getString(data, 'CHANGED_FIELD_NAME', '');

		if (typeId === BX.CrmTimelineType.modification && changedFieldName === 'STATUS_ID')
		{
			return BX.CrmHistoryItemExternalNoticeStatusModification.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}

		return BX.CrmHistoryItemExternalNoticeModification.create(
			data["ID"],
			{
				history: this._history,
				container: this._wrapper,
				activityEditor: this._activityEditor,
				data: data
			}
		);
	};

	BX.CrmHistory.prototype.createDeliveryItem = function(data)
	{
		var typeId = BX.prop.getInteger(data, "TYPE_ID", BX.CrmTimelineType.undefined);
		var typeCategoryId = BX.prop.getInteger(data, "TYPE_CATEGORY_ID", 0);

		if(typeId !== BX.CrmTimelineType.delivery)
		{
			return null;
		}

		var vueComponentsMap = new Map([
			[BX.CrmTimelineDeliveryType.taxiEstimationRequest, BX.Crm.Delivery.Taxi.EstimationRequest],
			[BX.CrmTimelineDeliveryType.taxiCallRequest, BX.Crm.Delivery.Taxi.CallRequest],
			[BX.CrmTimelineDeliveryType.taxiCancelledByManager, BX.Crm.Delivery.Taxi.CancelledByManager],
			[BX.CrmTimelineDeliveryType.taxiCancelledByDriver, BX.Crm.Delivery.Taxi.CancelledByDriver],
			[BX.CrmTimelineDeliveryType.taxiPerformerNotFound, BX.Crm.Delivery.Taxi.PerformerNotFound],
			[BX.CrmTimelineDeliveryType.taxiSmsProviderIssue, BX.Crm.Delivery.Taxi.SmsProviderIssue],
			[BX.CrmTimelineDeliveryType.taxiReturnedFinish, BX.Crm.Delivery.Taxi.ReturnedFinish],
			[BX.CrmTimelineDeliveryType.deliveryMessage, BX.Crm.Timeline.DeliveryMessage],
			[BX.CrmTimelineDeliveryType.deliveryCalculation, BX.Crm.Timeline.DeliveryCalculation]
		]);

		if (vueComponentsMap.has(typeCategoryId))
		{
			return BX.CrmHistoryItem.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data,
					vueComponent: vueComponentsMap.get(typeCategoryId),
				}
			);
		}
	};

	BX.CrmHistory.prototype.createItem = function(data)
	{
		var typeId = BX.prop.getInteger(data, "TYPE_ID", BX.CrmTimelineType.undefined);
		var typeCategoryId = BX.prop.getInteger(data, "TYPE_CATEGORY_ID", 0);

		if(typeId === BX.CrmTimelineType.activity)
		{
			return this.createActivityItem(data);
		}
		else if(typeId === BX.CrmTimelineType.order)
		{
			return this.createOrderEntityItem(data);
		}
		else if(typeId === BX.CrmTimelineType.externalNotification)
		{
			return this.createExternalNotificationItem(data);
		}
		else if(typeId === BX.CrmTimelineType.orderCheck)
		{
			return BX.CrmHistoryItemOrcderCheck.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.finalSummary)
		{
			return BX.CrmHistoryItemFinalSummary.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.finalSummaryDocuments)
		{
			return BX.CrmHistoryItemFinalSummaryDocuments.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.creation)
		{
			return BX.CrmHistoryItemCreation.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.restoration)
		{
			return BX.CrmHistoryItemRestoration.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.link)
		{
			return BX.CrmHistoryItemLink.create(
				data["ID"],
				{
					history: this,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.unlink)
		{
			return BX.CrmHistoryItemUnlink.create(
				data["ID"],
				{
					history: this,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.mark)
		{
			return BX.CrmHistoryItemMark.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					fixedHistory: this._fixedHistory,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.comment)
		{
			return BX.CrmHistoryItemComment.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.wait)
		{
			return BX.CrmHistoryItemWait.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.document)
		{
			return BX.CrmHistoryItemDocument.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.sender)
		{
			return BX.CrmHistoryItemSender.create(
				data["ID"],
				{
					history: this,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.modification)
		{
			return BX.CrmHistoryItemModification.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.conversion)
		{
			return BX.CrmHistoryItemConversion.create(
				data["ID"],
				{
					history: this._history,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.bizproc)
		{
			return BX.CrmHistoryItemBizproc.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.scoring)
		{
			return BX.CrmHistoryItemScoring.create(
				data["ID"],
				{
					history: this._history,
					fixedHistory: this._fixedHistory,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else if(typeId === BX.CrmTimelineType.delivery)
		{
			return this.createDeliveryItem(data);
		}

		return BX.CrmHistoryItem.create(
			data["ID"],
			{
				history: this._history,
				fixedHistory: this._fixedHistory,
				container: this._wrapper,
				activityEditor: this._activityEditor,
				data: data
			}
		);
	};
	BX.CrmHistory.prototype.addItem = function(item, index)
	{
		if(!BX.type.isNumber(index) || index < 0)
		{
			index = this.calculateItemIndex(item);
		}

		if(index < this._items.length)
		{
			this._items.splice(index, 0, item);
		}
		else
		{
			this._items.push(item);
		}

		this.refreshLayout();
		this._manager.processHistoryLayoutChange();
	};
	BX.CrmHistory.prototype.deleteItem = function(item)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		item.clearLayout();
		this.removeItemByIndex(index);

		this.refreshLayout();
		this._manager.processHistoryLayoutChange();
	};
	BX.CrmHistory.prototype.resetLayout = function()
	{
		var i;

		for(i = (this._items.length - 1); i >= 0; i--)
		{
			this._items[i].clearLayout();
		}

		this._items = [];

		this._currentDaySection = this._lastDaySection = this._emptySection  = this._filterEmptyResultSection = null;
		this._anchor = null;
		this._lastDate = null;

		//Clean wrapper. Skip filter for prevent trembling.
		var children = [];
		var child;
		for(i = 0; child = this._wrapper.children[i]; i++)
		{
			if(child !== this._filterWrapper)
			{
				children.push(child);
			}
		}

		for(i = 0; child = children[i]; i++)
		{
			this._wrapper.removeChild(child);
		}
	};
	BX.CrmHistory.prototype.onWindowScroll = function(e)
	{
		if(!this._loadingWaiter || !this._enableLoading || this._isRequestRunning)
		{
			return;
		}

		var pos = this._loadingWaiter.getBoundingClientRect();
		if(pos.top <= document.documentElement.clientHeight)
		{
			this.loadItems();
		}
	};
	BX.CrmHistory.prototype.onFilterApply = function(id, data, ctx, promise, params)
	{
		if(id !== this._filterId)
		{
			return;
		}

		params.autoResolve = false;
		this._isFilterApplied = BX.prop.getString(data, "action", "") === "apply";
		this._isRequestRunning = true;

		BX.CrmDataLoader.create(
			this._id,
			{
				serviceUrl: this.getSetting("serviceUrl", ""),
				action: "GET_HISTORY_ITEMS",
				params:
					{
						"GUID": this._id,
						"OWNER_TYPE_ID" : this._manager.getOwnerTypeId(),
						"OWNER_ID": this._manager.getOwnerId()
					}
			}
		).load(
			function(sender, result)
			{
				this.resetLayout();
				this.bulkCreateItems(BX.prop.getArray(result, "HISTORY_ITEMS", []));
				this.setNavigation(BX.prop.getObject(result, "HISTORY_NAVIGATION", {}));

				this.refreshLayout();
				if(this._items.length > 0)
				{
					this._manager.processHistoryLayoutChange();
				}

				promise.fulfill();
				this._isRequestRunning = false;
			}.bind(this)
		);
	};
	BX.CrmHistory.prototype.bulkCreateItems = function(itemData)
	{
		var length = itemData.length;
		if(length === 0)
		{
			return;
		}

		if(this._filterEmptyResultSection)
		{
			this._filterEmptyResultSection = BX.remove(this._filterEmptyResultSection);
		}

		var now = BX.prop.extractDate(new Date());
		var i, item;
		var lastItemTime = "";
		for(i = 0; i < length; i++)
		{
			var itemId = BX.prop.getInteger(itemData[i], "ID", 0);
			if(itemId <= 0)
			{
				continue;
			}

			lastItemTime = BX.prop.getString(itemData[i], "CREATED_SERVER", "");
			if(this.findItemById(itemId) !== null)
			{
				continue;
			}

			item = this.createItem(itemData[i]);
			this._items.push(item);

			var created = item.getCreatedDate();
			if(this._lastDate === null || this._lastDate.getTime() !== created.getTime())
			{
				this._lastDate = created;
				if(now.getTime() === created.getTime())
				{
					this._currentDaySection = this._lastDaySection = this.createCurrentDaySection();
					this._wrapper.appendChild(this._currentDaySection);
				}
				else
				{
					this._lastDaySection = this.createDaySection(this._lastDate);
					this._wrapper.appendChild(this._lastDaySection);
				}
			}
			item.layout();
		}
	};
	BX.CrmHistory.prototype.loadItems = function()
	{
		this._isRequestRunning = true;
		BX.CrmDataLoader.create(
			this._id,
			{
				serviceUrl: this.getSetting("serviceUrl", ""),
				action: "GET_HISTORY_ITEMS",
				params:
					{
						"GUID": this._id,
						"OWNER_TYPE_ID" : this._manager.getOwnerTypeId(),
						"OWNER_ID": this._manager.getOwnerId(),
						"NAVIGATION" : this._navigation
					}
			}
		).load(
			function(sender, result)
			{
				this.bulkCreateItems(BX.prop.getArray(result, "HISTORY_ITEMS", []));
				this.setNavigation(BX.prop.getObject(result, "HISTORY_NAVIGATION", {}));

				this.refreshLayout();
				if(this._items.length > 0)
				{
					this._manager.processHistoryLayoutChange();
				}

				this._isRequestRunning = false;
			}.bind(this)
		);
	};
	BX.CrmHistory.prototype.getNavigation = function()
	{
		return this._navigation;
	};
	BX.CrmHistory.prototype.setNavigation = function(navigation)
	{
		if(!BX.type.isPlainObject(navigation))
		{
			navigation = {};
		}

		this._navigation = navigation;
		this.enableLoading(
			BX.prop.getString(this._navigation, "OFFSET_TIMESTAMP", "") !== ""
		);
	};
	BX.CrmHistory.prototype.isLoadingEnabled = function()
	{
		return this._enableLoading;
	};
	BX.CrmHistory.prototype.enableLoading = function(enable)
	{
		enable = !!enable;

		if(this._enableLoading === enable)
		{
			return;
		}

		this._enableLoading = enable;

		if(this._enableLoading)
		{
			if(this._items.length > 0)
			{
				this._loadingWaiter = this._items[this._items.length - 1].getWrapper();
			}

			if(!this._scrollHandler)
			{
				this._scrollHandler = BX.delegate(this.onWindowScroll, this);
				BX.bind(window, "scroll", this._scrollHandler);
			}
		}
		else
		{
			this._loadingWaiter = null;

			if(this._scrollHandler)
			{
				BX.unbind(window, "scroll", this._scrollHandler);
				this._scrollHandler = null;
			}
		}
	};
	BX.CrmHistory.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistory.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistory.messages) === "undefined")
	{
		BX.CrmHistory.messages = {};
	}

	BX.CrmHistory.instances = {};
	BX.CrmHistory.create = function(id, settings)
	{
		var self = new BX.CrmHistory();
		self.initialize(id, settings);
		this.instances[self.getId()] = self;
		return self;
	}
}
if(typeof(BX.CrmFixedHistory) === "undefined")
{
	BX.CrmFixedHistory = function()
	{
		BX.CrmFixedHistory.superclass.constructor.apply(this);
		this._items = [];
		this._wrapper = null;
		this._fixedHistory = this;
		this._history = this;
		this._isRequestRunning = false;
	};
	BX.extend(BX.CrmFixedHistory, BX.CrmHistory);

	BX.CrmFixedHistory.prototype.doInitialize = function()
	{
		var datetimeFormat = BX.message("FORMAT_DATETIME").replace(/:SS/, "");
		this._timeFormat = BX.date.convertBitrixFormat(datetimeFormat);

		var itemData = this.getSetting("itemData");
		if(!BX.type.isArray(itemData))
		{
			itemData = [];
		}

		var i, length, item;
		for(i = 0, length = itemData.length; i < length; i++)
		{
			item = this.createItem(itemData[i]);
			item._isFixed = true;
			this._items.push(item);
		}
	};

	BX.CrmFixedHistory.prototype.setHistory = function(history)
	{
		this._history = history;
	};

	BX.CrmFixedHistory.prototype.checkItemForTermination = function(item)
	{
		return false;
	};

	BX.CrmFixedHistory.prototype.layout = function()
	{
		this._wrapper = BX.create("DIV", {});
		this.createAnchor();
		this._container.insertBefore(this._wrapper,  this._editorContainer.nextElementSibling);

		for (var i = 0; i < this._items.length; i++)
		{
			this._items[i].setContainer(this._wrapper);
			this._items[i].layout();
		}

		this.refreshLayout();

		this._manager.processHistoryLayoutChange();
	};
	BX.CrmFixedHistory.prototype.refreshLayout = function()
	{
	};
	BX.CrmFixedHistory.prototype.formatDate = function(date)
	{
	};
	BX.CrmFixedHistory.prototype.createCurrentDaySection = function()
	{
	};
	BX.CrmFixedHistory.prototype.createDaySection = function(date)
	{
	};
	BX.CrmFixedHistory.prototype.createAnchor = function(index)
	{
		this._anchor = BX.create("DIV", { attrs:{className: "crm-entity-stream-section-fixed-anchor"} });
		this._wrapper.appendChild(this._anchor);
	};
	BX.CrmFixedHistory.prototype.onWindowScroll = function(e)
	{
	};
	BX.CrmFixedHistory.prototype.onItemsLoad = function(sender, result)
	{
	};
	BX.CrmFixedHistory.prototype.loadItems = function()
	{
		this._isRequestRunning = true;

		BX.CrmDataLoader.create(
			this._id,
			{
				serviceUrl: this.getSetting("serviceUrl", ""),
				action: "GET_FIXED_HISTORY_ITEMS",
				params:
					{
						"OWNER_TYPE_ID" : this._manager.getOwnerTypeId(),
						"OWNER_ID": this._manager.getOwnerId(),
						"LAST_ITEM_TIME": this._lastLoadedItemTimestamp
					}
			}
		).load(BX.delegate(this.onItemsLoad, this));
	};
	BX.CrmFixedHistory.instances = {};
	BX.CrmFixedHistory.create = function(id, settings)
	{
		var self = new BX.CrmFixedHistory();
		self.initialize(id, settings);
		this.instances[self.getId()] = self;
		return self;
	}
}
if(typeof BX.CrmSchedule === "undefined")
{
	BX.CrmSchedule = function()
	{
		BX.CrmSchedule.superclass.constructor.apply(this);
		this._items = [];
		this._history = null;
		this._wrapper = null;
		this._anchor = null;
		this._stub = null;
		this._timeFormat = "";
	};
	BX.extend(BX.CrmSchedule, BX.CrmTimeline);
	BX.CrmSchedule.prototype.doInitialize = function()
	{
		var datetimeFormat = BX.message("FORMAT_DATETIME").replace(/:SS/, "");
		var dateFormat = BX.message("FORMAT_DATE");
		var timeFormat = BX.util.trim(datetimeFormat.replace(dateFormat, ""));
		this._timeFormat = BX.date.convertBitrixFormat(timeFormat);

		if(!this.isStubMode())
		{
			var itemData = this.getSetting("itemData");
			if(!BX.type.isArray(itemData))
			{
				itemData = [];
			}

			var i, length, item;
			for(i = 0, length = itemData.length; i < length; i++)
			{
				item = this.createItem(itemData[i]);
				if(item)
				{
					this._items.push(item);
				}
			}
		}
	};
	BX.CrmSchedule.prototype.layout = function()
	{
		this._wrapper = BX.create("DIV", {});
		this._container.appendChild(this._wrapper);

		var label = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-planned-label" },
				text: this.getMessage("planned")
			}
		);

		var wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned-label";
		this._wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: wrapperClassName },
					children:
						[
							BX.create("DIV",
								{
									attrs: { className: "crm-entity-stream-section-content" },
									children: [ label ]
								}
							)
						]
				}
			)
		);

		if(this.isStubMode())
		{
			this.addStub();
		}
		else
		{
			var length = this._items.length;
			if(length === 0)
			{
				this.addStub();
			}
			else
			{
				for(var i = 0; i < length; i++)
				{
					var item = this._items[i];
					item.setContainer(this._wrapper);
					item.layout();
				}
			}
		}

		this.refreshLayout();
		this._manager.processSheduleLayoutChange();
	};
	BX.CrmSchedule.prototype.refreshLayout = function()
	{
		var length = this._items.length;
		if(length === 0)
		{
			this.addStub();
			if(this._history && this._history.hasContent())
			{
				BX.removeClass(this._stub, "crm-entity-stream-section-last");
			}
			else
			{
				BX.addClass(this._stub, "crm-entity-stream-section-last");
			}

			var stubIcon = this._stub.querySelector(".crm-entity-stream-section-icon");
			if(stubIcon)
			{
				if(this._manager.isStubCounterEnabled())
				{
					BX.addClass(stubIcon, "crm-entity-stream-section-counter");
				}
				else
				{
					BX.removeClass(stubIcon, "crm-entity-stream-section-counter");
				}
			}
			return;
		}

		var i, item;
		if(this._history && this._history.hasContent())
		{
			for(i = 0;  i < length; i++)
			{
				item = this._items[i];
				if(item.isTerminated())
				{
					item.markAsTerminated(false);
				}
			}
		}
		else
		{
			if(length > 1)
			{
				for(i = 0;  i < (length - 1); i++)
				{
					item = this._items[i];
					if(item.isTerminated())
					{
						item.markAsTerminated(false);
					}
				}
			}
			this._items[length - 1].markAsTerminated(true);
		}
	};
	BX.CrmSchedule.prototype.formatDateTime = function(time)
	{
		var now = new Date();
		return BX.date.format(
			[
				[ "today", "today, " + this._timeFormat ],
				[ "tommorow", "tommorow, " + this._timeFormat ],
				[ "yesterday", "yesterday, " + this._timeFormat ],
				[ "" , (time.getFullYear() === now.getFullYear() ? "j F " : "j F Y ") + this._timeFormat ]
			],
			time,
			now
		);
	};
	BX.CrmSchedule.prototype.checkItemForTermination = function(item)
	{
		if(this._history && this._history.getItemCount() > 0)
		{
			return false;
		}
		return this.getLastItem() === item;
	};
	BX.CrmSchedule.prototype.getLastItem = function()
	{
		return this._items.length > 0 ? this._items[this._items.length - 1] : null;
	};
	BX.CrmSchedule.prototype.calculateItemIndex = function(item)
	{
		var i, length;
		var time = item.getDeadline();
		if(time)
		{
			//Item has deadline
			for(i = 0, length = this._items.length; i < length; i++)
			{
				var curTime =  this._items[i].getDeadline();
				if(!curTime || time <= curTime)
				{
					return i;
				}
			}
		}
		else
		{
			//Item has't deadline
			var sourceId = item.getSourceId();
			for(i = 0, length = this._items.length; i < length; i++)
			{
				if(this._items[i].getDeadline())
				{
					continue;
				}

				if(sourceId <= this._items[i].getSourceId())
				{
					return i;
				}
			}
		}
		return this._items.length;
	};
	BX.CrmSchedule.prototype.getItemCount = function()
	{
		return this._items.length;
	};
	BX.CrmSchedule.prototype.getItems = function()
	{
		return this._items;
	};
	BX.CrmSchedule.prototype.getItemByAssociatedEntity = function($entityTypeId, entityId)
	{
		if(!BX.type.isNumber($entityTypeId))
		{
			$entityTypeId = parseInt($entityTypeId);
		}

		if(!BX.type.isNumber(entityId))
		{
			entityId = parseInt(entityId);
		}

		if(isNaN($entityTypeId) || $entityTypeId <= 0 || isNaN(entityId) || entityId <= 0)
		{
			return null;
		}

		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			if(item.getAssociatedEntityTypeId() === $entityTypeId && item.getAssociatedEntityId() === entityId)
			{
				return item;
			}
		}
		return null;
	};
	BX.CrmSchedule.prototype.getItemByData = function(itemData)
	{
		if(!BX.type.isPlainObject(itemData))
		{
			return null;
		}

		return this.getItemByAssociatedEntity(
			BX.prop.getInteger(itemData, "ASSOCIATED_ENTITY_TYPE_ID", 0),
			BX.prop.getInteger(itemData, "ASSOCIATED_ENTITY_ID", 0)
		);
	};
	BX.CrmSchedule.prototype.getItemIndex = function(item)
	{
		for(var i = 0, l = this._items.length; i < l; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}
		return -1;
	};
	BX.CrmSchedule.prototype.getItemByIndex = function(index)
	{
		return index < this._items.length ? this._items[index] : null;
	};
	BX.CrmSchedule.prototype.removeItemByIndex = function(index)
	{
		if(index < this._items.length)
		{
			this._items.splice(index, 1);
		}
	};
	BX.CrmSchedule.prototype.createItem = function(data)
	{
		var entityTypeID = BX.prop.getInteger(data, "ASSOCIATED_ENTITY_TYPE_ID", 0);
		var entityID = BX.prop.getInteger(data, "ASSOCIATED_ENTITY_ID", 0);
		var entityData = BX.prop.getObject(data, "ASSOCIATED_ENTITY", {});
		var itemId = BX.CrmEntityType.resolveName(entityTypeID) + "_" + entityID.toString();

		if(entityTypeID === BX.CrmEntityType.enumeration.wait)
		{
			return BX.CrmScheduleItemWait.create(
				itemId,
				{
					schedule: this,
					container: this._wrapper,
					activityEditor: this._activityEditor,
					data: data
				}
			);
		}
		else// if(entityTypeID === BX.CrmEntityType.enumeration.activity)
		{
			var typeId = BX.prop.getInteger(entityData, "TYPE_ID", 0);
			var providerId = BX.prop.getString(entityData, "PROVIDER_ID", "");

			if(typeId === BX.CrmActivityType.email)
			{
				return BX.CrmScheduleItemEmail.create(
					itemId,
					{
						schedule: this,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(typeId === BX.CrmActivityType.call)
			{
				return BX.CrmScheduleItemCall.create(
					itemId,
					{
						schedule: this,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(typeId === BX.CrmActivityType.meeting)
			{
				return BX.CrmScheduleItemMeeting.create(
					itemId,
					{
						schedule: this,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(typeId === BX.CrmActivityType.task)
			{
				return BX.CrmScheduleItemTask.create(
					itemId,
					{
						schedule: this,
						container: this._wrapper,
						activityEditor: this._activityEditor,
						data: data
					}
				);
			}
			else if(typeId === BX.CrmActivityType.provider)
			{
				if(providerId === "CRM_WEBFORM")
				{
					return BX.CrmScheduleItemWebForm.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data
						}
					);
				}
				else if(providerId === "CRM_REQUEST")
				{
					return BX.CrmScheduleItemActivityRequest.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data
						}
					);
				}
				else if(providerId === "IMOPENLINES_SESSION")
				{
					return BX.CrmScheduleItemActivityOpenLine.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data
						}
					);
				}
				else if(providerId === "ZOOM")
				{
					return BX.CrmScheduleItemActivityZoom.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data
						}
					);
				}
				else if(providerId === "REST_APP")
				{
					return BX.CrmScheduleItemActivityRestApplication.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data
						}
					);
				}
				else if(providerId === 'CRM_DELIVERY')
				{
					return BX.CrmScheduleItemDelivery.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data,
							vueComponent: BX.Crm.Timeline.DeliveryActivity,
						}
					);
				}
				else if(providerId === 'CRM_CALL_TRACKER')
				{
					return BX.CrmScheduleItemCallTracker.create(
						itemId,
						{
							schedule: this,
							container: this._wrapper,
							activityEditor: this._activityEditor,
							data: data,

						}
					);
				}
			}
		}

		return null;
	};
	BX.CrmSchedule.prototype.addItem = function(item, index)
	{
		if(!BX.type.isNumber(index) || index < 0)
		{
			index = this.calculateItemIndex(item);
		}

		if(index < this._items.length)
		{
			this._items.splice(index, 0, item);
		}
		else
		{
			this._items.push(item);
		}

		this.removeStub();

		this.refreshLayout();
		this._manager.processSheduleLayoutChange();
	};
	BX.CrmSchedule.prototype.getHistory = function()
	{
		return this._history;
	};
	BX.CrmSchedule.prototype.setHistory = function(history)
	{
		this._history = history;
	};
	BX.CrmSchedule.prototype.createAnchor = function(index)
	{
		this._anchor = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-shadow" } });
		if(index >= 0 && index < this._items.length)
		{
			this._wrapper.insertBefore(this._anchor, this._items[index].getWrapper());
		}
		else
		{
			this._wrapper.appendChild(this._anchor);
		}
		return this._anchor;
	};
	BX.CrmSchedule.prototype.deleteItem = function(item)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		item.clearLayout();
		this.removeItemByIndex(index);

		this.refreshLayout();
		this._manager.processSheduleLayoutChange();
	};
	BX.CrmSchedule.prototype.refreshItem = function(item)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		this.removeItemByIndex(index);

		var newItem = this.createItem(item.getData());
		var newIndex = this.calculateItemIndex(newItem);
		if(newIndex === index)
		{
			this.addItem(item, newIndex);
			item.refreshLayout();
			item.addWrapperClass("crm-entity-stream-section-updated", 1000);
			return;
		}

		var anchor = this.createAnchor(newIndex);
		this.addItem(newItem, newIndex);
		newItem.layout({ add: false });

		var animation = BX.CrmTimelineItemAnimation.create(
			"",
			{
				initialItem: item,
				finalItem: newItem,
				anchor: anchor
			}
		);
		animation.run();
	};
	BX.CrmSchedule.prototype.transferItemToHistory = function(item, historyItemData)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		this.removeItemByIndex(index);

		this.refreshLayout();
		this._manager.processSheduleLayoutChange();

		var historyItem = this._history.createItem(historyItemData);
		this._history.addItem(historyItem, 0);
		historyItem.layout({ add: false });

		var animation = BX.CrmTimelineItemAnimationNew.create(
			"",
			{
				initialItem: item,
				finalItem: historyItem,
				anchor: this._history.createAnchor(),
				events: { complete: BX.delegate(this.onTransferComplete, this) }
			}
		);
		animation.run();
	};
	BX.CrmSchedule.prototype.onTransferComplete = function()
	{
		this._history.refreshLayout();

		if(this._items.length === 0)
		{
			this.addStub();
		}
	};
	BX.CrmSchedule.prototype.onItemMarkedAsDone = function(item, params)
	{
	};
	BX.CrmSchedule.prototype.addStub = function()
	{
		if(!this._stub)
		{
			var stubClassName = "crm-entity-stream-section crm-entity-stream-section-planned crm-entity-stream-section-notTask";
			var stubIconClassName = "crm-entity-stream-section-icon crm-entity-stream-section-icon-info";

			var stubMessage = this.getMessage("stub");

			var ownerTypeId = this._manager.getOwnerTypeId();
			if(ownerTypeId === BX.CrmEntityType.enumeration.lead)
			{
				stubMessage = this.getMessage("leadStub");
			}
			else if(ownerTypeId === BX.CrmEntityType.enumeration.deal)
			{
				stubMessage = this.getMessage("dealStub");
			}

			if(this._manager.isStubCounterEnabled())
			{
				stubIconClassName += " crm-entity-stream-section-counter";
			}

			this._stub = BX.create("DIV",
				{
					attrs: { className: stubClassName },
					children:
					[
						BX.create("DIV", { attrs: { className: stubIconClassName } }),
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-section-content" },
								children:
								[
									BX.create("DIV",
										{
											attrs: { className: "crm-entity-stream-content-event" },
											children:
											[
												BX.create("DIV",
													{
														attrs: { className: "crm-entity-stream-content-detail" },
														text: stubMessage
													}
												)
											]
										}
									)
								]
							}
						)
					]
				}
			);
			this._wrapper.appendChild(this._stub);
		}

		if(this._history && this._history.getItemCount() > 0)
		{
			BX.removeClass(this._stub, "crm-entity-stream-section-last");
		}
		else
		{
			BX.addClass(this._stub, "crm-entity-stream-section-last");
		}
	};
	BX.CrmSchedule.prototype.removeStub = function()
	{
		if(this._stub)
		{
			this._stub = BX.remove(this._stub);
		}

	};
	BX.CrmSchedule.items = {};
	BX.CrmSchedule.prototype.getMessage = function(name)
	{
		var m = BX.CrmSchedule.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmSchedule.messages) === "undefined")
	{
		BX.CrmSchedule.messages = {};
	}
	BX.CrmSchedule.create = function(id, settings)
	{
		var self = new BX.CrmSchedule();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}

if(typeof BX.CrmEntityChatLayoutType === "undefined")
{
	BX.CrmEntityChatLayoutType =
	{
		none: 0,
		invitation:  1,
		summary: 2
	};
}

if(typeof BX.CrmEntityChat === "undefined")
{
	BX.CrmEntityChat = function()
	{
		BX.CrmEntityChat.superclass.constructor.apply(this);
		this._data = null;
		this._layoutType = BX.CrmEntityChatLayoutType.none;

		this._wrapper = null;
		this._contentWrapper = null;
		this._messageWrapper = null;
		this._messageDateNode = null;
		this._messageTexWrapper = null;
		this._messageTextNode = null;
		this._userWrapper = null;
		this._extraUserCounter = null;

		this._openChatHandler = BX.delegate(this.onOpenChat, this);
	};
	BX.extend(BX.CrmEntityChat, BX.CrmTimeline);
	BX.CrmEntityChat.prototype.doInitialize = function()
	{
		this._data = BX.prop.getObject(this._settings, "data", {});
	};
	BX.CrmEntityChat.prototype.getData = function()
	{
		return this._data;
	};
	BX.CrmEntityChat.prototype.setData = function(data)
	{
		this._data = BX.type.isPlainObject(data) ? data : {};
	};
	BX.CrmEntityChat.prototype.isEnabled = function()
	{
		return BX.prop.getBoolean(this._data, "ENABLED", true);
	};
	/**
	 * @private
	 * @return {boolean}
	 */
	BX.CrmEntityChat.prototype.isRestricted = function()
	{
		return BX.prop.getBoolean(this._data, "IS_RESTRICTED", false);
	};
	/**
	 * @private
	 * @return {void}
	 */
	BX.CrmEntityChat.prototype.applyLockScript = function()
	{
		var lockScript = BX.prop.getString(this._data, "LOCK_SCRIPT", null);
		if (BX.Type.isString(lockScript) && lockScript !== '')
		{
			eval(lockScript);
		}
	};
	BX.CrmEntityChat.prototype.getChatId = function()
	{
		return BX.prop.getInteger(this._data, "CHAT_ID", 0);
	};
	BX.CrmEntityChat.prototype.getUserId = function()
	{
		var userId = parseInt(top.BX.message("USER_ID"));
		return !isNaN(userId) ? userId : 0;
	};
	BX.CrmEntityChat.prototype.getMessageData = function()
	{
		return BX.prop.getObject(this._data, "MESSAGE", {});
	};
	BX.CrmEntityChat.prototype.setMessageData = function(data)
	{
		this._data["MESSAGE"] = BX.type.isPlainObject(data) ? data : {};
	};
	BX.CrmEntityChat.prototype.getUserInfoData = function()
	{
		return BX.prop.getObject(this._data, "USER_INFOS", {});
	};
	BX.CrmEntityChat.prototype.setUserInfoData = function(data)
	{
		this._data["USER_INFOS"] = BX.type.isPlainObject(data) ? data : {};
	};
	BX.CrmEntityChat.prototype.hasUserInfo = function(userId)
	{
		return userId > 0 && BX.type.isPlainObject(this.getUserInfoData()[userId]);
	};
	BX.CrmEntityChat.prototype.getUserInfo = function(userId)
	{
		var userInfos = this.getUserInfoData();
		return userId > 0 && BX.type.isPlainObject(userInfos[userId]) ? userInfos[userId] : null;
	};
	BX.CrmEntityChat.prototype.removeUserInfo = function(userId)
	{
		var userInfos = this.getUserInfoData();
		if(userId > 0 && BX.type.isPlainObject(userInfos[userId]))
		{
			delete userInfos[userId];
		}
	};
	BX.CrmEntityChat.prototype.setUnreadMessageCounter = function(userId, counter)
	{
		var userInfos = this.getUserInfoData();
		if(userId > 0 && BX.type.isPlainObject(userInfos[userId]))
		{
			userInfos[userId]["counter"] = counter;
		}
	};
	BX.CrmEntityChat.prototype.layout = function()
	{
		if(!this.isEnabled() || this.isStubMode())
		{
			return;
		}

		this._wrapper = BX.create("div", { props: { className: "crm-entity-stream-section crm-entity-stream-section-live-im" } });
		this._container.appendChild(this._wrapper);

		this._wrapper.appendChild(
			BX.create("div", { props: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-live-im" } })
		);

		this._contentWrapper = BX.create("div", { props: { className: "crm-entity-stream-content-live-im-detail" } });

		this._wrapper.appendChild(
			BX.create("div",
				{
					props: { className: "crm-entity-stream-section-content" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-stream-content-event" },
									children: [ this._contentWrapper ]
								}
							)
						]
				}
			)
		);

		this._userWrapper = BX.create("div", { props: { className: "crm-entity-stream-live-im-user-avatars" } });
		this._contentWrapper.appendChild(
			BX.create("div",
				{
					props: { className: "crm-entity-stream-live-im-users" },
					children: [ this._userWrapper ]
				}
			)
		);

		this._extraUserCounter = BX.create("div",{ props: { className: "crm-entity-stream-live-im-user-counter" } });
		this._contentWrapper.appendChild(this._extraUserCounter);

		this._layoutType = BX.CrmEntityChatLayoutType.none;
		if(this.getChatId() > 0)
		{
			this.renderSummary();
		}
		else
		{
			this.renderInvitation();
		}

		BX.bind(this._contentWrapper, "click", this._openChatHandler);
		BX.addCustomEvent("onPullEvent-im", this.onChatEvent.bind(this));
	};
	BX.CrmEntityChat.prototype.refreshLayout = function()
	{
		BX.cleanNode(this._contentWrapper);
		this._userWrapper = BX.create("div", { props: { className: "crm-entity-stream-live-im-user-avatars" } });
		this._contentWrapper.appendChild(
			BX.create("div",
				{
					props: { className: "crm-entity-stream-live-im-users" },
					children: [ this._userWrapper ]
				}
			)
		);

		this._extraUserCounter = BX.create("div",{ props: { className: "crm-entity-stream-live-im-user-counter" } });
		this._contentWrapper.appendChild(this._extraUserCounter);

		this._layoutType = BX.CrmEntityChatLayoutType.none;
		if(this.getChatId() > 0)
		{
			this.renderSummary();
		}
		else
		{
			this.renderInvitation();
		}
	};
	BX.CrmEntityChat.prototype.renderInvitation = function()
	{
		this._layoutType = BX.CrmEntityChatLayoutType.invitation;
		this.refreshUsers();

		this._messageTextNode = BX.create("div", { props: { className: "crm-entity-stream-live-im-user-invite-text" } });
		this._contentWrapper.appendChild(this._messageTextNode);

		this._messageTextNode.innerHTML = this.getMessage("invite");
	};
	BX.CrmEntityChat.prototype.renderSummary = function()
	{
		this._layoutType = BX.CrmEntityChatLayoutType.summary;
		this.refreshUsers();

		this._contentWrapper.appendChild(
			BX.create("div", { props: { className: "crm-entity-stream-live-im-separator" } })
		);

		this._messageWrapper = BX.create("div", { props: { className: "crm-entity-stream-live-im-messanger" } });
		this._contentWrapper.appendChild(this._messageWrapper);

		this._messageDateNode = BX.create("div", { props: { className: "crm-entity-stream-live-im-time" } });
		this._messageWrapper.appendChild(this._messageDateNode);

		this._messageTexWraper = BX.create("div", { props: { className: "crm-entity-stream-live-im-message" } });
		this._messageWrapper.appendChild(this._messageTexWraper);

		this._messageTextNode = BX.create("div", { props: { className: "crm-entity-stream-live-im-message-text" } });
		this._messageTexWraper.appendChild(this._messageTextNode);

		this._messageCounterNode = BX.create("div", { props: { className: "crm-entity-stream-live-im-message-counter" } });
		this._messageWrapper.appendChild(this._messageCounterNode);

		this.refreshSummary();
	};
	BX.CrmEntityChat.prototype.refreshUsers = function()
	{
		BX.cleanNode(this._userWrapper);

		var infos = this.getUserInfoData();
		var list = Object.values(infos);

		if(list.length === 0)
		{
			this._userWrapper.appendChild(
				BX.create("span",
					{
						props: { className: "crm-entity-stream-live-im-user-avatar ui-icon ui-icon-common-user" },
						children: [ BX.create("i") ]
					}
				)
			);
		}
		else
		{
			var count = list.length >= 3 ? 3 : list.length;
			for(var i = 0; i < count; i++)
			{
				var info = list[i];

				var icon = BX.create("i");
				var imageUrl = BX.prop.getString(info, "avatar", "");
				if(imageUrl !== "")
				{
					icon.style.backgroundImage = "url(" +  imageUrl + ")";
				}

				this._userWrapper.appendChild(
					BX.create("span",
						{
							props: { className: "crm-entity-stream-live-im-user-avatar ui-icon ui-icon-common-user" },
							children: [ icon ]
						}
					)
				);
			}
		}

		if(this._layoutType === BX.CrmEntityChatLayoutType.summary)
		{
			if(list.length > 3)
			{
				this._extraUserCounter.display = "";
				this._extraUserCounter.innerHTML = "+" + (list.length - 3).toString();
			}
			else
			{
				if(this._extraUserCounter.innerHTML !== "")
				{
					this._extraUserCounter.innerHTML = "";
				}
				this._extraUserCounter.display = "none";
			}
		}
		else //if(this._layoutType === BX.CrmEntityChatLayoutType.invitation)
		{
			if(this._extraUserCounter.innerHTML !== "")
			{
				this._extraUserCounter.innerHTML = "";
			}
			this._extraUserCounter.display = "none";

			this._userWrapper.appendChild(
				BX.create("span", { props: { className: "crm-entity-stream-live-im-user-invite-btn" } })
			);
		}
	};
	BX.CrmEntityChat.prototype.refreshSummary = function()
	{
		if(this._layoutType !== BX.CrmEntityChatLayoutType.summary)
		{
			return;
		}

		var message = this.getMessageData();

		//region Message Date
		var isoDate = BX.prop.getString(message, "date", "");
		if(isoDate === "")
		{
			this._messageDateNode.innerHTML = "";
		}
		else
		{
			var remoteDate = (new Date(isoDate)).getTime()/1000 + this.getServerTimezoneOffset() + this.getUserTimezoneOffset();
			var localTime = (new Date).getTime()/1000 + this.getServerTimezoneOffset() + this.getUserTimezoneOffset();
			this._messageDateNode.innerHTML = this.formatTime(remoteDate, localTime, true);
		}
		//endregion

		//region Message Text
		var text = BX.prop.getString(message, "text", "");
		var params = BX.prop.getObject(message, "params", {});
		if(text === "")
		{
			this._messageTextNode.innerHTML = "";
		}
		else
		{
			if(typeof(top.BX.MessengerCommon) !== "undefined")
			{
				text = top.BX.MessengerCommon.purifyText(text, params);
			}
			this._messageTextNode.innerHTML = text;
		}
		//endregion

		//region Unread Message Counter
		var counter = 0;
		var userId = this.getUserId();
		if(userId > 0)
		{
			counter = BX.prop.getInteger(
				BX.prop.getObject(
					BX.prop.getObject(this._data, "USER_INFOS", {}),
					userId,
					null
				),
				"counter",
				0
			);
		}

		this._messageCounterNode.innerHTML = counter.toString();
		this._messageCounterNode.style.display = counter > 0 ? "" : "none";
		//endregion
	};
	BX.CrmEntityChat.prototype.refreshUsersAnimated = function()
	{
		BX.removeClass(this._userWrapper, 'crm-entity-stream-live-im-message-show');
		BX.addClass(this._userWrapper, 'crm-entity-stream-live-im-message-hide');

		window.setTimeout(
			function()
			{
				this.refreshUsers();
				window.setTimeout(
					function()
					{
						BX.removeClass(this._userWrapper, 'crm-entity-stream-live-im-message-hide');
						BX.addClass(this._userWrapper, 'crm-entity-stream-live-im-message-show');
					}.bind(this),
					50
				);
			}.bind(this),
			500
		);
	};
	BX.CrmEntityChat.prototype.refreshSummaryAnimated = function()
	{
		BX.removeClass(this._messageWrapper, 'crm-entity-stream-live-im-message-show');
		BX.addClass(this._messageWrapper, 'crm-entity-stream-live-im-message-hide');

		window.setTimeout(
			function()
			{
				this.refreshSummary();
				window.setTimeout(
					function()
					{
						BX.removeClass(this._messageWrapper, 'crm-entity-stream-live-im-message-hide');
						BX.addClass(this._messageWrapper, 'crm-entity-stream-live-im-message-show');
					}.bind(this),
					50
				);
			}.bind(this),
			500
		);
	};
	BX.CrmEntityChat.prototype.onOpenChat = function(e)
	{
		if(typeof(top.BXIM) === "undefined")
		{
			return;
		}

		if (this.isRestricted())
		{
			this.applyLockScript();

			return;
		}

		var slug = "";

		var chatId = this.getChatId();
		if(chatId > 0 && this.hasUserInfo(this.getUserId()))
		{
			slug = "chat" + chatId.toString();
		}
		else
		{
			var ownerInfo = this.getOwnerInfo();
			var entityId = BX.prop.getInteger(ownerInfo, "ENTITY_ID", 0);
			var entityTypeName = BX.prop.getString(ownerInfo, "ENTITY_TYPE_NAME", "");

			if(entityTypeName !== "" && entityId > 0)
			{
				slug = "crm|" + entityTypeName + "|" + entityId.toString();
			}
		}

		if(slug !== "")
		{
			top.BXIM.openMessengerSlider(slug, { RECENT: "N", MENU: "N" });
		}
	};
	BX.CrmEntityChat.prototype.onChatEvent = function(command, params, extras)
	{
		var chatId = this.getChatId();
		if(chatId <= 0 || chatId !== BX.prop.getInteger(params, "chatId", 0))
		{
			return;
		}

		if(command === "chatUserAdd")
		{
			this.setUserInfoData(BX.mergeEx(this.getUserInfoData(), BX.prop.getObject(params, "users", {})));
			this.refreshUsersAnimated();
		}
		else if(command === "chatUserLeave")
		{
			this.removeUserInfo(BX.prop.getInteger(params, "userId", 0));
			this.refreshUsersAnimated();
		}
		else if(command === "messageChat")
		{
			//Message was added.
			this.setMessageData(BX.prop.getObject(params, "message", {}));
			this.setUnreadMessageCounter(this.getUserId(), BX.prop.getInteger(params, "counter", 0));
			this.refreshSummaryAnimated();
		}
		else if(command === "messageUpdate" || command === "messageDelete")
		{
			//Message was modified or removed.
			if(command === "messageDelete")
			{
				//HACK: date is not in ISO format
				delete params["date"];
			}

			var message = this.getMessageData();
			if(BX.prop.getInteger(message, "id", 0) === BX.prop.getInteger(params, "id", 0))
			{
				this.setMessageData(BX.mergeEx(message, params));
				this.refreshSummaryAnimated();
			}
		}
		else if(command === "readMessageChat")
		{
			this.setUnreadMessageCounter(this.getUserId(), 0);
			this.refreshSummaryAnimated();
		}
		else if(command === "unreadMessageChat")
		{
			this.setUnreadMessageCounter(this.getUserId(), BX.prop.getInteger(params, "counter", 0));
			this.refreshSummaryAnimated();
		}
	};
	BX.CrmEntityChat.items = {};
	BX.CrmEntityChat.prototype.getMessage = function(name)
	{
		return BX.prop.getString(BX.CrmEntityChat.messages, name, name);
	};
	if(typeof(BX.CrmEntityChat.messages) === "undefined")
	{
		BX.CrmEntityChat.messages = {};
	}
	BX.CrmEntityChat.create = function(id, settings)
	{
		var self = new BX.CrmEntityChat();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}

//region Editors
if(typeof BX.CrmTimelineBaseEditor === "undefined")
{
	BX.CrmTimelineBaseEditor = function()
	{
		this._id = "";
		this._settings = {};
		this._manager = null;

		this._ownerTypeId = 0;
		this._ownerId = 0;

		this._container = null;
		this._input = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._ghostInput = null;

		this._saveButtonHandler = BX.delegate(this.onSaveButtonClick, this);
		this._cancelButtonHandler = BX.delegate(this.onCancelButtonClick, this);
		this._focusHandler = BX.delegate(this.onFocus, this);
		this._blurHandler = BX.delegate(this.onBlur, this);
		this._keyupHandler = BX.delegate(this.resizeForm, this);
		this._delayedKeyupHandler = BX.delegate(
			function()
			{
				setTimeout(this.resizeForm.bind(this), 0);
			},
			this
		);

		this._isVisible = true;
		this._hideButtonsOnBlur = true;
	};

	BX.CrmTimelineBaseEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._manager = this.getSetting("manager");
			if(!(this._manager instanceof BX.CrmTimelineManager))
			{
				throw "BX.CrmTimelineBaseEditor. Manager instance is not found.";
			}

			this._ownerTypeId = this.getSetting("ownerTypeId", 0);
			this._ownerId = this.getSetting("ownerId", 0);

			this._container = BX(this.getSetting("container"));
			this._input = BX(this.getSetting("input"));
			this._saveButton = BX(this.getSetting("button"));
			this._cancelButton = BX(this.getSetting("cancelButton"));

			BX.bind(this._saveButton, "click", this._saveButtonHandler);
			if(this._cancelButton)
			{
				BX.bind(this._cancelButton, "click", this._cancelButtonHandler);
			}

			BX.bind(this._input, "focus", this._focusHandler);
			BX.bind(this._input, "blur", this._blurHandler);
			BX.bind(this._input, "keyup", this._keyupHandler);
			BX.bind(this._input, "cut", this._delayedKeyupHandler);
			BX.bind(this._input, "paste", this._delayedKeyupHandler);

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			this._container.style.display = visible ? "" : "none";
		},
		isVisible: function()
		{
			return this._isVisible;
		},
		onFocus: function(e)
		{
			BX.addClass(this._container, "focus");
		},
		onBlur: function(e)
		{
			if(!this._hideButtonsOnBlur)
			{
				return;
			}

			if(this._input.value === "")
			{
				window.setTimeout(
					BX.delegate(function() {
						BX.removeClass(this._container, "focus");
						this._input.style.minHeight = "";
					}, this),
					200
				);
			}
		},
		onSaveButtonClick: function(e)
		{
			this.save();
		},
		onCancelButtonClick: function()
		{
			this.cancel();
			this._manager.processEditingCancellation(this);
		},
		save: function()
		{
		},
		cancel: function()
		{
		},
		release: function()
		{
			if(this._ghostInput)
			{
				this._ghostInput = BX.remove(this._ghostInput);
			}
		},
		ensureGhostCreated: function()
		{
			if(this._ghostInput)
			{
				return this._ghostInput;
			}

			this._ghostInput = BX.create('div', {
				props: { className: 'crm-entity-stream-content-new-comment-textarea-shadow' },
				text: this._input.value
			});

			this._ghostInput.style.width = this._input.offsetWidth + 'px';
			document.body.appendChild(this._ghostInput);
			return this._ghostInput;
		},
		resizeForm: function()
		{
			var ghost = this.ensureGhostCreated();
			var computedStyle = getComputedStyle(this._input);
			var diff = parseInt(computedStyle.paddingBottom) +
				parseInt(computedStyle.paddingTop) +
				parseInt(computedStyle.borderTopWidth) +
				parseInt(computedStyle.borderBottomWidth) || 0;

			ghost.innerHTML = BX.util.htmlspecialchars(this._input.value.replace(/[\r\n]{1}/g, '<br>'));
			this._input.style.minHeight = ghost.scrollHeight + diff + 'px'
		}
	};
}

if(typeof BX.CrmTimelineCommentEditor === "undefined")
{
	BX.CrmTimelineCommentEditor = function()
	{
		BX.CrmTimelineCommentEditor.superclass.constructor.apply(this);
		this._history = null;
		this._serviceUrl = "";
		this._postForm = null;
		this._editor = null;
		this._isRequestRunning = false;
		this._isLocked = false;
	};

	BX.extend(BX.CrmTimelineCommentEditor, BX.CrmTimelineBaseEditor);

	BX.CrmTimelineCommentEditor.prototype.doInitialize = function()
	{
		this._serviceUrl = this.getSetting("serviceUrl", "");
		BX.unbind(this._input, "blur", this._blurHandler);
		BX.unbind(this._input, "keyup", this._keyupHandler);
	};
	BX.CrmTimelineCommentEditor.prototype.loadEditor = function()
	{
		this._editorName = 'CrmTimeLineComment0';

		if (this._postForm)
			return;

		BX.ajax.runAction(
			"crm.api.timeline.loadEditor",
			{ data: { name: this._editorName } }
		).then(this.onLoadEditorSuccess.bind(this));
	};
	BX.CrmTimelineCommentEditor.prototype.onLoadEditorSuccess = function(result)
	{
		var html = BX.prop.getString(BX.prop.getObject(result, "data", {}), "html", '');
		BX.html(this._editorContainer, html)
			.then(BX.delegate(this.showEditor,this))
			.then(BX.delegate(this.addEvents,this));
	};

	BX.CrmTimelineCommentEditor.prototype.addEvents = function()
	{
		BX.addCustomEvent(
			this._editorContainer.firstElementChild,
			'onFileIsAppended',
			BX.delegate(function(id, item) {
				BX.addClass(this._saveButton, 'ui-btn-disabled');
				BX.addClass(this._saveButton, 'ui-btn-clock');
				this._saveButton.removeEventListener("click", this._saveButtonHandler);
			}, this)
		);

		BX.addCustomEvent(
			this._editorContainer.firstElementChild,
			'onFileIsAdded',
			BX.delegate(function(file, controller, obj, blob) {
				BX.removeClass(this._saveButton, 'ui-btn-clock');
				BX.removeClass(this._saveButton, 'ui-btn-disabled');
				this._saveButton.addEventListener("click", this._saveButtonHandler);
			}, this)
		);
	};

	BX.CrmTimelineCommentEditor.prototype.showEditor = function()
	{
		if (LHEPostForm)
		{
			window.setTimeout(BX.delegate(function(){
				this._postForm = LHEPostForm.getHandler(this._editorName);
				this._editor = BXHtmlEditor.Get(this._editorName);
				BX.onCustomEvent(this._postForm.eventNode, 'OnShowLHE', [true]);
			} ,this), 100);
		}
	};

	BX.CrmTimelineCommentEditor.prototype.getHistory = function()
	{
		return this._history;
	};
	BX.CrmTimelineCommentEditor.prototype.setHistory = function(history)
	{
		this._history = history;
	};
	BX.CrmTimelineCommentEditor.prototype.onFocus = function(e)
	{
		this._input.style.display = 'none';
		if (this._editor && this._postForm)
		{
			this._postForm.eventNode.style.display = 'block';
			this._editor.Focus();
		}
		else
		{
			if (!BX.type.isDomNode(this._editorContainer))
			{
				this._editorContainer = BX.create("div", {attrs: {className: "crm-entity-stream-section-comment-editor"}});
				this._editorContainer.appendChild(
					BX.create("DIV",
					{
						attrs: { className: "crm-timeline-wait" }
					})
				);
				this._container.appendChild(this._editorContainer);
			}

			window.setTimeout(BX.delegate(function(){
				this.loadEditor();
			} ,this), 100);
		}

		BX.addClass(this._container, "focus");
	};
	BX.CrmTimelineCommentEditor.prototype.save = function()
	{
		var text = "";
		var attachmentList = [];
		if (this._postForm)
		{
			text = this._postForm.oEditor.GetContent();
			this._postForm.eventNode
				.querySelectorAll('input[name="UF_CRM_COMMENT_FILES[]"]')
				.forEach(function(input) {
					attachmentList.push(input.value)
				});
		}
		else
		{
			text = this._input.value;
		}

		if(text === "")
		{
			if (!this.emptyCommentMessage)
			{
				this.emptyCommentMessage = new BX.PopupWindow(
					'timeline_empty_new_comment_' + this._ownerId,
					this._saveButton,
					{
						content: BX.message('CRM_TIMELINE_EMPTY_COMMENT_MESSAGE'),
						darkMode: true,
						autoHide: true,
						zIndex: 990,
						angle: {position: 'top', offset: 77},
						closeByEsc: true,
						bindOptions: { forceBindPosition: true}
					}
				);
			}

			this.emptyCommentMessage.show();
			return;
		}

		if(this._isRequestRunning || this._isLocked)
		{
			return;
		}

		this._isRequestRunning = this._isLocked = true;
		BX.ajax(
			{
				url: this._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
				{
					"ACTION": "SAVE_COMMENT",
					"TEXT": text,
					"OWNER_TYPE_ID": this._ownerTypeId,
					"OWNER_ID": this._ownerId,
					"ATTACHMENTS": attachmentList
				},
				onsuccess: BX.delegate(this.onSaveSuccess, this),
				onfailure: BX.delegate(this.onSaveFailure, this)
			}
		);
	};
	BX.CrmTimelineCommentEditor.prototype.cancel = function()
	{
		this._input.value = "";
		this._input.style.minHeight = "";
		if (BX.type.isDomNode(this._editorContainer))
			this._postForm.eventNode.style.display = 'none';

		this._input.style.display = 'block';
		BX.removeClass(this._container, "focus");
		this.release();
	};
	BX.CrmTimelineCommentEditor.prototype.onSaveSuccess = function(data)
	{
		this._isRequestRunning = false;
		if (this._postForm)
		{
			this._postForm.reinit('', {});
		}

		this.cancel();
		var itemData = BX.prop.getObject(data, "HISTORY_ITEM");
		var historyItem = this._history.createItem(itemData);
		this._history.addItem(historyItem, 0);

		var anchor = this._history.createAnchor();
		historyItem.layout({ anchor: anchor });

		var move = BX.CrmCommentAnimation.create(
			historyItem.getWrapper(),
			anchor,
			BX.pos(this._input),
			{
				start: BX.delegate(this.onAnimationStart, this),
				complete: BX.delegate(this.onAnimationComplete, this)
			}
		);
		move.run();
	};
	BX.CrmTimelineCommentEditor.prototype.onSaveFailure = function()
	{
		this._isRequestRunning = this._isLocked = false;
	};
	BX.CrmTimelineCommentEditor.prototype.onAnimationStart = function()
	{
		this._input.value = "";
	};
	BX.CrmTimelineCommentEditor.prototype.onAnimationComplete = function()
	{
		this._isLocked = false;
		BX.removeClass(this._container, "focus");

		this._input.style.minHeight = "";
		this._manager.processEditingCompletion(this);

		this.release();

		this._history._anchor = null;
		this._history.refreshLayout();
	};
	BX.CrmTimelineCommentEditor.items = {};
	BX.CrmTimelineCommentEditor.create = function(id, settings)
	{
		var self = new BX.CrmTimelineCommentEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}

if(typeof(BX.CrmTimelineWaitType) === "undefined")
{
	BX.CrmTimelineWaitType =
	{
		undefined: 0,
		after: 1,
		before: 2,

		names:
		{
			after: "after",
			before: "before"
		},

		resolveTypeId: function(name)
		{
			if(name === this.names.after)
			{
				return this.after;
			}
			else if(name === this.names.before)
			{
				return this.before;
			}

			return this.undefined;
		}
	};
}

if(typeof BX.CrmTimelineWaitHelper === "undefined")
{
	BX.CrmTimelineWaitHelper =
	{
		getDurationText: function(duration, enableNumber)
		{
			enableNumber = !!enableNumber;

			var type = "D";
			if(enableNumber)
			{
				var result = "";
				if((duration % 7) === 0)
				{
					duration = duration / 7;
					type = "W";
				}
			}

			if(type === "W")
			{
				result = BX.CrmMessageHelper.getCurrent().getNumberDeclension(
					duration,
					this.getMessage("weekNominative"),
					this.getMessage("weekGenitiveSingular"),
					this.getMessage("weekGenitivePlural")
				);
			}
			else
			{
				result = BX.CrmMessageHelper.getCurrent().getNumberDeclension(
					duration,
					this.getMessage("dayNominative"),
					this.getMessage("dayGenitiveSingular"),
					this.getMessage("dayGenitivePlural")
				);
			}

			if(enableNumber)
			{
				result = duration.toString() + " " + result;
			}
			return result;
		},
		getMessage: function(name)
		{
			return this.messages.hasOwnProperty(name) ? this.messages[name] : name;
		}
	};

	if(typeof(BX.CrmTimelineWaitHelper.messages) === "undefined")
	{
		BX.CrmTimelineWaitHelper.messages = {};
	}
}

if(typeof BX.CrmTimelineWaitEditor === "undefined")
{
	BX.CrmTimelineWaitEditor = function()
	{
		BX.CrmTimelineWaitEditor.superclass.constructor.apply(this);
		this._serviceUrl = "";
		this._isRequestRunning = false;
		this._isLocked = false;

		this._hideButtonsOnBlur = false;
		//region Config
		this._type = BX.CrmTimelineWaitType.after;
		this._duration = 1;
		this._target = "";
		this._configContainer = null;
		this._configSelector = null;
		//endregion

		this._isMenuShown = false;
		this._menu = null;
		this._configDialog = null;
	};

	BX.extend(BX.CrmTimelineWaitEditor, BX.CrmTimelineBaseEditor);

	BX.CrmTimelineWaitEditor.prototype.doInitialize = function()
	{
		this._configContainer = BX(this.getSetting("configContainer"));
		this._serviceUrl = this.getSetting("serviceUrl", "");

		var config = BX.prop.getObject(this._settings, "config", {});
		this._type = BX.CrmTimelineWaitType.resolveTypeId(
			BX.prop.getString(
				config,
				"type",
				BX.CrmTimelineWaitType.names.after
			)
		);
		this._duration = BX.prop.getInteger(config, "duration", 1);
		this._target = BX.prop.getString(config, "target", "");
		this._targetDates = BX.prop.getArray(this._settings, "targetDates", []);
		this.layoutConfigurationSummary();
	};
	BX.CrmTimelineWaitEditor.prototype.getDurationText = function(duration, enableNumber)
	{
		return BX.CrmTimelineWaitHelper.getDurationText(duration, enableNumber);
	};
	BX.CrmTimelineWaitEditor.prototype.getTargetDateCaption = function(name)
	{
		for(var i = 0, length = this._targetDates.length; i < length; i++)
		{
			var info = this._targetDates[i];
			if(info["name"] === name)
			{
				return info["caption"];
			}
		}

		return "";
	};
	BX.CrmTimelineWaitEditor.prototype.onSelectorClick = function(e)
	{
		if(!this._isMenuShown)
		{
			this.openMenu();
		}
		else
		{
			this.closeMenu();
		}
		e.preventDefault ? e.preventDefault() : (e.returnValue = false);
	};
	BX.CrmTimelineWaitEditor.prototype.openMenu = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		var handler = BX.delegate(this.onMenuItemClick, this);

		var menuItems =
			[
				{ id: "day_1", text: this.getMessage("oneDay"), onclick: handler },
				{ id: "day_2", text: this.getMessage("twoDays"), onclick: handler },
				{ id: "day_3", text: this.getMessage("threeDays"), onclick: handler },
				{ id: "week_1", text: this.getMessage("oneWeek"), onclick: handler },
				{ id: "week_2", text: this.getMessage("twoWeek"), onclick: handler },
				{ id: "week_3", text: this.getMessage("threeWeeks"), onclick: handler }
			];

		var customMenu = { id: "custom", text: this.getMessage("custom"), items: [] };
		customMenu["items"].push({ id: "afterDays", text: this.getMessage("afterDays"), onclick: handler });
		if(this._targetDates.length > 0)
		{
			customMenu["items"].push({ id: "beforeDate", text: this.getMessage("beforeDate"), onclick: handler });
		}
		menuItems.push(customMenu);

		BX.PopupMenu.show(
			this._id,
			this._configSelector,
			menuItems,
			{
				offsetTop: 0,
				offsetLeft: 36,
				angle: { position: "top", offset: 0 },
				events:
				{
					onPopupShow: BX.delegate(this.onMenuShow, this),
					onPopupClose: BX.delegate(this.onMenuClose, this),
					onPopupDestroy: BX.delegate(this.onMenuDestroy, this)
				}
			}
		);

		this._menu = BX.PopupMenu.currentItem;
	};
	BX.CrmTimelineWaitEditor.prototype.closeMenu = function()
	{
		if(!this._isMenuShown)
		{
			return;
		}

		if(this._menu)
		{
			this._menu.close();
		}
	};
	BX.CrmTimelineWaitEditor.prototype.onMenuItemClick = function(e, item)
	{
		this.closeMenu();

		if(item.id === "afterDays" || item.id === "beforeDate")
		{
			this.openConfigDialog(
				item.id === "afterDays" ? BX.CrmTimelineWaitType.after : BX.CrmTimelineWaitType.before
			);
			return;
		}

		var params = { type: BX.CrmTimelineWaitType.after };
		if(item.id === "day_1")
		{
			params["duration"] = 1;
		}
		else if(item.id === "day_2")
		{
			params["duration"] = 2;
		}
		else if(item.id === "day_3")
		{
			params["duration"] = 3;
		}
		if(item.id === "week_1")
		{
			params["duration"] = 7;
		}
		else if(item.id === "week_2")
		{
			params["duration"] = 14;
		}
		else if(item.id === "week_3")
		{
			params["duration"] = 21;
		}
		this.saveConfiguration(params);
	};
	BX.CrmTimelineWaitEditor.prototype.openConfigDialog = function(type)
	{
		if(!this._configDialog)
		{
			this._configDialog = BX.CrmTimelineWaitConfigurationDialog.create(
				"",
				{
					targetDates: this._targetDates,
					onSave: BX.delegate(this.onConfigDialogSave, this),
					onCancel: BX.delegate(this.onConfigDialogCancel, this)
				}
			);
		}

		this._configDialog.setType(type);
		this._configDialog.setDuration(this._duration);

		var target = this._target;
		if(target === "" && this._targetDates.length > 0)
		{
			target = this._targetDates[0]["name"];
		}
		this._configDialog.setTarget(target);
		this._configDialog.open();
	};
	BX.CrmTimelineWaitEditor.prototype.onConfigDialogSave = function(sender, params)
	{
		this.saveConfiguration(params);
		this._configDialog.close();
	};
	BX.CrmTimelineWaitEditor.prototype.onConfigDialogCancel = function(sender)
	{
		this._configDialog.close();
	};
	BX.CrmTimelineWaitEditor.prototype.onMenuShow = function()
	{
		this._isMenuShown = true;
	};
	BX.CrmTimelineWaitEditor.prototype.onMenuClose = function()
	{
		if(this._menu && this._menu.popupWindow)
		{
			this._menu.popupWindow.destroy();
		}
	};
	BX.CrmTimelineWaitEditor.prototype.onMenuDestroy = function()
	{
		this._isMenuShown = false;
		this._menu = null;

		if(typeof(BX.PopupMenu.Data[this._id]) !== "undefined")
		{
			delete(BX.PopupMenu.Data[this._id]);
		}
	};
	BX.CrmTimelineWaitEditor.prototype.saveConfiguration = function(params)
	{
		//region Parse params
		this._type = BX.prop.getInteger(params, "type", BX.CrmTimelineWaitType.after);
		this._duration = BX.prop.getInteger(params, "duration", 0);
		if(this._duration <= 0)
		{
			this._duration = 1;
		}
		this._target = this._type === BX.CrmTimelineWaitType.before
			? BX.prop.getString(params, "target", "") : "";
		//endregion
		//region Save settings
		var optionName = this._manager.getId().toLowerCase();
		BX.userOptions.save(
			"crm.timeline.wait",
			optionName,
			"type",
			this._type === BX.CrmTimelineWaitType.after ? "after" : "before"
		);

		BX.userOptions.save(
			"crm.timeline.wait",
			optionName,
			"duration",
			this._duration
		);

		BX.userOptions.save(
			"crm.timeline.wait",
			optionName,
			"target",
			this._target
		);
		//endregion
		this.layoutConfigurationSummary();
	};
	BX.CrmTimelineWaitEditor.prototype.getSummaryHtml = function()
	{
		if(this._type === BX.CrmTimelineWaitType.before)
		{
			return (
				this.getMessage("completionTypeBefore")
					.replace("#DURATION#", this.getDurationText(this._duration, true))
					.replace("#TARGET_DATE#", this.getTargetDateCaption(this._target))
			);
		}

		return (
			this.getMessage("completionTypeAfter")
				.replace("#DURATION#", this.getDurationText(this._duration, true))
		);
	};
	BX.CrmTimelineWaitEditor.prototype.getSummaryText = function()
	{
		return BX.util.strip_tags(this.getSummaryHtml());
	};
	BX.CrmTimelineWaitEditor.prototype.layoutConfigurationSummary = function()
	{
		this._configContainer.innerHTML = this.getSummaryHtml();
		this._configSelector = this._configContainer.querySelector("a");
		if(this._configSelector)
		{
			BX.bind(this._configSelector, "click", BX.delegate(this.onSelectorClick, this));
		}
	};
	BX.CrmTimelineWaitEditor.prototype.postpone = function(id, offset, callback)
	{
		BX.ajax(
			{
				url: this._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
				{
					"ACTION": "POSTPONE_WAIT",
					"DATA": { "ID": id, "OFFSET": offset }
				},
				onsuccess: callback
			}
		);
	};
	BX.CrmTimelineWaitEditor.prototype.complete = function(id, completed, callback)
	{
		BX.ajax(
			{
				url: this._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
				{
					"ACTION": "COMPLETE_WAIT",
					"DATA": { "ID": id, "COMPLETED": completed ? 'Y' : 'N' }
				},
				onsuccess: callback
			}
		);
	};
	BX.CrmTimelineWaitEditor.prototype.save = function()
	{
		if(this._isRequestRunning || this._isLocked)
		{
			return;
		}

		var description = this.getSummaryText();
		var comment = BX.util.trim(this._input.value);
		if(comment !== "")
		{
			description += "\n" + comment;
 		}

		var data =
			{
				ID: 0,
				typeId: this._type,
				duration: this._duration,
				targetFieldName: this._target,
				subject: "",
				description: description,
				completed: 0,
				ownerType: BX.CrmEntityType.resolveName(this._ownerTypeId),
				ownerID: this._ownerId
			};

		BX.ajax(
			{
				url: this._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
				{
					"ACTION": "SAVE_WAIT",
					"DATA": data
				},
				onsuccess: BX.delegate(this.onSaveSuccess, this),
				onfailure: BX.delegate(this.onSaveFailure, this)
			}
		);
		this._isRequestRunning = this._isLocked = true;
	};
	BX.CrmTimelineWaitEditor.prototype.cancel = function()
	{
		this._input.value = "";
		this._input.style.minHeight = "";
		this.release();
	};
	BX.CrmTimelineWaitEditor.prototype.onSaveSuccess = function(data)
	{
		this._isRequestRunning = this._isLocked = false;

		var error = BX.prop.getString(data, "ERROR", "");
		if(error !== "")
		{
			alert(error);
			return;
		}

		this._input.value = "";
		this._input.style.minHeight = "";
		this._manager.processEditingCompletion(this);
		this.release();
	};
	BX.CrmTimelineWaitEditor.prototype.onSaveFailure = function()
	{
		this._isRequestRunning = this._isLocked = false;
	};
	BX.CrmTimelineWaitEditor.prototype.getMessage = function(name)
	{
		var m = BX.CrmTimelineWaitEditor.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmTimelineWaitEditor.messages) === "undefined")
	{
		BX.CrmTimelineWaitEditor.messages = {};
	}
	BX.CrmTimelineWaitEditor.items = {};
	BX.CrmTimelineWaitEditor.create = function(id, settings)
	{
		var self = new BX.CrmTimelineWaitEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}

if(typeof BX.CrmTimelineSmsEditor === "undefined")
{
	BX.CrmTimelineSmsEditor = function()
	{
		BX.CrmTimelineSmsEditor.superclass.constructor.apply(this);
		this._history = null;
		this._serviceUrl = "";

		this._isRequestRunning = false;
		this._isLocked = false;

		this._senderId = null;
		this._from = null;
		this._commEntityTypeId = null;
		this._commEntityId = null;
		this._to = null;

		this._canUse = null;
		this._canSendMessage = null;
		this._manageUrl = '';
		this._senders = [];
		this._fromList = [];
		this._toList = [];
		this._defaults = {};
		this._communications = [];

		this._menu = null;
		this._isMenuShown = false;
		this._shownMenuId = null;
		this._documentSelector = null;
		this._source = null;

		this._paymentId = null;
		this._shipmentId = null;
	};
	BX.extend(BX.CrmTimelineSmsEditor, BX.CrmTimelineBaseEditor);
	BX.CrmTimelineSmsEditor.prototype.doInitialize = function()
	{
		this._serviceUrl = BX.util.remove_url_param(
			this.getSetting("serviceUrl", ""),
			['sessid', 'site']
		);

		var config = BX.prop.getObject(this._settings, "config", {});

		this._canUse = BX.prop.getBoolean(config, "canUse", false);
		this._canSendMessage = BX.prop.getBoolean(config, "canSendMessage", false);
		this._manageUrl = BX.prop.getString(config, "manageUrl", '');
		this._senders = BX.prop.getArray(config, "senders", []);
		this._defaults = BX.prop.getObject(config, "defaults", {senderId:null,from:null});
		this._communications = BX.prop.getArray(config, "communications", []);
		this._isSalescenterEnabled = BX.prop.getBoolean(config, "isSalescenterEnabled", false);
		this._isDocumentsEnabled = BX.prop.getBoolean(config, "isDocumentsEnabled", false);
		if(this._isDocumentsEnabled)
		{
			this._documentsProvider = BX.prop.getString(config, "documentsProvider", '');
			this._documentsValue = BX.prop.getString(config, "documentsValue", '');
		}
		this._isFilesEnabled = BX.prop.getBoolean(config, "isFilesEnabled", false);
		if(this._isFilesEnabled)
		{
			this._diskUrls = BX.prop.getObject(config, "diskUrls");
			this._isFilesExternalLinkEnabled = BX.prop.getBoolean(config, "isFilesExternalLinkEnabled", true);
		}

		this._senderSelectorNode = this._container.querySelector('[data-role="sender-selector"]');
		this._fromContainerNode = this._container.querySelector('[data-role="from-container"]');
		this._fromSelectorNode = this._container.querySelector('[data-role="from-selector"]');
		this._clientContainerNode = this._container.querySelector('[data-role="client-container"]');
		this._clientSelectorNode = this._container.querySelector('[data-role="client-selector"]');
		this._toSelectorNode = this._container.querySelector('[data-role="to-selector"]');
		this._messageLengthCounterNode = this._container.querySelector('[data-role="message-length-counter"]');
		this._salescenterStarter = this._container.querySelector('[data-role="salescenter-starter"]');
		this._smsDetailSwitcher = this._container.querySelector('[data-role="sms-detail-switcher"]');
		this._smsDetail = this._container.querySelector('[data-role="sms-detail"]');
		this._documentSelectorButton = this._container.querySelector('[data-role="sms-document-selector"]');
		this._fileSelectorButton = this._container.querySelector('[data-role="sms-file-selector"]');
		this._fileUploadZone = this._container.querySelector('[data-role="sms-file-upload-zone"]');
		this._fileUploadLabel = this._container.querySelector('[data-role="sms-file-upload-label"]');
		this._fileSelectorBitrix = this._container.querySelector('[data-role="sms-file-selector-bitrix"]');
		this._fileExternalLinkDisabledContent = this._container.querySelector('[data-role="sms-file-external-link-disabled"]');

		if (this._canUse && this._senders.length > 0)
		{
			this.initSenderSelector();
		}
		if (this._canUse && this._canSendMessage)
		{
			this.initDetailSwitcher();
			this.initFromSelector();
			this.initClientContainer();
			this.initClientSelector();
			this.initToSelector();
			this.initMessageLengthCounter();
			this.setMessageLengthCounter();
			if(this._isDocumentsEnabled)
			{
				this.initDocumentSelector();
			}
			if(this._isFilesEnabled)
			{
				this.initFileSelector();
			}
		}

		if(this._isSalescenterEnabled)
		{
			this.initSalescenterApplication();
		}
	};

	BX.CrmTimelineSmsEditor.prototype.initDetailSwitcher = function()
	{
		BX.bind(this._smsDetailSwitcher, 'click', function()
		{
			if(this._smsDetail.classList.contains('hidden'))
			{
				this._smsDetail.classList.remove('hidden');
				this._smsDetailSwitcher.innerText = BX.message('CRM_TIMELINE_COLLAPSE');
			}
			else
			{
				this._smsDetail.classList.add('hidden');
				this._smsDetailSwitcher.innerText = BX.message('CRM_TIMELINE_DETAILS');
			}
		}.bind(this));
	};

	BX.CrmTimelineSmsEditor.prototype.initSenderSelector = function()
	{
		var defaultSenderId = this._defaults.senderId ;
		var defaultSender = this._senders[0].canUse ? this._senders[0] : null;
		var restSender = null;
		var menuItems = [];
		var handler = this.onSenderSelectorClick.bind(this);

		for (var i = 0; i < this._senders.length; ++i)
		{
			if (this._senders[i].canUse && this._senders[i].fromList.length && (this._senders[i].id === defaultSenderId || !defaultSender))
			{
				defaultSender = this._senders[i];
			}

			if (this._senders[i].id === 'rest')
			{
				restSender = this._senders[i];
				continue;
			}

			menuItems.push({
				text: this._senders[i].name,
				sender: this._senders[i],
				onclick: handler,
				className: (!this._senders[i].canUse || !this._senders[i].fromList.length)
					? 'crm-timeline-popup-menu-item-disabled menu-popup-no-icon' : ''
			});
		}

		if (restSender)
		{
			if (restSender.fromList.length > 0)
			{
				menuItems.push({delimiter: true});
				for (i = 0; i < restSender.fromList.length; ++i)
				{
					menuItems.push({
						text: restSender.fromList[i].name,
						sender: restSender,
						from: restSender.fromList[i],
						onclick: handler
					});
				}
			}
			menuItems.push({delimiter: true}, {
				text: BX.message('CRM_TIMELINE_SMS_REST_MARKETPLACE'),
				href: '/marketplace/category/crm_robot_sms/',
				target: '_blank'
			});
		}

		if (defaultSender)
		{
			this.setSender(defaultSender);
		}

		BX.bind(this._senderSelectorNode, 'click', this.openMenu.bind(this, 'sender', this._senderSelectorNode, menuItems));
	};
	BX.CrmTimelineSmsEditor.prototype.onSenderSelectorClick = function(e, item)
	{
		if (item.sender)
		{
			if (!item.sender.canUse || !item.sender.fromList.length)
			{
				var url = BX.Uri.addParam(item.sender.manageUrl, {'IFRAME': 'Y'});
				var slider = BX.SidePanel.Instance.getTopSlider();
				BX.SidePanel.Instance.open(url, {
					events: {
						onClose: function()
						{
							if (slider)
							{
								slider.reload();
							}
						},
						onCloseComplete: function()
						{
							if (!slider)
							{
								document.location.reload();
							}
						}
					}
				});
				return;
			}

			this.setSender(item.sender, true);
			var from = item.from ? item.from : item.sender.fromList[0];
			this.setFrom(from, true);
		}
		this._menu.close();
	};
	BX.CrmTimelineSmsEditor.prototype.setSender = function(sender, setAsDefault)
	{
		this._senderId = sender.id;
		this._fromList = sender.fromList;
		this._senderSelectorNode.textContent = sender.shortName ? sender.shortName : sender.name;

		var visualFn = sender.id === 'rest' ? 'hide' : 'show';
		BX[visualFn](this._fromContainerNode);

		if (setAsDefault)
		{
			BX.userOptions.save("crm", "sms_manager_editor", "senderId", this._senderId);
		}
	};
	BX.CrmTimelineSmsEditor.prototype.initFromSelector = function()
	{
		if (this._fromList.length > 0)
		{
			var defaultFromId = this._defaults.from || this._fromList[0].id;
			var defaultFrom = null;
			for (var i = 0; i < this._fromList.length; ++i)
			{
				if (this._fromList[i].id === defaultFromId || !defaultFrom)
				{
					defaultFrom = this._fromList[i];
				}
			}
			if (defaultFrom)
			{
				this.setFrom(defaultFrom);
			}
		}

		BX.bind(this._fromSelectorNode, 'click', this.onFromSelectorClick.bind(this));
	};
	BX.CrmTimelineSmsEditor.prototype.onFromSelectorClick = function(e)
	{
		var menuItems = [];
		var handler = this.onFromSelectorItemClick.bind(this);

		for (var i = 0; i < this._fromList.length; ++i)
		{
			menuItems.push({
				text: this._fromList[i].name,
				from: this._fromList[i],
				onclick: handler
			});
		}

		this.openMenu('from_'+this._senderId, this._fromSelectorNode, menuItems, e);
	};
	BX.CrmTimelineSmsEditor.prototype.onFromSelectorItemClick = function(e, item)
	{
		if (item.from)
		{
			this.setFrom(item.from, true);
		}
		this._menu.close();
	};
	BX.CrmTimelineSmsEditor.prototype.setFrom = function(from, setAsDefault)
	{
		this._from = from.id;

		if (this._senderId === 'rest')
		{
			this._senderSelectorNode.textContent = from.name;
		}
		else
		{
		this._fromSelectorNode.textContent = from.name;
		}

		if (setAsDefault)
		{
			BX.userOptions.save("crm", "sms_manager_editor", "from", this._from);
		}
	};
	BX.CrmTimelineSmsEditor.prototype.initClientContainer = function()
	{
		if (this._communications.length === 0)
		{
			BX.hide(this._clientContainerNode);
		}
	};
	BX.CrmTimelineSmsEditor.prototype.initClientSelector = function()
	{
		var menuItems = [];
		var handler = this.onClientSelectorClick.bind(this);

		for (var i = 0; i < this._communications.length; ++i)
		{
			menuItems.push({
				text: this._communications[i].caption,
				client: this._communications[i],
				onclick: handler
			});
			if (i === 0)
			{
				this.setClient(this._communications[i]);
			}
		}

		BX.bind(this._clientSelectorNode, 'click', this.openMenu.bind(this, 'comm', this._clientSelectorNode, menuItems));
	};
	BX.CrmTimelineSmsEditor.prototype.onClientSelectorClick = function(e, item)
	{
		if (item.client)
		{
			this.setClient(item.client);
		}
		this._menu.close();
	};
	BX.CrmTimelineSmsEditor.prototype.setClient = function(client)
	{
		this._commEntityTypeId = client.entityTypeId;
		this._commEntityId = client.entityId;
		this._clientSelectorNode.textContent = client.caption;
		this._toList = client.phones;
		this.setTo(client.phones[0]);
	};
	BX.CrmTimelineSmsEditor.prototype.initToSelector = function()
	{
		BX.bind(this._toSelectorNode, 'click', this.onToSelectorClick.bind(this));
	};
	BX.CrmTimelineSmsEditor.prototype.onToSelectorClick = function(e)
	{
		var menuItems = [];
		var handler = this.onToSelectorItemClick.bind(this);

		for (var i = 0; i < this._toList.length; ++i)
		{
			menuItems.push({
				text: this._toList[i].valueFormatted || this._toList[i].value,
				to: this._toList[i],
				onclick: handler
			});
		}

		this.openMenu('to_'+this._commEntityTypeId+'_'+this._commEntityId, this._toSelectorNode, menuItems, e);
	};
	BX.CrmTimelineSmsEditor.prototype.onToSelectorItemClick = function(e, item)
	{
		if (item.to)
		{
			this.setTo(item.to);
		}
		this._menu.close();
	};
	BX.CrmTimelineSmsEditor.prototype.setTo = function(to)
	{
		this._to = to.value;
		this._toSelectorNode.textContent = to.valueFormatted || to.value;
	};
	BX.CrmTimelineSmsEditor.prototype.openMenu = function(menuId, bindElement, menuItems, e)
	{
		if (this._shownMenuId === menuId)
		{
			return;
		}

		if(this._shownMenuId !== null && this._menu)
		{
			this._menu.close();
			this._shownMenuId = null;
		}

		BX.PopupMenu.show(
			this._id + menuId,
			bindElement,
			menuItems,
			{
				offsetTop: 0,
				offsetLeft: 36,
				angle: { position: "top", offset: 0 },
				events:
					{
						onPopupClose: BX.delegate(this.onMenuClose, this)
					}
			}
		);

		this._menu = BX.PopupMenu.currentItem;
		e.preventDefault();
	};
	BX.CrmTimelineSmsEditor.prototype.onMenuClose = function()
	{
		this._shownMenuId = null;
		this._menu = null;
	};
	BX.CrmTimelineSmsEditor.prototype.initMessageLengthCounter = function()
	{
		this._messageLengthMax = parseInt(this._messageLengthCounterNode.getAttribute('data-length-max'));
		BX.bind(this._input, 'keyup', this.setMessageLengthCounter.bind(this));
		BX.bind(this._input, 'cut', this.setMessageLengthCounterDelayed.bind(this));
		BX.bind(this._input, 'paste', this.setMessageLengthCounterDelayed.bind(this));
	};
	BX.CrmTimelineSmsEditor.prototype.setMessageLengthCounterDelayed = function()
	{
		setTimeout(this.setMessageLengthCounter.bind(this), 0);
	};
	BX.CrmTimelineSmsEditor.prototype.setMessageLengthCounter = function()
	{
		var length = this._input.value.length;
		this._messageLengthCounterNode.textContent = length;

		var classFn = length >= this._messageLengthMax ? 'addClass' : 'removeClass';
		BX[classFn](this._messageLengthCounterNode, 'crm-entity-stream-content-sms-symbol-counter-number-overhead');

		classFn = length <= 0 ? 'addClass' : 'removeClass';
		BX[classFn](this._saveButton, 'ui-btn-disabled');
	};
	BX.CrmTimelineSmsEditor.prototype.save = function()
	{
		var text = this._input.value;
		if(text === "")
		{
			return;
		}

		if (!this._communications.length)
		{
			alert(BX.message('CRM_TIMELINE_SMS_ERROR_NO_COMMUNICATIONS'));
			return;
		}

		if(this._isRequestRunning || this._isLocked)
		{
			return;
		}

		this._isRequestRunning = this._isLocked = true;
		BX.ajax(
			{
				url: BX.util.add_url_param(this._serviceUrl, {
					"action": "save_sms_message",
					"sender": this._senderId
				}),
				method: "POST",
				dataType: "json",
				data:
					{
						'site': BX.message('SITE_ID'),
						'sessid': BX.bitrix_sessid(),
						'source': this._source,
						"ACTION": "SAVE_SMS_MESSAGE",
						"SENDER_ID": this._senderId,
						"MESSAGE_FROM": this._from,
						"MESSAGE_TO": this._to,
						"MESSAGE_BODY": text,
						"OWNER_TYPE_ID": this._ownerTypeId,
						"OWNER_ID": this._ownerId,
						"TO_ENTITY_TYPE_ID": this._commEntityTypeId,
						"TO_ENTITY_ID": this._commEntityId,
						"PAYMENT_ID": this._paymentId,
						"SHIPMENT_ID": this._shipmentId,
					},
				onsuccess: BX.delegate(this.onSaveSuccess, this),
				onfailure: BX.delegate(this.onSaveFailure, this)
			}
		);
	};
	BX.CrmTimelineSmsEditor.prototype.cancel = function()
	{
		this._input.value = "";
		this.setMessageLengthCounter();
		this._input.style.minHeight = "";
		this.release();
	};
	BX.CrmTimelineSmsEditor.prototype.onSaveSuccess = function(data)
	{
		this._isRequestRunning = this._isLocked = false;

		var error = BX.prop.getString(data, "ERROR", "");
		if(error !== "")
		{
			alert(error);
			return;
		}

		this._input.value = "";
		this.setMessageLengthCounter();
		this._input.style.minHeight = "";
		this._manager.processEditingCompletion(this);
		this.release();
	};
	BX.CrmTimelineSmsEditor.prototype.onSaveFailure = function()
	{
		this._isRequestRunning = this._isLocked = false;
	};
	BX.CrmTimelineSmsEditor.prototype.initSalescenterApplication = function()
	{
		BX.bind(this._salescenterStarter, 'click', this.startSalescenterApplication.bind(this));
	};
	BX.CrmTimelineSmsEditor.prototype.startSalescenterApplication = function()
	{
		BX.loadExt('salescenter.manager').then(function()
		{
			BX.Salescenter.Manager.openApplication({
				disableSendButton: this._canSendMessage ? '' : 'y',
				context: 'sms',
				ownerTypeId: this._ownerTypeId,
				ownerId: this._ownerId
			}).then(function(result)
			{
				if(result && result.get('action'))
				{
					if(result.get('action') === 'sendPage' && result.get('page') && result.get('page').url)
					{
						this._input.focus();
						this._input.value = this._input.value + result.get('page').name + ' ' + result.get('page').url;
						this.setMessageLengthCounter();
					}
					else if (result.get('action') === 'sendPayment' && result.get('order'))
					{
						this._input.focus();
						this._input.value = this._input.value + result.get('order').title;
						this.setMessageLengthCounter();
						this._source = 'order';
						this._paymentId = result.get('order').paymentId;
						this._shipmentId = result.get('order').shipmentId;
					}
				}
			}.bind(this));
		}.bind(this));
	};
	BX.CrmTimelineSmsEditor.prototype.initDocumentSelector = function()
	{
		BX.bind(this._documentSelectorButton, 'click', this.onDocumentSelectorClick.bind(this));
	};

	BX.CrmTimelineSmsEditor.prototype.onDocumentSelectorClick = function()
	{
		if(!this._documentSelector)
		{
			BX.loadExt('documentgenerator.selector').then(function()
			{
				this._documentSelector = new BX.DocumentGenerator.Selector.Menu({
					node: this._documentSelectorButton,
					moduleId: 'crm',
					provider: this._documentsProvider,
					value: this._documentsValue,
					analyticsLabelPrefix: 'crmTimelineSmsEditor'
				});
				this.selectPublicUrl();
			}.bind(this));
		}
		else
		{
			this.selectPublicUrl();
		}
	};

	BX.CrmTimelineSmsEditor.prototype.selectPublicUrl = function()
	{
		if(!this._documentSelector)
		{
			return;
		}
		this._documentSelector.show().then(function(object)
		{
			if(object instanceof BX.DocumentGenerator.Selector.Template)
			{
				this._documentSelector.createDocument(object).then(function(document)
				{
					this.pasteDocumentUrl(document);
				}.bind(this)).catch(function(error)
				{
					console.error(error);
				}.bind(this));
			}
			else if(object instanceof BX.DocumentGenerator.Selector.Document)
			{
				this.pasteDocumentUrl(object);
			}
		}.bind(this)).catch(function(error)
		{
			console.error(error);
		}.bind(this));
	};

	BX.CrmTimelineSmsEditor.prototype.pasteDocumentUrl = function(document)
	{
		this._documentSelector.getDocumentPublicUrl(document).then(function(publicUrl)
		{
			this._input.focus();
			this._input.value = this._input.value + ' ' + document.getTitle() + ' ' + publicUrl;
			this.setMessageLengthCounter();
			this._source = 'document';
		}.bind(this)).catch(function(error)
		{
			console.error(error);
		}.bind(this));
	};

	BX.CrmTimelineSmsEditor.prototype.initFileSelector = function()
	{
		BX.bind(this._fileSelectorButton, 'click', this.onFileSelectorClick.bind(this));
	};

	BX.CrmTimelineSmsEditor.prototype.closeFileSelector = function()
	{
		BX.PopupMenu.destroy('sms-file-selector');
	};

	BX.CrmTimelineSmsEditor.prototype.onFileSelectorClick = function()
	{
		BX.PopupMenu.show('sms-file-selector', this._fileSelectorButton, [
			{
				text: BX.message('CRM_TIMELINE_SMS_UPLOAD_FILE'),
				onclick: this.uploadFile.bind(this),
				className: this._isFilesExternalLinkEnabled ? '' : 'crm-entity-stream-content-sms-menu-item-with-lock'
			},
			{
				text: BX.message('CRM_TIMELINE_SMS_FIND_FILE'),
				onclick: this.findFile.bind(this),
				className: this._isFilesExternalLinkEnabled ? '' : 'crm-entity-stream-content-sms-menu-item-with-lock'
			}
		])
	};

	BX.CrmTimelineSmsEditor.prototype.getFileUploadInput = function()
	{
		return document.getElementById(this._fileUploadLabel.getAttribute('for'));
	};

	BX.CrmTimelineSmsEditor.prototype.uploadFile = function()
	{
		this.closeFileSelector();
		if(this._isFilesExternalLinkEnabled)
		{
			this.initDiskUF();
			BX.fireEvent(this.getFileUploadInput(), 'click');
		}
		else
		{
			this.showFilesExternalLinkFeaturePopup();
		}
	};

	BX.CrmTimelineSmsEditor.prototype.findFile = function()
	{
		this.closeFileSelector();
		if(this._isFilesExternalLinkEnabled)
		{
			this.initDiskUF();
			BX.fireEvent(this._fileSelectorBitrix, 'click');
		}
		else
		{
			this.showFilesExternalLinkFeaturePopup();
		}
	};

	BX.CrmTimelineSmsEditor.prototype.getLoader = function()
	{
		if(!this.loader)
		{
			this.loader = new BX.Loader(
				{
					size: 50
				});
		}

		return this.loader;
	};

	BX.CrmTimelineSmsEditor.prototype.showLoader = function(node)
	{
		if(node && !this.getLoader().isShown())
		{
			this.getLoader().show(node);
		}
	};

	BX.CrmTimelineSmsEditor.prototype.hideLoader = function()
	{
		if(this.getLoader().isShown())
		{
			this.getLoader().hide();
		}
	};

	BX.CrmTimelineSmsEditor.prototype.initDiskUF = function()
	{
		if(this.isDiskFileUploaderInited || !this._isFilesEnabled)
		{
			return;
		}
		this.isDiskFileUploaderInited = true;
		BX.addCustomEvent(this._fileUploadZone, 'OnFileUploadSuccess', this.OnFileUploadSuccess.bind(this));
		BX.addCustomEvent(this._fileUploadZone, 'DiskDLoadFormControllerInit', function(uf)
		{
			uf._onUploadProgress = function()
			{
				this.showLoader(this._fileSelectorButton.parentNode.parentNode);
			}.bind(this);
		}.bind(this));

		BX.Disk.UF.add({
			UID: this._fileUploadZone.getAttribute('data-node-id'),
			controlName: this._fileUploadLabel.getAttribute('for'),
			hideSelectDialog: false,
			urlSelect: this._diskUrls.urlSelect,
			urlRenameFile: this._diskUrls.urlRenameFile,
			urlDeleteFile: this._diskUrls.urlDeleteFile,
			urlUpload: this._diskUrls.urlUpload
		});

		BX.onCustomEvent(
			this._fileUploadZone,
			'DiskLoadFormController',
			['show']
		);
	};

	BX.CrmTimelineSmsEditor.prototype.OnFileUploadSuccess = function(fileResult, uf, file, uploaderFile)
	{
		this.hideLoader();
		var diskFileId = parseInt(fileResult.element_id.replace('n', ''));
		var fileName = fileResult.element_name;
		this.pasteFileUrl(diskFileId, fileName);
	};

	BX.CrmTimelineSmsEditor.prototype.pasteFileUrl = function(diskFileId, fileName)
	{
		this.showLoader(this._fileSelectorButton.parentNode.parentNode);
		BX.ajax.runAction('disk.file.generateExternalLink', {
			analyticsLabel: 'crmTimelineSmsEditorGetFilePublicUrl',
			data: {
				fileId: diskFileId
			}
		}).then(function(response)
		{
			this.hideLoader();
			if(response.data.externalLink && response.data.externalLink.link)
			{
				this._input.focus();
				this._input.value = this._input.value + ' ' + fileName + ' ' + response.data.externalLink.link;
				this.setMessageLengthCounter();
				this._source = 'file';
			}
		}.bind(this)).catch(function(response)
		{
			console.error(response.errors.pop().message);
		});
	};

	BX.CrmTimelineSmsEditor.prototype.getFeaturePopup = function(content)
	{
		if(this.featurePopup != null)
		{
			return this.featurePopup;
		}
		this.featurePopup = new BX.PopupWindow('bx-popup-crm-sms-editor-feature-popup', null, {
			zIndex: 200,
			autoHide: true,
			closeByEsc: true,
			closeIcon: true,
			overlay : true,
			events : {
				onPopupDestroy : function()
				{
					this.featurePopup = null;
				}.bind(this)
			},
			content : content,
			contentColor: 'white'
		});

		return this.featurePopup;
	};

	BX.CrmTimelineSmsEditor.prototype.showFilesExternalLinkFeaturePopup = function()
	{
		this.getFeaturePopup(this._fileExternalLinkDisabledContent).show();
	};

	BX.CrmTimelineSmsEditor.items = {};
	BX.CrmTimelineSmsEditor.create = function(id, settings)
	{
		var self = new BX.CrmTimelineSmsEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}


if(typeof BX.CrmTimelineRestEditor === "undefined")
{
	BX.CrmTimelineRestEditor = function()
	{
		BX.CrmTimelineRestEditor.superclass.constructor.apply(this);

		this._interfaceInitialized = false;
	};
	BX.extend(BX.CrmTimelineRestEditor, BX.CrmTimelineBaseEditor);

	BX.CrmTimelineRestEditor.prototype.action = function(action)
	{
		if(!this._interfaceInitialized)
		{
			this._interfaceInitialized = true;
			this.initializeInterface();
		}

		if(action === 'activity_rest_applist')
		{
			BX.rest.Marketplace.open({
				PLACEMENT: this.getSetting("placement", '')
			});

			top.BX.addCustomEvent(top, 'Rest:AppLayout:ApplicationInstall', BX.proxy(this.fireUpdateEvent, this));
		}
		else
		{
			var appId = action.replace('activity_rest_', '');
			var appData = appId.split('_');

			BX.rest.AppLayout.openApplication(
				appData[0],
				{
					ID: this._ownerId
				},
				{
					PLACEMENT: this.getSetting("placement", ''),
					PLACEMENT_ID: appData[1]
				}
			);
		}
	};

	BX.CrmTimelineRestEditor.prototype.initializeInterface = function()
	{
		if(!!top.BX.rest && !!top.BX.rest.AppLayout)
		{
			var entityTypeId = this._manager._ownerTypeId, entityId = this._manager._ownerId;

			var PlacementInterface = top.BX.rest.AppLayout.initializePlacement(this.getSetting("placement", ''));

			PlacementInterface.prototype.reloadData = function(params, cb)
			{
				BX.Crm.EntityEvent.fireUpdate(entityTypeId, entityId, '');
				cb();
			};
		}
	};

	BX.CrmTimelineRestEditor.prototype.fireUpdateEvent = function()
	{
		var entityTypeId = this._manager._ownerTypeId, entityId = this._manager._ownerId;
		setTimeout(function(){
			console.log('fireUpdate', entityId, entityTypeId);
			BX.Crm.EntityEvent.fire(BX.Crm.EntityEvent.names.invalidate, entityTypeId, entityId, '');
		}, 3000);
	};

	BX.CrmTimelineRestEditor.items = {};
	BX.CrmTimelineRestEditor.create = function(id, settings)
	{
		var self = new BX.CrmTimelineRestEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}
//endregion

if(typeof(BX.CrmTimelineWaitConfigurationDialog) === "undefined")
{
	BX.CrmTimelineWaitConfigurationDialog = function()
	{
		this._id = "";
		this._settings = {};
		this._type = BX.CrmTimelineWaitType.undefined;
		this._duration = 0;
		this._target = "";
		this._targetDates = null;
		this._container = null;
		this._durationMeasureNode = null;
		this._durationInput = null;
		this._targetDateNode = null;
		this._popup = null;
	};
	BX.CrmTimelineWaitConfigurationDialog.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._type = BX.prop.getInteger(this._settings, "type", BX.CrmTimelineWaitType.after);
			this._duration = BX.prop.getInteger(this._settings, "duration", 1);
			this._target = BX.prop.getString(this._settings, "target", "");
			this._targetDates = BX.prop.getArray(this._settings, "targetDates", []);

			this._menuId = this._id + "_target_date_sel";
		},
		getId: function()
		{
			return this._id;
		},
		getType: function()
		{
			return this._type;
		},
		setType: function(type)
		{
			this._type = type;
		},
		getDuration: function()
		{
			return this._duration;
		},
		setDuration: function(duration)
		{
			this._duration = duration;
		},
		getTarget: function()
		{
			return this._target;
		},
		setTarget: function(target)
		{
			this._target = target;
		},
		getMessage: function(name)
		{
			var m = BX.CrmTimelineWaitConfigurationDialog.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getDurationText: function(duration, enableNumber)
		{
			return BX.CrmTimelineWaitHelper.getDurationText(duration, enableNumber);
		},
		getTargetDateCaption: function(name)
		{
			for(var i = 0, length = this._targetDates.length; i < length; i++)
			{
				var info = this._targetDates[i];
				if(info["name"] === name)
				{
					return info["caption"];
				}
			}

			return "";
		},
		open: function()
		{
			this._popup = new BX.PopupWindow(
				this._id,
				this._configSelector,
				{
					autoHide: true,
					draggable: false,
					bindOptions: { forceBindPosition: false },
					closeByEsc: true,
					zIndex: 0,
					content: this.prepareDialogContent(),
					events:
					{
						onPopupShow: BX.delegate(this.onPopupShow, this),
						onPopupClose: BX.delegate(this.onPopupClose, this),
						onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
					},
					buttons:
					[
						new BX.PopupWindowButton(
							{
								text: this.getMessage("select"),
								className: "popup-window-button-accept" ,
								events: { click: BX.delegate(this.onSaveButtonClick, this) }
							}
						),
						new BX.PopupWindowButtonLink(
							{
								text : BX.message("JS_CORE_WINDOW_CANCEL"),
								events: { click: BX.delegate(this.onCancelButtonClick, this) }
							}
						)
					]
				}
			);
			this._popup.show();
		},
		close: function()
		{
			if(this._popup)
			{
				this._popup.close();
			}
		},
		prepareDialogContent: function()
		{
			var container = BX.create("div", { attrs: { className: "crm-wait-popup-select-block" } });
			var wrapper = BX.create("div", { attrs: { className: "crm-wait-popup-select-wrapper" } });
			container.appendChild(wrapper);

			this._durationInput = BX.create(
				"input",
				{
					attrs: { type: "text", className: "crm-wait-popup-settings-input", value: this._duration },
					events: { keyup: BX.delegate(this.onDurationChange, this) }
				}
			);

			this._durationMeasureNode = BX.create(
				"span",
				{ attrs: { className: "crm-wait-popup-settings-title" }, text: this.getDurationText(this._duration, false) }
			);

			if(this._type === BX.CrmTimelineWaitType.after)
			{
				wrapper.appendChild(
					BX.create("span", { attrs: { className: "crm-wait-popup-settings-title" }, text: this.getMessage("prefixTypeAfter") })
				);
				wrapper.appendChild(this._durationInput);
				wrapper.appendChild(this._durationMeasureNode);
			}
			else
			{
				wrapper.appendChild(
					BX.create("span", { attrs: { className: "crm-wait-popup-settings-title" }, text: this.getMessage("prefixTypeBefore") })
				);
				wrapper.appendChild(this._durationInput);
				wrapper.appendChild(this._durationMeasureNode);
				wrapper.appendChild(
					BX.create("span", { attrs: { className: "crm-wait-popup-settings-title" }, text: " " + this.getMessage("targetPrefixTypeBefore") })
				);

				this._targetDateNode = BX.create(
					"span",
					{
						attrs: { className: "crm-automation-popup-settings-link" },
						text: this.getTargetDateCaption(this._target),
						events: { click: BX.delegate(this.toggleTargetMenu, this) }
					}
				);
				wrapper.appendChild(this._targetDateNode);
			}
			return container;
		},
		onDurationChange: function()
		{
			var duration = parseInt(this._durationInput.value);
			if(isNaN(duration) || duration <= 0)
			{
				duration = 1;
			}
			this._duration = duration;
			this._durationMeasureNode.innerHTML = BX.util.htmlspecialchars(this.getDurationText(duration, false));

		},
		toggleTargetMenu: function()
		{
			if(this.isTargetMenuOpened())
			{
				this.closeTargetMenu();
			}
			else
			{
				this.openTargetMenu();
			}
		},
		isTargetMenuOpened: function()
		{
			return !!BX.PopupMenu.getMenuById(this._menuId);
		},
		openTargetMenu: function()
		{
			var menuItems = [];
			for(var i = 0, length = this._targetDates.length; i < length; i++)
			{
				var info = this._targetDates[i];

				menuItems.push(
					{
						text: info["caption"],
						title: info["caption"],
						value: info["name"],
						onclick: BX.delegate(this.onTargetSelect, this)
					}
				);
			}

			BX.PopupMenu.show(
				this._menuId,
				this._targetDateNode,
				menuItems,
				{
					zIndex: 200,
					autoHide: true,
					offsetLeft: BX.pos(this._targetDateNode)["width"] / 2,
					angle: { position: 'top', offset: 0 }
				}
			);
		},
		closeTargetMenu: function()
		{
			BX.PopupMenu.destroy(this._menuId);
		},
		onPopupShow: function(e, item)
		{
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._popup.destroy();
			}

			this.closeTargetMenu();
		},
		onPopupDestroy: function()
		{
			if(this._popup)
			{
				this._popup = null;
			}
		},
		onSaveButtonClick: function(e)
		{
			var callback =  BX.prop.getFunction(this._settings, "onSave", null);
			if(!callback)
			{
				return;
			}

			var params = { type: this._type };
			params["duration"] = this._duration;
			params["target"] = this._type === BX.CrmTimelineWaitType.before ? this._target : "";
			callback(this, params);
		},
		onCancelButtonClick: function(e)
		{
			var callback =  BX.prop.getFunction(this._settings, "onCancel", null);
			if(callback)
			{
				callback(this);
			}
		},
		onTargetSelect: function(e, item)
		{
			var fieldName = BX.prop.getString(item, "value", "");
			if(fieldName !== "")
			{
				this._target = fieldName;
				this._targetDateNode.innerHTML = BX.util.htmlspecialchars(this.getTargetDateCaption(fieldName));
			}

			this.closeTargetMenu();
			e.preventDefault ? e.preventDefault() : (e.returnValue = false);
		}
	};
	if(typeof(BX.CrmTimelineWaitConfigurationDialog.messages) === "undefined")
	{
		BX.CrmTimelineWaitConfigurationDialog.messages = {};
	}
	BX.CrmTimelineWaitConfigurationDialog.create = function(id, settings)
	{
		var self = new BX.CrmTimelineWaitConfigurationDialog();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmTimelineType) === "undefined")
{
	BX.CrmTimelineType =
	{
		undefined: 0,
		activity: 1,
		creation: 2,
		modification: 3,
		link: 4,
		unlink: 5,
		mark: 6,
		comment: 7,
		wait: 8,
		bizproc: 9,
		conversion: 10,
		sender: 11,
		document: 12,
		restoration: 13,
		order: 14,
		orderCheck: 15,
		scoring: 16,
		externalNotification: 17,
		finalSummary: 18,
		delivery: 19,
		finalSummaryDocuments: 20,
	};
}
if(typeof(BX.CrmTimelineMarkType) === "undefined")
{
	BX.CrmTimelineMarkType =
	{
		undefined: 0,
		waiting: 1,
		success: 2,
		renew: 3,
		ignored: 4,
		failed: 5
	};
}
if(typeof(BX.CrmTimelineDeliveryType) === "undefined")
{
	BX.CrmTimelineDeliveryType =
		{
			undefined: 0,
			taxiEstimationRequest: 1,
			taxiCallRequest: 2,
			taxiCancelledByManager: 3,
			taxiCancelledByDriver: 4,
			taxiPerformerNotFound: 5,
			taxiSmsProviderIssue: 6,
			taxiReturnedFinish: 7,
			deliveryMessage: 101,
			deliveryCalculation: 102,
		};
}
if(typeof(BX.CrmTimelineOrderType) === "undefined")
{
	BX.CrmTimelineOrderType = {
		encourageBuyProducts: 100,
	};
}

//region Base Actions
if(typeof(BX.CrmTimelineAction) === "undefined")
{
	BX.CrmTimelineAction = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
	};
	BX.CrmTimelineAction.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._container = this.getSetting("container");
			if(!BX.type.isElementNode(this._container))
			{
				throw "BX.CrmTimelineAction: Could not find container.";
			}

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		layout: function()
		{
			this.doLayout();
		},
		doLayout: function()
		{
		}
	};
}

if(typeof(BX.CrmTimelineActivityAction) === "undefined")
{
	BX.CrmTimelineActivityAction = function()
	{
		BX.CrmTimelineActivityAction.superclass.constructor.apply(this);

		this._activityEditor = null;
		this._entityData = null;
		this._item = null;
		this._isEnabled = true;
	};
	BX.extend(BX.CrmTimelineActivityAction, BX.CrmTimelineAction);
	BX.CrmTimelineActivityAction.prototype.doInitialize = function()
	{
		this._entityData = this.getSetting("entityData");
		if(!BX.type.isPlainObject(this._entityData))
		{
			throw "BX.CrmTimelineActivityAction. A required parameter 'entityData' is missing.";
		}

		this._activityEditor = this.getSetting("activityEditor");
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmTimelineActivityAction. A required parameter 'activityEditor' is missing.";
		}

		this._item = this.getSetting("item");
		this._isEnabled = this.getSetting("enabled", true);
	};
	BX.CrmTimelineActivityAction.prototype.getActivityId = function()
	{
		return BX.prop.getInteger(this._entityData, "ID", 0);
	};
	BX.CrmTimelineActivityAction.prototype.loadActivityCommunications = function(callback)
	{
		this._activityEditor.getActivityCommunications(
			this.getActivityId(),
			function(communications)
			{
				if(BX.type.isFunction(callback))
				{
					callback(communications);
				}
			},
			true
		);
	};
	BX.CrmTimelineActivityAction.prototype.getItemData = function()
	{
		return this._item ?  this._item.getData() : null;
	}
}

if(typeof(BX.CrmTimelineEmailAction) === "undefined")
{
	BX.CrmTimelineEmailAction = function()
	{
		BX.CrmTimelineEmailAction.superclass.constructor.apply(this);
		this._clickHandler = BX.delegate(this.onClick, this);
		this._saveHandler = BX.delegate(this.onSave, this);
	};
	BX.extend(BX.CrmTimelineEmailAction, BX.CrmTimelineActivityAction);
	BX.CrmTimelineEmailAction.prototype.onClick = function(e)
	{
		var settings =
			{
				"ownerType": BX.CrmEntityType.resolveName(BX.prop.getInteger(this._entityData, "OWNER_TYPE_ID", 0)),
				"ownerID": BX.prop.getInteger(this._entityData, "OWNER_ID", 0),
				"ownerUrl": BX.prop.getString(this._entityData, "OWNER_URL", ""),
				"ownerTitle": BX.prop.getString(this._entityData, "OWNER_TITLE", ""),
				"originalMessageID": BX.prop.getInteger(this._entityData, "ID", 0),
				"messageType": "RE"
			};

		if (BX.CrmActivityProvider && top.BX.Bitrix24 && top.BX.Bitrix24.Slider)
		{
			var activity = this._activityEditor.addEmail(settings);
			activity.addOnSave(this._saveHandler);
		}
		else
		{
			this.loadActivityCommunications(
				BX.delegate(
					function(communications)
					{
						settings['communications'] = BX.type.isArray(communications) ? communications : [];
						settings['communicationsLoaded'] = true;

						BX.CrmActivityEmail.prepareReply(settings);

						var activity = this._activityEditor.addEmail(settings);
						activity.addOnSave(this._saveHandler);
					},
					this
				)
			);
		}
		return BX.PreventDefault(e);
	};
	BX.CrmTimelineEmailAction.prototype.onSave = function(activity, data)
	{
		if(BX.type.isFunction(this._item.onActivityCreate))
		{
			this._item.onActivityCreate(activity, data);
		}
	};
}

if(typeof(BX.CrmTimelineCallAction) === "undefined")
{
	BX.CrmTimelineCallAction = function()
	{
		BX.CrmTimelineCallAction.superclass.constructor.apply(this);
		this._clickHandler = BX.delegate(this.onClick, this);
		this._menu = null;
		this._isMenuShown = false;
		this._menuItems = null;
	};
	BX.extend(BX.CrmTimelineCallAction, BX.CrmTimelineActivityAction);
	BX.CrmTimelineCallAction.prototype.getButton = function()
	{
		return null;
	};
	BX.CrmTimelineCallAction.prototype.onClick = function(e)
	{
		if(typeof(window.top['BXIM']) === 'undefined')
		{
			window.alert(this.getMessage("telephonyNotSupported"));
			return;
		}

		var phone = "";
		var itemData = this.getItemData();
		var phones = BX.prop.getArray(itemData, "PHONE", []);

		if(phones.length === 1)
		{
			this.addCall(phones[0]['VALUE']);
		}
		else if(phones.length > 1)
		{
			this.showMenu();
		}
		else
		{
			var communication = BX.prop.getObject(this._entityData, "COMMUNICATION", null);
			if(communication)
			{
				if(BX.prop.getString(communication, "TYPE") === "PHONE")
				{
					phone = BX.prop.getString(communication, "VALUE");
					if(phone)
					{
						this.addCall(phone);
					}
				}
			}
		}

		return BX.PreventDefault(e);
	};
	BX.CrmTimelineCallAction.prototype.showMenu = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		this.prepareMenuItems();

		if(!this._menuItems || this._menuItems.length === 0)
		{
			return;
		}


		this._menu = new BX.PopupMenuWindow(
			this._id,
			this._container,
			this._menuItems,
			{
				offsetTop: 0,
				offsetLeft: 16,
				events:
					{
						onPopupShow: BX.delegate(this.onMenuShow, this),
						onPopupClose: BX.delegate(this.onMenuClose, this),
						onPopupDestroy: BX.delegate(this.onMenuDestroy, this)
					}
			}
		);

		this._menu.popupWindow.show();
	};
	BX.CrmTimelineCallAction.prototype.closeMenu = function()
	{
		if(!this._isMenuShown)
		{
			return;
		}

		if(this._menu)
		{
			this._menu.close();
		}
	};
	BX.CrmTimelineCallAction.prototype.prepareMenuItems = function()
	{
		if(this._menuItems)
		{
			return;
		}

		var itemData = this.getItemData();
		var phones = BX.prop.getArray(itemData, "PHONE", []);
		var handler = BX.delegate(this.onMenuItemClick, this);
		this._menuItems = [];

		if(phones.length === 0)
		{
			return;
		}

		for(var i = 0, l = phones.length; i < l; i++)
		{
			var value = BX.prop.getString(phones[i], "VALUE");
			var formattedValue = BX.prop.getString(phones[i], "VALUE_FORMATTED");
			var complexName = BX.prop.getString(phones[i], "COMPLEX_NAME");
			var itemText = (complexName ? complexName + ': ' : '') + (formattedValue ? formattedValue : value);

			if(value !== "")
			{
				this._menuItems.push({ id: value, text:  itemText, onclick: handler});
			}
		}
	};
	BX.CrmTimelineCallAction.prototype.onMenuItemClick = function(e, item)
	{
		this.closeMenu();
		this.addCall(item.id);
	};
	BX.CrmTimelineCallAction.prototype.onMenuShow = function()
	{
		this._isMenuShown = true;
	};
	BX.CrmTimelineCallAction.prototype.onMenuClose = function()
	{
		this._isMenuShown = false;
		this._menu.popupWindow.destroy();
	};
	BX.CrmTimelineCallAction.prototype.onMenuDestroy = function()
	{
		this._menu = null;
	};
	BX.CrmTimelineCallAction.prototype.addCall = function(phone)
	{
		var communication = BX.prop.getObject(this._entityData, "COMMUNICATION", null);
		var entityTypeId = parseInt(BX.prop.getString(communication, "ENTITY_TYPE_ID", "0"));
		if(isNaN(entityTypeId))
		{
			entityTypeId = 0;
		}

		var entityId = parseInt(BX.prop.getString(communication, "ENTITY_ID", "0"));
		if(isNaN(entityId))
		{
			entityId = 0;
		}

		var ownerTypeId = 0;
		var ownerId = 0;

		var ownerInfo = BX.prop.getObject(this._settings, "ownerInfo");
		if(ownerInfo)
		{
			ownerTypeId = BX.prop.getInteger(ownerInfo, "ENTITY_TYPE_ID", 0);
			ownerId = BX.prop.getInteger(ownerInfo, "ENTITY_ID", 0);
		}

		if(ownerTypeId <= 0 || ownerId <= 0)
		{
			ownerTypeId = BX.prop.getInteger(this._entityData, "OWNER_TYPE_ID", 0);
			ownerId = BX.prop.getInteger(this._entityData, "OWNER_ID", "0");
		}

		if(ownerTypeId <= 0 || ownerId <= 0)
		{
			ownerTypeId = entityTypeId;
			ownerId = entityId;
		}

		var activityId = parseInt(BX.prop.getString(this._entityData, "ID", "0"));
		if(isNaN(activityId))
		{
			activityId = 0;
		}

		var params =
			{
				"ENTITY_TYPE_NAME": BX.CrmEntityType.resolveName(entityTypeId),
				"ENTITY_ID": entityId,
				"AUTO_FOLD": true
			};
		if(ownerTypeId !== entityTypeId || ownerId !== entityId)
		{
			params["BINDINGS"] = [ { "OWNER_TYPE_NAME": BX.CrmEntityType.resolveName(ownerTypeId), "OWNER_ID": ownerId } ];
		}

		if(activityId > 0)
		{
			params["SRC_ACTIVITY_ID"] = activityId;
		}

		window.top['BXIM'].phoneTo(phone, params);

	};
	BX.CrmTimelineCallAction.prototype.getMessage = function(name)
	{
		var m = BX.CrmTimelineCallAction.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmTimelineCallAction.messages) === "undefined")
	{
		BX.CrmTimelineCallAction.messages = {};
	}
}

if(typeof(BX.CrmTimelineOpenLineAction) === "undefined")
{
	BX.CrmTimelineOpenLineAction = function()
	{
		BX.CrmTimelineOpenLineAction.superclass.constructor.apply(this);
		this._clickHandler = BX.delegate(this.onClick, this);
		this._button = null;
	};
	BX.extend(BX.CrmTimelineOpenLineAction, BX.CrmTimelineActivityAction);
	BX.CrmTimelineOpenLineAction.prototype.getButton = function()
	{
		return this._button;
	};
	BX.CrmTimelineOpenLineAction.prototype.onClick = function()
	{
		if(typeof(window.top['BXIM']) === 'undefined')
		{
			window.alert(this.getMessage("openLineNotSupported"));
			return;
		}

		var slug = "";
		var communication = BX.prop.getObject(this._entityData, "COMMUNICATION", null);
		if(communication)
		{
			if(BX.prop.getString(communication, "TYPE") === "IM")
			{
				slug = BX.prop.getString(communication, "VALUE");
			}
		}

		if(slug !== "")
		{
			window.top['BXIM'].openMessengerSlider(slug, {RECENT: 'N', MENU: 'N'});
		}
	};
	BX.CrmTimelineOpenLineAction.prototype.doLayout = function()
	{
		this._button = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-action-reply-btn" },
				events: { "click": this._clickHandler }
			}
		);
		this._container.appendChild(this._button);
	};
	BX.CrmTimelineOpenLineAction.prototype.getMessage = function(name)
	{
		var m = BX.CrmTimelineOpenLineAction.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmTimelineOpenLineAction.messages) === "undefined")
	{
		BX.CrmTimelineOpenLineAction.messages = {};
	}
}
//endregion

//region History Actions
if(typeof(BX.CrmHistoryEmailAction) === "undefined")
{
	BX.CrmHistoryEmailAction = function()
	{
		BX.CrmHistoryEmailAction.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryEmailAction, BX.CrmTimelineEmailAction);
	BX.CrmHistoryEmailAction.prototype.doLayout = function()
	{
		this._container.appendChild(
			BX.create("A",
			{
				attrs: { className: "crm-entity-stream-content-action-reply-btn" },
				events: { "click": this._clickHandler }
			})
		);
	};
	BX.CrmHistoryEmailAction.create = function(id, settings)
	{
		var self = new BX.CrmHistoryEmailAction();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmHistoryCallAction) === "undefined")
{
	BX.CrmHistoryCallAction = function()
	{
		BX.CrmHistoryCallAction.superclass.constructor.apply(this);
		this._button = null;
	};

	BX.extend(BX.CrmHistoryCallAction, BX.CrmTimelineCallAction);

	BX.CrmHistoryCallAction.prototype.getButton = function()
	{
		return this._button;
	};

	BX.CrmHistoryCallAction.prototype.doLayout = function()
	{
		this._button = BX.create("A",
			{
				attrs: { className: "crm-entity-stream-content-action-reply-btn" },
				events: { "click": this._clickHandler }
			}
		);
		this._container.appendChild(this._button);
	};

	BX.CrmHistoryCallAction.create = function(id, settings)
	{
		var self = new BX.CrmHistoryCallAction();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmHistoryOpenLineAction) === "undefined")
{
	BX.CrmHistoryOpenLineAction = function()
	{
		BX.CrmHistoryOpenLineAction.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryOpenLineAction, BX.CrmTimelineOpenLineAction);
	BX.CrmHistoryOpenLineAction.create = function(id, settings)
	{
		var self = new BX.CrmHistoryOpenLineAction();
		self.initialize(id, settings);
		return self;
	}
}
//endregion

//region Schedule Actions
if(typeof(BX.CrmScheduleEmailAction) === "undefined")
{
	BX.CrmScheduleEmailAction = function()
	{
		BX.CrmScheduleEmailAction.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleEmailAction, BX.CrmTimelineEmailAction);
	BX.CrmScheduleEmailAction.prototype.doLayout = function()
	{
		this._container.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-action-reply-btn" },
					events: { "click": this._clickHandler }
				}
			)
		);
	};
	BX.CrmScheduleEmailAction.create = function(id, settings)
	{
		var self = new BX.CrmScheduleEmailAction();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmSchedulePostponeController) === "undefined")
{
	BX.CrmSchedulePostponeController = function()
	{
		this._item = null;
	};
	BX.CrmSchedulePostponeController.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._item = BX.prop.get(this._settings, "item", null);
		},
		getTitle: function()
		{
			return this.getMessage("title");
		},
		getCommandList: function()
		{
			return(
				[
					{ name: "postpone_hour_1", title: this.getMessage("forOneHour") },
					{ name: "postpone_hour_2", title: this.getMessage("forTwoHours") },
					{ name: "postpone_hour_3", title: this.getMessage("forThreeHours") },
					{ name: "postpone_day_1", title: this.getMessage("forOneDay") },
					{ name: "postpone_day_2", title: this.getMessage("forTwoDays") },
					{ name: "postpone_day_3", title: this.getMessage("forThreeDays") }
				]
			);
		},
		processCommand: function(command)
		{
			if(command.indexOf("postpone") !== 0)
			{
				return false;
			}

			var offset = 0;
			if(command === "postpone_hour_1")
			{
				offset = 3600;
			}
			else if(command === "postpone_hour_2")
			{
				offset = 7200;
			}
			else if(command === "postpone_hour_3")
			{
				offset = 10800;
			}
			else if(command === "postpone_day_1")
			{
				offset = 86400;
			}
			else if(command === "postpone_day_2")
			{
				offset = 172800;
			}
			else if(command === "postpone_day_3")
			{
				offset = 259200;
			}

			if(offset > 0 && this._item)
			{
				this._item.postpone(offset);
			}

			return true;
		},
		getMessage: function(name)
		{
			var m = BX.CrmSchedulePostponeController.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		}
	};

	if(typeof(BX.CrmSchedulePostponeController.messages) === "undefined")
	{
		BX.CrmSchedulePostponeController.messages = {};
	}
	BX.CrmSchedulePostponeController.create = function(id, settings)
	{
		var self = new BX.CrmSchedulePostponeController();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmSchedulePostponeAction) === "undefined")
{
	BX.CrmSchedulePostponeAction = function()
	{
		BX.CrmSchedulePostponeAction.superclass.constructor.apply(this);
		this._button = null;
		this._clickHandler = BX.delegate(this.onClick, this);
		this._isMenuShown = false;

		this._menu = false;
	};
	BX.extend(BX.CrmSchedulePostponeAction, BX.CrmTimelineActivityAction);
	BX.CrmSchedulePostponeAction.prototype.doLayout = function()
	{
		this._button = BX.create("DIV",
			{
				attrs:
					{
						className: this._isEnabled
							? "crm-entity-stream-planned-action-aside"
							: "crm-entity-stream-planned-action-aside-disabled"
					},
				text: this.getMessage("postpone")
			}
		);

		if(this._isEnabled)
		{
			BX.bind(this._button, "click", this._clickHandler)
		}

		this._container.appendChild(this._button);
	};
	BX.CrmSchedulePostponeAction.prototype.openMenu = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		var handler = BX.delegate(this.onMenuItemClick, this);
		var menuItems =
			[
				{ id: "hour_1", text: this.getMessage("forOneHour"), onclick: handler },
				{ id: "hour_2", text: this.getMessage("forTwoHours"), onclick: handler },
				{ id: "hour_3", text: this.getMessage("forThreeHours"), onclick: handler },
				{ id: "day_1", text: this.getMessage("forOneDay"), onclick: handler },
				{ id: "day_2", text: this.getMessage("forTwoDays"), onclick: handler },
				{ id: "day_3", text: this.getMessage("forThreeDays"), onclick: handler }
			];

		BX.PopupMenu.show(
			this._id,
			this._button,
			menuItems,
			{
				offsetTop: 0,
				offsetLeft: 16,
				events:
				{
					onPopupShow: BX.delegate(this.onMenuShow, this),
					onPopupClose: BX.delegate(this.onMenuClose, this),
					onPopupDestroy: BX.delegate(this.onMenuDestroy, this)
				}
			}
		);

		this._menu = BX.PopupMenu.currentItem;
	};
	BX.CrmSchedulePostponeAction.prototype.closeMenu = function()
	{
		if(!this._isMenuShown)
		{
			return;
		}

		if(this._menu)
		{
			this._menu.close();
		}
	};
	BX.CrmSchedulePostponeAction.prototype.onClick = function()
	{
		if(!this._isEnabled)
		{
			return;
		}

		if(this._isMenuShown)
		{
			this.closeMenu();
		}
		else
		{
			this.openMenu();
		}
	};
	BX.CrmSchedulePostponeAction.prototype.onMenuItemClick = function(e, item)
	{
		this.closeMenu();

		var offset = 0;
		if(item.id === "hour_1")
		{
			offset = 3600;
		}
		else if(item.id === "hour_2")
		{
			offset = 7200;
		}
		else if(item.id === "hour_3")
		{
			offset = 10800;
		}
		else if(item.id === "day_1")
		{
			offset = 86400;
		}
		else if(item.id === "day_2")
		{
			offset = 172800;
		}
		else if(item.id === "day_3")
		{
			offset = 259200;
		}

		if(offset > 0 && this._item)
		{
			this._item.postpone(offset);
		}
	};
	BX.CrmSchedulePostponeAction.prototype.onMenuShow = function()
	{
		this._isMenuShown = true;
	};
	BX.CrmSchedulePostponeAction.prototype.onMenuClose = function()
	{
		if(this._menu && this._menu.popupWindow)
		{
			this._menu.popupWindow.destroy();
		}
	};
	BX.CrmSchedulePostponeAction.prototype.onMenuDestroy = function()
	{
		this._isMenuShown = false;
		this._menu = null;

		if(typeof(BX.PopupMenu.Data[this._id]) !== "undefined")
		{
			delete(BX.PopupMenu.Data[this._id]);
		}
	};
	BX.CrmSchedulePostponeAction.prototype.getMessage = function(name)
	{
		var m = BX.CrmSchedulePostponeAction.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	if(typeof(BX.CrmSchedulePostponeAction.messages) === "undefined")
	{
		BX.CrmSchedulePostponeAction.messages = {};
	}
	BX.CrmSchedulePostponeAction.create = function(id, settings)
	{
		var self = new BX.CrmSchedulePostponeAction();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmScheduleCallAction) === "undefined")
{
	BX.CrmScheduleCallAction = function()
	{
		BX.CrmScheduleCallAction.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleCallAction, BX.CrmTimelineCallAction);
	BX.CrmScheduleCallAction.prototype.doLayout = function()
	{
		this._container.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-action-reply-btn" },
					events: { "click": this._clickHandler }
				}
			)
		);
	};
	BX.CrmScheduleCallAction.create = function(id, settings)
	{
		var self = new BX.CrmScheduleCallAction();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof(BX.CrmScheduleOpenLineAction) === "undefined")
{
	BX.CrmScheduleOpenLineAction = function()
	{
		BX.CrmScheduleOpenLineAction.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleOpenLineAction, BX.CrmTimelineOpenLineAction);
	BX.CrmScheduleOpenLineAction.create = function(id, settings)
	{
		var self = new BX.CrmScheduleOpenLineAction();
		self.initialize(id, settings);
		return self;
	}
}
//endregion

//region Base Item
if(typeof(BX.CrmTimelineItem) === "undefined")
{
	BX.CrmTimelineItem = function()
	{
		this._id = "";
		this._settings = {};
		this._data = {};
		this._container = null;
		this._wrapper = null;

		this._typeCategoryId = null;
		this._associatedEntityData = null;
		this._associatedEntityTypeId = null;
		this._associatedEntityId = null;
		this._isContextMenuShown = false;
		this._contextMenuButton = null;

		this._activityEditor = null;
		this._actions = [];
		this._actionContainer = null;

		this._isTerminated = false;

		this._vueComponent = null;
		this._vueComponentMountedNode = null;
	};
	BX.CrmTimelineItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._container = this.getSetting("container");

			if(!BX.type.isPlainObject(settings['data']))
			{
				throw "BX.CrmTimelineItem. A required parameter 'data' is missing.";
			}
			this._data = settings['data'];

			this._activityEditor = this.getSetting("activityEditor");

			this._vueComponent = this.getSetting("vueComponent");

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data)
		{
			if(BX.type.isPlainObject(data))
			{
				this._data = data;
				this.clearCachedData();
			}
		},
		getAssociatedEntityData: function()
		{
			if(this._associatedEntityData === null)
			{
				this._associatedEntityData = BX.type.isPlainObject(this._data["ASSOCIATED_ENTITY"])
					? this._data["ASSOCIATED_ENTITY"] : {};
			}

			return this._associatedEntityData;
		},
		getAssociatedEntityTypeId: function()
		{
			if(this._associatedEntityTypeId === null)
			{
				this._associatedEntityTypeId = BX.prop.getInteger(this._data, "ASSOCIATED_ENTITY_TYPE_ID", 0)
			}
			return this._associatedEntityTypeId;
		},
		getAssociatedEntityId: function()
		{
			if(this._associatedEntityId === null)
			{
				this._associatedEntityId = BX.prop.getInteger(this._data, "ASSOCIATED_ENTITY_ID", 0)
			}
			return this._associatedEntityId;
		},
		setAssociatedEntityData: function(associatedEntityData)
		{
			if(!BX.type.isPlainObject(associatedEntityData))
			{
				associatedEntityData = {};
			}

			this._data["ASSOCIATED_ENTITY"] = associatedEntityData;
			this.clearCachedData();
		},
		hasPermissions: function()
		{
			var entityData = this.getAssociatedEntityData();
			return BX.type.isPlainObject(entityData["PERMISSIONS"]);
		},
		getPermissions: function()
		{
			return BX.prop.getObject(this.getAssociatedEntityData(), "PERMISSIONS", {});
		},
		setPermissions: function(permissions)
		{
			if(!BX.type.isPlainObject(this._data["ASSOCIATED_ENTITY"]))
			{
				this._data["ASSOCIATED_ENTITY"] = {};
			}
			this._data["ASSOCIATED_ENTITY"]["PERMISSIONS"] = permissions;
			this.clearCachedData();
		},
		getTextDataParam: function(name)
		{
			return BX.prop.getString(this._data, name, "");
		},
		getObjectDataParam: function(name)
		{
			return BX.prop.getObject(this._data, name, {});
		},
		getArrayDataParam: function(name)
		{
			return BX.prop.getArray(this._data, name, []);
		},
		getTypeId: function()
		{
			return BX.CrmTimelineType.undefined;
		},
		getTypeCategoryId: function()
		{
			if(this._typeCategoryId === null)
			{
				this._typeCategoryId = BX.prop.getInteger(this._data, "TYPE_CATEGORY_ID", 0);
			}
			return this._typeCategoryId;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = BX.type.isElementNode(container) ? container : null;
		},
		getWrapper: function()
		{
			return this._wrapper;
		},
		addWrapperClass: function(className, timeout)
		{
			if(!this._wrapper)
			{
				return;
			}

			BX.addClass(this._wrapper, className);

			if(BX.type.isNumber(timeout) && timeout >= 0)
			{
				window.setTimeout(
					BX.delegate(
						function(){ this.removeWrapperClass(className); },
						this
					),
					timeout
				);
			}
		},
		removeWrapperClass: function(className, timeout)
		{
			if(!this._wrapper)
			{
				return;
			}

			BX.removeClass(this._wrapper, className);

			if(BX.type.isNumber(timeout) && timeout >= 0)
			{
				window.setTimeout(
					BX.delegate(
						function(){ this.addWrapperClass(className); },
						this
					),
					timeout
				);
			}

		},
		layout: function(options)
		{
			if(!BX.type.isElementNode(this._container))
			{
				throw "BX.CrmTimelineItem. Container is not assigned.";
			}

			this.prepareLayout(options);
			//region Actions
			/**/
			this.prepareActions();
			var actionQty = this._actions.length;
			for(var i = 0; i < actionQty; i++)
			{
				this._actions[i].layout();
			}
			this.showActions(actionQty > 0);
			/**/
			//endregion
		},
		makeVueComponent: function(options, mode)
		{
			if (this._vueComponentMountedNode)
			{
				return this._vueComponentMountedNode;
			}

			if (!this._vueComponent)
			{
				return null;
			}

			var app = new this._vueComponent(
				{
					propsData: {
						self: this,
						langMessages: BX.CrmTimelineItem.messages,
						mode: mode
					}
				}
			);

			app.$mount();

			this._vueComponentMountedNode = app.$el;
			return this._vueComponentMountedNode;
		},
		prepareLayout: function(options)
		{
		},
		prepareActions: function()
		{
		},
		showActions: function(show)
		{
		},
		clearLayout: function()
		{
			this._wrapper = BX.remove(this._wrapper);
		},
		refreshLayout: function()
		{
			var anchor = this._wrapper.previousSibling;
			this._wrapper = BX.remove(this._wrapper);
			this.layout({ anchor: anchor });
		},
		clearCachedData: function()
		{
			this._typeCategoryId = null;
			this._associatedEntityData = null;
			this._associatedEntityTypeId = null;
			this._associatedEntityId = null;
		},
		isDone: function()
		{
			return false;
		},
		markAsDone: function(isDone)
		{
		},
		isTerminated: function()
		{
			return this._isTerminated;
		},
		markAsTerminated: function(terminated)
		{
			terminated = !!terminated;

			if(this._isTerminated === terminated)
			{
				return;
			}

			this._isTerminated = terminated;
			if(!this._wrapper)
			{
				return;
			}

			if(terminated)
			{
				BX.addClass(this._wrapper, "crm-entity-stream-section-last");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-stream-section-last");
			}
		},
		view: function()
		{
		},
		edit: function()
		{
		},
		fasten: function()
		{
		},
		unfasten: function()
		{
		},
		remove: function()
		{
		},
		cutOffText: function(text, length)
		{
			if(!BX.type.isNumber(length))
			{
				length = 0;
			}

			if(length <= 0 || text.length <= length)
			{
				return text;
			}

			var offset = length - 1;
			var whilespaceOffset = text.substring(offset).search(/\s/i);
			if(whilespaceOffset > 0)
			{
				offset += whilespaceOffset;
			}
			return text.substring(0, offset);
		},
		prepareMultilineCutOffElements: function(text, length, clickHandler)
		{
			if(!BX.type.isNumber(length))
			{
				length = 0;
			}

			if(length <= 0 || text.length <= length)
			{
				return [BX.util.htmlspecialchars(text).replace(/(?:\r\n|\r|\n)/g, '<br>')];
			}

			var offset = length - 1;
			var whilespaceOffset = text.substring(offset).search(/\s/i);
			if(whilespaceOffset > 0)
			{
				offset += whilespaceOffset;
			}
			return(
				[
					BX.util.htmlspecialchars(text.substring(0, offset)).replace(/(?:\r\n|\r|\n)/g, '<br>') + "&hellip;&nbsp;" ,
					BX.create("A",
						{
							attrs: { className: "crm-entity-stream-content-letter-more", href: "#" },
							events: { click: clickHandler },
							text: this.getMessage("details")
						}
					)
				]
			);
		},
		prepareCutOffElements: function(text, length, clickHandler)
		{
			if(!BX.type.isNumber(length))
			{
				length = 0;
			}

			if(length <= 0 || text.length <= length)
			{
				return [BX.util.htmlspecialchars(text)];
			}

			var offset = length - 1;
			var whilespaceOffset = text.substring(offset).search(/\s/i);
			if(whilespaceOffset > 0)
			{
				offset += whilespaceOffset;
			}
			return(
				[
					BX.util.htmlspecialchars(text.substring(0, offset)) + "&hellip;&nbsp;" ,
					BX.create("A",
						{
							attrs: { className: "crm-entity-stream-content-letter-more", href: "#" },
							events: { click: clickHandler },
							text: this.getMessage("details")
						}
					)
				]
			);
		},
		prepareAuthorLayout: function()
		{
			var authorInfo = this.getObjectDataParam("AUTHOR", null);
			if(!authorInfo)
			{
				return null;
			}

			var showUrl = BX.prop.getString(authorInfo, "SHOW_URL", "");
			if(showUrl === "")
			{
				return null;
			}

			var link = BX.create("A",
				{
					attrs:
						{
							className: "ui-icon ui-icon-common-user crm-entity-stream-content-detail-employee",
							href: showUrl,
							target: "_blank",
							title: BX.prop.getString(authorInfo, "FORMATTED_NAME", "")
						},
					children: [
						BX.create('i', {})
					]
				}
			);
			var imageUrl = BX.prop.getString(authorInfo, "IMAGE_URL", "");
			if(imageUrl !== "")
			{
				link.children[0].style.backgroundImage = "url('" + imageUrl + "')";
				link.children[0].style.backgroundSize = "21px";
			}

			return link;
		},
		onActivityCreate: function(activity, data)
		{
		}
	};
	BX.CrmTimelineItem.userTimezoneOffset = null;
	BX.CrmTimelineItem.getUserTimezoneOffset = function()
	{
		if(!this.userTimezoneOffset)
		{
			this.userTimezoneOffset = parseInt(BX.message("USER_TZ_OFFSET"));
			if(isNaN(this.userTimezoneOffset))
			{
				this.userTimezoneOffset = 0;
			}
		}
		return this.userTimezoneOffset;
	};
	BX.CrmTimelineItem.prototype.isContextMenuEnabled = function()
	{
		return false;
	};
	BX.CrmTimelineItem.prototype.prepareContextMenuButton = function()
	{
		this._contextMenuButton = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section-context-menu" },
				events: { click: BX.delegate(this.onContextMenuButtonClick, this) }
			}
		);
		return this._contextMenuButton;
	};
	BX.CrmTimelineItem.prototype.onContextMenuButtonClick = function(e)
	{
		if(!this._isContextMenuShown)
		{
			this.openContextMenu();
		}
		else
		{
			this.closeContextMenu();
		}
	};
	BX.CrmTimelineItem.prototype.openContextMenu = function()
	{
		var menuItems = this.prepareContextMenuItems();

		if (typeof IntranetExtensions !== "undefined")
		{
			menuItems.push(IntranetExtensions);
		}

		if(menuItems.length === 0)
		{
			return;
		}

		BX.PopupMenu.show(
			this._id,
			this._contextMenuButton,
			menuItems,
			{
				offsetTop: 0,
				offsetLeft: 16,
				angle: { position: "top", offset: 0 },
				events:
					{
						onPopupShow: BX.delegate(this.onContextMenuShow, this),
						onPopupClose: BX.delegate(this.onContextMenuClose, this),
						onPopupDestroy: BX.delegate(this.onContextMenuDestroy, this)
					}
			}
		);
		this._contextMenu = BX.PopupMenu.currentItem;
	};
	BX.CrmTimelineItem.prototype.closeContextMenu = function()
	{
		if(this._contextMenu)
		{
			this._contextMenu.close();
		}
	};
	BX.CrmTimelineItem.prototype.prepareContextMenuItems = function()
	{
		return [];
	};
	BX.CrmTimelineItem.prototype.onContextMenuShow = function()
	{
		this._isContextMenuShown = true;
		BX.addClass(this._contextMenuButton, "active");
	};
	BX.CrmTimelineItem.prototype.onContextMenuClose = function()
	{
		if(this._contextMenu)
		{
			this._contextMenu.popupWindow.destroy();
		}
	};
	BX.CrmTimelineItem.prototype.onContextMenuDestroy = function()
	{
		this._isContextMenuShown = false;
		BX.removeClass(this._contextMenuButton, "active");
		this._contextMenu = null;

		if(typeof(BX.PopupMenu.Data[this._id]) !== "undefined")
		{
			delete(BX.PopupMenu.Data[this._id]);
		}
	};

	BX.CrmTimelineItem.prototype.getMessage = function(name)
	{
		var m = BX.CrmTimelineItem.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmTimelineItem.messages) === "undefined")
	{
		BX.CrmTimelineItem.messages = {};
	}
}
//endregion

//region EDITOR MODE
if(typeof BX.Crm.TimelineEditorMode === "undefined")
{
	BX.Crm.TimelineEditorMode =
		{
			view: 1,
			edit: 2
		};
}
//endregion

//region History Items
if(typeof(BX.CrmHistoryItem) === "undefined")
{
	BX.CrmHistoryItem = function()
	{
		BX.CrmHistoryItem.superclass.constructor.apply(this);
		this._history = null;
		this._fixedHistory = null;
		this._typeId = null;
		this._createdTime = null;
		this._isFixed = false;
		this._headerClickHandler = BX.delegate(this.onHeaderClick, this);
	};
	BX.extend(BX.CrmHistoryItem, BX.CrmTimelineItem);
	BX.CrmHistoryItem.prototype.doInitialize = function()
	{
		this._history = this.getSetting("history");
		this._fixedHistory = this.getSetting("fixedHistory");
	};
	BX.CrmHistoryItem.prototype.getTypeId = function()
	{
		if(this._typeId === null)
		{
			this._typeId = BX.prop.getInteger(this._data, "TYPE_ID", BX.CrmTimelineType.undefined);
		}
		return this._typeId;
	};
	BX.CrmHistoryItem.prototype.getTitle = function()
	{
		return "";
	};
	BX.CrmHistoryItem.prototype.isContextMenuEnabled = function()
	{
		return !(this.isReadOnly());
	};
	BX.CrmHistoryItem.prototype.getCreatedTimestamp = function()
	{
		return this.getTextDataParam("CREATED_SERVER");
	};
	BX.CrmHistoryItem.prototype.getCreatedTime = function()
	{
		if(this._createdTime === null)
		{
			var time = BX.parseDate(
				this.getCreatedTimestamp(),
				false,
				"YYYY-MM-DD",
				"YYYY-MM-DD HH:MI:SS"
			);

			this._createdTime = new Date(time.getTime() + 1000 * BX.CrmTimelineItem.getUserTimezoneOffset());
		}
		return this._createdTime;
	};
	BX.CrmHistoryItem.prototype.getCreatedDate = function()
	{
		return BX.prop.extractDate(new Date(this.getCreatedTime().getTime()));
	};
	BX.CrmHistoryItem.prototype.getOwnerInfo = function()
	{
		return this._history ? this._history.getOwnerInfo() : null;
	};
	BX.CrmHistoryItem.prototype.getOwnerTypeId = function()
	{
		return BX.prop.getInteger(this.getOwnerInfo(), "ENTITY_TYPE_ID", BX.CrmEntityType.enumeration.undefined);
	};
	BX.CrmHistoryItem.prototype.getOwnerId = function()
	{
		return BX.prop.getInteger(this.getOwnerInfo(), "ENTITY_ID", 0);
	};
	BX.CrmHistoryItem.prototype.isReadOnly = function()
	{
		return this._history.isReadOnly();
	};
	BX.CrmHistoryItem.prototype.isEditable = function()
	{
		return !this.isReadOnly();
	};
	BX.CrmHistoryItem.prototype.isDone = function()
	{
		var typeId = this.getTypeId();
		if(typeId === BX.CrmTimelineType.activity)
		{
			var entityData = this.getAssociatedEntityData();
			return BX.CrmActivityStatus.isFinal(BX.prop.getInteger(entityData, "STATUS", 0));
		}
		return false;
	};
	BX.CrmHistoryItem.prototype.isFixed = function()
	{
		return this._isFixed;
	};
	BX.CrmHistoryItem.prototype.fasten = function(e)
	{
		if (this._fixedHistory._items.length >= 3)
		{
			if (!this.fastenLimitPopup)
			{
				this.fastenLimitPopup = new BX.PopupWindow(
					'timeline_fasten_limit_popup_' + this._id,
					this._switcher,
					{
						content: BX.message('CRM_TIMELINE_FASTEN_LIMIT_MESSAGE'),
						darkMode: true,
						autoHide: true,
						zIndex: 990,
						angle: true,
						closeByEsc: true,
						bindOptions: { forceBindPosition: true}
					}
				);
			}

			this.fastenLimitPopup.show();
			this.closeContextMenu();
			return;
		}
		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "CHANGE_FASTEN_ITEM",
						"VALUE": 'Y',
						"OWNER_TYPE_ID":  this.getOwnerTypeId(),
						"OWNER_ID": this.getOwnerId(),
						"ID": this._id
					},
				onsuccess: BX.delegate(this.onSuccessFasten, this)
			}
		);

		this.closeContextMenu();
	};
	BX.CrmHistoryItem.prototype.onSuccessFasten = function(result)
	{
		if (BX.type.isNotEmptyString(result.ERROR))
			return;

		if (!this.isFixed())
		{
			this._data.IS_FIXED = 'Y';
			var fixedItem = this._fixedHistory.createItem(this._data);
			fixedItem._isFixed = true;
			this._fixedHistory.addItem(fixedItem, 0);
			fixedItem.layout({ add: false });
			this.refreshLayout();
			var animation = BX.CrmTimelineItemFasten.create(
				"",
				{
					initialItem: this,
					finalItem: fixedItem,
					anchor: this._fixedHistory._anchor
				}
			);
			animation.run();
		}

		this.closeContextMenu();
	};
	BX.CrmHistoryItem.prototype.onFinishFasten = function(e)
	{
	};
	BX.CrmHistoryItem.prototype.unfasten = function(e)
	{
		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "CHANGE_FASTEN_ITEM",
						"VALUE": 'N',
						"OWNER_TYPE_ID": this.getOwnerTypeId(),
						"OWNER_ID": this.getOwnerId(),
						"ID": this._id
					},
				onsuccess: BX.delegate(this.onSuccessUnfasten, this)
			}
		);

		this.closeContextMenu();
	};
	BX.CrmHistoryItem.prototype.onSuccessUnfasten = function(result)
	{
		if (BX.type.isNotEmptyString(result.ERROR))
			return;

		var item = null;
		var historyItem = null;

		if (this.isFixed())
		{
			item = this;
			historyItem = this._history.findItemById(this._id);
		}
		else
		{
			item = this._fixedHistory.findItemById(this._id);
			historyItem = this;
		}

		if (item)
		{
			var index = this._fixedHistory.getItemIndex(item);
			item.clearAnimate();
			this._fixedHistory.removeItemByIndex(index);
			if (historyItem)
			{
				historyItem._data.IS_FIXED = 'N';
				historyItem.refreshLayout();
				BX.LazyLoad.showImages();
			}
		}
	};
	BX.CrmHistoryItem.prototype.clearAnimate = function()
	{
		if (!BX.type.isDomNode(this._wrapper))
			return ;

		var wrapperPosition = BX.pos(this._wrapper);
		var hideEvent = new BX.easing({
			duration : 1000,
			start : { height: wrapperPosition.height, opacity: 1, marginBottom: 15},
			finish: { height: 0, opacity: 0, marginBottom: 0},
			transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
			step: BX.proxy(function(state) {
				this._wrapper.style.height = state.height + "px";
				this._wrapper.style.opacity = state.opacity;
				this._wrapper.style.marginBottom = state.marginBottom;
			}, this),
			complete: BX.proxy(function () {
				this.clearLayout();
			}, this)
		});

		hideEvent.animate();
	};
	BX.CrmHistoryItem.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmHistoryItem.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-info";
	};
	BX.CrmHistoryItem.prototype.prepareContentDetails = function()
	{
		return [];
	};
	BX.CrmHistoryItem.prototype.prepareContent = function()
	{
		var wrapperClassName = this.getWrapperClassName();
		if(wrapperClassName !== "")
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-history" + " " + wrapperClassName;
		}
		else
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-history";
		}
		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });
		wrapper.appendChild(BX.create("DIV", { attrs: { className: this.getIconClassName() } }));

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-section-content" }, children: [ contentWrapper ] }
			)
		);

		var header = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children:
					[
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-content-event-title" },
								children:
									[
										BX.create("A",
											{
												attrs: { href: "#" },
												events: { click: this._headerClickHandler },
												text: this.getTitle()
											}
										)
									]
							}
						),
						BX.create("SPAN",
							{
								attrs: { className: "crm-entity-stream-content-event-time" },
								text: this.formatTime(this.getCreatedTime())
							}
						)
					]
			}
		);

		contentWrapper.appendChild(header);

		contentWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: this.prepareContentDetails()
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItem.prototype.prepareLayout = function(options)
	{
		var vueComponent = this.makeVueComponent(options, 'history');
		this._wrapper = vueComponent ? vueComponent : this.prepareContent();
		if(this._wrapper)
		{
			var enableAdd = BX.type.isPlainObject(options) ? BX.prop.getBoolean(options, "add", true) : true;
			if(enableAdd)
			{
				var anchor = BX.type.isPlainObject(options) && BX.type.isElementNode(options["anchor"]) ? options["anchor"] : null;
				if(anchor && anchor.nextSibling)
				{
					this._container.insertBefore(this._wrapper,  anchor.nextSibling);
				}
				else
				{
					this._container.appendChild(this._wrapper);
				}
			}

			this.markAsTerminated(this._history.checkItemForTermination(this));
		}
	};
	BX.CrmHistoryItem.prototype.onHeaderClick = function(e)
	{
		this.view();
		e.preventDefault ? e.preventDefault() : (e.returnValue = false);
	};
	BX.CrmHistoryItem.prototype.prepareTitleLayout = function()
	{
		return BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-event-title" }, text: this.getTitle() });
	};
	BX.CrmHistoryItem.prototype.prepareFixedSwitcherLayout = function()
	{
		var isFixed = (this.getTextDataParam("IS_FIXED") === 'Y');
		this._switcher = BX.create("span",
				{
					attrs: { className: "crm-entity-stream-section-top-fixed-btn" },
					events: {
						click: isFixed ? BX.delegate(this.unfasten, this) : BX.delegate(this.fasten, this)
					}
				});
		if (isFixed)
			BX.addClass(this._switcher, "crm-entity-stream-section-top-fixed-btn-active");

		if (!this.isReadOnly() && !isFixed)
		{
			var manager = this._history.getManager();
			if (!manager.isSpotlightShowed())
			{
				manager.setSpotlightShowed();
				BX.addClass(this._switcher, "crm-entity-stream-section-top-fixed-btn-spotlight");
				var spotlight = new BX.SpotLight({
					targetElement: this._switcher,
					targetVertex: "middle-center",
					lightMode: false,
					id: "CRM_TIMELINE_FASTEN_SWITCHER",
					zIndex: 900,
					top: -3,
					left: -1,
					autoSave: true,
					content: BX.message('CRM_TIMELINE_SPOTLIGHT_FASTEN_MESSAGE')
				});
				spotlight.show();
			}
		}

		return this._switcher;
	};
	BX.CrmHistoryItem.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		);

		return header;
	};
	BX.CrmHistoryItem.prototype.onActivityCreate = function(activity, data)
	{
		this._history.getManager().onActivityCreated(activity, data);
	};
	BX.CrmHistoryItem.prototype.formatTime = function(time)
	{
		if (this.isFixed())
		{
			return this._fixedHistory.formatTime(time);
		}

		return this._history.formatTime(time);
	};
	BX.CrmHistoryItem.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItem();
		self.initialize(id, settings);
		return self;
	};
	BX.CrmHistoryItem.isCounterEnabled = function(deadline)
	{
		if(!BX.type.isDate(deadline))
		{
			return false;
		}

		var start = new Date();
		start.setHours(0);
		start.setMinutes(0);
		start.setSeconds(0);
		start.setMilliseconds(0);
		start = start.getTime();

		var end = new Date();
		end.setHours(23);
		end.setMinutes(59);
		end.setSeconds(59);
		end.setMilliseconds(999);
		end = end.getTime();

		var time = deadline.getTime();
		return time < start || (time >= start && time <= end);
	}
}

if(typeof(BX.CrmHistoryItemActivity) === "undefined")
{
	BX.CrmHistoryItemActivity = function()
	{
		BX.CrmHistoryItemActivity.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemActivity, BX.CrmHistoryItem);

	BX.CrmHistoryItemActivity.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemActivity.superclass.doInitialize.apply(this);
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmHistoryItemActivity. The field 'activityEditor' is not assigned.";
		}
	};
	BX.CrmHistoryItemActivity.prototype.getTitle = function()
	{
		return BX.prop.getString(this.getAssociatedEntityData(), "SUBJECT", "");
	};
	BX.CrmHistoryItemActivity.prototype.getTypeDescription = function()
	{
		
		var entityData = this.getAssociatedEntityData();
		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);

		var typeCategoryId = this.getTypeCategoryId();
		if(typeCategoryId === BX.CrmActivityType.email)
		{
			return this.getMessage(direction === BX.CrmActivityDirection.incoming ? "incomingEmail" : "outgoingEmail");
		}
		else if(typeCategoryId === BX.CrmActivityType.call)
		{
			
			if(direction = 1){
				return this.getMessage("incomingCall");
			}
			if(direction = 2){
				return this.getMessage("outgoingCall");
			}
			if(direction = 3){
				return this.getMessage("personalincomingCall");
			}
			if(direction =  4){
				return this.getMessage("personalincomingCall");
			}
			if(direction = 5){
				return this.getMessage("corpincomingCall");
			}
			if(direction =  6){
				return this.getMessage("corpoutgoingCall");
			}
			//return this.getMessage(direction === BX.CrmActivityDirection.incoming ? "incomingCall" : "outgoingCall");
		}
		else if(typeCategoryId === BX.CrmActivityType.meeting)
		{
			return this.getMessage("meeting");
		}
		else if(typeCategoryId === BX.CrmActivityType.task)
		{
			return this.getMessage("task");
		}
		else if(typeCategoryId === BX.CrmActivityType.provider)
		{
			var providerId = BX.prop.getString(entityData, "PROVIDER_ID", "");

			if(providerId === "CRM_WEBFORM")
			{
				return this.getMessage("webform");
			}
			else if (providerId === "CRM_SMS")
			{
				return this.getMessage("sms");
			}
			else if (providerId === "CRM_REQUEST")
			{
				return this.getMessage("activityRequest");
			}
			else if (providerId === "IMOPENLINES_SESSION")
			{
				return this.getMessage("openLine");
			}
			else if (providerId === "REST_APP")
			{
				return this.getMessage("restApplication");
			}
			else if (providerId === "VISIT_TRACKER")
			{
				return this.getMessage("visit");
			}
			else if (providerId === "ZOOM")
			{
				return this.getMessage("zoom");
			}
		}

		return "";
	};
	BX.CrmHistoryItemActivity.prototype.prepareTitleLayout = function()
	{
		return BX.create("A",
			{
				attrs: { href: "#",  className: "crm-entity-stream-content-event-title" },
				events: { "click": this._headerClickHandler },
				text: this.getTypeDescription()
			}
		);
	};
	BX.CrmHistoryItemActivity.prototype.prepareTimeLayout = function()
	{
		return BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		);
	};
	BX.CrmHistoryItemActivity.prototype.prepareMarkLayout = function()
	{
		var entityData = this.getAssociatedEntityData();
		var markTypeId = BX.prop.getInteger(entityData, "MARK_TYPE_ID", 0);
		if(markTypeId <= 0)
		{
			return null;
		}

		var messageName = "";
		if(markTypeId === BX.CrmTimelineMarkType.success)
		{
			messageName = "SuccessMark";
		}
		else if(markTypeId === BX.CrmTimelineMarkType.renew)
		{
			messageName = "RenewMark";
		}

		if(messageName === "")
		{
			return null;
		}

		var markText = "";
		var typeCategoryId = this.getTypeCategoryId();
		if(typeCategoryId === BX.CrmActivityType.email)
		{
			markText = this.getMessage("email" + messageName);
		}
		else if(typeCategoryId === BX.CrmActivityType.call)
		{
			markText = this.getMessage("call" + messageName);
		}
		else if(typeCategoryId === BX.CrmActivityType.meeting)
		{
			markText = this.getMessage("meeting" + messageName);
		}
		else if(typeCategoryId === BX.CrmActivityType.task)
		{
			markText = this.getMessage("task" + messageName);
		}

		if(markText === "")
		{
			return null;
		}

		return(
			BX.create(
				"SPAN",
				{
					props: { className: "crm-entity-stream-content-event-skipped" },
					text: markText
				}
			)
		);
	};
	BX.CrmHistoryItemActivity.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		var typeCategoryId = this.getTypeCategoryId();
		if(typeCategoryId === BX.CrmActivityType.email)
		{
			this._actions.push(
				BX.CrmHistoryEmailAction.create(
					"email",
					{
						item: this,
						container: this._actionContainer,
						entityData: this.getAssociatedEntityData(),
						activityEditor: this._activityEditor
					}
				)
			);
		}
	};
	BX.CrmHistoryItemActivity.prototype.prepareContextMenuItems = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		var menuItems = [];

		if (!this.isReadOnly())
		{
			if (this.isEditable())
			{
				menuItems.push({ id: "edit", text: this.getMessage("menuEdit"), onclick: BX.delegate(this.edit, this)});
			}
			menuItems.push({ id: "remove", text: this.getMessage("menuDelete"), onclick: BX.delegate(this.processRemoval, this)});

			if (this.isFixed() || this._fixedHistory.findItemById(this._id))
				menuItems.push({ id: "unfasten", text: this.getMessage("menuUnfasten"), onclick: BX.delegate(this.unfasten, this)});
			else
				menuItems.push({ id: "fasten", text: this.getMessage("menuFasten"), onclick: BX.delegate(this.fasten, this)});
		}
		return menuItems;
	};
	BX.CrmHistoryItemActivity.prototype.view = function()
	{
		this.closeContextMenu();
		var entityData = this.getAssociatedEntityData();
		var id = BX.prop.getInteger(entityData, "ID", 0);
		if(id > 0)
		{
			this._activityEditor.viewActivity(id);
		}
	};
	BX.CrmHistoryItemActivity.prototype.edit = function()
	{
		this.closeContextMenu();
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();
		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityData = this.getAssociatedEntityData();
			var id = BX.prop.getInteger(entityData, "ID", 0);
			if(id > 0)
			{
				this._activityEditor.editActivity(id);
			}
		}
	};
	BX.CrmHistoryItemActivity.prototype.processRemoval = function()
	{
		this.closeContextMenu();
		this._detetionConfirmDlgId = "entity_timeline_deletion_" + this.getId() + "_confirm";
		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("removeConfirmTitle"),
					content: this.getRemoveMessage()
				}
			);
		}

		dlg.open().then(BX.delegate(this.onRemovalConfirm, this), BX.delegate(this.onRemovalCancel, this));
	};
	BX.CrmHistoryItemActivity.prototype.getRemoveMessage = function()
	{
		return this.getMessage('removeConfirm');
	};
	BX.CrmHistoryItemActivity.prototype.onRemovalConfirm = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this.remove();
	};
	BX.CrmHistoryItemActivity.prototype.onRemovalCancel = function()
	{
	};
	BX.CrmHistoryItemActivity.prototype.remove = function()
	{
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();

		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityData = this.getAssociatedEntityData();

			var id = BX.prop.getInteger(entityData, "ID", 0);

			if(id > 0)
			{
				var activityEditor = this._activityEditor;
				var item = activityEditor.getItemById(id);
				if (item)
				{
					activityEditor.deleteActivity(id, true);
				}
				else
				{
					var serviceUrl = BX.util.add_url_param(activityEditor.getSetting('serviceUrl', ''),
						{
							id: id,
							action: 'get_activity',
							ownertype: activityEditor.getSetting('ownerType', ''),
							ownerid: activityEditor.getSetting('ownerID', '')
						}
					);
					BX.ajax({
						'url': serviceUrl,
						'method': 'POST',
						'dataType': 'json',
						'data':
							{
								'ACTION' : 'GET_ACTIVITY',
								'ID': id,
								'OWNER_TYPE': activityEditor.getSetting('ownerType', ''),
								'OWNER_ID': activityEditor.getSetting('ownerID', '')
							},
						onsuccess: BX.delegate(
							function(data)
							{
								if(typeof(data['ACTIVITY']) !== 'undefined')
								{
									activityEditor._handleActivityChange(data['ACTIVITY']);
									window.setTimeout(BX.delegate(this.remove ,this), 500);
								}
							},
							this
						),
						onfailure: function(data){}
					});
				}
			}
		}
	};
	if(typeof(BX.CrmHistoryItemActivity.messages) === "undefined")
	{
		BX.CrmHistoryItemActivity.messages = {};
	}
	BX.CrmHistoryItemActivity.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemActivity();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemComment) === "undefined")
{
	BX.CrmHistoryItemComment = function()
	{
		BX.CrmHistoryItemComment.superclass.constructor.apply(this);
		this._isCollapsed = false;
		this._isMenuShown = false;
		this._isFixed = false;
		this._hasFiles = false;
		this._postForm = null;
		this._editor = null;
		this._commentMessage = '';
		this._mode = BX.Crm.TimelineEditorMode.view;
		this._streamContentEventBlock = '';
		this._playerWrappers = {};
		BX.Event.EventEmitter.subscribe(
			"BX.Disk.Files:onShowFiles",
			BX.delegate(this.addPlayer, this)
		);
	};
	BX.extend(BX.CrmHistoryItemComment, BX.CrmHistoryItem);
	BX.CrmHistoryItemComment.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemComment.superclass.doInitialize.apply(this);
		this._hasFiles = (this.getTextDataParam("HAS_FILES") === 'Y');
	};
	BX.CrmHistoryItemComment.prototype.getTitle = function()
	{
		return this.getMessage("comment");
	};
	BX.CrmHistoryItemComment.prototype.onPlayerDummyClick = function(file)
	{
		var playerWrapper = this._playerWrappers[file.id];
		var stubNode = playerWrapper.querySelector(".crm-audio-cap-wrap");
		if (stubNode)
		{
			BX.addClass(stubNode, "crm-audio-cap-wrap-loader");
		}
		this._history.getManager().getAudioPlaybackRateSelector().addPlayer(
			this._history.getManager().loadMediaPlayer(
				"history_" + this.getId() + '_' + file.id,
				file.url,
				'audio/mp3',
				playerWrapper,
				null,
				{
					playbackRate: this._history.getManager().getAudioPlaybackRateSelector().getRate()
				}
			)
		);
	};
	BX.CrmHistoryItemComment.prototype.addPlayer = function(event)
	{
		if (event.data.entityValueId === parseInt(this.getId(), 10))
		{
			this.files = event.data.files;
			event.data.files.forEach(function(file){
				if (file.extension === 'mp3')
				{
					var callInfoWrapper = BX.create("DIV",
						{
							attrs: {
								className: "crm-entity-stream-content-detail-call crm-entity-stream-content-detail-call-inline"
							}
						}
					);
					this._streamContentEventBlock.appendChild(callInfoWrapper);
					this._playerWrappers[file.id] = this._history.getManager().renderAudioDummy(
						null,
						this.onPlayerDummyClick.bind(this, file)
					);

					this._playerWrappers[file.id].firstElementChild.classList.add("crm-audio-cap-wrap-without-duration-text");

					callInfoWrapper.appendChild(
						this._playerWrappers[file.id]
					);
					callInfoWrapper.appendChild(
						this._history.getManager().getAudioPlaybackRateSelector().render()
					);
				}
			}.bind(this));
		}
	},
	BX.CrmHistoryItemComment.prototype.prepareContent = function()
	{
		var comment = this.getTextDataParam("COMMENT", "");
		var wrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-comment" }
			}
		);

		if (this.isReadOnly())
		{
			BX.addClass(wrapper, "crm-entity-stream-section-comment-read-only");
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		wrapper.appendChild(
			BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-comment" } }
			)
		);

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		this._streamContentEventBlock = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = this.prepareHeaderLayout();

		this._streamContentEventBlock.appendChild(header);

		if (!this.isReadOnly())
			wrapper.appendChild(this.prepareFixedSwitcherLayout());

		var detailChildren = [];
		if (this._mode !== BX.Crm.TimelineEditorMode.edit)
		{
			this._commentWrapper = BX.create("DIV", {
					attrs: { className: "crm-entity-stream-content-detail-description" }
				}
			);
			BX.html(this._commentWrapper, this.getTextDataParam("COMMENT", ""));
			detailChildren.push(this._commentWrapper);

			if (!this.isReadOnly())
			{
				BX.bind(this._commentWrapper, "click", BX.delegate(this.switchToEditMode, this));
				BX.bind(header, "click", BX.delegate(this.switchToEditMode, this));
			}
		}
		else
		{
			if (!BX.type.isDomNode(this._editorContainer))
				this._editorContainer = BX.create("div", {attrs: {className: "crm-entity-stream-section-comment-editor"}});

			detailChildren.push(this._editorContainer);

			var buttons = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-comment-edit-btn-container" },
					children:
						[
							BX.create("button",
								{
									attrs: { className: "ui-btn ui-btn-xs ui-btn-primary" },
									html: this.getMessage("send"),
									events : {
										click: BX.delegate(this.save, this)
									}
								}
							),
							BX.create("a",
								{
									attrs: { className: "ui-btn ui-btn-xs ui-btn-link" },
									html: this.getMessage("cancel"),
									events : {
										click: BX.delegate(this.switchToViewMode, this)
									}
								}
							)
						]
				}
			);

			detailChildren.push(buttons);
		}

		this._streamContentEventBlock.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: detailChildren
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			this._streamContentEventBlock.appendChild(authorNode);
		}
		//endregion
		var cleanText = this.getTextDataParam("TEXT", "");
		var _hasInlineAttachment = (this.getTextDataParam("HAS_INLINE_ATTACHMENT", "") === 'Y');
		if ((cleanText.length <= 128 && !_hasInlineAttachment) || this._mode === BX.Crm.TimelineEditorMode.edit)
		{
			this._isCollapsed = false;

			wrapper.appendChild(
				BX.create("DIV", {
					attrs: {
						className: "crm-entity-stream-section-content"
					},
					children: [
						this._streamContentEventBlock
					]
				})
			);
		}
		else
		{
			this._isCollapsed = true;

			wrapper.appendChild(
				BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-section-content crm-entity-stream-section-content-collapsed" },
						children:
						[
							this._streamContentEventBlock
						]
					}
				)
			);

			wrapper.querySelector(".crm-entity-stream-content-event").appendChild(
				BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-section-content-expand-btn-container" },
						children:
							[
								BX.create("A",
									{
										attrs:
											{
												className: "crm-entity-stream-section-content-expand-btn",
												href: "#"
											},
										events:
											{
												click: BX.delegate(this.onExpandButtonClick, this)
											},
										text: this.getMessage("expand")
									}
								)
							]
					}
				)
			);
		}

		if (this._mode === BX.Crm.TimelineEditorMode.view && this._hasFiles)
		{
			this._textLoaded = false;
			this._fileBlock = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-files-inner" },
					children: [BX.create("DIV", { attrs: { className: "crm-timeline-wait" }})]
				});
			wrapper.querySelector(".crm-entity-stream-section-content").appendChild(
				BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-files" },
					children: [this._fileBlock]
				})
			);
			BX.ready(BX.delegate(function() {
				window.setTimeout(BX.delegate(function(){
					this.loadContent(this._fileBlock, "GET_FILE_BLOCK")
				} ,this), 100);
			},this));
		}

		return wrapper;
	};
	BX.CrmHistoryItemComment.prototype.prepareActions = function()
	{
		if (this._mode === BX.Crm.TimelineEditorMode.view && BX.type.isDomNode(this._commentWrapper))
		{
			this.registerImages(this._commentWrapper);
			if (!BX.getClass('BX.Disk.apiVersion'))
			{
				BX.viewElementBind(
					this._commentWrapper,
					{showTitle: true},
					function(node){
						return BX.type.isElementNode(node) && (node.getAttribute('data-bx-viewer') || node.getAttribute('data-bx-image'));
					}
				);
			}
		}
	};
	BX.CrmHistoryItemComment.prototype.loadContent = function(node, type)
	{
		if (!BX.type.isDomNode(node))
			return;

		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "GET_COMMENT_CONTENT",
						"ID": this.getId(),
						"ENTITY_TYPE_ID": this.getOwnerTypeId(),
						"ENTITY_ID": this.getOwnerId(),
						"TYPE": type
					},
				onsuccess: BX.delegate(function(result)
				{
					if (BX.type.isNotEmptyString(result.ERROR) && type === 'GET_FILE_BLOCK')
					{
						BX.remove(node);
						return;
					}

					if (BX.type.isNotEmptyString(result.BLOCK))
					{
						var promise = BX.html(node, result.BLOCK);
						promise.then(
							BX.delegate(function(){
								this.registerImages(node);
								BX.LazyLoad.showImages();
							}, this)
						);
					}
				}, this)
			}
		);
	};
	BX.CrmHistoryItemComment.prototype.loadEditor = function()
	{
		this._editorName = 'CrmTimeLineComment'+this._id + BX.util.getRandomString(4);
		if (this._postForm)
		{
			this._postForm.oEditor.SetContent(this._commentMessage);
			this._editor.ReInitIframe();
			return;
		}

		actionData = {
			data: {
				id: this._id,
				name: this._editorName
			}
		};
		BX.ajax.runAction("crm.api.timeline.loadEditor", actionData)
			.then(this.onLoadEditorSuccess.bind(this))
			.catch(	this.switchToViewMode.bind(this));
	};
	BX.CrmHistoryItemComment.prototype.onLoadEditorSuccess = function(result)
	{
		if (!BX.type.isDomNode(this._editorContainer))
			this._editorContainer = BX.create("div", {attrs: {className: "crm-entity-stream-section-comment-editor"}});

		var html = BX.prop.getString(BX.prop.getObject(result, "data", {}), "html", '');
		BX.html(this._editorContainer, html).then(BX.delegate(this.showEditor,this));
	};
	BX.CrmHistoryItemComment.prototype.showEditor = function()
	{
		if (LHEPostForm)
		{
			window.setTimeout(BX.delegate(function(){
				this._postForm = LHEPostForm.getHandler(this._editorName);
				this._editor = BXHtmlEditor.Get(this._editorName);
				BX.onCustomEvent(this._postForm.eventNode, 'OnShowLHE', [true]);
				this._commentMessage = this._postForm.oEditor.GetContent();
			} ,this), 0);
		}
	};
	BX.CrmHistoryItemComment.prototype.onFinishFasten = function()
	{
		this.registerImages(this._commentWrapper);
		if (BX.type.isDomNode(this._fileBlock))
			this.registerImages(this._fileBlock);
		BX.LazyLoad.showImages();
	};
	BX.CrmHistoryItemComment.prototype.registerImages = function(node)
	{
		var commentImages = node.querySelectorAll('[data-bx-viewer="image"]');
		var commentImagesLength = commentImages.length;
		if (commentImagesLength > 0)
		{
			var idsList = [];
			for (var i = 0; i < commentImagesLength; ++i)
			{
				if (BX.type.isDomNode(commentImages[i]))
				{
					commentImages[i].id += BX.util.getRandomString(4);
					idsList.push(commentImages[i].id);
				}
			}

			if (idsList.length > 0)
			{
				BX.LazyLoad.registerImages(idsList);
			}
		}
		BX.LazyLoad.registerImages(idsList);
	};
	BX.CrmHistoryItemComment.prototype.ensureGhostCreated = function()
	{
		if(this._ghostInput)
		{
			return this._ghostInput;
		}

		this._ghostInput = BX.create('div', {
			props: { className: 'crm-entity-stream-content-new-comment-textarea-shadow' },
			text: this._input.value
		});

		this._ghostInput.style.width = this._input.offsetWidth + 'px';
		document.body.appendChild(this._ghostInput);
		return this._ghostInput;
	};
	BX.CrmHistoryItemComment.prototype.toggleMode = function(type)
	{
		this._mode = parseInt(type);
		this._hasFiles = (this.getTextDataParam("HAS_FILES") === 'Y');
		this.refreshLayout();
		this.closeContextMenu();
	};

	BX.CrmHistoryItemComment.prototype.switchToViewMode = function(e)
	{
		// if (LHEPostForm)
		// 	LHEPostForm.unsetHandler(this._editorName);
		this.toggleMode(BX.Crm.TimelineEditorMode.view);
	};

	BX.CrmHistoryItemComment.prototype.switchToEditMode = function(e)
	{
		var tagName = e.target.tagName.toLowerCase();
		if (tagName === 'a'
			|| tagName === 'img'
			|| BX.hasClass(e.target, "feed-con-file-changes-link-more")
			|| BX.hasClass(e.target, "feed-com-file-inline")
			|| BX.type.isNotEmptyString(document.getSelection().toString())
		)
		{
			return;
		}

		this.toggleMode(BX.Crm.TimelineEditorMode.edit);
		window.setTimeout(BX.delegate(function(){
			this.loadEditor();
		} ,this), 100);
	};

	BX.CrmHistoryItemComment.prototype.prepareContextMenuItems = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		var menuItems = [];

		if (!this.isReadOnly())
		{
			if (this._mode !== BX.Crm.TimelineEditorMode.edit)
			{
				menuItems.push({ id: "edit", text: this.getMessage("menuEdit"), onclick: BX.delegate(this.switchToEditMode, this)});
			}
			else
			{
				menuItems.push({ id: "cancel", text: this.getMessage("menuCancel"), onclick: BX.delegate(this.switchToViewMode, this)});
			}

			menuItems.push({ id: "remove", text: this.getMessage("menuDelete"), onclick: BX.delegate(this.processRemoval, this)});

			if (this.isFixed() || this._fixedHistory.findItemById(this._id))
				menuItems.push({ id: "unfasten", text: this.getMessage("menuUnfasten"), onclick: BX.delegate(this.unfasten, this)});
			else
				menuItems.push({ id: "fasten", text: this.getMessage("menuFasten"), onclick: BX.delegate(this.fasten, this)});
		}

		return menuItems;
	};

	BX.CrmHistoryItemComment.prototype.save = function(e)
	{
		var attachmentList = [];
		var text = "";
		if (this._postForm)
		{
			text = this._postForm.oEditor.GetContent();
			this._commentMessage = text;
			this._postForm.eventNode
				.querySelectorAll('input[name="UF_CRM_COMMENT_FILES[]"]')
				.forEach(function(input) {
					attachmentList.push(input.value)
				});
		}
		else
		{
			text = this._input.value;
		}

		if (!BX.type.isNotEmptyString(text))
		{
			if (!this.emptyCommentMessage)
			{
				this.emptyCommentMessage = new BX.PopupWindow(
					'timeline_empty_comment_' + this._id,
					e.target,
					{
						content: BX.message('CRM_TIMELINE_EMPTY_COMMENT_MESSAGE'),
						darkMode: true,
						autoHide: true,
						zIndex: 990,
						angle: {position: 'top', offset: 77},
						closeByEsc: true,
						bindOptions: { forceBindPosition: true}
					}
				);
			}

			this.emptyCommentMessage.show();
			return;
		}

		if(this._isRequestRunning && BX.type.isNotEmptyString(text))
		{
			return;
		}

		this._isRequestRunning = true;
		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "UPDATE_COMMENT",
						"ID": this.getId(),
						"TEXT": text,
						"OWNER_TYPE_ID":  this.getOwnerTypeId(),
						"OWNER_ID": this.getOwnerId(),
						"ATTACHMENTS": attachmentList
					},
				onsuccess: BX.delegate(this.onSaveSuccess, this),
				onfailure: BX.delegate(this.onRequestFailure, this)
			}
		);
	};

	BX.CrmHistoryItemComment.prototype.processRemoval = function()
	{
		this.closeContextMenu();
		this._detetionConfirmDlgId = "entity_timeline_deletion_" + this.getId() + "_confirm";
		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("removeConfirmTitle"),
					content: this.getMessage('commentRemove')
				}
			);
		}

		dlg.open().then(BX.delegate(this.onRemovalConfirm, this), BX.delegate(this.onRemovalCancel, this));
	};

	BX.CrmHistoryItemComment.prototype.onRemovalConfirm = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this.remove();
	};
	BX.CrmHistoryItemComment.prototype.onRemovalCancel = function()
	{
	};

	BX.CrmHistoryItemComment.prototype.remove = function(e)
	{
		if(this._isRequestRunning)
		{
			return;
		}

		var history = this._history._manager.getHistory();
		var deleteItem = history.findItemById(this._id);
		if (deleteItem instanceof BX.CrmHistoryItemComment)
			deleteItem.clearAnimate();

		var fixedHistory = this._history._manager.getFixedHistory();
		var deleteFixedItem = fixedHistory.findItemById(this._id);
		if (deleteFixedItem instanceof BX.CrmHistoryItemComment)
			deleteFixedItem.clearAnimate();

		this._isRequestRunning = true;
		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "DELETE_COMMENT",
						"OWNER_TYPE_ID":  this.getOwnerTypeId(),
						"OWNER_ID": this.getOwnerId(),
						"ID": this.getId()
					},
				onsuccess: BX.delegate(this.onRemoveSuccess, this),
				onfailure: BX.delegate(this.onRequestFailure, this)
			}
		);
	};

	BX.CrmHistoryItemComment.prototype.onSaveSuccess = function(data)
	{
		this._isRequestRunning = false;
		var itemData = BX.prop.getObject(data, "HISTORY_ITEM");

		var updateFixedItem = this._fixedHistory.findItemById(this._id);
		if (updateFixedItem instanceof BX.CrmHistoryItemComment)
		{
			if (!BX.type.isNotEmptyString(itemData['IS_FIXED']))
				itemData['IS_FIXED'] = 'Y';

			updateFixedItem.setData(itemData);
			updateFixedItem._id = BX.prop.getString(itemData, "ID");
			updateFixedItem.switchToViewMode();
		}

		var updateItem = this._history.findItemById(this._id);
		if (updateItem instanceof BX.CrmHistoryItemComment)
		{
			updateItem.setData(itemData);
			updateItem._id = BX.prop.getString(itemData, "ID");
			updateItem.switchToViewMode();
		}

		this._postForm = null;
	};

	BX.CrmHistoryItemComment.prototype.onRemoveSuccess = function(data)
	{
	};

	BX.CrmHistoryItemComment.prototype.onRequestFailure = function(data)
	{
		this._isRequestRunning = this._isLocked = false;
	};

	BX.CrmHistoryItemComment.prototype.onExpandButtonClick = function(e)
	{
		if(!this._wrapper)
		{
			return BX.PreventDefault(e);
		}

		var contentWrapper = this._wrapper.querySelector("div.crm-entity-stream-section-content");
		if(!contentWrapper)
		{
			return BX.PreventDefault(e);
		}

		if (this._hasFiles && BX.type.isDomNode(this._commentWrapper) && !this._textLoaded)
		{
			this._textLoaded = true;
			this.loadContent(this._commentWrapper, "GET_TEXT")
		}
		var eventWrapper = contentWrapper.querySelector(".crm-entity-stream-content-event");
		if(this._isCollapsed)
		{
			eventWrapper.style.maxHeight = eventWrapper.scrollHeight + 130 + "px";
			BX.removeClass(contentWrapper, "crm-entity-stream-section-content-collapsed");
			BX.addClass(contentWrapper, "crm-entity-stream-section-content-expand");
			setTimeout(
				BX.delegate(function() {
					eventWrapper.style.maxHeight = "";
					}, this),
				300
			);
		}
		else
		{
			eventWrapper.style.maxHeight = eventWrapper.clientHeight + "px";
			BX.removeClass(contentWrapper, "crm-entity-stream-section-content-expand");
			BX.addClass(contentWrapper, "crm-entity-stream-section-content-collapsed");
			setTimeout(
				BX.delegate(function() {
					eventWrapper.style.maxHeight = "";
					}, this),
				0
			);
		}

		this._isCollapsed = !this._isCollapsed;

		var button = contentWrapper.querySelector("a.crm-entity-stream-section-content-expand-btn");
		if(button)
		{
			button.innerHTML = this.getMessage(this._isCollapsed ? "expand" : "collapse");
		}
		return BX.PreventDefault(e);
	};
	BX.CrmHistoryItemComment.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemComment();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemModification) === "undefined")
{
	BX.CrmHistoryItemModification = function()
	{
		BX.CrmHistoryItemModification.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemModification, BX.CrmHistoryItem);
	BX.CrmHistoryItemModification.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemModification.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.CrmHistoryItemModification.prototype.getTitle = function()
	{
		return this.getTextDataParam("TITLE");
	};
	BX.CrmHistoryItemModification.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-info" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-info" } })
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = this.prepareHeaderLayout();

		var contentChildren = [];
		if (BX.type.isNotEmptyString(this.getTextDataParam("START_NAME")))
		{
			contentChildren.push(
				BX.create("SPAN",
				{
					attrs: {className: "crm-entity-stream-content-detain-info-status"},
					text: this.getTextDataParam("START_NAME")
				})
			);
			contentChildren.push(
				BX.create("SPAN",{ attrs: { className: "crm-entity-stream-content-detail-info-separator-icon" } })
			);
		}

		if (BX.type.isNotEmptyString(this.getTextDataParam("FINISH_NAME")))
		{
			contentChildren.push(
				BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-detain-info-status" },
					text: this.getTextDataParam("FINISH_NAME")
				})
			);
		}


		content.appendChild(header);
		content.appendChild(
			BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" },
				children:
				[
					BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-info" },
						children: contentChildren
					})
				]
			})
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};
	if(typeof(BX.CrmHistoryItemModification.messages) === "undefined")
	{
		BX.CrmHistoryItemModification.messages = {};
	}
	BX.CrmHistoryItemModification.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemModification();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemMark) === "undefined")
{
	BX.CrmHistoryItemMark = function()
	{
		BX.CrmHistoryItemMark.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemMark, BX.CrmHistoryItem);
	BX.CrmHistoryItemMark.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemMark.superclass.doInitialize.apply(this);
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmHistoryItemMark. The field 'activityEditor' is not assigned.";
		}
	};
	BX.CrmHistoryItemMark.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemMark.messages;
		if (m.hasOwnProperty(name))
		{
			return m[name];
		}

		return BX.CrmHistoryItemMark.superclass.getMessage.apply(this, [name]);
	};
	BX.CrmHistoryItemMark.prototype.getTitle = function()
	{
		console.log('getTitle');
		var title = "";
		var entityData = this.getAssociatedEntityData();
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();
		var typeCategoryId = this.getTypeCategoryId();
		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityTypeId = BX.prop.getInteger(entityData, "TYPE_ID", 0);
			var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
			var activityProviderId = BX.prop.getString(entityData, "PROVIDER_ID", '');

			if(entityTypeId === BX.CrmActivityType.email)
			{
				if(typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage(
						(direction === BX.CrmActivityDirection.incoming ? "incomingEmail" : "outgoingEmail") +
						"SuccessMark"
					);
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
				{
					title = this.getMessage(
						(direction === BX.CrmActivityDirection.incoming ? "incomingEmail" : "outgoingEmail") +
						"RenewMark"
					);
				}
			}
			else if(entityTypeId === BX.CrmActivityType.call)
			{
				
				let type = '';
				if(direction == 1)
					type = 'incomingCall';
				if(direction == 2)
					type = 'outgoingCall';
				if(direction == 3)
					type = 'personalincomingCall';
				if(direction == 4)
					type = 'personaloutgoingCall';
				if(direction == 5)
					type = 'corpincomingCall';
				if(direction == 6)
					type = 'corpoutgoingCall';
				
				if(typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage(
							type +
						"SuccessMark"
					);
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
				{
					title = this.getMessage(
							type +
						"RenewMark"
					);
				}
				
			}
			else if(entityTypeId === BX.CrmActivityType.meeting)
			{
				if(typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage("meetingSuccessMark");
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
				{
					title = this.getMessage("meetingRenewMark");
				}
			}
			else if(entityTypeId === BX.CrmActivityType.task)
			{
				if(typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage("taskSuccessMark");
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
				{
					title = this.getMessage("taskRenewMark");
				}
			}
			else if(entityTypeId === BX.CrmActivityType.provider)
			{
				if (activityProviderId === 'CRM_REQUEST')
				{
					if(typeCategoryId === BX.CrmTimelineMarkType.success)
					{
						title = this.getMessage("requestSuccessMark");
					}
					else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
					{
						title = this.getMessage("requestRenewMark");
					}
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage("webformSuccessMark");
				}
				else if(typeCategoryId === BX.CrmTimelineMarkType.renew)
				{
					title = this.getMessage("webformRenewMark");
				}
			}
		}
		else if(associatedEntityTypeId === BX.CrmEntityType.enumeration.deal)
		{
			if(typeCategoryId === BX.CrmTimelineMarkType.success)
			{
				title = this.getMessage("dealSuccessMark");
			}
			else if(typeCategoryId === BX.CrmTimelineMarkType.failed)
			{
				title = this.getMessage("dealFailedMark");
			}
		}
		else if(associatedEntityTypeId === BX.CrmEntityType.enumeration.order)
        {
			if(typeCategoryId === BX.CrmTimelineMarkType.success)
			{
				title = this.getMessage("orderSuccessMark");
			}
			else if(typeCategoryId === BX.CrmTimelineMarkType.failed)
			{
				title = this.getMessage("orderFailedMark");
			}
        }
		else
		{
			if (BX.CrmEntityType.isDefined(associatedEntityTypeId))
			{
				if (typeCategoryId === BX.CrmTimelineMarkType.success)
				{
					title = this.getMessage('entitySuccessMark');
				}
				else if (typeCategoryId === BX.CrmTimelineMarkType.failed)
				{
					title = this.getMessage('entityFailedMark');
				}
			}
		}

		return title;
	};
	BX.CrmHistoryItemMark.prototype.prepareTitleLayout = function()
	{
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();

		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.order)
		{
			return BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					text: this.getTitle()
				}
			);
		}
		else
		{
			return BX.create("A",
				{
					attrs: { href: "#", className: "crm-entity-stream-content-event-title" },
					events: { "click": this._headerClickHandler },
					text: this.getTitle()
				}
			);
		}
	};
	BX.CrmHistoryItemMark.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();

		var wrapper = BX.create(
			"DIV",
			{ attrs: { className: "crm-entity-stream-section crm-entity-stream-section-completed" } }
		);

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = this.prepareHeaderLayout();
		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityTypeId = BX.prop.getInteger(entityData, "TYPE_ID", 0);
			var iconClassName = "crm-entity-stream-section-icon";
			if(entityTypeId === BX.CrmActivityType.email)
			{
				iconClassName += " crm-entity-stream-section-icon-email";
			}
			else if(entityTypeId === BX.CrmActivityType.call)
			{
				iconClassName += " crm-entity-stream-section-icon-call";
			}
			else if(entityTypeId === BX.CrmActivityType.meeting)
			{
				iconClassName += " crm-entity-stream-section-icon-meeting";
			}
			else if(entityTypeId === BX.CrmActivityType.task)
			{
				iconClassName += " crm-entity-stream-section-icon-task";
			}
			else if(entityTypeId === BX.CrmActivityType.provider)
			{
				var providerId = BX.prop.getString(entityData, "PROVIDER_ID", "");
				if(providerId === "CRM_WEBFORM")
				{
					iconClassName += " crm-entity-stream-section-icon-crmForm";
				}
			}

			wrapper.appendChild(BX.create("DIV", { attrs: { className: iconClassName } }));
			content.appendChild(header);


			var detailWrapper = BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-content-detail" } }
			);
			content.appendChild(detailWrapper);

			detailWrapper.appendChild(
				BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-title" },
						children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { "click": this._headerClickHandler },
									text: this.cutOffText(BX.prop.getString(entityData, "SUBJECT", ""), 128)
								}
							)
						]
					}
				)
			);

			var summary = this.getTextDataParam("SUMMARY");
			if(summary !== "")
			{
				detailWrapper.appendChild(
					BX.create("DIV",
						{
							attrs: { className: "crm-entity-stream-content-detail-description" },
							text: summary
						}
					)
				);
			}
		}
		else if(associatedEntityTypeId === BX.CrmEntityType.enumeration.order)
		{
            wrapper.appendChild(BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-info" } }));
            content.appendChild(header);
            content.appendChild(
                BX.create("DIV",
                    {
                        attrs: { className: "crm-entity-stream-content-detail" },
                        text: this.cutOffText(this.getTextDataParam("MESSAGE"), 128)
                    }
                )
            );
		}
		else
		{
			wrapper.appendChild(BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-info" } }));
			content.appendChild(header);

			var innerWrapper = BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" }
				}
			);

			var associatedEntityTitle = this.cutOffText(BX.prop.getString(entityData, "TITLE", ""), 128);

			if (BX.CrmEntityType.isDefined(associatedEntityTypeId))
			{
				var link = BX.prop.getString(entityData, 'SHOW_URL', '');
				if (link.indexOf('/') !== 0)
				{
					link = '#';
				}

				var contentTemplate =
					this.getMessage('entityContentTemplate')
						.replace('#ENTITY_TYPE_CAPTION#', BX.Text.encode(BX.prop.getString(entityData, 'ENTITY_TYPE_CAPTION', '')))
						.replace('#LINK#', BX.Text.encode(link))
						.replace('#LINK_TITLE#', BX.Text.encode(associatedEntityTitle))
				;

				innerWrapper.appendChild(
					BX.create(
						'SPAN',
						{
							html: contentTemplate
						}
					)
				);
			}
			else
			{
				innerWrapper.innerText = associatedEntityTitle;
			}

			content.appendChild(innerWrapper);
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		if (!this.isReadOnly())
			wrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};

	BX.CrmHistoryItemMark.prototype.prepareContextMenuItems = function ()
	{
		if (this._isMenuShown)
		{
			return;
		}

		var menuItems = [];

		if (!this.isReadOnly())
		{
			if (this.isFixed() || this._fixedHistory.findItemById(this._id))
				menuItems.push({ id: "unfasten", text: this.getMessage("menuUnfasten"), onclick: BX.delegate(this.unfasten, this)});
			else
				menuItems.push({ id: "fasten", text: this.getMessage("menuFasten"), onclick: BX.delegate(this.fasten, this)});
		}

		return menuItems;
	};

	BX.CrmHistoryItemMark.prototype.view = function()
	{
		var entityData = this.getAssociatedEntityData();
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();
		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var id = BX.prop.getInteger(entityData, "ID", 0);
			if(id > 0)
			{
				this._activityEditor.viewActivity(id);
			}
		}
		else
		{
			var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");
			if(showUrl !== "")
			{
				BX.Crm.Page.open(showUrl);
			}
		}
	};
	if(typeof(BX.CrmHistoryItemMark.messages) === "undefined")
	{
		BX.CrmHistoryItemMark.messages = {};
	}
	BX.CrmHistoryItemMark.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemMark();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemCreation) === "undefined")
{
	BX.CrmHistoryItemCreation = function()
	{
		BX.CrmHistoryItemCreation.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemCreation, BX.CrmHistoryItem);
	BX.CrmHistoryItemCreation.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemCreation.superclass.doInitialize.apply(this);
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmHistoryItemCreation. The field 'activityEditor' is not assigned.";
		}
	};
	BX.CrmHistoryItemCreation.prototype.getTitle = function()
	{
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityData = this.getAssociatedEntityData();
		if(entityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var typeId = BX.prop.getInteger(entityData, "TYPE_ID");
			var title = this.getMessage(typeId === BX.CrmActivityType.task ? "task" : "activity");
			return title.replace(/#TITLE#/gi, this.cutOffText(BX.prop.getString(entityData, "SUBJECT")), 64);
		}

		var msg = this.getMessage(BX.CrmEntityType.resolveName(this.getAssociatedEntityTypeId()).toLowerCase());
		if(!BX.type.isNotEmptyString(msg))
		{
			msg = this.getTextDataParam("TITLE");
		}

		return msg;
	};
	BX.CrmHistoryItemCreation.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-createEntity";
	};
	BX.CrmHistoryItemCreation.prototype.prepareContent = function()
	{
		var entityTypeId = this.getAssociatedEntityTypeId();

		if (
			entityTypeId == BX.CrmEntityType.enumeration.ordershipment
			|| entityTypeId == BX.CrmEntityType.enumeration.orderpayment
		)
		{
			var data = this.getData();
			data.TYPE_CATEGORY_ID = BX.CrmTimelineType.modification;
			if (data.hasOwnProperty('ASSOCIATED_ENTITY'))
			{
				data.ASSOCIATED_ENTITY.HTML_TITLE = '';
			}

			var createOrderEntityItem = BX.CrmHistory.prototype.createOrderEntityItem.call(this, data);
			return createOrderEntityItem.prepareContent();
		}

		return BX.CrmHistoryItem.prototype.prepareContent.call(this);
	};
	BX.CrmHistoryItemCreation.prototype.prepareContentDetails = function()
	{
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityId = this.getAssociatedEntityId();
		var entityData = this.getAssociatedEntityData();

		if(entityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var link = BX.create("A",
				{
					attrs: { href: "#" },
					html: this.cutOffText(BX.prop.getString(entityData, "DESCRIPTION_RAW"), 128)
				}
			);
			BX.bind(link, "click", this._headerClickHandler);

			return [ link ];
		}

		var title = BX.prop.getString(entityData, "TITLE", "");
		var htmlTitle = BX.prop.getString(entityData, "HTML_TITLE", "");
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");

		if (
			entityTypeId === BX.CrmEntityType.enumeration.deal
			&& BX.prop.getObject(entityData, "ORDER", null)
		)
		{
			var orderData = BX.prop.getObject(entityData, "ORDER", null);
			htmlTitle = this.getMessage('dealOrderTitle')
				.replace("#ORDER_ID#", orderData.ID)
				.replace("#DATE_TIME#", orderData.ORDER_DATE)
				.replace("#HREF#", orderData.SHOW_URL)
				.replace("#PRICE_WITH_CURRENCY#", orderData.SUM)
			;
		}

		if(title !== "" || htmlTitle !== "")
		{
			var nodes = [];
			if(showUrl === "" || (entityTypeId === this.getOwnerTypeId() && entityId === this.getOwnerId()))
			{
				var spanAttrs = (htmlTitle !== "") ? { html: htmlTitle } : { text: title };
				nodes.push(BX.create("SPAN", spanAttrs));
			}
			else
			{
				var linkAttrs = { attrs: { href: showUrl }, text: title };
				if (htmlTitle !== "")
				{
					linkAttrs = { attrs: { href: showUrl }, html: htmlTitle };
				}
				nodes.push(BX.create("A", linkAttrs));
			}

			var legend = this.getTextDataParam("LEGEND");
			if(legend !== "")
			{
				nodes.push(BX.create("BR"));
				nodes.push(BX.create("SPAN", { text: legend }));
			}

			var baseEntityData = this.getObjectDataParam("BASE");
			var baseEntityInfo = BX.prop.getObject(baseEntityData, "ENTITY_INFO");
			if(baseEntityInfo)
			{
				nodes.push(BX.create("BR"));
				nodes.push(BX.create("SPAN", { text: BX.prop.getString(baseEntityData, "CAPTION") + ": " }));
				nodes.push(
					BX.create("A",
						{
							attrs: { href: BX.prop.getString(baseEntityInfo, "SHOW_URL", "#") },
							text: BX.prop.getString(baseEntityInfo, "TITLE", "")
						}
					)
				);
			}
			return nodes;
		}
		return [];
	};
	BX.CrmHistoryItemCreation.prototype.view = function()
	{
		var entityTypeId = this.getAssociatedEntityTypeId();
		if(entityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityData = this.getAssociatedEntityData();
			var id = BX.prop.getInteger(entityData, "ID", 0);
			if(id > 0)
			{
				this._activityEditor.viewActivity(id);
			}
		}
	};
	BX.CrmHistoryItemCreation.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemCreation.messages;
		// Provokes to use this.getTextDataParam("TITLE") for dynamic type
		if (BX.CrmEntityType.isDynamicTypeByName(name.toUpperCase()))
		{
			return '';
		}
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemCreation.messages) === "undefined")
	{
		BX.CrmHistoryItemCreation.messages = {};
	}
	BX.CrmHistoryItemCreation.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemCreation();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemRestoration) === "undefined")
{
	BX.CrmHistoryItemRestoration = function()
	{
		BX.CrmHistoryItemRestoration.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemRestoration, BX.CrmHistoryItem);
	BX.CrmHistoryItemRestoration.prototype.getTitle = function()
	{
		return this.getTextDataParam("TITLE");
	};
	BX.CrmHistoryItemRestoration.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-restoreEntity";
	};
	BX.CrmHistoryItemRestoration.prototype.prepareContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var title = BX.prop.getString(entityData, "TITLE");
		return title !== "" ?  [ BX.create("SPAN", { text: title }) ] : [];
	};
	BX.CrmHistoryItemRestoration.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemRestoration.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemRestoration.messages) === "undefined")
	{
		BX.CrmHistoryItemRestoration.messages = {};
	}
	BX.CrmHistoryItemRestoration.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemRestoration();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemRelation) === "undefined")
{
	/**
	 * @abstract
	 * @class BX.CrmHistoryItemRelation
	 * @constructor
	 *
	 * @extends BX.CrmHistoryItem
	 */
	BX.CrmHistoryItemRelation = function()
	{
		BX.CrmHistoryItemRelation.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemRelation, BX.CrmHistoryItem);
	BX.CrmHistoryItemRelation.prototype.getTitle = function()
	{
		return this.getMessage('title');
	};
	BX.CrmHistoryItemRelation.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-createEntity";
	};
	BX.CrmHistoryItemRelation.prototype.prepareContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();

		var link = BX.prop.getString(entityData, "SHOW_URL", "");
		if (link.indexOf('/') !== 0)
		{
			link = '#';
		}

		var content =
			this.getMessage('contentTemplate')
				.replace('#ENTITY_TYPE_CAPTION#', BX.Text.encode(BX.prop.getString(entityData, 'ENTITY_TYPE_CAPTION', '')))
				.replace('#LEGEND#', '')
				.replace('#LINK#', BX.Text.encode(link))
				.replace('#LINK_TITLE#', BX.Text.encode(BX.prop.getString(entityData, "TITLE", '')))
		;

		var nodes = [];
		nodes.push(
			BX.create('SPAN', { html: content })
		);

		return nodes;
	};
}

if(typeof(BX.CrmHistoryItemLink) === "undefined")
{
	/**
	 * @class BX.CrmHistoryItemLink
	 * @constructor
	 *
	 * @extends BX.CrmHistoryItemRelation
	 */
	BX.CrmHistoryItemLink = function()
	{
		BX.CrmHistoryItemLink.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemLink, BX.CrmHistoryItemRelation);
	BX.CrmHistoryItemLink.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-link";
	};
	BX.CrmHistoryItemLink.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemLink.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemLink.messages) === "undefined")
	{
		BX.CrmHistoryItemLink.messages = {};
	}
	BX.CrmHistoryItemLink.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemLink();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemUnlink) === "undefined")
{
	/**
	 * @class BX.CrmHistoryItemUnlink
	 * @constructor
	 *
	 * @extends BX.CrmHistoryItemRelation
	 */
	BX.CrmHistoryItemUnlink = function()
	{
		BX.CrmHistoryItemUnlink.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemUnlink, BX.CrmHistoryItemRelation);
	BX.CrmHistoryItemUnlink.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-unlink";
	};
	BX.CrmHistoryItemUnlink.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemUnlink.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemUnlink.messages) === "undefined")
	{
		BX.CrmHistoryItemUnlink.messages = {};
	}
	BX.CrmHistoryItemUnlink.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemUnlink();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemEmail) === "undefined")
{
	BX.CrmHistoryItemEmail = function()
	{
		BX.CrmHistoryItemEmail.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemEmail, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemEmail.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());

		var entityData = this.getAssociatedEntityData();
		var emailInfo =  BX.prop.getObject(entityData, "EMAIL_INFO", null);
		var statusText = emailInfo !== null ? BX.prop.getString(emailInfo, "STATUS_TEXT", "") : "";
		var error = emailInfo !== null? BX.prop.getBoolean(emailInfo, "STATUS_ERROR", false) : false;
		var className = !error? "crm-entity-stream-content-event-skipped" : "crm-entity-stream-content-event-missing";
		if(statusText !== "")
		{
			header.appendChild(
				BX.create(
					"SPAN",
					{
						props: { className: className},
						text: statusText
					}
				)
			);
		}

		var markNode = this.prepareMarkLayout();
		if(markNode)
		{
			header.appendChild(markNode);
		}

		header.appendChild(this.prepareTimeLayout());
		return header;
	};
	BX.CrmHistoryItemEmail.prototype.prepareContextMenuItems = function ()
	{
		if (this._isMenuShown)
		{
			return;
		}

		var menuItems = [];

		if (!this.isReadOnly())
		{
			menuItems.push({id: "view", text: this.getMessage("menuView"), onclick: BX.delegate(this.view, this)});

			menuItems.push({ id: "remove", text: this.getMessage("menuDelete"), onclick: BX.delegate(this.processRemoval, this)});

			if (this.isFixed() || this._fixedHistory.findItemById(this._id))
				menuItems.push({ id: "unfasten", text: this.getMessage("menuUnfasten"), onclick: BX.delegate(this.unfasten, this)});
			else
				menuItems.push({ id: "fasten", text: this.getMessage("menuFasten"), onclick: BX.delegate(this.fasten, this)});
		}

		return menuItems;
	};
	BX.CrmHistoryItemEmail.prototype.reply = function ()
	{
	};
	BX.CrmHistoryItemEmail.prototype.replyAll = function ()
	{
	};
	BX.CrmHistoryItemEmail.prototype.forward = function ()
	{
	};
	BX.CrmHistoryItemEmail.prototype.getRemoveMessage = function()
	{
		var title = BX.util.htmlspecialchars(this.getTitle());
		return this.getMessage('emailRemove').replace("#TITLE#", title);
	};
	BX.CrmHistoryItemEmail.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "VALUE", "");

		var outerWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-email" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-email" }
				}
			)
		);

		if (this.isFixed())
			BX.addClass(outerWrapper, 'crm-entity-stream-section-top-fixed');

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [ wrapper ]
				}
			)
		);

		//Header
		var header = this.prepareHeaderLayout();
		wrapper.appendChild(header);

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		//Details
		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-email" }
			}
		);
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: [ detailWrapper ]
				}
			)
		);

		//TODO: Add status text
		/*
		detailWrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-email-read-status" } })
		);
		*/

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-email-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		var communicationWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-content-detail-email-to" } }
		);
		detailWrapper.appendChild(communicationWrapper);

		//Communications
		if(communicationTitle !== "")
		{
			if(communicationShowUrl !== "")
			{
				communicationWrapper.appendChild(
					BX.create("A",
						{
							attrs: { href: communicationShowUrl },
							text: communicationTitle
						}
					)
				);
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		if(communicationValue !== "")
		{
			if(communicationTitle !== "")
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: " " }));
			}
			communicationWrapper.appendChild(
				BX.create(
					"SPAN",
					{
						attrs: { className: "crm-entity-stream-content-detail-email-address" },
						text: communicationValue
					}
				)
			);
		}

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-email-fragment" },
					children: this.prepareCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			wrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		wrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			wrapper.appendChild(this.prepareFixedSwitcherLayout());

		return outerWrapper;
	};
	BX.CrmHistoryItemEmail.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmHistoryEmailAction.create(
				"email",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor
				}
			)
		);
	};
	BX.CrmHistoryItemEmail.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemEmail.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemEmail();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemCall) === "undefined")
{
	BX.CrmHistoryItemCall = function()
	{
		BX.CrmHistoryItemCall.superclass.constructor.apply(this);
		this._playerDummyClickHandler = BX.delegate(this.onPlayerDummyClick, this);
		this._playerWrapper = null;
		this._transcriptWrapper = null;
		this._mediaFileInfo = null;
	};
	BX.extend(BX.CrmHistoryItemCall, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemCall.prototype.getTypeDescription = function()
	{
		var entityData = this.getAssociatedEntityData();
		var callInfo =  BX.prop.getObject(entityData, "CALL_INFO", null);
		var callTypeText = callInfo !== null ? BX.prop.getString(callInfo, "CALL_TYPE_TEXT", "") : "";
		if(callTypeText !== "")
		{
			return callTypeText;
		}

		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
		
		let type = '';
		if(direction == 1)
			type = 'incomingCall';
		if(direction == 2)
			type = 'outgoingCall';
		if(direction == 3)
			type = 'personalincomingCall';
		if(direction == 4)
			type = 'personaloutgoingCall';
		if(direction == 5)
			type = 'corpincomingCall';
		if(direction == 6)
			type = 'corpoutgoingCall';
		
		return this.getMessage(type);//this.getMessage(direction === BX.CrmActivityDirection.incoming ? "incomingCall" : "outgoingCall");
	};
	BX.CrmHistoryItemCall.prototype.prepareHeaderLayout = function()
	{
		
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());

		//Position is important
		var entityData = this.getAssociatedEntityData();
		var callInfo =  BX.prop.getObject(entityData, "CALL_INFO", null);
		var hasCallInfo = callInfo !== null;
		var isSuccessfull = hasCallInfo ? BX.prop.getBoolean(callInfo, "SUCCESSFUL", false) : false;
		var statusText = hasCallInfo ? BX.prop.getString(callInfo, "STATUS_TEXT", "") : "";
		console.log('prepareHeaderLayout: '+statusText);
		console.log(callInfo);
		if(hasCallInfo && statusText.length)
		{
			header.appendChild(
				BX.create("DIV",
					{
						attrs:
							{
								className: isSuccessfull
									? "crm-entity-stream-content-event-successful"
									: "crm-entity-stream-content-event-missing"
							},
						text: statusText
					}
				)
			);
		}

		header.appendChild(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		);

		return header;
	};
	BX.CrmHistoryItemCall.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "VALUE", "");
		var communicationValueFormatted = BX.prop.getString(communication, "FORMATTED_VALUE", communicationValue);

		var callInfo =  BX.prop.getObject(entityData, "CALL_INFO", null);
		var hasCallInfo = callInfo !== null;
		var durationText = hasCallInfo ? BX.prop.getString(callInfo, "DURATION_TEXT", "") : "";
		var hasTranscript = hasCallInfo ? BX.prop.getBoolean(callInfo, "HAS_TRANSCRIPT", "") : "";
		var isTranscriptPending = hasCallInfo ? BX.prop.getBoolean(callInfo, "TRANSCRIPT_PENDING", "") : "";
		var callId = hasCallInfo ? BX.prop.getString(callInfo, "CALL_ID", "") : "";
		var callComment = hasCallInfo ? BX.prop.getString(callInfo, "COMMENT", "") : "";

		var outerWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-call" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-call" }
				}
			)
		);

		if (this.isFixed())
			BX.addClass(outerWrapper, 'crm-entity-stream-section-top-fixed');

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [ wrapper ]
				}
			)
		);

		//Header
		var header = this.prepareHeaderLayout();
		wrapper.appendChild(header);

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		//Details
		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" }
			}
		);
		wrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					children: this.prepareMultilineCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		if(hasCallInfo)
		{
			var callInfoWrapper = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-call crm-entity-stream-content-detail-call-inline" }
				}
			);
			detailWrapper.appendChild(callInfoWrapper);

			this._mediaFileInfo = BX.prop.getObject(entityData, "MEDIA_FILE_INFO", null);
			if(this._mediaFileInfo !== null)
			{
				this._playerWrapper = this._history.getManager().renderAudioDummy(durationText, this._playerDummyClickHandler);
				callInfoWrapper.appendChild(
					this._playerWrapper
				);
				callInfoWrapper.appendChild(this._history.getManager().getAudioPlaybackRateSelector().render());
			}

			if(hasTranscript)
			{
				this._transcriptWrapper = BX.create("DIV",
					{
						attrs: { className: "crm-audio-transcript-wrap-container"},
						events: {
							click: function(e)
							{
								if(BX.Voximplant && BX.Voximplant.Transcript)
								{
									BX.Voximplant.Transcript.create({
										callId: callId
									}).show();
								}
							}
						},
						children: [
							BX.create("DIV", { attrs: { className: "crm-audio-transcript-icon"}	}),
							BX.create("DIV", { attrs: { className: "crm-audio-transcript-conversation"}, text: BX.message("CRM_TIMELINE_CALL_TRANSCRIPT") } )
						]
					}
				);
				callInfoWrapper.appendChild(this._transcriptWrapper);
			}
			else if(isTranscriptPending)
			{
				this._transcriptWrapper = BX.create("DIV",
					{
						attrs: { className: "crm-audio-transcript-wrap-container-pending"},
						children: [
							BX.create("DIV", { attrs: { className: "crm-audio-transcript-icon-pending"}, html: '<svg class="crm-transcript-loader-circular" viewBox="25 25 50 50"><circle class="crm-transcript-loader-path" cx="50" cy="50" r="20" fill="none" stroke-miterlimit="10"></circle></svg>'}),
							BX.create("DIV", { attrs: { className: "crm-audio-transcript-conversation"}, text: BX.message("CRM_TIMELINE_CALL_TRANSCRIPT_PENDING") } )
						]
					}
				);
				callInfoWrapper.appendChild(this._transcriptWrapper);
			}

			if(callComment)
			{
				detailWrapper.appendChild(BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-description"},
						text: callComment
					}
				));
			}
		}
		var communicationWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-contact-info" }
			}
		);
		detailWrapper.appendChild(communicationWrapper);

		//Communications
		if(communicationTitle !== "")
		{
			if(communicationShowUrl !== "")
			{
				communicationWrapper.appendChild(
					BX.create("A",
						{
							attrs: { href: communicationShowUrl },
							text: communicationTitle
						}
					)
				);
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		if(communicationValueFormatted !== "")
		{
			if(communicationTitle !== "")
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: " " }));
			}
			communicationWrapper.appendChild(
				BX.create(
					"SPAN",
					{
						attrs: { className: "crm-entity-stream-content-detail-email-address" },
						text: communicationValueFormatted
					}
				)
			);
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			wrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		wrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			wrapper.appendChild(this.prepareFixedSwitcherLayout());

		return outerWrapper;
	};
	BX.CrmHistoryItemCall.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmHistoryCallAction.create(
				"call",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor,
					ownerInfo: this._history.getOwnerInfo()
				}
			)
		);
	};
	BX.CrmHistoryItemCall.prototype.getRemoveMessage = function()
	{
		var entityData = this.getAssociatedEntityData();
		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
		var messageName =  'getRemoveMessage';//(direction === BX.CrmActivityDirection.incoming) ? 'incomingCallRemove' : 'outgoingCallRemove';
		var title = BX.util.htmlspecialchars(this.getTitle());
		return this.getMessage(messageName).replace("#TITLE#", title);
	};
	BX.CrmHistoryItemCall.prototype.onPlayerDummyClick = function(e)
	{
		var stubNode = this._playerWrapper.querySelector(".crm-audio-cap-wrap");
		if(stubNode)
		{
			BX.addClass(stubNode, "crm-audio-cap-wrap-loader");
		}

		this._history.getManager().getAudioPlaybackRateSelector().addPlayer(this._history.getManager().loadMediaPlayer(
			"history_" + this.getId(),
			this._mediaFileInfo["URL"],
			this._mediaFileInfo["TYPE"],
			this._playerWrapper,
			this._mediaFileInfo["DURATION"],
			{
				playbackRate: this._history.getManager().getAudioPlaybackRateSelector().getRate()
			}
		));
	};
	BX.CrmHistoryItemCall.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemCall();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemMeeting) === "undefined")
{
	BX.CrmHistoryItemMeeting = function()
	{
		BX.CrmHistoryItemMeeting.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemMeeting, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemMeeting.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());

		var markNode = this.prepareMarkLayout();
		if(markNode)
		{
			header.appendChild(markNode);
		}

		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemMeeting.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "VALUE", "");

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-meeting" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-meeting" } })
		);

		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					children: this.prepareCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		var communicationWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-contact-info" } } );
		detailWrapper.appendChild(communicationWrapper);

		if(communicationTitle !== '')
		{
			communicationWrapper.appendChild(
				BX.create("SPAN",
					{ text: this.getMessage("reciprocal") + ": " }
				)
			);

			if(communicationShowUrl !== '')
			{
				communicationWrapper.appendChild(BX.create("A", { attrs: { href: communicationShowUrl }, text: communicationTitle }));
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		communicationWrapper.appendChild(BX.create("SPAN", { text: " " + communicationValue }));

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemMeeting.prototype.getRemoveMessage = function()
	{
		var title = BX.util.htmlspecialchars(this.getTitle());
		return this.getMessage('meetingRemove').replace("#TITLE#", title);
	};
	BX.CrmHistoryItemMeeting.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemMeeting.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemMeeting.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemMeeting();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemTask) === "undefined")
{
	BX.CrmHistoryItemTask = function()
	{
		BX.CrmHistoryItemTask.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemTask, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemTask.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());

		var markNode = this.prepareMarkLayout();
		if(markNode)
		{
			header.appendChild(markNode);
		}

		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemTask.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-task" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-task" } })
		);

		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					children: this.prepareCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		var communicationWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-contact-info" } } );
		detailWrapper.appendChild(communicationWrapper);

		if(communicationTitle !== '')
		{
			communicationWrapper.appendChild(
				BX.create("SPAN",
					{ text: this.getMessage("reciprocal") + ": " }
				)
			);

			if(communicationShowUrl !== '')
			{
				communicationWrapper.appendChild(BX.create("A", { attrs: { href: communicationShowUrl }, text: communicationTitle }));
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemTask.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemTask.prototype.getRemoveMessage = function()
	{
		var title = BX.util.htmlspecialchars(this.getTitle());
		return this.getMessage('taskRemove').replace("#TITLE#", title);
	};
	BX.CrmHistoryItemTask.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemTask.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemTask();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemWebForm) === "undefined")
{
	BX.CrmHistoryItemWebForm = function()
	{
		BX.CrmHistoryItemWebForm.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemWebForm, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemWebForm.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemWebForm.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-crmForm" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-crmForm" } })
		);

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemWebForm.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemWebForm.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemWebForm.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemWebForm();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemWait) === "undefined")
{
	BX.CrmHistoryItemWait = function()
	{
		BX.CrmHistoryItemWait.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemWait, BX.CrmHistoryItem);
	BX.CrmHistoryItemWait.prototype.getTitle = function()
	{
		return this.getMessage("wait");
	};
	BX.CrmHistoryItemWait.prototype.prepareTitleLayout = function()
	{
		return BX.create("SPAN", {
			attrs:{ className: "crm-entity-stream-content-event-title"},
			children: [
				BX.create("A", {
					attrs: { href: "#" },
					events: { "click": this._headerClickHandler },
					text: this.getTitle()
				})
			]
		});


	};
	BX.CrmHistoryItemWait.prototype.prepareTimeLayout = function()
	{
		return BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		);
	};
	BX.CrmHistoryItemWait.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemWait.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();
		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			description = BX.util.trim(description);
			description = BX.util.strip_tags(description);
			description = BX.util.nl2br(description);
		}

		var wrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-wait" }
			}
		);

		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-complete" }
				}
			)
		);

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" },
				html: description
			}
		);
		contentWrapper.appendChild(detailWrapper);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemWait.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemWait.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemWait.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemWait();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemDocument) === "undefined")
{
	BX.CrmHistoryItemDocument = function()
	{
		BX.CrmHistoryItemDocument.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemDocument, BX.CrmHistoryItem);
	BX.CrmHistoryItemDocument.prototype.getTitle = function()
	{
		var typeCategoryId = BX.prop.getInteger(this._data, "TYPE_CATEGORY_ID", 0);
		if(typeCategoryId === 3)
		{
			return BX.Loc.getMessage('CRM_TIMELINE_DOCUMENT_VIEWED');
		}

		return this.getMessage("document");
	};
	BX.CrmHistoryItemDocument.prototype.prepareTitleLayout = function()
	{
		return BX.create("SPAN", {
			attrs:{ className: "crm-entity-stream-content-event-title"},
			children: [
				BX.create("A", {
					attrs: { href: "#" },
					events: { "click": BX.delegate(this.editDocument, this) },
					text: this.getTitle()
				})
			]
		});
	};
	BX.CrmHistoryItemDocument.prototype.prepareTitleStatusLayout = function()
	{
		var typeCategoryId = BX.prop.getInteger(this._data, "TYPE_CATEGORY_ID", 0);
		if(typeCategoryId === 3)
		{
			return BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-done" },
					text: BX.Loc.getMessage('CRM_TIMELINE_DOCUMENT_VIEWED_STATUS')
				}
			);
		}
		if(typeCategoryId === 2)
		{
			return BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-sent" },
					text: BX.Loc.getMessage('CRM_TIMELINE_DOCUMENT_CREATED_STATUS')
				}
			);
		}

		return null;
	};
	BX.CrmHistoryItemDocument.prototype.prepareTimeLayout = function()
	{
		return BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		);
	};
	BX.CrmHistoryItemDocument.prototype.isContextMenuEnabled = function()
	{
		var typeCategoryId = BX.prop.getInteger(this._data, "TYPE_CATEGORY_ID", 0);

		return typeCategoryId !== 3;
	};
	BX.CrmHistoryItemDocument.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		var statusLayout = this.prepareTitleStatusLayout();
		if(statusLayout)
		{
			header.appendChild(statusLayout);
		}
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemDocument.prototype.prepareContent = function()
	{
		var text = this.getTextDataParam("COMMENT", "");

		var wrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-document" }
			}
		);

		if(this.isFixed())
		{
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');
		}

		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-document" }
				}
			)
		);

		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}

		if(!this.isReadOnly())
		{
			wrapper.appendChild(this.prepareFixedSwitcherLayout());
		}

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" },
				html: text
			}
		);
		var title = BX.findChildByClassName(detailWrapper, 'document-title-link');
		if(title)
		{
			BX.bind(title, 'click', BX.proxy(this.editDocument, this));
		}
		contentWrapper.appendChild(detailWrapper);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemDocument.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemDocument.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemDocument.prototype.prepareContextMenuItems = function()
	{
		if(this._isMenuShown)
		{
			return;
		}

		var menuItems = [];

		if(!this.isReadOnly())
		{
			menuItems.push({ id: "edit", text: this.getMessage("menuEdit"), onclick: BX.delegate(this.editDocument, this)});
			menuItems.push({ id: "remove", text: this.getMessage("menuDelete"), onclick: BX.delegate(this.confirmDelete, this)});

			if (this.isFixed() || this._fixedHistory.findItemById(this._id))
			{
				menuItems.push({ id: "unfasten", text: this.getMessage("menuUnfasten"), onclick: BX.delegate(this.unfasten, this)});
			}
			else
			{
				menuItems.push({ id: "fasten", text: this.getMessage("menuFasten"), onclick: BX.delegate(this.fasten, this)});
			}
		}

		return menuItems;
	};
	BX.CrmHistoryItemDocument.prototype.confirmDelete = function()
	{
		this.closeContextMenu();
		this._detetionConfirmDlgId = "entity_timeline_deletion_" + this.getId() + "_confirm";
		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("removeConfirmTitle"),
					content: this.getMessage('documentRemove')
				}
			);
		}

		dlg.open().then(BX.delegate(this.onConfirmDelete, this), BX.DoNothing);
	};
	BX.CrmHistoryItemDocument.prototype.onConfirmDelete = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this.deleteDocument();
	};
	BX.CrmHistoryItemDocument.prototype.deleteDocument = function()
	{
		if(this._isRequestRunning)
		{
			return;
		}
		this._isRequestRunning = true;
		BX.ajax(
			{
				url: this._history._serviceUrl,
				method: "POST",
				dataType: "json",
				data:
					{
						"ACTION": "DELETE_DOCUMENT",
						"OWNER_TYPE_ID":  this.getOwnerTypeId(),
						"OWNER_ID": this.getOwnerId(),
						"ID": this.getId()
					},
				onsuccess: BX.delegate(function(result)
				{
					this._isRequestRunning = false;
					if(BX.type.isNotEmptyString(result.ERROR))
					{
						alert(result.ERROR);
					}
					else
					{
						var deleteItem = this._history.findItemById(this._id);
						if (deleteItem instanceof BX.CrmHistoryItemDocument)
						{
							deleteItem.clearAnimate();
						}

						var deleteFixedItem = this._fixedHistory.findItemById(this._id);
						if (deleteFixedItem instanceof BX.CrmHistoryItemDocument)
						{
							deleteFixedItem.clearAnimate();
						}
					}
				}, this),
				onfailure: BX.delegate(function()
				{
					this._isRequestRunning = false;
				}, this)
			}
		);
	};
	BX.CrmHistoryItemDocument.prototype.editDocument = function()
	{
		var documentId = this.getData().DOCUMENT_ID || 0;
		if(documentId > 0)
		{
			var url = '/bitrix/components/bitrix/crm.document.view/slider.php';
			url = BX.util.add_url_param(url, {documentId: documentId});
			if(BX.SidePanel)
			{
				BX.SidePanel.Instance.open(url, {width: 980});
			}
			else
			{
				top.location.href = url;
			}
		}
	};
	BX.CrmHistoryItemDocument.prototype.updateWrapper = function()
	{
		var wrapper = this.getWrapper();
		if(wrapper)
		{
			var detailWrapper = BX.findChildByClassName(wrapper, 'crm-entity-stream-content-detail');
			if(detailWrapper)
			{
				BX.adjust(detailWrapper, {html: this.getTextDataParam("COMMENT", "")});
				var title = BX.findChildByClassName(detailWrapper, 'document-title-link');
				if(title)
				{
					BX.bind(title, 'click', BX.proxy(this.editDocument, this));
				}
			}
		}
	};
	BX.CrmHistoryItemDocument.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemDocument();
		self.initialize(id, settings);
		return self;
	};
};

if(typeof(BX.CrmHistoryItemSender) === "undefined")
{
	BX.CrmHistoryItemSender = function()
	{
		BX.CrmHistoryItemSender.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemSender, BX.CrmHistoryItem);
	BX.CrmHistoryItemSender.prototype.getDataSetting = function(name)
	{
		var settings = this.getObjectDataParam('SETTINGS') || {};
		return settings[name] || null;
	};
	BX.CrmHistoryItemSender.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemSender.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.CrmHistoryItemSender.prototype.getTitle = function()
	{
		return this.getDataSetting('messageName');
	};
	BX.CrmHistoryItemSender.prototype.prepareTitleLayout = function()
	{
		var self = this;
		return BX.create("SPAN", {
			attrs:{ className: "crm-entity-stream-content-event-title"},
			children: [
				this.isRemoved()
					?
					BX.create("SPAN", {text: this.getTitle()})
					:
					BX.create("A", {
						attrs: {
							href: ""
						},
						events: {
							"click": function (e)
							{
								if (BX.SidePanel)
								{
									BX.SidePanel.Instance.open(self.getDataSetting('path'));
								}
								else
								{
									top.location.href = self.getDataSetting('path');
								}

								e.preventDefault();
								e.stopPropagation();
							}
						},
						text: this.getTitle()
					})
			]
		});


	};
	BX.CrmHistoryItemSender.prototype.prepareTimeLayout = function()
	{
		return BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		);
	};
	BX.CrmHistoryItemSender.prototype.prepareStatusLayout = function()
	{
		var layoutClassName, textCaption;
		if (this.getDataSetting('isError'))
		{
			textCaption = this.getMessage('error');
			layoutClassName = "crm-entity-stream-content-event-missing";
		}
		else if (this.getDataSetting('isUnsub'))
		{
			textCaption = this.getMessage('unsub');
			layoutClassName = "crm-entity-stream-content-event-missing";
		}
		else if (this.getDataSetting('isClick'))
		{
			textCaption = this.getMessage('click');
			layoutClassName = "crm-entity-stream-content-event-successful";
		}
		else
		{
			textCaption = this.getMessage('read');
			layoutClassName = "crm-entity-stream-content-event-skipped";
		}

		return BX.create("SPAN", {attrs: {className: layoutClassName}, text: textCaption});
	};
	BX.CrmHistoryItemSender.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		if (this.getDataSetting('isError') || this.getDataSetting('isRead') || this.getDataSetting('isUnsub'))
		{
			header.appendChild(this.prepareStatusLayout());
		}
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemSender.prototype.isRemoved = function()
	{
		return !this.getDataSetting('letterTitle');
	};
	BX.CrmHistoryItemSender.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();
		var description = this.isRemoved() ? this.getMessage('removed') : this.getMessage('title') + ': ' + this.getDataSetting('letterTitle');

		var wrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-wait" }
			}
		);

		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-complete" }
				}
			)
		);

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" },
				html: description
			}
		);
		contentWrapper.appendChild(detailWrapper);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemSender.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemSender();
		self.initialize(id, settings);
		return self;
	};
}


if(typeof(BX.CrmHistoryItemBizproc) === "undefined")
{
	BX.CrmHistoryItemBizproc = function()
	{
		BX.CrmHistoryItemBizproc.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemBizproc, BX.CrmHistoryItem);
	BX.CrmHistoryItemBizproc.prototype.getTitle = function()
	{
		return this.getMessage("bizproc");
	};
	BX.CrmHistoryItemBizproc.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-bp" }
			}
		);

		wrapper.appendChild(
			BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-bp" } }
			)
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = this.prepareHeaderLayout();

		content.appendChild(header);
		content.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children:
						[
							BX.create("DIV",
								{
									attrs: { className: "crm-entity-stream-content-detail-description" },
									html: this.prepareContentTextHtml()
								}
							)
						]
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};
	BX.CrmHistoryItemBizproc.prototype.prepareContentTextHtml = function()
	{
		var type = this.getTextDataParam("TYPE");
		if (type === 'ACTIVITY_ERROR')
		{
			return '<strong>#TITLE#</strong>: #ERROR_TEXT#'
				.replace('#TITLE#', BX.util.htmlspecialchars(this.getTextDataParam("ACTIVITY_TITLE")))
				.replace('#ERROR_TEXT#', BX.util.htmlspecialchars(this.getTextDataParam("ERROR_TEXT")))
		}

		var workflowName = this.getTextDataParam("WORKFLOW_TEMPLATE_NAME");
		var workflowStatus = this.getTextDataParam("WORKFLOW_STATUS_NAME");
		if (!workflowName
			|| workflowStatus !== 'Created' && workflowStatus !== 'Completed' && workflowStatus !== 'Terminated'
		)
		{
			return BX.util.htmlspecialchars(this.getTextDataParam("COMMENT"));
		}

		var label = BX.message('CRM_TIMELINE_BIZPROC_CREATED');
		if (workflowStatus === 'Completed')
		{
			label = BX.message('CRM_TIMELINE_BIZPROC_COMPLETED');
		}
		else if (workflowStatus === 'Terminated')
		{
			label = BX.message('CRM_TIMELINE_BIZPROC_TERMINATED');
		}

		return BX.util.htmlspecialchars(label)
			.replace('#NAME#', '<strong>' + BX.util.htmlspecialchars(workflowName) + '</strong>');
	};
	BX.CrmHistoryItemBizproc.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemBizproc();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemSms) === "undefined")
{
	BX.CrmHistoryItemSms = function()
	{
		BX.CrmHistoryItemSms.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemSms, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemSms.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareMessageStatusLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemSms.prototype.prepareMessageStatusLayout = function()
	{
		return this._messageStatusNode = BX.create("SPAN");
	};
	BX.CrmHistoryItemSms.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "VALUE", "");
		var smsInfo = BX.prop.getObject(entityData, "SMS_INFO", {});

		var wrapperClassName = "crm-entity-stream-section-sms";
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history" + " " + wrapperClassName } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-sms" } })
		);

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		var messageWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-sms" } });

		if (smsInfo.senderId)
		{
			var senderId = smsInfo.senderId;
			var senderName = smsInfo.senderShortName;
			if (senderId === 'rest' && smsInfo.fromName)
			{
				senderName = smsInfo.fromName;
			}

			var messageSenderWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-sms-status"},
				children: [
					BX.message('CRM_TIMELINE_SMS_SENDER')+' ',
					BX.create('STRONG', {text: senderName})
				]
			});
			if (senderId !== 'rest' && smsInfo.fromName)
			{
				messageSenderWrapper.innerHTML += ' '+BX.message('CRM_TIMELINE_SMS_FROM')+' ';
				messageSenderWrapper.appendChild(BX.create('STRONG', {text: smsInfo.fromName}));
			}
			messageWrapper.appendChild(messageSenderWrapper);
		}

		if (smsInfo.statusId !== '')
		{
			this.setMessageStatus(smsInfo.statusId, smsInfo.errorText);
		}

		var bodyText = BX.util.htmlspecialchars(entityData['DESCRIPTION_RAW']).replace(/\r\n|\r|\n/g, "<br/>");
		var messageBodyWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-sms-fragment" } });
		messageBodyWrapper.appendChild(BX.create('SPAN', {html: bodyText}));

		messageWrapper.appendChild(messageBodyWrapper);
		detailWrapper.appendChild(messageWrapper);

		var communicationWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-contact-info" },
			text: BX.message('CRM_TIMELINE_SMS_TO')+' '} );
		detailWrapper.appendChild(communicationWrapper);

		if(communicationTitle !== '')
		{
			if(communicationShowUrl !== '')
			{
				communicationWrapper.appendChild(BX.create("A", { attrs: { href: communicationShowUrl }, text: communicationTitle }));
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		communicationWrapper.appendChild(BX.create("SPAN", { text: " " + communicationValue }));

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemSms.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemSms.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemSms.prototype.setMessageStatus = function(status, errorText)
	{
		status = parseInt(status);
		if (isNaN(status) || !this._messageStatusNode)
			return;

		var statuses = this.getSetting('smsStatusDescriptions', {});
		if (statuses.hasOwnProperty(status))
		{
			this._messageStatusNode.textContent = statuses[status];
			this.setMessageStatusErrorText(errorText);

			var statusSemantic = this.getMessageStatusSemantic(status);
			this.setMessageStatusSemantic(statusSemantic);
		}
	};
	BX.CrmHistoryItemSms.prototype.setMessageStatusSemantic = function(semantic)
	{
		var classMap =
		{
			process: 'crm-entity-stream-content-event-process',
			success: 'crm-entity-stream-content-event-successful',
			failure: 'crm-entity-stream-content-event-missing'
		};

		for (var checkSemantic in classMap)
		{
			var fn = (checkSemantic === semantic) ? 'addClass' : 'removeClass';
			BX[fn](this._messageStatusNode, classMap[checkSemantic]);
		}
	};
	BX.CrmHistoryItemSms.prototype.setMessageStatusErrorText = function(errorText)
	{
		if (!errorText)
		{
			this._messageStatusNode.removeAttribute('title');
			BX.removeClass(this._messageStatusNode,'crm-entity-stream-content-event-error-tip');
		}
		else
		{
			this._messageStatusNode.setAttribute('title', errorText);
			BX.addClass(this._messageStatusNode,'crm-entity-stream-content-event-error-tip');
		}
	};
	BX.CrmHistoryItemSms.prototype.getMessageStatusSemantic = function(status)
	{
		var semantics = this.getSetting('smsStatusSemantics', {});
		return semantics.hasOwnProperty(status) ? semantics[status] : 'failure';
	};

	BX.CrmHistoryItemSms.prototype.subscribe = function()
	{
		if (!BX.CrmSmsWatcher)
			return;

		var entityData = this.getAssociatedEntityData();
		var smsInfo = BX.prop.getObject(entityData, "SMS_INFO", {});

		if (smsInfo.id)
		{
			BX.CrmSmsWatcher.subscribeOnMessageUpdate(
				smsInfo.id,
				this.onMessageUpdate.bind(this)
			);
		}
	};
	BX.CrmHistoryItemSms.prototype.onMessageUpdate = function(message)
	{
		if (message.STATUS_ID)
		{
			this.setMessageStatus(message.STATUS_ID, message.EXEC_ERROR);
		}
	};

	BX.CrmHistoryItemSms.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemSms();
		self.initialize(id, settings);
		self.subscribe();
		return self;
	};
}

if(typeof(BX.CrmHistoryItemActivityRequest) === "undefined")
{
	BX.CrmHistoryItemActivityRequest = function()
	{
		BX.CrmHistoryItemActivityRequest.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemActivityRequest, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemActivityRequest.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemActivityRequest.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
			{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
					}

		//var entityData = this.getAssociatedEntityData();
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-today crm-entity-stream-section-robot" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-robot" } })
		);
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { "click": this._headerClickHandler },
									text: this.getTitle()
								}
							)
						]
				}
			)
		);

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					children: this.prepareCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemActivityRequest.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemActivityRequest.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemActivityRequest.prototype.isEditable = function()
	{
		return false;
	};
	BX.CrmHistoryItemActivityRequest.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemActivityRequest();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemActivityRestApplication) === "undefined")
{
	BX.CrmHistoryItemActivityRestApplication = function()
	{
		BX.CrmHistoryItemActivityRestApplication.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemActivityRestApplication, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemActivityRestApplication.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemActivityRestApplication.prototype.getTypeDescription = function()
	{
		var entityData = this.getAssociatedEntityData();
		if (entityData['APP_TYPE'] && entityData['APP_TYPE']['NAME'])
		{
			return entityData['APP_TYPE']['NAME'];
		}

		return BX.CrmHistoryItemActivityRestApplication.superclass.getTypeDescription.apply(this);
	};
	BX.CrmHistoryItemActivityRestApplication.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		//var entityData = this.getAssociatedEntityData();
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-today crm-entity-stream-section-rest" } });

		var iconNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-rest" } });

		wrapper.appendChild(iconNode);

		if (entityData['APP_TYPE'] && entityData['APP_TYPE']['ICON_SRC'])
		{
			if (iconNode)
			{
				iconNode.style.backgroundImage = "url('" +  entityData['APP_TYPE']['ICON_SRC'] + "')";
				iconNode.style.backgroundPosition = "center center";
			}
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { "click": this._headerClickHandler },
									text: this.getTitle()
								}
							)
						]
				}
			)
		);

		//Content
		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					children: this.prepareCutOffElements(description, 128, this._headerClickHandler)
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemActivityRestApplication.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemActivityRestApplication.prototype.showActions = function(show)
	{
		if(this._actionContainer)
		{
			this._actionContainer.style.display = show ? "" : "none";
		}
	};
	BX.CrmHistoryItemActivityRestApplication.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemActivityRestApplication();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemOpenLine) === "undefined")
{
	BX.CrmHistoryItemOpenLine = function()
	{
		BX.CrmHistoryItemOpenLine.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemOpenLine, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemOpenLine.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemOpenLine.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-IM" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-IM" } })
		);

		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-title" },
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: this.getTitle()
							}
						)
					]
				}
			)
		);

		//Content
		var entityDetailWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-content-detail-IM" } }
		);
		detailWrapper.appendChild(entityDetailWrapper);

		var messageWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-content-detail-IM-messages" } }
		);
		entityDetailWrapper.appendChild(messageWrapper);

		var openLineData = BX.prop.getObject(this.getAssociatedEntityData(), "OPENLINE_INFO", null);
		if(openLineData)
		{
			var messages = BX.prop.getArray(openLineData, "MESSAGES", []);
			for(var i = 0, length = messages.length; i < length; i++)
			{
				var message = messages[i];
				var isExternal = BX.prop.getBoolean(message, "IS_EXTERNAL", true);

				messageWrapper.appendChild(
					BX.create("DIV",
						{
							attrs:
							{
								className: isExternal
							        ? "crm-entity-stream-content-detail-IM-message-incoming"
								    : "crm-entity-stream-content-detail-IM-message-outgoing"
							},
							text: BX.prop.getString(message, "MESSAGE", "")
						}
					)
				);
			}
		}


		var communicationWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-contact-info" } } );
		detailWrapper.appendChild(communicationWrapper);

		if(communicationTitle !== '')
		{
			communicationWrapper.appendChild(
				BX.create("SPAN",
					{ text: this.getMessage("reciprocal") + ": " }
				)
			);

			if(communicationShowUrl !== '')
			{
				communicationWrapper.appendChild(BX.create("A", { attrs: { href: communicationShowUrl }, text: communicationTitle }));
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-action" } });
		contentWrapper.appendChild(this._actionContainer);
		//endregion

		if (!this.isReadOnly())
			contentWrapper.appendChild(this.prepareFixedSwitcherLayout());

		return wrapper;
	};
	BX.CrmHistoryItemOpenLine.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmHistoryOpenLineAction.create(
				"openline",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor,
					ownerInfo: this._history.getOwnerInfo()
				}
			)
		);
	};
	BX.CrmHistoryItemOpenLine.prototype.view = function()
	{
		if(typeof(window.top['BXIM']) === 'undefined')
		{
			window.alert(this.getMessage("openLineNotSupported"));
			return;
		}

		var slug = "";
		var communication = BX.prop.getObject(this.getAssociatedEntityData(), "COMMUNICATION", null);
		if(communication)
		{
			if(BX.prop.getString(communication, "TYPE") === "IM")
			{
				slug = BX.prop.getString(communication, "VALUE");
			}
		}

		if(slug !== "")
		{
			window.top['BXIM'].openMessengerSlider(slug, {RECENT: 'N', MENU: 'N'});
		}
	};
	BX.CrmHistoryItemOpenLine.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemOpenLine();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemZoom) === "undefined")
{
	BX.CrmHistoryItemZoom = function()
	{
		BX.CrmHistoryItemZoom.superclass.constructor.apply(this);

		this._videoDummy = null;
		this._audioDummy = null;
		this._videoPlayer = null;
		this._audioPlayer = null;
		this._audioLengthElement = null;
		this._recordings = [];
		this._currentRecordingIndex = 0;
		this.zoomActivitySubject = null;

		this._downloadWrapper = null;
		this._downloadSubject = null;
		this._downloadSubjectDetail = null;
		this._downloadVideoLink = null;
		this._downloadSeparator = null;
		this._downloadAudioLink = null;
		this._playVideoLink = null;
	};
	BX.extend(BX.CrmHistoryItemZoom, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemZoom.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());
		if (!this._data.hasOwnProperty('PROVIDER_DATA') || this._data["PROVIDER_DATA"]["ZOOM_EVENT_TYPE"] !== 'ZOOM_CONF_JOINED')
		{
			header.appendChild(this.prepareSuccessfulLayout());
		}
		header.appendChild(this.prepareTimeLayout());

		return header;
	};
	BX.CrmHistoryItemZoom.prototype.prepareSuccessfulLayout = function()
	{
		return BX.create("SPAN", {
			attrs:{ className: "crm-entity-stream-content-event-successful"},
			text: BX.message('CRM_TIMELINE_ZOOM_SUCCESSFUL_ACTIVITY')
		});
	};
	BX.CrmHistoryItemZoom.prototype.prepareTitleLayout = function()
	{
		if (this._data.hasOwnProperty('PROVIDER_DATA') && this._data["PROVIDER_DATA"]["ZOOM_EVENT_TYPE"] === 'ZOOM_CONF_JOINED')
		{
			return BX.create("SPAN", {
				attrs:{ className: "crm-entity-stream-content-event-title"},
				text: BX.message('CRM_TIMELINE_ZOOM_JOINED_CONFERENCE')
			});
		}
		else
		{
			return BX.create("SPAN", {
				attrs:{ className: "crm-entity-stream-content-event-title"},
				text: BX.message('CRM_TIMELINE_ZOOM_CONFERENCE_END')
			});
		}
	};
	BX.CrmHistoryItemZoom.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history" } });
		var entityDetailWrapper;
		var zoomData = BX.prop.getObject(this.getAssociatedEntityData(), "ZOOM_INFO", null);
		var subject = BX.prop.getString(this.getAssociatedEntityData(), "SUBJECT", null);

		this._recordings = BX.prop.getArray(zoomData, "RECORDINGS", []);

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-zoom" } })
		);

		if (this.isFixed())
			BX.addClass(wrapper, 'crm-entity-stream-section-top-fixed');

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [contentWrapper]
				}
			)
		);

		var header = this.prepareHeaderLayout();
		contentWrapper.appendChild(header);

		var detailWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail" } });
		contentWrapper.appendChild(detailWrapper);

		if (this._data.hasOwnProperty('PROVIDER_DATA') && this._data["PROVIDER_DATA"]["ZOOM_EVENT_TYPE"] === 'ZOOM_CONF_JOINED')
		{
			entityDetailWrapper = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					text: zoomData['CONF_URL']
				}
			);
		}
		else
		{
			entityDetailWrapper = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
				}
			);

			if (this._recordings.length > 0)
			{
				if (this._recordings.length > 1)
				{
					//render video parts header

					var tabs = this._recordings.map(function(recording, index)
					{
						return {
							id: index,
							title: BX.message("CRM_TIMELINE_ZOOM_MEETING_RECORD_PART").replace("#NUMBER#", index + 1),
							time: recording["AUDIO"] ? recording["AUDIO"]["LENGTH_FORMATTED"] : "",
							active: index === 0
						}
					});
					var tabsComponent = new BX.CrmHistoryItemZoom.TabsComponent({
						tabs: tabs,
					});
					tabsComponent.eventEmitter.subscribe("onTabChange", this._onTabChange.bind(this));
					detailWrapper.appendChild(tabsComponent.render());
				}

				this._videoDummy = BX.create("DIV",
					{
						props: { className: "crm-entity-stream-content-detail-zoom-video-wrap"},
						children: [
							BX.create("DIV",
								{
									props: { className: "crm-entity-stream-content-detail-zoom-video" },
									events:
										{
											click: this._onVideoDummyClick.bind(this)
										},
									children: [
										BX.create("DIV", {
											props: {className: "crm-entity-stream-content-detail-zoom-video-inner"},
											children: [
												BX.create("DIV", {
													props: {className: "crm-entity-stream-content-detail-zoom-video-btn"},
													dataset: {
														hint: BX.message("CRM_TIMELINE_ZOOM_LOGIN_REQUIRED"),
														'hintNoIcon': 'Y'
													}
												}),
												BX.create("SPAN", {
													props: {className: "crm-entity-stream-content-detail-zoom-video-text"},
													text: BX.message("CRM_TIMELINE_ZOOM_CLICK_TO_WATCH")
												})
											]
										})
									]
								}
							)
						]
					});

				BX.UI.Hint.init(this._videoDummy);

				this._audioDummy = this._history.getManager().renderAudioDummy("00:15", this._onAudioDummyClick.bind(this));
				this._audioLengthElement = this._audioDummy.querySelector('.crm-audio-cap-time');

				if (zoomData['RECORDINGS'][0]['VIDEO'])
				{
					//video download link with token valid for 24h
					var videoLinkExpireTS = (zoomData['RECORDINGS'][0]['VIDEO']['END_DATE_TS'] * 1000) + (60 * 60 * 23 * 1000);
					if (videoLinkExpireTS < Date.now())
					{
						var videoLinkContainer = BX.create("DIV", {
							props: {
								className: "crm-entity-stream-content-detail-zoom-desc",
							}
						});

						this._playVideoLink = BX.create("DIV", {
							html: BX.message("CRM_TIMELINE_ZOOM_PLAY_LINK_VIDEO"),
						});

						var detailZoomCopyVideoLink = BX.create("A",
							{
								attrs: {
									className: 'ui-link ui-link-dashed',
								},
								text: BX.message("CRM_TIMELINE_ZOOM_COPY_PASSWORD")
							}
						);

						BX.clipboard.bindCopyClick(detailZoomCopyVideoLink, {
							text: zoomData['RECORDINGS'][0]['VIDEO']['PASSWORD'],
						});

						videoLinkContainer.appendChild(this._playVideoLink);
						videoLinkContainer.appendChild(detailZoomCopyVideoLink);
						entityDetailWrapper.appendChild(videoLinkContainer);
					}
					else
					{
						entityDetailWrapper.appendChild(this._videoDummy);
					}
				}
				if (zoomData['RECORDINGS'][0]['AUDIO'])
				{
					var zoomAudioDetailWrapper = BX.create("DIV",
						{
							attrs: { className: "crm-entity-stream-content-detail-call crm-entity-stream-content-detail-call-inline" },
						}
					);

					zoomAudioDetailWrapper.appendChild(this._audioDummy);
					zoomAudioDetailWrapper.appendChild(this._history.getManager().getAudioPlaybackRateSelector().render());
					entityDetailWrapper.appendChild(zoomAudioDetailWrapper);
				}

				this._downloadWrapper = BX.create("DIV", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc"},
				});

				entityDetailWrapper.appendChild(this._downloadWrapper);

				this._downloadSubject = BX.create("SPAN", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc-subject"},
				});
				this._downloadSubjectDetail = BX.create("SPAN", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc-detail"},
				});
				this._downloadVideoLink = BX.create("A", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc-link"},
					text: BX.message("CRM_TIMELINE_ZOOM_DOWNLOAD_VIDEO")
				});
				this._downloadSeparator = BX.create("SPAN", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc-separate"},
					html: "&mdash;"
				});
				this._downloadAudioLink = BX.create("A", {
					props: {className: "crm-entity-stream-content-detail-zoom-desc-link"},
					text: BX.message("CRM_TIMELINE_ZOOM_DOWNLOAD_AUDIO")
				});
				this.setCurrentRecording(0);
			}
			else
			{
				this.zoomActivitySubject = BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-title" },
						children:
							[
								BX.create("A",
									{
										attrs: { href: "#" },
										events: { "click": this._headerClickHandler },
										text: subject
									}
								)
							]
					}
				);

				entityDetailWrapper.appendChild(this.zoomActivitySubject);

				if (zoomData['HAS_RECORDING'] === 'Y')
				{
					entityDetailWrapper.appendChild(BX.create("DIV", {
						props: {className: "crm-entity-stream-content-detail-zoom-video"},
						children: [
							BX.create("DIV", {
								props: {className: "crm-entity-stream-content-detail-zoom-video-inner"},
								children: [
									BX.create("DIV", {
										props: {className: "crm-entity-stream-content-detail-zoom-video-img"},
									}),
									BX.create("SPAN", {
										props: {className: "crm-entity-stream-content-detail-zoom-video-text"},
										text: BX.message("CRM_TIMELINE_ZOOM_MEETING_RECORD_IN_PROCESS")
									})
								]
							})
						]
					}));
				}
			}
		}
		/*else
		{
			detailWrapper.appendChild(BX.create("span", {text: "456"}));

			var entityDetailWrapper = BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					text: BX.prop.getString(zoomData, "CONF_URL", "")
				}
			);
		}*/
		//Content //todo


		if(entityDetailWrapper)
		{
			detailWrapper.appendChild(entityDetailWrapper);
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemZoom.prototype._onVideoDummyClick = function()
	{
		BX.UI.Hint.hide();
		var recording = this._recordings[this._currentRecordingIndex]["VIDEO"];
		if(!recording)
		{
			return;
		}
		this._videoPlayer = this._history.getManager().loadMediaPlayer(
			"zoom_video_" + this.getId(),
			recording["DOWNLOAD_URL"],
			"video/mp4",
			this._videoDummy,
			recording["LENGTH"],
			{
				video: true,
				skin: "",
				width: 480,
				height: 270
			}
		);
	};
	BX.CrmHistoryItemZoom.prototype._onAudioDummyClick = function()
	{
		var recording = this._recordings[this._currentRecordingIndex]["AUDIO"];
		if(!recording)
		{
			return;
		}
		this._history.getManager().getAudioPlaybackRateSelector().addPlayer(this._audioPlayer = this._history.getManager().loadMediaPlayer(
			"zoom_audio_" + this.getId(),
			recording["DOWNLOAD_URL"],
			"audio/mp4",
			this._audioDummy,
			recording["LENGTH"],
			{
				playbackRate: this._history.getManager().getAudioPlaybackRateSelector().getRate()
			}
		));
	};
	BX.CrmHistoryItemZoom.prototype._onTabChange = function(event)
	{
		this.setCurrentRecording(event.data.tabId);
	};
	BX.CrmHistoryItemZoom.prototype.setCurrentRecording = function(recordingIndex)
	{
		this._currentRecordingIndex = recordingIndex;
		var videoRecording = this._recordings[this._currentRecordingIndex]["VIDEO"];
		var audioRecording = this._recordings[this._currentRecordingIndex]["AUDIO"];

		if(videoRecording)
		{
			this._videoDummy.hidden = false;
			if(this._videoPlayer)
			{
				this._videoPlayer.pause();
				this._videoPlayer.setSource(videoRecording["DOWNLOAD_URL"]);
				this._downloadVideoLink.href = videoRecording["DOWNLOAD_URL"];
			}
		}
		else
		{
			this._videoDummy.hidden = true;
		}

		if(audioRecording)
		{
			this._audioDummy.hidden = false;
			if(this._audioPlayer)
			{
				this._audioPlayer.pause();
				this._audioPlayer.setSource(audioRecording["DOWNLOAD_URL"]);
			}
			this._downloadAudioLink.href = audioRecording["DOWNLOAD_URL"];
			this._audioLengthElement.innerText = audioRecording["LENGTH_FORMATTED"];
		}
		else
		{
			this._audioDummy.hidden = true;
		}

		BX.clean(this._downloadWrapper);
		if(audioRecording || videoRecording)
		{
			var lengthHuman = audioRecording ? audioRecording["LENGTH_HUMAN"] : videoRecording["LENGTH_HUMAN"];
			this._downloadWrapper.appendChild(this._downloadSubject);
			this._downloadSubject.innerHTML = BX.util.htmlspecialchars(BX.message("CRM_TIMELINE_ZOOM_MEETING_RECORD").replace("#DURATION#", lengthHuman)) + " &mdash; "
			this._downloadWrapper.appendChild(this._downloadSubjectDetail);
		}
		if (videoRecording)
		{
			this._downloadSubjectDetail.appendChild(this._downloadVideoLink);
			this._downloadVideoLink.href = videoRecording['DOWNLOAD_URL'];
			if (audioRecording)
			{
				this._downloadSubjectDetail.appendChild(this._downloadSeparator);
			}

			if (this._playVideoLink)
			{
				this._playVideoLink.lastElementChild.href = videoRecording["PLAY_URL"];
				this._downloadVideoLink.href = videoRecording["PLAY_URL"];
			}
		}
		if (audioRecording)
		{
			this._downloadSubjectDetail.appendChild(this._downloadAudioLink);
			this._downloadAudioLink.href = audioRecording['DOWNLOAD_URL'];
		}
	};
	BX.CrmHistoryItemZoom.prototype.prepareActions = function()
	{
	};
	BX.CrmHistoryItemZoom.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemZoom();
		self.initialize(id, settings);

		//todo: remove debug
		if(!window['zoom'])
		{
			window['zoom'] = [];
		}
		window['zoom'].push(self);
		return self;
	};

	BX.CrmHistoryItemZoom.TabsComponent = function(config)
	{
		this.tabs = BX.prop.getArray(config, "tabs", []);
		this.elements = {
			container: null,
			tabs: {}
		};
		this.eventEmitter = new BX.Event.EventEmitter(this, 'BX.CrmHistoryItemZoom.TabsComponent');
	};

	BX.CrmHistoryItemZoom.TabsComponent.prototype.render = function()
	{
		if(this.elements.container)
		{
			return this.elements.container;
		}

		this.elements.container = BX.create("DIV", {
			props: {className: "crm-entity-stream-content-detail-zoom-section-wrapper"},
			children: [
				BX.create("DIV", {
					props: {className: "crm-entity-stream-content-detail-zoom-section-list"},
					children: this.tabs.map(this._renderTab, this)
				})
			]
		});
		return this.elements.container;
	};
	BX.CrmHistoryItemZoom.TabsComponent.prototype._renderTab = function(tabDescription)
	{
		var tabId = tabDescription.id;
		this.elements.tabs[tabId] = BX.create("DIV", {
			props: {className: "crm-entity-stream-content-detail-zoom-section" + (tabDescription.active ? " crm-entity-stream-content-detail-zoom-section-active": "")},
			children: [
				BX.create("DIV", {
					props: {className: "crm-entity-stream-content-detail-zoom-section-inner"},
					children: [
						BX.create("DIV", {
							props: {className: "crm-entity-stream-content-detail-zoom-section-title"},
							text: tabDescription.title
						}),
						BX.create("DIV", {
							props: {className: "crm-entity-stream-content-detail-zoom-section-time"},
							text: tabDescription.time
						})
					]
				})
			],
			events: {
				click: function()
				{
					this.setActiveTab(tabDescription.id)
				}.bind(this)
			}
		});
		return this.elements.tabs[tabId];
	};
	BX.CrmHistoryItemZoom.TabsComponent.prototype.setActiveTab = function(tabId)
	{
		if(!this.elements.tabs[tabId])
		{
			throw new Error ("Tab " + tabId + " is not found");
		}
		for (var id in this.elements.tabs)
		{
			if(!this.elements.tabs.hasOwnProperty(id))
			{
				continue;
			}
			if (id == tabId)
			{
				this.elements.tabs[id].classList.add("crm-entity-stream-content-detail-zoom-section-active");
			}
			else
			{
				this.elements.tabs[id].classList.remove("crm-entity-stream-content-detail-zoom-section-active");
			}
		}
		this.eventEmitter.emit("onTabChange", {
			tabId: tabId
		});
	}
}

if(typeof(BX.CrmHistoryItemCallTracker) === "undefined")
{
	BX.CrmHistoryItemCallTracker = function()
	{
		BX.CrmHistoryItemCallTracker.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemCallTracker, BX.CrmHistoryItemCall);
	BX.CrmHistoryItemCallTracker.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemCallTracker();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemConversion) === "undefined")
{
	BX.CrmHistoryItemConversion = function()
	{
		BX.CrmHistoryItemConversion.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemConversion, BX.CrmHistoryItem);
	BX.CrmHistoryItemConversion.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemConversion.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.CrmHistoryItemConversion.prototype.getTitle = function()
	{
		return this.getTextDataParam("TITLE");
	};
	BX.CrmHistoryItemConversion.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-convert crm-entity-stream-section-history" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-convert" } })
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = this.prepareHeaderLayout();

		content.appendChild(header);

		var entityNodes = [];
		var entityInfos = this.getArrayDataParam("ENTITIES");
		for(var i = 0, length = entityInfos.length; i < length; i++)
		{
			var entityInfo = entityInfos[i];

			var entityNode;
			if(BX.prop.getString(entityInfo, 'SHOW_URL', "") === "")
			{
				entityNode = BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-convert" },
						children:
							[
								BX.create("DIV",
									{
										attrs: { className: "crm-entity-stream-content-detain-convert-status" },
										children:
											[
												BX.create("SPAN",
													{
														attrs: { className: "crm-entity-stream-content-detail-status-text" },
														text: BX.CrmEntityType.getNotFoundMessage(entityInfo['ENTITY_TYPE_ID'])
													}
												)
											]
									}
								)
							]
					}
				);
			}
			else
			{
				entityNode = BX.create("DIV",
					{
						attrs: { className: "crm-entity-stream-content-detail-convert" },
						children:
							[
								BX.create("DIV",
									{
										attrs: { className: "crm-entity-stream-content-detain-convert-status" },
										children:
											[
												BX.create("SPAN",
													{
														attrs: { className: "crm-entity-stream-content-detail-status-text" },
														text: BX.CrmEntityType.getCaption(entityInfo['ENTITY_TYPE_ID'])
													}
												)
											]
									}
								),
								BX.create("SPAN", { attrs: { className: "crm-entity-stream-content-detail-convert-separator-icon" } }),
								BX.create("DIV",
									{
										attrs: { className: "crm-entity-stream-content-detain-convert-status" },
										children:
											[
												BX.create("A",
													{
														attrs:
															{
																className: "crm-entity-stream-content-detail-target",
																href: entityInfo['SHOW_URL']
															},
														text: entityInfo['TITLE']
													}
												)
											]
									}
								)
							]
					}
				);
			}
			entityNodes.push(entityNode);
		}

		content.appendChild(
			BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" },
				children: entityNodes
			})
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};
	if(typeof(BX.CrmHistoryItemConversion.messages) === "undefined")
	{
		BX.CrmHistoryItemConversion.messages = {};
	}
	BX.CrmHistoryItemConversion.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemConversion();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemVisit) === "undefined")
{
	BX.CrmHistoryItemVisit = function()
	{
		BX.CrmHistoryItemVisit.superclass.constructor.apply(this);
		this._playerDummyClickHandler = BX.delegate(this.onPlayerDummyClick, this);
		this._playerWrapper = null;
		this._transcriptWrapper = null;
		this._mediaFileInfo = null;
	};
	BX.extend(BX.CrmHistoryItemVisit, BX.CrmHistoryItemActivity);
	BX.CrmHistoryItemVisit.prototype.prepareHeaderLayout = function()
	{
		var header = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-header" } });
		header.appendChild(this.prepareTitleLayout());

		var entityData = this.getAssociatedEntityData();
		var visitInfo = BX.prop.getObject(entityData, "VISIT_INFO", {});
		var recordLength = BX.prop.getInteger(visitInfo, "RECORD_LENGTH", 0);
		var recordLengthFormatted = BX.prop.getString(visitInfo, "RECORD_LENGTH_FORMATTED_FULL", "");

		header.appendChild(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: (recordLength > 0 ? recordLengthFormatted + ', ' + BX.message('CRM_TIMELINE_VISIT_AT') + ' ' : '') + this.formatTime(this.getCreatedTime())
				}
			)
		);

		return header;
	};
	BX.CrmHistoryItemVisit.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var communicationTitle = BX.prop.getString(communication, "TITLE", "");
		var communicationShowUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "VALUE", "");
		var communicationValueFormatted = BX.prop.getString(communication, "FORMATTED_VALUE", communicationValue);

		var visitInfo = BX.prop.getObject(entityData, "VISIT_INFO", {});
		var recordLength = BX.prop.getInteger(visitInfo, "RECORD_LENGTH", 0);
		var recordLengthFormatted = BX.prop.getString(visitInfo, "RECORD_LENGTH_FORMATTED_SHORT", "");
		var vkProfile = BX.prop.getString(visitInfo, "VK_PROFILE", "");

		var outerWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-visit" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-icon crm-entity-stream-section-icon-visit" }
				}
			)
		);

		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [ wrapper ]
				}
			)
		);

		//Header
		var header = this.prepareHeaderLayout();
		wrapper.appendChild(header);

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		//Details
		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail crm-entity-stream-content-detail-call-inline" }
			}
		);
		wrapper.appendChild(detailWrapper);

		this._mediaFileInfo = BX.prop.getObject(entityData, "MEDIA_FILE_INFO", null);
		if(this._mediaFileInfo !== null && recordLength > 0)
		{
			this._playerWrapper = this._history.getManager().renderAudioDummy(recordLengthFormatted, this._playerDummyClickHandler);
			detailWrapper.appendChild(
				//crm-entity-stream-content-detail-call
				this._playerWrapper
			);
			detailWrapper.appendChild(this._history.getManager().getAudioPlaybackRateSelector().render());
		}

		var communicationWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-contact-info" }
			}
		);
		wrapper.appendChild(communicationWrapper);

		//Communications
		if(communicationTitle !== "")
		{
			communicationWrapper.appendChild(document.createTextNode(BX.message("CRM_TIMELINE_VISIT_WITH") + ' '));
			if(communicationShowUrl !== "")
			{
				communicationWrapper.appendChild(
					BX.create("A",
						{
							attrs: { href: communicationShowUrl },
							text: communicationTitle
						}
					)
				);
			}
			else
			{
				communicationWrapper.appendChild(BX.create("SPAN", { text: communicationTitle }));
			}
		}

		if(BX.type.isNotEmptyString(vkProfile))
		{
			communicationWrapper.appendChild(document.createTextNode(" "));
			communicationWrapper.appendChild(
				BX.create(
					"a",
					{
						attrs:
							{
								className: "crm-entity-stream-content-detail-additional",
								target: "_blank",
								href: this.getVkProfileUrl(vkProfile)
							},
						text: BX.message('CRM_TIMELINE_VISIT_VKONTAKTE_PROFILE')
					}
				)
			)

		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			wrapper.appendChild(authorNode);
		}
		//endregion

		return outerWrapper;
	};

	BX.CrmHistoryItemVisit.prototype.onPlayerDummyClick = function(e)
	{
		var stubNode = this._playerWrapper.querySelector(".crm-audio-cap-wrap");
		if(stubNode)
		{
			BX.addClass(stubNode, "crm-audio-cap-wrap-loader");
		}

		this._history.getManager().getAudioPlaybackRateSelector().addPlayer(this._history.getManager().loadMediaPlayer(
			"history_" + this.getId(),
			this._mediaFileInfo["URL"],
			this._mediaFileInfo["TYPE"],
			this._playerWrapper,
			this._mediaFileInfo["DURATION"],
			{
				playbackRate: this._history.getManager().getAudioPlaybackRateSelector().getRate()
			}
		));
	};

	BX.CrmHistoryItemVisit.prototype.getVkProfileUrl = function(profile)
	{
		return 'https://vk.com/' + BX.util.htmlspecialchars(profile);
	};
	BX.CrmHistoryItemVisit.prototype.view = function()
	{
		if (BX.getClass('BX.Crm.Restriction.Bitrix24') && BX.Crm.Restriction.Bitrix24.isRestricted('visit'))
		{
			return BX.Crm.Restriction.Bitrix24.getHandler('visit').call();
		}
		BX.CrmHistoryItemActivity.prototype.view.call(this);
	};
	BX.CrmHistoryItemVisit.prototype.edit = function()
	{
		if (BX.getClass('BX.Crm.Restriction.Bitrix24') && BX.Crm.Restriction.Bitrix24.isRestricted('visit'))
		{
			return BX.Crm.Restriction.Bitrix24.getHandler('visit').call();
		}
		BX.CrmHistoryItemActivity.prototype.edit.call(this);
	};
	BX.CrmHistoryItemVisit.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemVisit();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemScoring) === "undefined")
{
	BX.CrmHistoryItemScoring = function()
	{
		BX.CrmHistoryItemScoring.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemScoring, BX.CrmHistoryItem);
	BX.CrmHistoryItemScoring.prototype.prepareContent = function()
	{
		var outerWrapper = BX.create("DIV", {
			attrs: {
				className: "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-scoring"
			},
			events: {
				click: function()
				{
					var url = "/crm/ml/#entity#/#id#/detail";
					var ownerTypeId = this.getOwnerTypeId();
					var ownerId = this.getOwnerId();

					var ownerType;
					if(ownerTypeId == 1)
					{
						ownerType = "lead";
					}
					else if(ownerTypeId == 2)
					{
						ownerType = "deal";
					}
					else
					{
						return;
					}

					url = url.replace("#entity#", ownerType);
					url = url.replace("#id#", ownerId);

					if(BX.SidePanel)
					{
						BX.SidePanel.Instance.open(url, {width: 840});
					}
					else
					{
						top.location.href = url;
					}
				}.bind(this)
			}
			});

		var scoringInfo = BX.prop.getObject(this._data, "SCORING_INFO", null);
		if(!scoringInfo)
		{
			return outerWrapper;
		}

		var score = BX.prop.getNumber(scoringInfo, "SCORE", 0);
		var scoreDelta = BX.prop.getNumber(scoringInfo, "SCORE_DELTA", 0);
		score = Math.round(score * 100);
		scoreDelta = Math.round(scoreDelta * 100);

		var result = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-scoring-total-result" },
				text: score + "%"
			});

		var iconClass = "crm-entity-stream-content-scoring-total-icon";
		if (score < 50)
		{
			iconClass += " crm-entity-stream-content-scoring-total-icon-fail";
		}
		else if (score < 75)
		{
			iconClass += " crm-entity-stream-content-scoring-total-icon-middle";
		}
		else
		{
			iconClass += " crm-entity-stream-content-scoring-total-icon-success";
		}

		var icon = BX.create("DIV",
			{
				attrs: { className: iconClass }
			}
			);

		outerWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-section-content" },
					children: [
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-content-scoring-total" },
								children: [
									BX.create("DIV",
										{
											attrs: { className: "crm-entity-stream-content-scoring-total-text" },
											text: BX.message("CRM_TIMELINE_SCORING_TITLE_2")
										}
									),
									result,
									icon
								]
							}
						),
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-stream-content-scoring-event" },
								children: [
									(
										scoreDelta !== 0 ?
											BX.create("DIV",
												{
													attrs: { className: "crm-entity-stream-content-scoring-event-offset" },
													text: (scoreDelta > 0 ? "+" : "") + scoreDelta + "%"
												}
											)
											:
											null
									),
									/*BX.create("DIV",
										{
											attrs: { className: "crm-entity-stream-content-scoring-event-detail" },
											text: "<activity subject>"
										}
									)*/
								]
							}
						)
					]

				}
			)
		);

		return outerWrapper;
	};
	BX.CrmHistoryItemScoring.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemScoring();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemOrderCreation) === "undefined")
{
	BX.CrmHistoryItemOrderCreation = function()
	{
		BX.CrmHistoryItemOrderCreation.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemOrderCreation, BX.CrmHistoryItem);
	BX.CrmHistoryItemOrderCreation.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemOrderCreation.superclass.doInitialize.apply(this);
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmHistoryItemOrderCreation. The field 'activityEditor' is not assigned.";
		}
	};
	BX.CrmHistoryItemOrderCreation.prototype.getTitle = function()
	{
		var msg = this.getMessage(BX.CrmEntityType.resolveName(this.getAssociatedEntityTypeId()).toLowerCase());
		if(!BX.type.isNotEmptyString(msg))
		{
			msg = this.getTextDataParam("TITLE");
		}

		return msg;
	};
	BX.CrmHistoryItemOrderCreation.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-createOrderEntity";
	};
	BX.CrmHistoryItemOrderCreation.prototype.getHeaderChildren = function()
	{
		var statusMessage = '';
		var statusClass = '';
		var fields = this.getObjectDataParam('FIELDS');

		if (BX.prop.get(fields, 'DONE') === 'Y')
		{
			statusMessage = this.getMessage("done");
			statusClass = "crm-entity-stream-content-event-done";
		}
		else if (BX.prop.get(fields, 'CANCELED') === 'Y')
		{
			statusMessage = this.getMessage("canceled");
			statusClass = "crm-entity-stream-content-event-canceled";
		}
		else
		{
			if (BX.prop.get(fields, 'PAID') === 'Y')
			{
				statusMessage = this.getMessage("paid");
				statusClass = "crm-entity-stream-content-event-paid";
			}
			else if (BX.prop.get(fields, 'PAID') === 'N')
			{
				statusMessage = this.getMessage("unpaid");
				statusClass = "crm-entity-stream-content-event-not-paid";
			}
		}

		return [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					events: { click: this._headerClickHandler },
					text: this.getTitle(),
				}
			),
			BX.create("SPAN",
				{
					attrs: { className: statusClass },
					text: statusMessage
				}
			),
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		];
	};
	BX.CrmHistoryItemOrderCreation.prototype.prepareContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityId = this.getAssociatedEntityId();
		var title = BX.util.htmlspecialchars(BX.prop.getString(entityData, "TITLE", ""));
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");
		var legend =  BX.prop.getString(entityData, "LEGEND", "");
		if(legend !== "")
		{
			title += " " + legend;
		}
		var nodes = [];

		if(title !== "")
		{
			if(showUrl === "" || (entityTypeId === this.getOwnerTypeId() && entityId === this.getOwnerId()))
			{
				nodes.push(BX.create("DIV", {
					attrs: { className: "crm-entity-stream-content-detail-description" },
					html: title
				}));
			}
			else
			{
				nodes.push(BX.create("DIV", {
					attrs: { className: "crm-entity-stream-content-detail-description" },
					html: title
				}));
				nodes.push(BX.create("A", { attrs: { href: showUrl }, text: this.getMessage('urlOrderLink') }));
			}
		}
		return nodes;
	};
	BX.CrmHistoryItemOrderCreation.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-store";
	};
	BX.CrmHistoryItemOrderCreation.prototype.prepareContent = function()
	{
		wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-history";
		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });
		wrapper.appendChild(BX.create("DIV", { attrs: { className: this.getIconClassName() } }));

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-section-content" }, children: [ contentWrapper ] }
			)
		);

		var header = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children: this.getHeaderChildren()
			}
		);
		contentWrapper.appendChild(header);

		contentWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: this.prepareContentDetails()
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemOrderCreation.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemOrderCreation.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemOrderCreation.messages) === "undefined")
	{
		BX.CrmHistoryItemOrderCreation.messages = {};
	}
	BX.CrmHistoryItemOrderCreation.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemOrderCreation();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemOrderModification) === "undefined")
{
	BX.CrmHistoryItemOrderModification = function()
	{
		BX.CrmHistoryItemOrderModification.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemOrderModification, BX.CrmHistoryItem);
	BX.CrmHistoryItemOrderModification.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemOrderModification.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.CrmHistoryItemOrderModification.prototype.getTitle = function()
	{
		return this.getTextDataParam("TITLE");
	};
	BX.CrmHistoryItemOrderModification.prototype.getStatusInfo = function()
	{
		var statusInfo = {};
		var value = null;
		var classCode = null;
		var fieldName = this.getTextDataParam("CHANGED_ENTITY");
		var fields = this.getObjectDataParam('FIELDS');
		var entityData = this.getAssociatedEntityData();

		if (fieldName === BX.CrmEntityType.names.order)
		{
			if (BX.prop.get(fields, 'ORDER_CANCELED') === 'Y')
			{
				value = "canceled";
				classCode  = "not-paid";
			}
			else if (BX.prop.get(fields, 'ORDER_DONE') === 'Y')
			{
				value = "done";
				classCode  = "done";
			}
			else if (BX.prop.getString(entityData, "VIEWED", '') === 'Y')
			{
				value = "viewed";
				classCode  = "done";
			}
			else if (BX.prop.getString(entityData, "SENT", '') === 'Y')
			{
				value = "sent";
				classCode  = "sent";
			}
		}
		if (fieldName === BX.CrmEntityType.names.orderpayment)
		{
			var psStatusCode = BX.prop.get(fields, 'STATUS_CODE', false);
			if (psStatusCode)
			{
				if (psStatusCode === 'ERROR')
				{
					value = "orderPaymentError";
					classCode = "payment-error";
				}
			}
			else if (BX.prop.getString(entityData, "VIEWED", '') === 'Y')
			{
				value = "viewed";
				classCode  = "done";
			}
			else if (BX.prop.getString(entityData, "SENT", '') === 'Y')
			{
				value = "sent";
				classCode  = "sent";
			}
			else
			{
				value = BX.prop.get(fields, 'ORDER_PAID') === 'Y' ? "paid" : "unpaid";
				classCode  = BX.prop.get(fields, 'ORDER_PAID') === 'Y' ? "paid" : "not-paid";
			}
		}
		else if (fieldName === BX.CrmEntityType.names.ordershipment && BX.prop.get(fields, 'ORDER_DEDUCTED', false))
		{
			value = BX.prop.get(fields, 'ORDER_DEDUCTED') === 'Y' ? "deducted" : "unshipped";
			classCode  = BX.prop.get(fields, 'ORDER_DEDUCTED') === 'Y' ? "shipped" : "not-shipped";
		}
		else if (fieldName === BX.CrmEntityType.names.ordershipment && BX.prop.get(fields, 'ORDER_ALLOW_DELIVERY', false))
		{
			value = BX.prop.get(fields, 'ORDER_ALLOW_DELIVERY') === 'Y' ? "allowedDelivery" : "disallowedDelivery";
			classCode  = BX.prop.get(fields, 'ORDER_ALLOW_DELIVERY') === 'Y' ? "allowed-delivery" : "disallowed-delivery";
		}

		if (value)
		{
			statusInfo.className = "crm-entity-stream-content-event-" + classCode;
			statusInfo.message = this.getMessage(value);
		}

		return statusInfo;
	};
	BX.CrmHistoryItemOrderModification.prototype.getHeaderChildren = function()
	{
		var children = [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					events: { click: this._headerClickHandler },
					text: this.getTitle(),
				}
			)
		];
		var statusInfo = this.getStatusInfo();
		if (BX.type.isNotEmptyObject(statusInfo))
		{
			children.push(
				BX.create("SPAN",
				{
					attrs: { className: statusInfo.className },
					text: statusInfo.message
				}
			));
		}
		children.push(
			BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		));
		return children;
	};
	BX.CrmHistoryItemOrderModification.prototype.prepareContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityId = this.getAssociatedEntityId();
		var title = BX.prop.getString(entityData, "TITLE");
		var htmlTitle = BX.prop.getString(entityData, "HTML_TITLE", "");
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");
		var nodes = [];
		if(title !== "")
		{
			var descriptionNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-description"}});

			if(showUrl === "" || (entityTypeId === this.getOwnerTypeId() && entityId === this.getOwnerId()))
			{
				descriptionNode.appendChild(BX.create("SPAN", { text: title + " " + htmlTitle}));
			}
			else
			{
				if (htmlTitle === "")
				{
					descriptionNode.appendChild(BX.create("A", {attrs: {href: showUrl}, text: title}));
				}
				else
				{
					descriptionNode.appendChild(BX.create("SPAN", { text: title + " "}));
					descriptionNode.appendChild(BX.create("A", {attrs: {href: showUrl}, text: htmlTitle}));
				}
			}

			var legend = BX.prop.getString(entityData, "LEGEND");
			if(legend !== "")
			{
				descriptionNode.appendChild(BX.create("SPAN", { html: " " + legend }));
			}

			var sublegend = BX.prop.getString(entityData, "SUBLEGEND", '');
			if (sublegend !== '')
			{
				descriptionNode.appendChild(BX.create("BR"));
				descriptionNode.appendChild(BX.create("SPAN", { text: " " + sublegend}));
			}
			nodes.push(descriptionNode);
		}

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareViewedContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityId = this.getAssociatedEntityId();
		var title = BX.prop.getString(entityData, "TITLE");
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");
		var nodes = [];

		if (title !== "")
		{
			var sublegend = BX.prop.getString(entityData, "SUBLEGEND", '');
			if (sublegend !== "")
			{
				var descriptionNode = BX.create("DIV", {
					attrs: { className: "crm-entity-stream-content-detail-description"},
					text: sublegend,
				});
				nodes.push(descriptionNode);
			}


			if(entityTypeId === this.getOwnerTypeId() && entityId === this.getOwnerId())
			{
				nodes.push(BX.create("SPAN", { text: title }));
			}
			else
			{
				nodes.push(BX.create("A", { attrs: { href: showUrl }, text: title }));
			}

			var legend = BX.prop.getString(entityData, "LEGEND");
			if(legend !== "")
			{
				nodes.push(BX.create("SPAN", { html: " " + legend }));
			}
		}

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareSentContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var entityTypeId = this.getAssociatedEntityTypeId();
		var entityId = this.getAssociatedEntityId();
		var title = BX.prop.getString(entityData, "TITLE");
		var showUrl = BX.prop.getString(entityData, 'SHOW_URL', '');
		var destination = BX.prop.getString(entityData, 'DESTINATION_TITLE', '');
		var nodes = [];

		if (title !== "")
		{
			var detailNode = BX.create('DIV', { attrs: { className: 'crm-entity-stream-content-detail-description' } });
			if(showUrl === "" || (entityTypeId === this.getOwnerTypeId() && entityId === this.getOwnerId()))
			{
				detailNode.appendChild(BX.create("SPAN", { text: title }));
			}
			else
			{
				detailNode.appendChild(BX.create('A', { attrs: { href: showUrl }, text: title }));
			}

			var legend = BX.prop.getString(entityData, "LEGEND");
			if(legend !== "")
			{
				detailNode.appendChild(BX.create("SPAN", { html: " " + legend }));
			}

			if (destination)
			{
				detailNode.appendChild(BX.create('SPAN', {
					attrs: { className: 'crm-entity-stream-content-detail-order-destination' },
					text: destination,
				}));
			}

			nodes.push(detailNode);

			var sliderLinkNode = BX.create('A', {
				attrs: { href: "#" },
				text: this.getMessage('orderPaymentProcess'),
				events: {
					click: BX.proxy(this.startSalescenterApplication, this),
				},
			});
			nodes.push(sliderLinkNode);
		}

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.startSalescenterApplication = function()
	{
		BX.loadExt('salescenter.manager').then(function()
		{
			var fields = this.getObjectDataParam('FIELDS'),
				dealId = BX.prop.get(fields, 'DEAL_ID', 0),
				paymentId = BX.prop.get(fields, 'PAYMENT_ID', 0),
				shipmentId = BX.prop.get(fields, 'SHIPMENT_ID', 0),
				orderId = BX.prop.get(fields, 'ORDER_ID', 0);

			BX.Salescenter.Manager.openApplication({
				disableSendButton: '',
				context: 'deal',
				ownerTypeId: BX.CrmEntityType.enumeration.deal,
				ownerId: dealId,
				mode: 'payment_delivery',
				templateMode: 'view',
				orderId: orderId,
				paymentId: paymentId,
				shipmentId: shipmentId,
			});
		}.bind(this));
	};

	BX.CrmHistoryItemOrderModification.prototype.preparePaidPaymentContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData(),
			title = BX.prop.getString(entityData, "TITLE"),
			date = BX.prop.getString(entityData, "DATE", ""),
			paySystemName = BX.prop.getString(entityData, "PAY_SYSTEM_NAME", ""),
			sum = BX.prop.getString(entityData, 'SUM', ''),
			currency = BX.prop.getString(entityData, 'CURRENCY', ''),
			nodes = [];

		if(title !== "")
		{
			var paymentDetail = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-payment"}});
			paymentDetail.appendChild(
				BX.create("DIV", {
					attrs: { className: "crm-entity-stream-content-detail-payment-value"},
					children: [
						BX.create('SPAN', {
							attrs: { className: "crm-entity-stream-content-detail-payment-text"},
							html: sum,
						}),
						BX.create('SPAN', {
							attrs: { className: "crm-entity-stream-content-detail-payment-currency"},
							html: currency,
						}),
					]
				})
			);

			var logotip = BX.prop.getString(entityData, "LOGOTIP", null);
			if (logotip)
			{
				paymentDetail.appendChild(
					BX.create("DIV", {
						attrs: { className: "crm-entity-stream-content-detail-payment-logo"},
						style: {
							backgroundImage: "url(" + encodeURI(logotip) + ")",
						}
					})
				);
			}
			nodes.push(paymentDetail);

			var descriptionNode = BX.create("DIV", {
				attrs: { className: "crm-entity-stream-content-detail-description"},
				children: [
					BX.create('SPAN', {
						text: date
					}),
					BX.create('SPAN', {
						attrs: { className: "crm-entity-stream-content-detail-description-info" },
						text: this.getMessage('orderPaySystemTitle')
					}),
					BX.create('SPAN', {
						text: paySystemName
					}),
				]
			});
			nodes.push(descriptionNode);
		}

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareContent = function()
	{
		var fields = this.getObjectDataParam('FIELDS'),
			isPaid = BX.prop.get(fields, 'ORDER_PAID') === 'Y',
			isClick = BX.prop.get(fields, 'PAY_SYSTEM_CLICK') === 'Y',
			isManualContinuePay = BX.prop.get(fields, 'MANUAL_CONTINUE_PAY') === 'Y',
			isManualAddCheck = BX.prop.get(fields, 'NEED_MANUAL_ADD_CHECK') === 'Y',
			entityId = this.getAssociatedEntityTypeId();

		if (entityId === BX.CrmEntityType.enumeration.orderpayment && isPaid)
		{
			return this.preparePaidPaymentContent();
		}
		else if (entityId === BX.CrmEntityType.enumeration.orderpayment && isClick)
		{
			return this.prepareClickedPaymentContent();
		}
		else if (entityId === BX.CrmEntityType.enumeration.order && isManualContinuePay)
		{
			return this.prepareManualContinuePayContent();
		}
		else if (entityId === BX.CrmEntityType.enumeration.orderpayment && isManualAddCheck)
		{
			return this.prepareManualAddCheck();
		}

		return this.prepareItemOrderContent();
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareItemOrderContent = function()
	{
		var entityData = this.getAssociatedEntityData();
		var isViewed = BX.prop.getString(entityData, "VIEWED", '') === 'Y';
		var isSent = BX.prop.getString(entityData, "SENT", '') === 'Y';
		var fields = this.getObjectDataParam('FIELDS');
		var psStatusCode = BX.prop.get(fields, 'STATUS_CODE', false);

		var wrapper = BX.create("DIV", { attrs: { className: 'crm-entity-stream-section crm-entity-stream-section-history' } });
		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon ' + this.getIconClassName() } })
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var header = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children: this.getHeaderChildren()
			});

		var contentChildren = null;
		if (isViewed)
		{
			contentChildren = this.prepareViewedContentDetails();
		}
		else if (isSent)
		{
			contentChildren = this.prepareSentContentDetails();
		}
		else if (psStatusCode === 'ERROR')
		{
			contentChildren = this.prepareErrorPaymentContentDetails();
		}
		else
		{
			contentChildren = this.prepareContentDetails();
		}

		content.appendChild(header);
		content.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: contentChildren
				})
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemOrderModification.prototype.preparePaidPaymentContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: 'crm-entity-stream-section' } });
		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon crm-entity-stream-section-icon-wallet' } })
		);

		var header = [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { click: this._headerClickHandler },
									text: this.getMessage('orderPaymentSuccessTitle')
								}
							)
						]
				}
			)
		];
		header.push(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var headerWrap = BX.create("DIV", {
			attrs: { className: "crm-entity-stream-content-header" },
			children: header
		});

		var contentChildren = this.preparePaidPaymentContentDetails();
		content.appendChild(headerWrap);
		content.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: contentChildren
				})
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareErrorPaymentContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData(),
			date = BX.prop.getString(entityData, 'DATE', ''),
			fields = this.getObjectDataParam('FIELDS'),
			paySystemName = BX.prop.getString(fields, 'PAY_SYSTEM_NAME', ''),
			paySystemError = BX.prop.getString(fields, 'STATUS_DESCRIPTION', ''),
			nodes = [];

		var descriptionNode = BX.create('DIV', {
			attrs: { className: 'crm-entity-stream-content-detail-description'},
			children: [
				BX.create('SPAN', {
					text: date
				}),
				BX.create('SPAN', {
					attrs: { className: 'crm-entity-stream-content-detail-description-info' },
					text: this.getMessage('orderPaySystemTitle')
				}),
				BX.create('SPAN', {
					text: paySystemName
				}),
			]
		});
		nodes.push(descriptionNode);

		var errorDetailNode = BX.create('DIV', {
			attrs: { className: 'crm-entity-stream-content-detail-notice' },
			text: this.getMessage('orderPaymentStatusErrorReason').replace("#PAYSYSTEM_ERROR#", paySystemError),
		});

		nodes.push(errorDetailNode);

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareClickedPaymentContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: 'crm-entity-stream-section crm-entity-stream-section-history' } });
		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon ' + this.getIconClassName() } })
		);

		var header = [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { click: this._headerClickHandler },
									text: this.getTitle(),
								}
							)
						]
				}
			)
		];
		header.push(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		var headerWrap = BX.create("DIV", {
			attrs: { className: "crm-entity-stream-content-header" },
			children: header
		});

		var contentChildren = this.prepareClickedPaymentContentDetails();
		content.appendChild(headerWrap);
		content.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: contentChildren
				})
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareClickedPaymentContentDetails = function()
	{
		var fields = this.getObjectDataParam('FIELDS'),
			paySystemName = BX.prop.getString(fields, 'PAY_SYSTEM_NAME', ''),
			nodes = [];

		if(paySystemName !== '')
		{
			var descriptionNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-description"}});
			descriptionNode.appendChild(
				BX.create('SPAN', {
					attrs: { className: "crm-entity-stream-content-clicked-description-info" },
					text: this.getMessage('orderPaymentPaySystemClick')
				})
			);
			descriptionNode.appendChild(
				BX.create('SPAN', {
					attrs: { className: "crm-entity-stream-content-clicked-description-name" },
					text: paySystemName
				})
			);

			nodes.push(descriptionNode);
		}

		return nodes;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareManualContinuePayContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: 'crm-entity-stream-section crm-entity-stream-section-advice' } });
		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon crm-entity-stream-section-icon-advice' } })
		);

		var content = BX.create("DIV", {
			attrs: { className: "crm-entity-stream-advice-info" },
			text: this.getMessage('orderManualContinuePay'),
		});

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-advice-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemOrderModification.prototype.prepareManualAddCheck = function()
	{
		var entityData = this.getAssociatedEntityData();
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", "");

		var wrapper = BX.create(
			"DIV",
			{
				attrs: {
					className: 'crm-entity-stream-section crm-entity-stream-section-advice'
				}
			}
		);
		wrapper.appendChild(
			BX.create(
				"DIV",
				{
					attrs: {
						className: 'crm-entity-stream-section-icon crm-entity-stream-section-icon-advice'
					}
				}
			)
		);

		var htmlTitle = this.getMessage('orderManualAddCheck').replace("#HREF#", showUrl);
		var content = BX.create(
			"DIV",
			{
				attrs: {
					className: "crm-entity-stream-advice-info",
				},
				html: htmlTitle,
			}
		);

		var link = BX.create(
			"DIV",
			{
				attrs: {
					className: "crm-entity-stream-advice-info",
				},
				children: [
					BX.create(
						"A",
						{
							attrs: {
								className: "crm-entity-stream-content-detail-target",
								href: "#",
							},
							events: {
								click: BX.delegate(function (e) {
									top.BX.Helper.show('redirect=detail&code=13742126');
									e.preventDefault ? e.preventDefault() : (e.returnValue = false);
								})
							},
							html: this.getMessage('orderManualAddCheckHelpLink'),
						}
					)
				]
			}
		);

		wrapper.appendChild(
			BX.create(
				"DIV",
				{
					attrs: {
						className: "crm-entity-stream-advice-content"
					},
					children: [ content, link ]
				}
			)
		);

		return wrapper;
	};

	BX.CrmHistoryItemOrderModification.prototype.getIconClassName = function()
	{
		return 'crm-entity-stream-section-icon-store';
	};

	if(typeof(BX.CrmHistoryItemOrderModification.messages) === "undefined")
	{
		BX.CrmHistoryItemOrderModification.messages = {};
	}
	BX.CrmHistoryItemOrderModification.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemOrderModification();
		self.initialize(id, settings);
		return self;
	};
}

if (typeof(BX.CrmHistoryItemFinalSummary) === "undefined")
{
	BX.CrmHistoryItemFinalSummary = function()
	{
		BX.CrmHistoryItemFinalSummary.superclass.constructor.apply(this);
	};

	BX.extend(BX.CrmHistoryItemFinalSummary, BX.CrmHistoryItem);

	BX.CrmHistoryItemFinalSummary.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemFinalSummary.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	BX.CrmHistoryItemFinalSummary.prototype.getTitle = function()
	{
		return this.getMessage('title');
	};

	BX.CrmHistoryItemFinalSummary.prototype.getHeaderChildren = function()
	{
		var children = [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { click: this._headerClickHandler },
									text: this.getTitle()
								}
							)
						]
				}
			)
		];
		children.push(
			BX.create("SPAN",
			{
				attrs: { className: "crm-entity-stream-content-event-time" },
				text: this.formatTime(this.getCreatedTime())
			}
		));

		return children;
	};
	BX.CrmHistoryItemFinalSummary.prototype.prepareContentDetails = function(data)
	{
		var nodes = [];

		var detailNode = BX.create(
			"DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-table" },
				children :
				[
					this.createOrderDetailBlock(data),
					this.createBasketBasePriceBlock(data),
					this.createBasketPriceBlock(data),
				]
			}
		);

		var paymentBlockList = this.createPaymentBlocks(data);
		for (var paymentBlockIndex in paymentBlockList)
		{
			detailNode.appendChild(paymentBlockList[paymentBlockIndex]);
		}

		detailNode.appendChild(this.createSummaryBlock(data));

		nodes.push(detailNode);

		if (data.CHECK && data.CHECK.length > 0)
		{
			for (var i in data.CHECK)
			{
				nodes.push(this.createCheckBlock(data.CHECK[i]));
			}
		}

		return nodes;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createOrderDetailBlock = function(data)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-table-row"}});

		var descriptionNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-description"}});
		descriptionNode.appendChild(
			BX.create("A", {attrs: {href: data.ORDER.SHOW_URL}, text: data.ORDER.TITLE})
		);

		if (data.ORDER.IS_PAID)
		{
			descriptionNode.appendChild(
				BX.create(
					"span",
					{
						attrs: { className: "crm-entity-stream-content-event-successful"},
						text : this.getMessage('orderPaid')
					}
				)
			);
		}

		blockNode.appendChild(descriptionNode);

		var detailCostNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-cost"}});

		if (data.BASKET.BASE_PRICE_FORMAT)
		{
			detailCostNode.appendChild(
				BX.create(
					"span",
					{
						attrs: {className: "crm-entity-stream-content-detail-cost-prev"},
						html: data.ORDER.BASE_PRICE_FORMAT
					}
				)
			);
		}

		detailCostNode.appendChild(
			BX.create(
				"span",
				{
					attrs: { className: "crm-entity-stream-content-detail-cost-current"},
					html : data.ORDER.PRICE_FORMAT
				}
			)
		);
		blockNode.appendChild(detailCostNode);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createBasketBasePriceBlock = function(data)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-table-row"}});

		var descriptionNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-description"}});
		descriptionNode.appendChild(
			BX.create("span", {text: this.getMessage('basketBasePrice')})
		);
		blockNode.appendChild(descriptionNode);

		var detailCostNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-cost"}});
		detailCostNode.appendChild(
			BX.create(
				"span",
				{
					attrs: { className: "crm-entity-stream-content-detail-cost-current"},
					html : data.BASKET.BASE_PRICE_FORMAT
				}
			)
		);
		blockNode.appendChild(detailCostNode);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createBasketPriceBlock = function(data)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-table-row"}});

		var descriptionNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-description"}});
		descriptionNode.appendChild(
			BX.create("span", {text: this.getMessage('basketPrice')})
		);
		blockNode.appendChild(descriptionNode);

		var detailCostNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-cost"}});
		detailCostNode.appendChild(
			BX.create(
				"span",
				{
					attrs: { className: "crm-entity-stream-content-detail-cost-current"},
					html : data.BASKET.PRICE_FORMAT
				}
			)
		);
		blockNode.appendChild(detailCostNode);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createPaymentBlocks = function(data)
	{
		var blockNodeList = [];

		for (var i in data.PAYMENTS)
		{
			var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-table-row"}});

			var descriptionNode = BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description"},
					children :
					[
						BX.create("span", {text: this.getMessage('paymentStatusY')}),
						BX.create(
							"span",
							{
								attrs: { className: "crm-entity-stream-content-detail-date"},
								text: ' ' + data.PAYMENTS[i].DATE_PAID
							}
						)
					]
				}
			);
			blockNode.appendChild(descriptionNode);

			var detailCostNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-cost"}});
			detailCostNode.appendChild(
				BX.create(
					"span",
					{
						attrs: { className: "crm-entity-stream-content-detail-cost-current"},
						html : data.PAYMENTS[i].PRICE_FORMAT
					}
				)
			);
			blockNode.appendChild(detailCostNode);

			blockNodeList.push(blockNode);
		}

		return blockNodeList;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createSummaryBlock = function(data)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-table-row"}});

		var descriptionNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-description"}});
		descriptionNode.appendChild(
			BX.create("span", {text: this.getMessage('sumForPay')})
		);
		blockNode.appendChild(descriptionNode);

		var detailCostNode = BX.create("DIV", {attrs: { className: "crm-entity-stream-content-detail-cost"}});
		detailCostNode.appendChild(
			BX.create("strong", {html : data.ORDER.SUM_FOR_PAID_FORMAT})
		);
		blockNode.appendChild(detailCostNode);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummary.prototype.createCheckBlock = function(check)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-notice"}});
		blockNode.appendChild(
			BX.create(
				"a",
				{
					attrs: { href: check.URL, target: '_blank' },
					text: check.TITLE
				}
			)
		);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummary.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-payment" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon ' + this.getIconClassName() } })
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" } });

		var contentItem = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });

		var header = BX.create("DIV",
		{
			attrs: { className: "crm-entity-stream-content-header" },
			children: this.getHeaderChildren()
		});
		contentItem.appendChild(header);

		var data = this.getData();

		if (data.RESULT && data.RESULT.length > 0)
		{
			for (var i in data.RESULT)
			{
				contentItem.appendChild(
					BX.create("DIV",
						{
							attrs: {className: "crm-entity-stream-content-detail"},
							children: this.prepareContentDetails(data.RESULT[i])
						})
				);

				content.appendChild(contentItem);
			}
		}

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemFinalSummary.prototype.getIconClassName = function()
	{
		return 'crm-entity-stream-section-icon-complete';
	};

	if (typeof(BX.CrmHistoryItemFinalSummary.messages) === "undefined")
	{
		BX.CrmHistoryItemFinalSummary.messages = {};
	}

	BX.CrmHistoryItemFinalSummary.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemFinalSummary();
		self.initialize(id, settings);
		return self;
	};
}

if (typeof(BX.CrmHistoryItemFinalSummaryDocuments) === "undefined")
{
	BX.CrmHistoryItemFinalSummaryDocuments = function()
	{
		BX.CrmHistoryItemFinalSummaryDocuments.superclass.constructor.apply(this);
	};

	BX.extend(BX.CrmHistoryItemFinalSummaryDocuments, BX.CrmHistoryItem);

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemFinalSummaryDocuments.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.getTitle = function()
	{
		return this.getMessage('title');
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.getHeaderChildren = function()
	{
		var children = [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { click: this._headerClickHandler },
									text: this.getTitle()
								}
							)
						]
				}
			)
		];
		children.push(
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			));

		return children;
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.createCheckBlock = function(check)
	{
		var blockNode = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-detail-notice"}});
		blockNode.appendChild(
			BX.create(
				"a",
				{
					attrs: { href: check.URL, target: '_blank' },
					text: check.TITLE
				}
			)
		);

		return blockNode;
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.prepareContent = function()
	{
		var wrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-section crm-entity-stream-section-payment" } });

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: 'crm-entity-stream-section-icon ' + this.getIconClassName() } })
		);

		var content = BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" } });

		var contentItem = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });

		var header = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children: this.getHeaderChildren()
			});
		contentItem.appendChild(header);

		var data = this.getData();

		if (data.RESULT)
		{
			var summaryOptions = {
				'DEAL_ID': data.ASSOCIATED_ENTITY_ID,
				'PARENT_CONTEXT': this,
			};
			var timelineSummaryDocuments = new BX.Crm.TimelineSummaryDocuments(summaryOptions);
			timelineSummaryDocuments.setOptions(data.RESULT.TIMELINE_SUMMARY_OPTIONS);
			var nodes = [
				timelineSummaryDocuments.render(),
			];
			if (data.RESULT.CHECKS && data.RESULT.CHECKS.length > 0)
			{
				for (var i in data.RESULT.CHECKS)
				{
					nodes.push(this.createCheckBlock(data.RESULT.CHECKS[i]));
				}
			}
			contentItem.appendChild(
				BX.create("DIV",
					{
						attrs: {className: "crm-entity-stream-content-detail"},
						children: nodes
					})
			);

			content.appendChild(contentItem);
		}
		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			content.appendChild(authorNode);
		}
		//endregion

		wrapper.appendChild(
			BX.create("DIV", { attrs: { className: "crm-entity-stream-section-content" }, children: [ content ] })
		);

		return wrapper;
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.getIconClassName = function()
	{
		return 'crm-entity-stream-section-icon-complete';
	};

	if (typeof(BX.CrmHistoryItemFinalSummaryDocuments.messages) === "undefined")
	{
		BX.CrmHistoryItemFinalSummaryDocuments.messages = {};
	}

	BX.CrmHistoryItemFinalSummaryDocuments.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemFinalSummaryDocuments();
		self.initialize(id, settings);
		return self;
	};

	BX.CrmHistoryItemFinalSummaryDocuments.prototype.startSalescenterApplication = function(orderId, options)
	{
		if (options === undefined)
		{
			return;
		}

		BX.loadExt('salescenter.manager').then(function()
		{
			BX.Salescenter.Manager.openApplication(options);
		}.bind(this));
	}
}

if(typeof(BX.CrmHistoryItemExternalNoticeModification) === "undefined")
{
	BX.CrmHistoryItemExternalNoticeModification = function ()
	{
		BX.CrmHistoryItemExternalNoticeModification.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemExternalNoticeModification, BX.CrmHistoryItemOrderModification);

	BX.CrmHistoryItemExternalNoticeModification.prototype.getIconClassName = function()
	{
		return 'crm-entity-stream-section-icon-restApp';
	};

	BX.CrmHistoryItemExternalNoticeModification.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemExternalNoticeModification();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemExternalNoticeStatusModification) === "undefined")
{
	BX.CrmHistoryItemExternalNoticeStatusModification = function ()
	{
		BX.CrmHistoryItemExternalNoticeStatusModification.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemExternalNoticeStatusModification, BX.CrmHistoryItemExternalNoticeModification);

	BX.CrmHistoryItemExternalNoticeStatusModification.prototype.prepareContentDetails = function()
	{
		var nodes = [];
		var contentChildren = [];

		if (BX.type.isNotEmptyString(this.getTextDataParam("START_NAME")))
		{
			contentChildren.push(
				BX.create("SPAN",
					{
						attrs: {className: "crm-entity-stream-content-detain-info-status"},
						text: this.getTextDataParam("START_NAME")
					})
			);
			contentChildren.push(
				BX.create("SPAN",{ attrs: { className: "crm-entity-stream-content-detail-info-separator-icon" } })
			);
		}

		if (BX.type.isNotEmptyString(this.getTextDataParam("FINISH_NAME")))
		{
			contentChildren.push(
				BX.create("SPAN",
					{
						attrs: { className: "crm-entity-stream-content-detain-info-status" },
						text: this.getTextDataParam("FINISH_NAME")
					})
			);
		}

		nodes.push(BX.create("DIV",	{
			attrs: { className: "crm-entity-stream-content-detail-info" },
			children: contentChildren
		}));

		return nodes;
	};

	BX.CrmHistoryItemExternalNoticeStatusModification.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemExternalNoticeStatusModification();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmHistoryItemOrcderCheck) === "undefined")
{
	BX.CrmHistoryItemOrcderCheck = function()
	{
		BX.CrmHistoryItemOrcderCheck.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmHistoryItemOrcderCheck, BX.CrmHistoryItem);
	BX.CrmHistoryItemOrcderCheck.prototype.doInitialize = function()
	{
		BX.CrmHistoryItemOrcderCheck.superclass.doInitialize.apply(this);
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmHistoryItemOrcderCheck. The field 'activityEditor' is not assigned.";
		}
	};
	BX.CrmHistoryItemOrcderCheck.prototype.getTitle = function()
	{
		var result = this.getMessage('orderCheck');

		var checkName = this.getTextDataParam('CHECK_NAME');
		if (checkName !== '')
		{
			result += ' "' + checkName + '"';
		}

		return result;
	};
	BX.CrmHistoryItemOrcderCheck.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-createOrderEntity";
	};
	BX.CrmHistoryItemOrcderCheck.prototype.getHeaderChildren = function()
	{
		var statusMessage = '';
		var statusClass = '';
		var title = this.getTitle();

		if (this.getTextDataParam("SENDED") !== '')
		{
			title = this.getMessage('sendedTitle');
		}
		else
		{
			statusMessage = this.getMessage("printed");
			statusClass = "crm-entity-stream-content-event-successful";
			if (this.getTextDataParam("PRINTED") !== 'Y')
			{
				statusMessage = this.getMessage("unprinted");
				statusClass = "crm-entity-stream-content-event-missing";
			}
		}

		return [
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-event-title" },
					children:
						[
							BX.create("A",
								{
									attrs: { href: "#" },
									events: { click: this._headerClickHandler },
									text: title
								}
							)
						]
				}
			),
			BX.create("SPAN",
				{
					attrs: { className: statusClass },
					text: statusMessage
				}
			),
			BX.create("SPAN",
				{
					attrs: { className: "crm-entity-stream-content-event-time" },
					text: this.formatTime(this.getCreatedTime())
				}
			)
		];
	};
	BX.CrmHistoryItemOrcderCheck.prototype.prepareContentDetails = function()
	{
		var entityData = this.getAssociatedEntityData();
		var title = this.getTextDataParam("TITLE");
		var showUrl = BX.prop.getString(entityData, "SHOW_URL", '');
		var nodes = [];
		if(title !== "")
		{
			var isSended = this.getTextDataParam("SENDED") !== '';
			var className = isSended
				? 'crm-entity-stream-content-detail-order'
				: 'crm-entity-stream-content-detail-description'
			;

			var descriptionNode = BX.create("DIV", { attrs: { className: className } });
			if (showUrl !== "")
			{
				descriptionNode.appendChild(BX.create("A", {
					attrs: { href: showUrl},
					events: {
						click: BX.delegate(function(e) {
							BX.Crm.Page.openSlider(showUrl, { width: 500 });
							e.preventDefault ? e.preventDefault() : (e.returnValue = false);
						}, this)
					},
					text: title
				}));
			}

			var legend =  this.getTextDataParam("LEGEND"),
				legendNode;
			if(legend !== "")
			{
				legendNode = BX.create("SPAN", { html: " " + legend });
			}

			if (isSended)
			{
				nodes.push(descriptionNode);
				if (legendNode)
				{
					nodes.push(legendNode);
				}
			}
			else
			{
				if (legendNode)
				{
					descriptionNode.appendChild(legendNode);
				}
				nodes.push(descriptionNode);
			}
		}

		var checkUrl = this.getTextDataParam("CHECK_URL");
		if (checkUrl)
		{
			nodes.push(
				BX.create("DIV", {
					attrs: { className: 'crm-entity-stream-content-detail-payment-info' },
					children: [
						BX.create("A", { attrs: { href: checkUrl, target: '_blank'}, text: this.getMessage('urlLink') })
					]
				})
			);
		}

		return nodes;
	};
	BX.CrmHistoryItemOrcderCheck.prototype.prepareContent = function()
	{
		var entityData = this.getAssociatedEntityData();
		wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-history crm-entity-stream-section-createOrderEntity";
		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });
		wrapper.appendChild(BX.create("DIV", { attrs: { className: this.getIconClassName() } }));

		var contentWrapper = BX.create("DIV", { attrs: { className: "crm-entity-stream-content-event" } });
		wrapper.appendChild(
			BX.create("DIV",
				{ attrs: { className: "crm-entity-stream-section-content" }, children: [ contentWrapper ] }
			)
		);

		var header = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children: this.getHeaderChildren()
			}
		);
		contentWrapper.appendChild(header);

		contentWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail" },
					children: this.prepareContentDetails()
				}
			)
		);

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentWrapper.appendChild(authorNode);
		}
		//endregion

		return wrapper;
	};
	BX.CrmHistoryItemOrcderCheck.prototype.getMessage = function(name)
	{
		var m = BX.CrmHistoryItemOrcderCheck.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.CrmHistoryItemOrcderCheck.messages) === "undefined")
	{
		BX.CrmHistoryItemOrcderCheck.messages = {};
	}
	BX.CrmHistoryItemOrcderCheck.create = function(id, settings)
	{
		var self = new BX.CrmHistoryItemOrcderCheck();
		self.initialize(id, settings);
		return self;
	};
}


//endregion

//region Schedule Items
if(typeof(BX.CrmScheduleItem) === "undefined")
{
	BX.CrmScheduleItem = function()
	{
		BX.CrmScheduleItem.superclass.constructor.apply(this);
		this._schedule = null;
		this._deadlineNode = null;

		this._headerClickHandler = BX.delegate(this.onHeaderClick, this);
		this._setAsDoneButtonHandler = BX.delegate(this.onSetAsDoneButtonClick, this);
	};
	BX.extend(BX.CrmScheduleItem, BX.CrmTimelineItem);
	BX.CrmScheduleItem.prototype.doInitialize = function()
	{
		this._schedule = this.getSetting("schedule");
		if(!(this._activityEditor instanceof BX.CrmActivityEditor))
		{
			throw "BX.CrmScheduleItem. The field 'activityEditor' is not assigned.";
		}

		if(this.hasPermissions() && !this.verifyPermissions())
		{
			this.loadPermissions();
		}
	};
	BX.CrmScheduleItem.prototype.getTypeId = function()
	{
		return BX.CrmTimelineType.undefined;
	};
	BX.CrmScheduleItem.prototype.verifyPermissions = function()
	{
		var userId = BX.prop.getInteger(this.getPermissions(), "USER_ID", 0);
		return userId <= 0 || userId === this._schedule.getUserId();
	};
	BX.CrmScheduleItem.prototype.loadPermissions = function()
	{
		BX.ajax(
			{
				url: this._schedule.getServiceUrl(),
				method: "POST",
				dataType: "json",
				data: { "ACTION": "GET_PERMISSIONS", "TYPE_ID": this.getTypeId(), "ID": this.getAssociatedEntityId() },
				onsuccess: this.onPermissionsLoad.bind(this)
			}
		);
	};
	BX.CrmScheduleItem.prototype.onPermissionsLoad = function(result)
	{
		var permissions = BX.prop.getObject(result, "PERMISSIONS", null);
		if(!permissions)
		{
			return;
		}

		this.setPermissions(permissions);
		window.setTimeout(function(){ this.refreshLayout(); }.bind(this), 0);
	};
	BX.CrmScheduleItem.prototype.getDeadline = function()
	{
		return null;
	};
	BX.CrmScheduleItem.prototype.hasDeadline = function()
	{
		return BX.type.isDate(this.getDeadline());
	};
	BX.CrmScheduleItem.prototype.isCounterEnabled = function()
	{
		var deadline = this.getDeadline();
		return deadline && BX.CrmHistoryItem.isCounterEnabled(deadline);
	};
	BX.CrmScheduleItem.prototype.getSourceId = function()
	{
		return BX.prop.getInteger(this.getAssociatedEntityData(), "ID", 0);
	};
	BX.CrmScheduleItem.prototype.onSetAsDoneCompleted = function(data)
	{
		if(!BX.prop.getBoolean(data, "COMPLETED"))
		{
			return;
		}

		this.markAsDone(true);
		this._schedule.onItemMarkedAsDone(
			this,
			{ 'historyItemData': BX.prop.getObject(data, "HISTORY_ITEM") }
		);
	};
	BX.CrmScheduleItem.prototype.onPosponeCompleted = function(data)
	{
	};
	BX.CrmScheduleItem.prototype.refreshDeadline = function()
	{
		this._deadlineNode.innerHTML = this.formatDateTime(this.getDeadline());
	};
	BX.CrmScheduleItem.prototype.formatDateTime = function(time)
	{
		return this._schedule.formatDateTime(time);
	};
	BX.CrmScheduleItem.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmScheduleItem.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon";
	};

	BX.CrmScheduleItem.prototype.isReadOnly = function()
	{
		return this._schedule.isReadOnly();
	};
	BX.CrmScheduleItem.prototype.isEditable = function()
	{
		return !this.isReadOnly();
	};
	BX.CrmScheduleItem.prototype.canPostpone = function()
	{
		if(this.isReadOnly())
		{
			return false;
		}

		var perms = BX.prop.getObject(this.getAssociatedEntityData(), "PERMISSIONS", {});
		return BX.prop.getBoolean(perms, "POSTPONE", false);
	};
	BX.CrmScheduleItem.prototype.isDone = function()
	{
		return BX.CrmActivityStatus.isFinal(
			BX.prop.getInteger(this.getAssociatedEntityData(), "STATUS", 0)
		);
	};
	BX.CrmScheduleItem.prototype.canComplete = function()
	{
		if(this.isReadOnly())
		{
			return false;
		}

		var perms = BX.prop.getObject(this.getAssociatedEntityData(), "PERMISSIONS", {});
		return BX.prop.getBoolean(perms, "COMPLETE", false);
	};
	BX.CrmScheduleItem.prototype.setAsDone = function(isDone)
	{
	};
	BX.CrmScheduleItem.prototype.prepareContent = function(options)
	{
		return null;
	};
	BX.CrmScheduleItem.prototype.prepareLayout = function(options)
	{
		var vueComponent = this.makeVueComponent(options, 'schedule');
		this._wrapper = vueComponent ? vueComponent : this.prepareContent();
		if(this._wrapper)
		{
			var enableAdd = BX.type.isPlainObject(options) ? BX.prop.getBoolean(options, "add", true) : true;
			if(enableAdd)
			{
				var anchor = BX.type.isPlainObject(options) && BX.type.isElementNode(options["anchor"]) ? options["anchor"] : null;
				if(anchor && anchor.nextSibling)
				{
					this._container.insertBefore(this._wrapper, anchor.nextSibling);
				}
				else
				{
					this._container.appendChild(this._wrapper);
				}
			}

			this.markAsTerminated(this._schedule.checkItemForTermination(this));
		}
	};
	BX.CrmScheduleItem.prototype.onHeaderClick = function(e)
	{
		this.view();
		e.preventDefault ? e.preventDefault() : (e.returnValue = false);
	};
	BX.CrmScheduleItem.prototype.onSetAsDoneButtonClick = function(e)
	{
		if(this.canComplete())
		{
			this.setAsDone(!this.isDone());
		}
	};
	BX.CrmScheduleItem.prototype.onActivityCreate = function(activity, data)
	{
		this._schedule.getManager().onActivityCreated(activity, data);
	};

	BX.CrmScheduleItem.isDone = function(data)
	{
		var entityData = BX.prop.getObject(data, "ASSOCIATED_ENTITY", {});
		return BX.CrmActivityStatus.isFinal(BX.prop.getInteger(entityData, "STATUS", 0));
	};
	BX.CrmScheduleItem.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItem();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemActivity) === "undefined")
{
	BX.CrmScheduleItemActivity = function()
	{
		BX.CrmScheduleItemActivity.superclass.constructor.apply(this);
		this._postponeController = null;
	};
	BX.extend(BX.CrmScheduleItemActivity, BX.CrmScheduleItem);
	BX.CrmScheduleItemActivity.prototype.getTypeId = function()
	{
		return BX.CrmTimelineType.activity;
	};
	BX.CrmScheduleItemActivity.prototype.isDone = function()
	{
		var status = BX.prop.getInteger(this.getAssociatedEntityData(), "STATUS");
		return (status ===  BX.CrmActivityStatus.completed || status ===  BX.CrmActivityStatus.autoCompleted);
	};
	BX.CrmScheduleItemActivity.prototype.setAsDone = function(isDone)
	{
		isDone = !!isDone;
		if(this.isDone() === isDone)
		{
			return;
		}

		var id = BX.prop.getInteger(this.getAssociatedEntityData(), "ID", 0);
		if(id > 0)
		{
			this._activityEditor.setActivityCompleted(
				id,
				isDone,
				BX.delegate(this.onSetAsDoneCompleted, this)
			);
		}
	};
	BX.CrmScheduleItemActivity.prototype.postpone = function(offset)
	{
		var id = this.getSourceId();
		if(id > 0 && offset > 0)
		{
			this._activityEditor.postponeActivity(
				id,
				offset,
				BX.delegate(this.onPosponeCompleted, this)
			);
		}
	};
	BX.CrmScheduleItemActivity.prototype.view = function()
	{
		var id = BX.prop.getInteger(this.getAssociatedEntityData(), "ID", 0);
		if(id > 0)
		{
			this._activityEditor.viewActivity(id);
		}
	};
	BX.CrmScheduleItemActivity.prototype.edit = function()
	{
		this.closeContextMenu();
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();
		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityData = this.getAssociatedEntityData();
			var id = BX.prop.getInteger(entityData, "ID", 0);
			if(id > 0)
			{
				this._activityEditor.editActivity(id);
			}
		}
	};
	BX.CrmScheduleItemActivity.prototype.processRemoval = function()
	{
		this.closeContextMenu();
		this._detetionConfirmDlgId = "entity_timeline_deletion_" + this.getId() + "_confirm";
		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("removeConfirmTitle"),
					content: this.getRemoveMessage()
				}
			);
		}

		dlg.open().then(BX.delegate(this.onRemovalConfirm, this), BX.delegate(this.onRemovalCancel, this));
	};
	BX.CrmScheduleItemActivity.prototype.getRemoveMessage = function()
	{
		return this.getMessage('removeConfirm');
	};
	BX.CrmScheduleItemActivity.prototype.onRemovalConfirm = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this.remove();
	};
	BX.CrmScheduleItemActivity.prototype.onRemovalCancel = function()
	{
	};
	BX.CrmScheduleItemActivity.prototype.remove = function()
	{
		var associatedEntityTypeId = this.getAssociatedEntityTypeId();

		if(associatedEntityTypeId === BX.CrmEntityType.enumeration.activity)
		{
			var entityData = this.getAssociatedEntityData();

			var id = BX.prop.getInteger(entityData, "ID", 0);

			if(id > 0)
			{
				var activityEditor = this._activityEditor;
				var item = activityEditor.getItemById(id);
				if (item)
				{
					activityEditor.deleteActivity(id, true);
				}
				else
				{
					var activityType = activityEditor.getSetting('ownerType', '');
					var activityId = activityEditor.getSetting('ownerID', '');

					var serviceUrl = BX.util.add_url_param(activityEditor.getSetting('serviceUrl', ''),
						{
							id: id,
							action: 'get_activity',
							ownertype: activityType,
							ownerid: activityId
						}
					);
					BX.ajax({
						'url': serviceUrl,
						'method': 'POST',
						'dataType': 'json',
						'data':
							{
								'ACTION' : 'GET_ACTIVITY',
								'ID': id,
								'OWNER_TYPE': activityType,
								'OWNER_ID': activityId
							},
						onsuccess: BX.delegate(
							function(data)
							{
								if(typeof(data['ACTIVITY']) !== 'undefined')
								{
									activityEditor._handleActivityChange(data['ACTIVITY']);
									window.setTimeout(BX.delegate(this.remove ,this), 500);
								}
							},
							this
						),
						onfailure: function(data){}
					});
				}
			}
		}
	};
	BX.CrmScheduleItemActivity.prototype.getDeadline = function()
	{
		var entityData = this.getAssociatedEntityData();
		var time = BX.parseDate(
			entityData["DEADLINE_SERVER"],
			false,
			"YYYY-MM-DD",
			"YYYY-MM-DD HH:MI:SS"
		);

		if(!time)
		{
			return null;
		}

		return new Date(time.getTime() + 1000 * BX.CrmTimelineItem.getUserTimezoneOffset());
	};
	BX.CrmScheduleItemActivity.prototype.markAsDone = function(isDone)
	{
		isDone = !!isDone;
		this.getAssociatedEntityData()["STATUS"] = isDone ? BX.CrmActivityStatus.completed : BX.CrmActivityStatus.waiting;
	};
	BX.CrmScheduleItemActivity.prototype.getPrepositionText = function(direction)
	{
		return this.getMessage(direction === BX.CrmActivityDirection.incoming ? "from" : "to");
	};
	BX.CrmScheduleItemActivity.prototype.getTypeDescription = function(direction)
	{
		return "";
	};
	BX.CrmScheduleItemActivity.prototype.isContextMenuEnabled = function()
	{
		return ((!!this.getDeadline() && this.canPostpone()) || this.canComplete());
	};
	BX.CrmScheduleItemActivity.prototype.prepareContent = function(options)
	{
		var deadline = this.getDeadline();
		var timeText = deadline ? this.formatDateTime(deadline) : this.getMessage("termless");

		var entityData = this.getAssociatedEntityData();
		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
		var isDone = this.isDone();
		var subject = BX.prop.getString(entityData, "SUBJECT", "");
		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var title = BX.prop.getString(communication, "TITLE", "");
		var showUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "TYPE", "") !== ""
			? BX.prop.getString(communication, "VALUE", "") : "";

		var wrapperClassName = this.getWrapperClassName();
		if(wrapperClassName !== "")
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned" + " " + wrapperClassName;
		}
		else
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned";
		}

		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });

		var iconClassName = this.getIconClassName();
		if(this.isCounterEnabled())
		{
			iconClassName += " crm-entity-stream-section-counter";
		}
		wrapper.appendChild(BX.create("DIV", { attrs: { className: iconClassName } }));

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		var contentWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-section-content" } }
		);
		wrapper.appendChild(contentWrapper);

		//region Details
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var contentInnerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-event" }
			}
		);
		contentWrapper.appendChild(contentInnerWrapper);

		this._deadlineNode = BX.create("SPAN",
			{ attrs: { className: "crm-entity-stream-content-event-time" }, text: timeText }
		);

		var headerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" }
			}
		);
		headerWrapper.appendChild(BX.create("SPAN",
			{
				attrs:
					{
						className: "crm-entity-stream-content-event-title"
					},
				text: this.getTypeDescription(direction)
			}
		));

		var statusNode = this.getStatusNode();
		if (statusNode)
		{
			headerWrapper.appendChild(statusNode);
		}
		headerWrapper.appendChild(this._deadlineNode);

		contentInnerWrapper.appendChild(headerWrapper);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" }
			}
		);
		contentInnerWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: {className: "crm-entity-stream-content-detail-title"},
					children:
					[
						BX.create("A",
							{
								attrs: { href: "#" },
								events: { "click": this._headerClickHandler },
								text: subject
							}
						)
					]
				}
			)
		);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					text: this.cutOffText(description, 128)
				}
			)
		);

		var additionalDetails = this.prepareDetailNodes();
		if(BX.type.isArray(additionalDetails))
		{
			for(var i = 0, length = additionalDetails.length; i < length; i++)
			{
				detailWrapper.appendChild(additionalDetails[i]);
			}
		}

		var members = BX.create("DIV",
			{  attrs: { className: "crm-entity-stream-content-detail-contact-info" } }
		);

		if(title !== '')
		{
			members.appendChild(
				BX.create("SPAN",
					{ text: this.getPrepositionText(direction) + ": " }
				)
			);

			if(showUrl !== '')
			{
				members.appendChild(
					BX.create("A",
						{
							attrs: { href: showUrl },
							text: title
						}
					)
				);
			}
			else
			{
				members.appendChild(BX.create("SPAN", { text: title }));
			}
		}

		if(communicationValue !== '')
		{
			var communicationNode = this.prepareCommunicationNode(communicationValue);
			if(communicationNode)
			{
				members.appendChild(communicationNode);
			}
		}

		detailWrapper.appendChild(members);
		//endregion
		//region Set as Done Button
		var setAsDoneButton = BX.create("INPUT",
			{
				attrs:
					{
						type: "checkbox",
						className: "crm-entity-stream-planned-apply-btn",
						checked: isDone
					},
				events: { change: this._setAsDoneButtonHandler }
			}
		);

		if(!this.canComplete())
		{
			setAsDoneButton.disabled = true;
		}

		var buttonContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-planned-action" },
				children: [ setAsDoneButton ]
			}
		);
		contentInnerWrapper.appendChild(buttonContainer);
		//endregion

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentInnerWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-action" }
			}
		);
		contentInnerWrapper.appendChild(this._actionContainer);
		//endregion

		return wrapper;
	};
	BX.CrmScheduleItemActivity.prototype.getStatusNode = function()
	{
		return null;
	};
	BX.CrmScheduleItemActivity.prototype.prepareCommunicationNode = function(communicationValue)
	{
		return BX.create("SPAN", { text: " " + communicationValue });
	};
	BX.CrmScheduleItemActivity.prototype.prepareDetailNodes = function()
	{
		return [];
	};
	BX.CrmScheduleItemActivity.prototype.prepareContextMenuItems = function()
	{
		var menuItems = [];

		if (!this.isReadOnly())
		{
			if (this.isEditable())
			{
				menuItems.push({ id: "edit", text: this.getMessage("menuEdit"), onclick: BX.delegate(this.edit, this)});
			}

			menuItems.push({ id: "remove", text: this.getMessage("menuDelete"), onclick: BX.delegate(this.processRemoval, this)});
		}

		var handler = BX.delegate(this.onContextMenuItemSelect, this);

		if(!this._postponeController)
		{
			this._postponeController = BX.CrmSchedulePostponeController.create("", { item: this });
		}

		var postponeMenu =
			{
				id: "postpone",
				text: this._postponeController.getTitle(),
				items: []
			};

		var commands = this._postponeController.getCommandList();
		for(var i = 0, length = commands.length; i < length; i++)
		{
			var command = commands[i];
			postponeMenu.items.push(
				{
					id: command["name"],
					text: command["title"],
					onclick: handler
				}
			);
		}
		menuItems.push(postponeMenu);
		return menuItems;
	};
	BX.CrmScheduleItemActivity.prototype.onContextMenuItemSelect = function(e, item)
	{
		this.closeContextMenu();
		if(this._postponeController)
		{
			this._postponeController.processCommand(item.id);
		}
	};
}

if(typeof(BX.CrmScheduleItemEmail) === "undefined")
{
	BX.CrmScheduleItemEmail = function()
	{
		BX.CrmScheduleItemEmail.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemEmail, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemEmail.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-email";
	};
	BX.CrmScheduleItemEmail.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-email";
	};
	BX.CrmScheduleItemEmail.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmScheduleEmailAction.create(
				"email",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor
				}
			)
		);
	};
	BX.CrmScheduleItemEmail.prototype.getTypeDescription = function(direction)
	{
		return this.getMessage(direction === BX.CrmActivityDirection.incoming ? "incomingEmail" : "outgoingEmail");
	};
	BX.CrmScheduleItemEmail.prototype.getRemoveMessage = function()
	{
		var entityData = this.getAssociatedEntityData();
		var title = BX.prop.getString(entityData, "SUBJECT", "");
		title = BX.util.htmlspecialchars(title);
		return this.getMessage('emailRemove').replace("#TITLE#", title);
	};
	BX.CrmScheduleItemEmail.prototype.isEditable = function()
	{
		return false;
	};
	BX.CrmScheduleItemEmail.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemEmail();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemCall) === "undefined")
{
	BX.CrmScheduleItemCall = function()
	{
		BX.CrmScheduleItemCall.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemCall, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemCall.prototype.getWrapperClassName = function()
	{
		return 'crm-entity-stream-section-call';
	};
	BX.CrmScheduleItemCall.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-call";
	};
	BX.CrmScheduleItemCall.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmScheduleCallAction.create(
				"call",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor,
					ownerInfo: this._schedule.getOwnerInfo()
				}
			)
		);
	};
	BX.CrmScheduleItemCall.prototype.getTypeDescription = function(direction)
	{
		var entityData = this.getAssociatedEntityData();
		var callInfo =  BX.prop.getObject(entityData, "CALL_INFO", null);
		var callTypeText = callInfo !== null ? BX.prop.getString(callInfo, "CALL_TYPE_TEXT", "") : "";
		if(callTypeText !== "")
		{
			return callTypeText;
		}
		let type = '';
		if(direction == 1)
			type = 'incomingCall';
		if(direction == 2)
			type = 'outgoingCall';
		if(direction == 3)
			type = 'personalincomingCall';
		if(direction == 4)
			type = 'personaloutgoingCall';
		if(direction == 5)
			type = 'corpincomingCall';
		if(direction == 6)
			type = 'corpoutgoingCall';

		return this.getMessage(type);
		//return this.getMessage(direction === BX.CrmActivityDirection.incoming ? "incomingCall" : "outgoingCall");
	};
	BX.CrmScheduleItemCall.prototype.getRemoveMessage = function()
	{
		var entityData = this.getAssociatedEntityData();
		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
		var title = BX.prop.getString(entityData, "SUBJECT", "");
		var messageName = 'getRemoveMessage';//(direction === BX.CrmActivityDirection.incoming) ? 'incomingCallRemove' : 'outgoingCallRemove';
		title = BX.util.htmlspecialchars(title);
		return this.getMessage(messageName).replace("#TITLE#", title);
	};
	BX.CrmScheduleItemCall.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemCall();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemCallTracker) === "undefined")
{
	BX.CrmScheduleItemCallTracker = function()
	{
		BX.CrmScheduleItemCallTracker.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemCallTracker, BX.CrmScheduleItemCall);
	BX.CrmScheduleItemCallTracker.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemCallTracker();
		self.initialize(id, settings);
		return self;
	};

	BX.CrmScheduleItemCallTracker.prototype.getStatusNode = function()
	{
		var entityData = this.getAssociatedEntityData();
		var callInfo = BX.prop.getObject(entityData, "CALL_INFO", null);

		if (!callInfo)
		{
			return false;
		}
		if (!BX.prop.getBoolean(callInfo, "HAS_STATUS", false))
		{
			return false;
		}

		var isSuccessfull = BX.prop.getBoolean(callInfo, "SUCCESSFUL", false);
		var statusText = BX.prop.getString(callInfo, "STATUS_TEXT", "");

		return BX.create("DIV",
			{
				attrs:
					{
						className: isSuccessfull
							? "crm-entity-stream-content-event-successful"
							: "crm-entity-stream-content-event-missing"
					},
				text: statusText
			}
		)
	};
}

if(typeof(BX.CrmScheduleItemMeeting) === "undefined")
{
	BX.CrmScheduleItemMeeting = function()
	{
		BX.CrmScheduleItemMeeting.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemMeeting, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemMeeting.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmScheduleItemMeeting.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-meeting";
	};
	BX.CrmScheduleItemMeeting.prototype.prepareActions = function()
	{
	};
	BX.CrmScheduleItemMeeting.prototype.getPrepositionText = function()
	{
		return this.getMessage("reciprocal");
	};
	BX.CrmScheduleItemMeeting.prototype.getRemoveMessage = function()
	{
		var entityData = this.getAssociatedEntityData();
		var title = BX.prop.getString(entityData, "SUBJECT", "");
		title = BX.util.htmlspecialchars(title);
		return this.getMessage('meetingRemove').replace("#TITLE#", title);
	};
	BX.CrmScheduleItemMeeting.prototype.getTypeDescription = function()
	{
		return this.getMessage("meeting");
	};
	BX.CrmScheduleItemMeeting.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemMeeting();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemTask) === "undefined")
{
	BX.CrmScheduleItemTask = function()
	{
		BX.CrmScheduleItemTask.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemTask, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemTask.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-planned-task";
	};
	BX.CrmScheduleItemTask.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-task";
	};
	BX.CrmScheduleItemTask.prototype.getTypeDescription = function()
	{
		return this.getMessage("task");
	};
	BX.CrmScheduleItemTask.prototype.getPrepositionText = function(direction)
	{
		return this.getMessage("reciprocal");
	};
	BX.CrmScheduleItemTask.prototype.getRemoveMessage = function()
	{
		var entityData = this.getAssociatedEntityData();
		var title = BX.prop.getString(entityData, "SUBJECT", "");
		title = BX.util.htmlspecialchars(title);
		return this.getMessage('taskRemove').replace("#TITLE#", title);
	};
	BX.CrmScheduleItemTask.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemTask();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemWebForm) === "undefined")
{
	BX.CrmScheduleItemWebForm = function()
	{
		BX.CrmScheduleItemWebForm.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemWebForm, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemWebForm.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmScheduleItemWebForm.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-crmForm";
	};
	BX.CrmScheduleItemWebForm.prototype.prepareActions = function()
	{
	};
	BX.CrmScheduleItemWebForm.prototype.getPrepositionText = function()
	{
		return this.getMessage("from");
	};
	BX.CrmScheduleItemWebForm.prototype.getTypeDescription = function()
	{
		return this.getMessage("webform");
	};
	BX.CrmScheduleItemWebForm.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemWebForm();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemDelivery) === "undefined")
{
	BX.CrmScheduleItemDelivery = function()
	{
		BX.CrmScheduleItemDelivery.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemDelivery, BX.CrmScheduleItemActivity);

	BX.CrmScheduleItemDelivery.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemDelivery();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemWait) === "undefined")
{
	BX.CrmScheduleItemWait = function()
	{
		BX.CrmScheduleItemWait.superclass.constructor.apply(this);
		this._postponeController = null;
	};
	BX.extend(BX.CrmScheduleItemWait, BX.CrmScheduleItem);
	/*BX.CrmScheduleItemWait.prototype.doInitialize = function()
	{
		BX.CrmScheduleItemWait.superclass.doInitialize.apply(this);
	};*/
	BX.CrmScheduleItemWait.prototype.getTypeId = function()
	{
		return BX.CrmTimelineType.wait;
	};
	BX.CrmScheduleItemWait.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-wait";
	};
	BX.CrmScheduleItemWait.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-wait";
	};
	BX.CrmScheduleItemWait.prototype.prepareActions = function()
	{
	};
	BX.CrmScheduleItemWait.prototype.isCounterEnabled = function()
	{
		return false;
	};
	BX.CrmScheduleItemWait.prototype.getDeadline = function()
	{
		var entityData = this.getAssociatedEntityData();
		var time = BX.parseDate(
			entityData["DEADLINE_SERVER"],
			false,
			"YYYY-MM-DD",
			"YYYY-MM-DD HH:MI:SS"
		);

		if(!time)
		{
			return null;
		}

		return new Date(time.getTime() + 1000 * BX.CrmTimelineItem.getUserTimezoneOffset());
	};
	BX.CrmScheduleItemWait.prototype.isDone = function()
	{
		return (BX.prop.getString(this.getAssociatedEntityData(), "COMPLETED", "N") ===  "Y");
	};
	BX.CrmScheduleItemWait.prototype.setAsDone = function(isDone)
	{
		isDone = !!isDone;
		if(this.isDone() === isDone)
		{
			return;
		}

		var id = this.getAssociatedEntityId();
		if(id > 0)
		{
			var editor = this._schedule.getManager().getWaitEditor();
			if(editor)
			{
				editor.complete(
					id,
					isDone,
					BX.delegate(this.onSetAsDoneCompleted, this)
				);
			}
		}
	};
	BX.CrmScheduleItemWait.prototype.postpone = function(offset)
	{
		var id = this.getAssociatedEntityId();
		if(id > 0 && offset > 0)
		{
			var editor = this._schedule.getManager().getWaitEditor();
			if(editor)
			{
				editor.postpone(
					id,
					offset,
					BX.delegate(this.onPosponeCompleted, this)
				);
			}
		}
	};
	BX.CrmScheduleItemWait.prototype.isContextMenuEnabled = function()
	{
		return !!this.getDeadline() && this.canPostpone();
	};
	BX.CrmScheduleItemWait.prototype.prepareContent = function()
	{
		var deadline = this.getDeadline();
		var timeText = deadline ? this.formatDateTime(deadline) : this.getMessage("termless");

		var entityData = this.getAssociatedEntityData();
		var isDone = this.isDone();
		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");

		var wrapperClassName = this.getWrapperClassName();
		if(wrapperClassName !== "")
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned" + " " + wrapperClassName;
		}
		else
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned";
		}

		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });

		var iconClassName = this.getIconClassName();
		if(this.isCounterEnabled())
		{
			iconClassName += " crm-entity-stream-section-counter";
		}

		wrapper.appendChild(BX.create("DIV", { attrs: { className: iconClassName } }));

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		var contentWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-section-content" } }
		);
		wrapper.appendChild(contentWrapper);

		//region Details
		if(description !== "")
		{
			description = BX.util.trim(description);
			description = BX.util.strip_tags(description);
			description = this.cutOffText(description, 512);
			description = BX.util.nl2br(description);
		}

		var contentInnerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-event" }
			}
		);
		contentWrapper.appendChild(contentInnerWrapper);

		this._deadlineNode = BX.create("SPAN",
			{ attrs: { className: "crm-entity-stream-content-event-time" }, text: timeText }
		);

		var headerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children:
					[
						BX.create("SPAN",
							{
								attrs: { className: "crm-entity-stream-content-event-title" },
								text: this.getMessage("wait")
							}
						),
						this._deadlineNode
					]
			}
		);
		contentInnerWrapper.appendChild(headerWrapper);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" }
			}
		);
		contentInnerWrapper.appendChild(detailWrapper);

		detailWrapper.appendChild(
			BX.create("DIV",
				{
					attrs: { className: "crm-entity-stream-content-detail-description" },
					html: description
				}
			)
		);

		var members = BX.create("DIV",
			{  attrs: { className: "crm-entity-stream-content-detail-contact-info" } }
		);

		detailWrapper.appendChild(members);
		//endregion

		//region Set as Done Button
		var setAsDoneButton = BX.create("INPUT",
			{
				attrs:
					{
						type: "checkbox",
						className: "crm-entity-stream-planned-apply-btn",
						checked: isDone
					},
				events: { change: this._setAsDoneButtonHandler }
			}
		);

		if(!this.canComplete())
		{
			setAsDoneButton.disabled = true;
		}

		var buttonContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-planned-action" },
				children: [ setAsDoneButton ]
			}
		);
		contentInnerWrapper.appendChild(buttonContainer);
		//endregion

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentInnerWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-action" }
			}
		);
		contentInnerWrapper.appendChild(this._actionContainer);
		//endregion

		return wrapper;
	};
	BX.CrmScheduleItemWait.prototype.prepareContextMenuItems = function()
	{
		var menuItems = [];
		var handler = BX.delegate(this.onContextMenuItemSelect, this);

		if(!this._postponeController)
		{
			this._postponeController = BX.CrmSchedulePostponeController.create("", { item: this });
		}

		var postponeMenu =
			{
				id: "postpone",
				text: this._postponeController.getTitle(),
				items: []
			};

		var commands = this._postponeController.getCommandList();
		for(var i = 0, length = commands.length; i < length; i++)
		{
			var command = commands[i];
			postponeMenu.items.push(
				{
					id: command["name"],
					text: command["title"],
					onclick: handler
				}
			);
		}
		menuItems.push(postponeMenu);
		return menuItems;
	};
	BX.CrmScheduleItemWait.prototype.onContextMenuItemSelect = function(e, item)
	{
		this.closeContextMenu();
		if(this._postponeController)
		{
			this._postponeController.processCommand(item.id);
		}
	};
	BX.CrmScheduleItemWait.prototype.getTypeDescription = function()
	{
		return this.getMessage("wait");
	};
	BX.CrmScheduleItemWait.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemWait();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemActivityRequest) === "undefined")
{
	BX.CrmScheduleItemActivityRequest = function()
	{
		BX.CrmScheduleItemActivityRequest.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemActivityRequest, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemActivityRequest.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmScheduleItemActivityRequest.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-robot";
	};
	BX.CrmScheduleItemActivityRequest.prototype.getTypeDescription = function()
	{
		return this.getMessage("activityRequest");
	};
	BX.CrmScheduleItemActivityRequest.prototype.isEditable = function()
	{
		return false;
	};
	BX.CrmScheduleItemActivityRequest.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemActivityRequest();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemActivityRestApplication) === "undefined")
{
	BX.CrmScheduleItemActivityRestApplication = function()
	{
		BX.CrmScheduleItemActivityRestApplication.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemActivityRestApplication, BX.CrmScheduleItemActivity);
	BX.CrmScheduleItemActivityRestApplication.prototype.getWrapperClassName = function()
	{
		return "";
	};
	BX.CrmScheduleItemActivityRestApplication.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-rest";
	};
	BX.CrmScheduleItemActivityRestApplication.prototype.prepareContent = function(options)
	{
		var wrapper = BX.CrmScheduleItemActivityRestApplication.superclass.prepareContent.apply(this, options);
		var data = this.getAssociatedEntityData();

		if (data['APP_TYPE'] && data['APP_TYPE']['ICON_SRC'])
		{
			var iconNode = wrapper.querySelector('[class="'+this.getIconClassName()+'"]');
			if (iconNode)
			{
				iconNode.style.backgroundImage = "url('" +  data['APP_TYPE']['ICON_SRC'] + "')";
				iconNode.style.backgroundPosition = "center center";
			}
		}

		return wrapper;
	};
	BX.CrmScheduleItemActivityRestApplication.prototype.getTypeDescription = function()
	{
		var entityData = this.getAssociatedEntityData();
		if (entityData['APP_TYPE'] && entityData['APP_TYPE']['NAME'])
		{
			return entityData['APP_TYPE']['NAME'];
		}

		return this.getMessage("restApplication");
	};
	BX.CrmScheduleItemActivityRestApplication.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemActivityRestApplication();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmScheduleItemActivityOpenLine) === "undefined")
{
	BX.CrmScheduleItemActivityOpenLine = function()
	{
		BX.CrmScheduleItemActivityOpenLine.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemActivityOpenLine, BX.CrmScheduleItemActivity);
	/*BX.CrmScheduleItemActivityOpenLine.prototype.doInitialize = function()
	{
		BX.CrmScheduleItemActivityOpenLine.superclass.doInitialize.apply(this);
	};*/
	BX.CrmScheduleItemActivityOpenLine.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-IM";
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-IM";
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.prepareActions = function()
	{
		if(this.isReadOnly())
		{
			return;
		}

		this._actions.push(
			BX.CrmScheduleOpenLineAction.create(
				"openline",
				{
					item: this,
					container: this._actionContainer,
					entityData: this.getAssociatedEntityData(),
					activityEditor: this._activityEditor,
					ownerInfo: this._schedule.getOwnerInfo()
				}
			)
		);
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.getTypeDescription = function()
	{
		return this.getMessage("openLine");
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.getPrepositionText = function(direction)
	{
		return this.getMessage("reciprocal");
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.prepareCommunicationNode = function(communicationValue)
	{
		return null;
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.prepareDetailNodes = function()
	{
		var wrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-content-detail-IM" } }
		);

		var messageWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-content-detail-IM-messages" } }
		);
		wrapper.appendChild(messageWrapper);

		var openLineData = BX.prop.getObject(this.getAssociatedEntityData(), "OPENLINE_INFO", null);
		if(openLineData)
		{
			var messages = BX.prop.getArray(openLineData, "MESSAGES", []);
			for(var i = 0, length = messages.length; i < length; i++)
			{
				var message = messages[i];
				var isExternal = BX.prop.getBoolean(message, "IS_EXTERNAL", true);

				messageWrapper.appendChild(
					BX.create("DIV",
						{
							attrs:
							{
								className: isExternal
							        ? "crm-entity-stream-content-detail-IM-message-incoming"
								    : "crm-entity-stream-content-detail-IM-message-outgoing"
							},
							text: BX.prop.getString(message, "MESSAGE", "")
						}
					)
				);
			}
		}

		return [ wrapper ];
	};
	BX.CrmScheduleItemActivityOpenLine.prototype.view = function()
	{
		if(typeof(window.top['BXIM']) === 'undefined')
		{
			window.alert(this.getMessage("openLineNotSupported"));
			return;
		}

		var slug = "";
		var communication = BX.prop.getObject(this.getAssociatedEntityData(), "COMMUNICATION", null);
		if(communication)
		{
			if(BX.prop.getString(communication, "TYPE") === "IM")
			{
				slug = BX.prop.getString(communication, "VALUE");
			}
		}

		if(slug !== "")
		{
			window.top['BXIM'].openMessengerSlider(slug, {RECENT: 'N', MENU: 'N'});
		}
	};
	BX.CrmScheduleItemActivityOpenLine.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemActivityOpenLine();
		self.initialize(id, settings);
		return self;
	};
}

//
if(typeof(BX.CrmScheduleItemActivityZoom) === "undefined")
{
	BX.CrmScheduleItemActivityZoom = function()
	{
		BX.CrmScheduleItemActivityZoom.superclass.constructor.apply(this);
	};
	BX.extend(BX.CrmScheduleItemActivityZoom, BX.CrmScheduleItemActivity);

	BX.CrmScheduleItemActivityZoom.prototype.getWrapperClassName = function()
	{
		return "crm-entity-stream-section-zoom";
	};
	BX.CrmScheduleItemActivityZoom.prototype.getIconClassName = function()
	{
		return "crm-entity-stream-section-icon crm-entity-stream-section-icon-zoom";
	};
	BX.CrmScheduleItemActivityZoom.prototype.getTypeDescription = function()
	{
		return this.getMessage("zoom");
	};
	BX.CrmScheduleItemActivityZoom.prototype.getPrepositionText = function(direction)
	{
	};
	BX.CrmScheduleItemActivityZoom.prototype.prepareCommunicationNode = function(communicationValue)
	{
		return null;
	};
	BX.CrmScheduleItemActivityZoom.prototype.prepareContent = function(options)
	{
		var deadline = this.getDeadline();
		var timeText = deadline ? this.formatDateTime(deadline) : this.getMessage("termless");

		var entityData = this.getAssociatedEntityData();
		var direction = BX.prop.getInteger(entityData, "DIRECTION", 0);
		var isDone = this.isDone();
		var subject = BX.prop.getString(entityData, "SUBJECT", "");
		var description = BX.prop.getString(entityData, "DESCRIPTION_RAW", "");

		var communication =  BX.prop.getObject(entityData, "COMMUNICATION", {});
		var title = BX.prop.getString(communication, "TITLE", "");
		var showUrl = BX.prop.getString(communication, "SHOW_URL", "");
		var communicationValue = BX.prop.getString(communication, "TYPE", "") !== ""
			? BX.prop.getString(communication, "VALUE", "") : "";

		var wrapperClassName = this.getWrapperClassName();
		if(wrapperClassName !== "")
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned" + " " + wrapperClassName;
		}
		else
		{
			wrapperClassName = "crm-entity-stream-section crm-entity-stream-section-planned";
		}

		var wrapper = BX.create("DIV", { attrs: { className: wrapperClassName } });

		var iconClassName = this.getIconClassName();
		if(this.isCounterEnabled())
		{
			iconClassName += " crm-entity-stream-section-counter";
		}
		wrapper.appendChild(BX.create("DIV", { attrs: { className: iconClassName } }));

		//region Context Menu
		if(this.isContextMenuEnabled())
		{
			wrapper.appendChild(this.prepareContextMenuButton());
		}
		//endregion

		var contentWrapper = BX.create("DIV",
			{ attrs: { className: "crm-entity-stream-section-content" } }
		);
		wrapper.appendChild(contentWrapper);

		//region Details
		if(description !== "")
		{
			//trim leading spaces
			description = description.replace(/^\s+/,'');
		}

		var contentInnerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-event" }
			}
		);
		contentWrapper.appendChild(contentInnerWrapper);

		this._deadlineNode = BX.create("SPAN",
			{ attrs: { className: "crm-entity-stream-content-event-time" }, text: timeText }
		);

		var headerWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-header" },
				children:
					[
						BX.create("SPAN",
							{
								attrs:
									{
										className: "crm-entity-stream-content-event-title"
									},
								text: this.getTypeDescription(direction)
							}
						),
						this._deadlineNode
					]
			}
		);
		contentInnerWrapper.appendChild(headerWrapper);

		var detailWrapper = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail" }
			}
		);
		contentInnerWrapper.appendChild(detailWrapper);

		if (entityData['ZOOM_INFO'])
		{
			var topic = entityData['ZOOM_INFO']['TOPIC'];
			var duration = entityData['ZOOM_INFO']['DURATION'];
			var startTimeStamp = BX.parseDate(
				entityData['ZOOM_INFO']['CONF_START_TIME'],
				false,
				"YYYY-MM-DD",
				"YYYY-MM-DD HH:MI:SS"
			);
			var date = new Date(startTimeStamp.getTime() + 1000 * BX.CrmTimelineItem.getUserTimezoneOffset());
			var detailZoomMessage = BX.create("span",
				{
					text: this.getMessage("zoomCreatedMessage")
						.replace("#CONFERENCE_TITLE#", topic)
						.replace("#DATE_TIME#", this.formatDateTime(date))
						.replace("#DURATION#", duration)
				}
			);

			var detailZoomInfoLink = BX.create("A",
				{
					attrs:
						{
							href: entityData['ZOOM_INFO']['CONF_URL'],
							target: "_blank",
						},
					text: entityData['ZOOM_INFO']['CONF_URL']
				}
			);

			var detailZoomInfo = BX.create("DIV",
				{
					attrs: {className: "crm-entity-stream-content-detail-zoom-info"},
					children: [ detailZoomMessage, detailZoomInfoLink ]
				}
			);

			detailWrapper.appendChild(detailZoomInfo);

			var detailZoomCopyInviteLink = BX.create("A",
				{
					attrs: {
						className: 'ui-link ui-link-dashed',
						"data-url": entityData['ZOOM_INFO']['CONF_URL']
					},
					text: this.getMessage("zoomCreatedCopyInviteLink"),
				}
			);
			BX.clipboard.bindCopyClick(detailZoomCopyInviteLink, {
				text: entityData['ZOOM_INFO']['CONF_URL'],
			});

			var detailZoomStartConferenceButton = BX.create("BUTTON",
				{
					attrs: {className: 'ui-btn ui-btn-sm ui-btn-primary'},
					text: this.getMessage("zoomCreatedStartConference"),
					events: { "click": function() {
							window.open(entityData['ZOOM_INFO']['CONF_URL']);
						}
					}
				}
			);

			var detailZoomCopyInviteLinkWrapper = BX.create("DIV",
				{
					attrs: {className: "crm-entity-stream-content-detail-zoom-link-wrapper"},
					children: [ detailZoomCopyInviteLink ]
				}
			);
			detailWrapper.appendChild(detailZoomCopyInviteLinkWrapper);
			detailWrapper.appendChild(detailZoomStartConferenceButton);
		}

		var additionalDetails = this.prepareDetailNodes();
		if(BX.type.isArray(additionalDetails))
		{
			for(var i = 0, length = additionalDetails.length; i < length; i++)
			{
				detailWrapper.appendChild(additionalDetails[i]);
			}
		}

		//endregion
		//region Set as Done Button
		var setAsDoneButton = BX.create("INPUT",
			{
				attrs:
					{
						type: "checkbox",
						className: "crm-entity-stream-planned-apply-btn",
						checked: isDone
					},
				events: { change: this._setAsDoneButtonHandler }
			}
		);

		if(!this.canComplete())
		{
			setAsDoneButton.disabled = true;
		}

		var buttonContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-planned-action" },
				children: [ setAsDoneButton ]
			}
		);
		contentInnerWrapper.appendChild(buttonContainer);
		//endregion

		//region Author
		var authorNode = this.prepareAuthorLayout();
		if(authorNode)
		{
			contentInnerWrapper.appendChild(authorNode);
		}
		//endregion

		//region  Actions
		this._actionContainer = BX.create("DIV",
			{
				attrs: { className: "crm-entity-stream-content-detail-action" }
			}
		);
		contentInnerWrapper.appendChild(this._actionContainer);
		//endregion

		return wrapper;
	};
	BX.CrmScheduleItemActivityZoom.prototype.prepareDetailNodes = function()
	{
	};
	BX.CrmScheduleItemActivityZoom.create = function(id, settings)
	{
		var self = new BX.CrmScheduleItemActivityZoom();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region Animation
if(typeof(BX.CrmTimelineItemAnimation) === "undefined")
{
	BX.CrmTimelineItemAnimation = function()
	{
		this._id = "";
		this._settings = {};
		this._initialItem = null;
		this._finalItem = null;
		this._events = null;
	};

	BX.CrmTimelineItemAnimation.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._initialItem = this.getSetting("initialItem");
			this._finalItem = this.getSetting("finalItem");

			this._anchor = this.getSetting("anchor");
			this._events = this.getSetting("events", {});
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		run: function()
		{
			this._node = this._initialItem.getWrapper();
			var originalPosition = BX.pos(this._node);
			this._initialYPosition = originalPosition.top;
			this._initialXPosition = originalPosition.left;
			this._initialWidth = this._node.offsetWidth;
			this._initialHeight = this._node.offsetHeight;

			this._anchorYPosition = BX.pos(this._anchor).top;

			this.createStub();
			this.createGhost();
			this.moveGhost();
		},
		createStub: function()
		{
			this._stub = BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-stream-section crm-entity-stream-section-planned crm-entity-stream-section-shadow" },
					children :
						[
							BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon" } }),
							BX.create(
								"DIV",
								{
									props: { className: "crm-entity-stream-section-content" },
									style: { height: this._initialHeight + "px" }
								}
							)
						]
				}
			);

			this._node.parentNode.insertBefore(this._stub, this._node);
		},
		createGhost: function()
		{
			this._ghostNode = this._node;
			this._ghostNode.style.position = "absolute";
			this._ghostNode.style.width = this._initialWidth + "px";
			this._ghostNode.style.height = this._initialHeight + "px";
			this._ghostNode.style.top = this._initialYPosition + "px";
			this._ghostNode.style.left = this._initialXPosition + "px";
			document.body.appendChild(this._ghostNode);
			setTimeout(BX.proxy(function (){BX.addClass(this._ghostNode, "crm-entity-stream-section-casper" )}, this), 20);
		},
		moveGhost: function ()
		{
			var node = this._ghostNode;
			var movingEvent = new BX.easing({
				duration : 500,
				start : { top: this._initialYPosition},
				finish: { top: this._anchorYPosition},
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					node.style.top = state.top + "px";
				}, this)
			});
			setTimeout( BX.proxy(function () {
				movingEvent.animate();
				node.style.boxShadow = "";
			}, this), 500);

			var placeEventAnim = new BX.easing({
				duration : 500,
				start : { height: 0 },
				finish: { height: this._initialHeight+20 },
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					this._anchor.style.height = state.height + "px";
				}, this),
				complete: BX.proxy(function () {
					if(BX.type.isFunction(this._events["complete"]))
					{
						this._events["complete"]();
					}

					this.addHistoryItem();
					this.removeGhost();
				}, this)
			});
			setTimeout(function (){placeEventAnim.animate()}, 500);
		},
		addHistoryItem: function()
		{
			var node = this._finalItem.getWrapper();

			this._anchor.parentNode.insertBefore(node, this._anchor.nextSibling);

			this._finalItemHeight = this._anchor.offsetHeight - node.offsetHeight;
			this._anchor.style.height = 0;
			node.style.marginBottom = this._finalItemHeight + "px";
		},
		removeGhost: function ()
		{
			var ghostNode = this._ghostNode;
			var finalNode = this._finalItem.getWrapper();

			ghostNode.style.overflow = "hidden";
			var hideCasperItem = new BX.easing({
				duration : 70,
				start : { opacity: 100, height: ghostNode.offsetHeight, marginBottom: this._finalItemHeight },
				finish: { opacity: 0, height: finalNode.offsetHeight, marginBottom: 20 },
				// transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					ghostNode.style.opacity = state.opacity / 100;
					ghostNode.style.height = state.height + "px";
					finalNode.style.marginBottom = state.marginBottom + "px";
				}, this),
				complete: BX.proxy(function () {
					ghostNode.remove();
					finalNode.style.marginBottom = "";
					this.collapseStub();

				}, this)
			});
			hideCasperItem.animate();
		},
		collapseStub: function ()
		{
			var removePlannedEvent = new BX.easing({
				duration : 500,
				start : { opacity: 100, height: this._initialHeight, marginBottom: 15},
				finish: { opacity: 0, height: 0, marginBottom: 0},
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					this._stub.style.height = state.height + "px";
					this._stub.style.marginBottom = state.marginBottom + "px";
					this._stub.style.opacity = state.opacity / 100;
				}, this),
				complete: BX.proxy( function(){this.inited = false} , this)

			});
			removePlannedEvent.animate();

		}
	};

	BX.CrmTimelineItemAnimation.create = function(id, settings)
	{
		var self = new BX.CrmTimelineItemAnimation();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmTimelineItemAnimationNew) === "undefined")
{
	BX.CrmTimelineItemAnimationNew = function()
	{
		this._id = "";
		this._settings = {};
		this._initialItem = null;
		this._finalItem = null;
		this._events = null;
	};

	BX.CrmTimelineItemAnimationNew.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._initialItem = this.getSetting("initialItem");
			this._finalItem = this.getSetting("finalItem");

			this._anchor = this.getSetting("anchor");
			this._events = this.getSetting("events", {});
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		addHistoryItem: function()
		{
			var node = this._finalItem.getWrapper();

			this._anchor.parentNode.insertBefore(node, this._anchor.nextSibling);

		},
		run: function()
		{
			this._node = this._initialItem.getWrapper();
			this.createStub();

			BX.addClass(this._node, 'crm-entity-stream-section-animate-start');

			this._startPosition = BX.pos(this._stub);

			this._node.style.position = "absolute";
			this._node.style.width = this._startPosition.width + "px";
			this._node.style.height = this._startPosition.height + "px";
			this._node.style.top = this._startPosition.top + "px";
			this._node.style.left = this._startPosition.left + "px";
			this._node.style.zIndex = 960;


			document.body.appendChild(this._node);

			var shift = BX.CrmTimelineItemShift.create(
				this._node,
				this._anchor,
				this._startPosition,
				this._stub,
				{ complete: BX.delegate(this.finish, this) }
			);
			shift.run();
		},
		createStub: function()
		{
			this._stub = BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-stream-section crm-entity-stream-section-planned crm-entity-stream-section-shadow" },
					children :
					[
						BX.create("DIV", { attrs: { className: "crm-entity-stream-section-icon" } }),
						BX.create(
							"DIV",
							{
								props: { className: "crm-entity-stream-section-content" },
								style: { height: this._initialItem._wrapper.clientHeight + "px" }
							}
						)
					]
				}
			);

			this._node.parentNode.insertBefore(this._stub, this._node);
		},
		finish: function()
		{
			var stubContainer = this._stub.querySelector('.crm-entity-stream-section-content');

			this._anchor.style.height = 0;
			//this._anchor.parentNode.insertBefore(this._node, this._anchor.nextSibling);

			setTimeout(
				BX.delegate(function() {
					BX.removeClass(this._node, 'crm-entity-stream-section-animate-start');
				}, this),
				0
			);

			this._node.style.opacity = 0;

			setTimeout( BX.delegate(
				function() {
					stubContainer.style.height = 0;
					stubContainer.style.opacity = 0;
					stubContainer.style.paddingTop = 0;
					stubContainer.style.paddingBottom = 0;
				},
				this
			), 120 );

			setTimeout( BX.delegate(
				function() {
					BX.remove(this._stub);
					BX.remove(this._node);
					this.addHistoryItem();

					if(BX.type.isFunction(this._events["complete"]))
					{
						this._events["complete"]();
					}
				},
				this
			), 420 );

		}
	};

	BX.CrmTimelineItemAnimationNew.create = function(id, settings)
	{
		var self = new BX.CrmTimelineItemAnimationNew();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.CrmTimelineItemExpand) === "undefined")
{
	BX.CrmTimelineItemExpand = function()
	{
		this._node = null;
		this._callback = null;
	};

	BX.CrmTimelineItemExpand.prototype =
	{
		initialize: function(node, callback)
		{
			this._node = node;
			this._callback = BX.type.isFunction(callback) ? callback : null;
		},
		run: function()
		{
			var position = BX.pos(this._node);

			this._node.style.height = 0;
			this._node.style.opacity = 0;
			this._node.style.overflow = "hidden";

			(new BX.easing(
					{
						duration : 150,
						start : { height: 0 },
						finish: { height: position.height },
						transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
						step: BX.delegate(this.onNodeHeightStep, this),
						complete: BX.delegate(this.onNodeHeightComplete, this)
					}
				)
			).animate();
		},
		onNodeHeightStep: function(state)
		{
			this._node.style.height = state.height + "px";
		},
		onNodeHeightComplete: function()
		{
			this._node.style.overflow = "";
			(new BX.easing(
					{
						duration : 150,
						start : { opacity: 0 },
						finish: { opacity: 100 },
						transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
						step: BX.delegate(this.onNodeOpacityStep, this),
						complete: BX.delegate(this.onNodeOpacityComplete, this)
					}
				)
			).animate();
		},
		onNodeOpacityStep: function(state)
		{
			this._node.style.opacity = state.opacity / 100;
		},
		onNodeOpacityComplete: function()
		{
			this._node.style.height = "";
			this._node.style.opacity = "";
			if(this._callback)
			{
				this._callback();
			}
		}
	};

	BX.CrmTimelineItemExpand.create = function(node, callback)
	{
		var self = new BX.CrmTimelineItemExpand();
		self.initialize(node, callback);
		return self;
	};
}

if(typeof(BX.CrmTimelineItemExtract) === "undefined")
{
	BX.CrmTimelineItemExtract = function()
	{
		this._node = null;
		this._shadowNode = null;
		this._events = null;
	};
	BX.CrmTimelineItemExtract.prototype =
	{
		initialize: function(node, shadowNode, events)
		{
			this._node = node;
			this._shadowNode  = shadowNode;
			this._events = BX.type.isPlainObject(events) ? events : {};

		},
		run: function()
		{
			//TODO: Implement
		},
		finish: function()
		{
			//TODO: Implement
		}
	};
	BX.CrmTimelineItemExtract.create = function(node, shadowNode, events)
	{
		var self = new BX.CrmTimelineItemExtract();
		self.initialize(node, shadowNode, events);
		return self;
	};
}

if(typeof(BX.CrmTimelineItemShift) === "undefined")
{
	BX.CrmTimelineItemShift = function()
	{
		this._node = null;
		this._anchor = null;
		this._nodeParent  = null;
		this._startPosition = null;
		this._events = null;
	};
	BX.CrmTimelineItemShift.prototype =
	{
		initialize: function(node, anchor, startPosition, shadowNode, events)
		{
			this._node = node;
			this._shadowNode = shadowNode;
			this._anchor = anchor;
			this._nodeParent  = node.parentNode;
			this._startPosition = startPosition;
			this._events = BX.type.isPlainObject(events) ? events : {};

		},
		run: function()
		{
			// if( this._shadowNode !== false )
			// {
			// 	this.createStub();
			// }
			this._anchorPosition = BX.pos(this._anchor);

			setTimeout(
				BX.proxy(
					function (){
						BX.addClass(this._node, "crm-entity-stream-section-casper" )
					},
					this
				),
				0
			);

			var movingEvent = new BX.easing({
				duration : 1500,
				start : { top: this._startPosition.top, height: 0},
				finish: { top: this._anchorPosition.top, height: this._startPosition.height + 20},
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					this._node.style.top = state.top + "px";
					this._anchor.style.height = state.height + "px";
				}, this),
				complete: BX.proxy(function () {
					this.finish();
				}, this)
			});
			movingEvent.animate();
		},
		finish: function()
		{
			if(BX.type.isFunction(this._events["complete"]))
			{
				this._events["complete"]();
			}
			if( this._shadowNode !== false )
			{
				// this._stub.height = 0;
			}
		}
	};
	BX.CrmTimelineItemShift.create = function(node, anchor, startPosition, shadowNode, events)
	{
		var self = new BX.CrmTimelineItemShift();
		self.initialize(node, anchor, startPosition, shadowNode, events);
		return self;
	};
}

if(typeof(BX.CrmCommentAnimation) === "undefined")
{
	BX.CrmCommentAnimation = function()
	{
		this._node = null;
		this._anchor = null;
		this._nodeParent  = null;
		this._startPosition = null;
		this._events = null;
	};
	BX.CrmCommentAnimation.prototype =
	{
		initialize: function(node, anchor, startPosition, events)
		{
			this._node = node;
			this._anchor = anchor;
			this._nodeParent  = node.parentNode;
			this._startPosition = startPosition;
			this._events = BX.type.isPlainObject(events) ? events : {};

		},
		run: function()
		{
			BX.addClass(this._node, 'crm-entity-stream-section-animate-start');

			this._node.style.position = "absolute";
			this._node.style.width = this._startPosition.width + "px";
			this._node.style.height = this._startPosition.height + "px";
			this._node.style.top = this._startPosition.top - 30 + "px";
			this._node.style.left = this._startPosition.left + "px";
			this._node.style.opacity = 0;
			this._node.style.zIndex = 960;

			document.body.appendChild(this._node);

			var nodeOpacityAnim = new BX.easing({
				duration : 350,
				start : { opacity: 0 },
				finish: { opacity: 100},
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					this._node.style.opacity = state.opacity / 100;
				}, this),
				complete: BX.proxy(function () {
					if(BX.type.isFunction(this._events["start"]))
					{
						this._events["start"]();
					}
					var shift = BX.CrmTimelineItemShift.create(
						this._node,
						this._anchor,
						this._startPosition,
						false,
						{ complete: BX.delegate(this.finish, this) }
					);
					shift.run();
				}, this)
			});
			nodeOpacityAnim.animate();


			if(BX.type.isFunction(this._events["complete"]))
			{
				this._events["complete"]();
			}
		},
		finish: function()
		{
			this._node.style.position = "";
			this._node.style.width = "";
			this._node.style.height = "";
			this._node.style.top = "";
			this._node.style.left = "";
			this._node.style.opacity = "";
			this._node.style.zIndex = "";
			this._anchor.style.height = "";
			this._anchor.parentNode.insertBefore(this._node, this._anchor.nextSibling);
			setTimeout(
				BX.delegate(function() {
					BX.removeClass(this._node, 'crm-entity-stream-section-animate-start');
					BX.remove(this._anchor);
					}, this),
				0
			);
		}
	};
	BX.CrmCommentAnimation.create = function(node, anchor, startPosition, events)
	{
		var self = new BX.CrmCommentAnimation();
		self.initialize(node, anchor, startPosition, events);
		return self;
	};
}

if(typeof(BX.CrmTimelineItemFasten) === "undefined")
{
	BX.CrmTimelineItemFasten = function()
	{
		this._id = "";
		this._settings = {};
		this._initialItem = null;
		this._finalItem = null;
		this._events = null;
	};

	BX.CrmTimelineItemFasten.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._initialItem = this.getSetting("initialItem");
			this._finalItem = this.getSetting("finalItem");

			this._anchor = this.getSetting("anchor");
			this._events = this.getSetting("events", {});
		},
		getId: function()
		{
			return this._id;
		},
		getSetting: function (name, defaultValue)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultValue;
		},
		addFixedHistoryItem: function()
		{
			var node = this._finalItem.getWrapper();
			BX.addClass(node, 'crm-entity-stream-section-animate-start');
			this._anchor.parentNode.insertBefore(node, this._anchor.nextSibling);
			setTimeout( BX.delegate(
				function() {
					BX.removeClass(node, 'crm-entity-stream-section-animate-start');
				},
				this
			), 0);
			this._finalItem.onFinishFasten();
		},
		run: function()
		{
			var node =  this._initialItem.getWrapper();
			this._clone = node.cloneNode(true);

			BX.addClass(this._clone, 'crm-entity-stream-section-animate-start crm-entity-stream-section-top-fixed');

			this._startPosition = BX.pos(node);
			this._clone.style.position = "absolute";
			this._clone.style.width = this._startPosition.width + "px";

			var _cloneHeight = this._startPosition.height;
			var _minHeight = 65;
			var _sumPaddingContent = 18;
			if (_cloneHeight < _sumPaddingContent + _minHeight)
				_cloneHeight = _sumPaddingContent + _minHeight;

			this._clone.style.height = _cloneHeight + "px";
			this._clone.style.top = this._startPosition.top + "px";
			this._clone.style.left = this._startPosition.left + "px";
			this._clone.style.zIndex = 960;

			document.body.appendChild(this._clone);

			setTimeout(
				BX.proxy(
					function (){
						BX.addClass(this._clone, "crm-entity-stream-section-casper" )
					},
					this
				),
				0
			);

			this._anchorPosition = BX.pos(this._anchor);
			var finish = {
				top: this._anchorPosition.top,
				height: _cloneHeight + 15,
				opacity: 1
			};

			var _difference = this._startPosition.top - this._anchorPosition.bottom;
			var _deepHistoryLimit = 2 * (document.body.clientHeight + this._startPosition.height);

			if (_difference > _deepHistoryLimit)
			{
				finish.top = this._startPosition.top - _deepHistoryLimit;
				finish.opacity = 0;
			}

			var _duration = Math.abs(finish.top - this._startPosition.top) * 2;
			_duration = (_duration < 1500) ? 1500 : _duration;

			var movingEvent = new BX.easing({
				duration : _duration,
				start : { top: this._startPosition.top, height: 0, opacity: 1},
				finish: finish,
				transition : BX.easing.makeEaseOut(BX.easing.transitions.quart),
				step: BX.proxy(function(state) {
					this._clone.style.top = state.top + "px";
					this._clone.style.opacity = state.opacity;
					this._anchor.style.height = state.height + "px";
				}, this),
				complete: BX.proxy(function () {
					this.finish();
				}, this)
			});
			movingEvent.animate();
		},
		finish: function()
		{
			this._anchor.style.height = 0;
			this.addFixedHistoryItem();
			BX.remove(this._clone);

			if(BX.type.isFunction(this._events["complete"]))
			{
				this._events["complete"]();
			}
		}
	};

	BX.CrmTimelineItemFasten.create = function(id, settings)
	{
		var self = new BX.CrmTimelineItemFasten();
		self.initialize(id, settings);
		return self;
	};
}

//endregion

//region Menu Bar
if(typeof(BX.CrmTimelineMenuBar) === "undefined")
{
	BX.CrmTimelineMenuBar = function()
	{
		this._id = "";
		this._ownerInfo = null;
		this._container = null;
		this._activityEditor = null;
		this._commentEditor = null;
		this._waitEditor = null;
		this._smsEditor = null;
		this._zoomEditor = null;
		this._readOnly = false;

		this._menu = null;
		this._manager = null;
	};
	BX.CrmTimelineMenuBar.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._ownerInfo = BX.prop.getObject(this._settings, "ownerInfo");
			if(!this._ownerInfo)
			{
				throw "BX.CrmTimelineMenuBar. A required parameter 'ownerInfo' is missing.";
			}

			this._activityEditor = BX.prop.get(this._settings, "activityEditor", null);

			this._commentEditor = BX.prop.get(this._settings, "commentEditor");
			this._waitEditor = BX.prop.get(this._settings, "waitEditor");
			this._smsEditor = BX.prop.get(this._settings, "smsEditor");
			this._zoomEditor = BX.prop.get(this._settings, "zoomEditor");
			this._restEditor = BX.prop.get(this._settings, "restEditor");
			this._manager = BX.prop.get(this._settings, "manager");

			if(!(this._manager instanceof BX.CrmTimelineManager))
			{
				throw "BX.CrmTimeline. Manager instance is not found.";
			}

			this._readOnly = BX.prop.getBoolean(this._settings, "readOnly", false);
			this._menu = BX.Main.interfaceButtonsManager.getById(
				BX.prop.getString(this._settings, "menuId", (this._ownerInfo['ENTITY_TYPE_NAME'] + "_menu").toLowerCase())
			);

			BX.addCustomEvent(this._manager.getId() + "_menu", function(id) {
				this.setActiveItemById(id);
			}.bind(this));
			this._activeItem = this._menu.getActive();
		},
		reset: function() {
			var firstId = null;
			this._menu.getAllItems().forEach(function(item) {
				if (firstId === null)
				{
					var id = item.dataset.id;
					if (["comment", "wait", "sms", "zoom"].indexOf(id) >= 0 && this[("_" + id + "Editor")])
					{
						firstId = id;
					}
				}
			}.bind(this));
			this.setActiveItemById(firstId||"comment");
		},
		getId: function()
		{
			return this._id;
		},
		setActiveItemById: function(id)
		{
			if (this.processItemSelection(id) === true)
			{
				var currentDiv = this._menu.getItemById(id);
				if (currentDiv && this._activeItem !== currentDiv)
				{
					var wasActiveInMoreMenu = this._menu.isActiveInMoreMenu();
					BX.addClass(currentDiv, this._menu.classes.itemActive);
					var isActiveData = {};
					try {
						isActiveData = JSON.parse(currentDiv.dataset.item);
					} catch (err) {
						isActiveData = {};
					}
					isActiveData.IS_ACTIVE = true;
					currentDiv.dataset.item = JSON.stringify(isActiveData);
					var wasActiveData = {};
					if (BX.type.isDomNode(this._activeItem))
					{
						BX.removeClass(this._activeItem, this._menu.classes.itemActive);
						try {
							wasActiveData = JSON.parse(this._activeItem.dataset.item);
						} catch (err) {
							wasActiveData = {};
						}
						wasActiveData.IS_ACTIVE = false;
						this._activeItem.dataset.item = JSON.stringify(wasActiveData);
					}
					var isActiveInMoreMenu = this._menu.isActiveInMoreMenu();

					if (isActiveInMoreMenu || wasActiveInMoreMenu)
					{
						var submenu = this._menu["getSubmenu"] ? this._menu.getSubmenu() :
							BX.PopupMenu.getMenuById("main_buttons_popup_" +
								String(this._ownerInfo['ENTITY_TYPE_NAME']).toLowerCase() + "_menu");
						if (submenu)
						{
							submenu.getMenuItems().forEach(function(menuItem) {
								var container = menuItem.getContainer();
								if (isActiveInMoreMenu && container.title === currentDiv.title)
								{
									BX.addClass(container, this._menu.classes.itemActive);
								}
								else if (wasActiveInMoreMenu && container.title === this._activeItem.title)
								{
									BX.removeClass(container, this._menu.classes.itemActive);
								}

							}.bind(this));
						}

						if (isActiveInMoreMenu)
						{
							BX.addClass(this._menu.getMoreButton(), this._menu.classes.itemActive);
						}
						else if (wasActiveInMoreMenu)
						{
							BX.removeClass(this._menu.getMoreButton(), this._menu.classes.itemActive);
						}
					}
					this._activeItem = currentDiv;
				}
			}
			this._menu.closeSubmenu();
		},
		processItemSelection: function(menuId)
		{
			if(this._readOnly)
			{
				return false;
			}

			var planner = null;
			var action = menuId;
			if(action === "call")
			{
				planner = new BX.Crm.Activity.Planner();
				planner.showEdit(
					{
						"TYPE_ID": BX.CrmActivityType.call,
						"OWNER_TYPE_ID": this._ownerInfo['ENTITY_TYPE_ID'],
						"OWNER_ID": this._ownerInfo['ENTITY_ID']
					}
				);
			}
			if(action === "meeting")
			{
				planner = new BX.Crm.Activity.Planner();
				planner.showEdit(
					{
						"TYPE_ID": BX.CrmActivityType.meeting,
						"OWNER_TYPE_ID": this._ownerInfo['ENTITY_TYPE_ID'],
						"OWNER_ID": this._ownerInfo['ENTITY_ID']
					}
				);
			}
			else if(action === "email")
			{
				this._activityEditor.addEmail(
					{
						"ownerType": this._ownerInfo['ENTITY_TYPE_NAME'],
						"ownerID": this._ownerInfo['ENTITY_ID'],
						"ownerUrl": this._ownerInfo['SHOW_URL'],
						"ownerTitle": this._ownerInfo['TITLE'],
						"subject": ""
					}
				);
			}
			else if(action === "delivery")
			{
				this._activityEditor.addDelivery(
					{
						"ownerType": this._ownerInfo['ENTITY_TYPE_NAME'],
						"ownerID": this._ownerInfo['ENTITY_ID'],
						"orderList": this._ownerInfo['ORDER_LIST']
					}
				);
			}
			else if(action === "task")
			{
				this._activityEditor.addTask(
					{
						"ownerType": this._ownerInfo['ENTITY_TYPE_NAME'],
						"ownerID": this._ownerInfo['ENTITY_ID']
					}
				);
			}
			else if(["comment", "wait", "sms", "zoom"].indexOf(action) >= 0 && this[("_" + action + "Editor")])
			{
				if (this._commentEditor)
				{
					this._commentEditor.setVisible(action === "comment");
				}
				if (this._waitEditor)
				{
					this._waitEditor.setVisible(action === "wait");
				}
				if (this._smsEditor)
				{
					this._smsEditor.setVisible(action === "sms");
				}
				if (this._zoomEditor)
				{
					this._zoomEditor.setVisible(action === "zoom");
				}
				return true;
			}
			else if(action === "visit")
			{
				var visitParameters = this._manager.getSetting("visitParameters");
				visitParameters['OWNER_TYPE'] = this._ownerInfo['ENTITY_TYPE_NAME'];
				visitParameters['OWNER_ID'] = this._ownerInfo['ENTITY_ID'];
				BX.CrmActivityVisit.create(visitParameters).showEdit();
			}
			else if(action.match(/^activity_rest_/))
			{
				if(this._restEditor)
				{
					this._restEditor.action(action);
				}
			}
			return false;
		}
	};
	BX.CrmTimelineMenuBar.create = function(id, settings)
	{
		var self = new BX.CrmTimelineMenuBar();
		self.initialize(id, settings);
		return self;
	}
}
//endregion

//region Watchers
if(typeof(BX.CrmSmsWatcher) === "undefined")
{
	BX.CrmSmsWatcher =
	{
		_pullTagName: 'MESSAGESERVICE',
		_pullInited: false,
		_listeners: {},
		initPull: function()
		{
			if (this._pullInited)
				return;

			BX.addCustomEvent("onPullEvent-messageservice", this.onPullEvent.bind(this));
			this.extendWatch();

			this._pullInited = true;
		},
		subscribeOnMessageUpdate: function(messageId, callback)
		{
			this.initPull();
			this._listeners[messageId] = callback;
		},
		fireExternalStatusUpdate: function(messageId, message)
		{
			var listener = this._listeners[messageId];
			if (listener)
			{
				listener(message);
			}
		},
		onPullEvent: function(command, params)
		{
			// console.log(command, params);
			if (command === 'message_update')
			{
				for (var i = 0; i < params.messages.length; ++i)
				{
					var message = params.messages[i];
					this.fireExternalStatusUpdate(message['ID'], message);
				}
			}
		},
		extendWatch: function()
		{
			if(BX.type.isFunction(BX.PULL))
			{
				BX.PULL.extendWatch(this._pullTagName);
				window.setTimeout(this.extendWatch.bind(this), 60000);
			}
		}
	};
}
//endregion
if(typeof(BX.CrmTimelineAudioPlaybackRateSelector) === "undefined")
{
	BX.CrmTimelineAudioPlaybackRateSelector = function(params) {
		this.name = params.name || 'crm-timeline-audio-playback-rate-selector';
		this.menuId = this.name + '-menu';
		if(BX.Type.isArray(params.availableRates))
		{
			this.availableRates = params.availableRates;
		}
		else
		{
			this.availableRates = [1, 1.5, 2, 3];
		}
		this.currentRate = this.normalizeRate(params.currentRate);
		this.textMessageCode = params.textMessageCode;
		this.renderedItems = [];
		this.players = [];
	};
	BX.CrmTimelineAudioPlaybackRateSelector.prototype.isRateCurrent = function(rateDescription, rate)
	{
		return ((rateDescription.rate && rate === rateDescription.rate) || rate === rateDescription);
	}
	BX.CrmTimelineAudioPlaybackRateSelector.prototype.normalizeRate = function(rate)
	{
		rate = parseFloat(rate);
		for(var i = 0, length = this.availableRates.length; i < length; i++)
		{
			if(this.isRateCurrent(this.availableRates[i], rate))
			{
				return rate;
			}
		}

		return (this.availableRates[0].rate || this.availableRates[0]);
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.getMenuItems = function() {
		var selectedRate = this.getRate();

		return this.availableRates.map(function(item) {
			return {
				text: (item.text || item) + '',
				html: (item.html || item) + '',
				className: (this.isRateCurrent(item, selectedRate)) ? 'menu-popup-item-text-active' : null,
				onclick: function() {
					this.setRate(item.rate || item)
				}.bind(this)
			}
		}.bind(this))
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.getPopup = function(node) {
		var popupMenu = BX.Main.MenuManager.getMenuById(this.menuId);
		if(popupMenu)
		{
			 popupMenu.bindElement = node;
		}
		else
		{
			popupMenu = BX.Main.MenuManager.create({
				id: this.menuId,
				bindElement: node,
				items: this.getMenuItems(),
				className: 'crm-audio-cap-speed-popup'
			});
		}

		return popupMenu;
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.getRate = function() {
		return this.normalizeRate(this.currentRate);
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.setRate = function(rate) {
		this.getPopup().destroy();

		rate = this.normalizeRate(rate);
		if(this.currentRate === rate)
		{
			return;
		}
		this.currentRate = rate;
		BX.userOptions.save("crm", this.name, 'rate', rate);

		for(var i = 0, length = this.renderedItems.length; i < length; i++)
		{
			var textNode = this.renderedItems[i].querySelector('.crm-audio-cap-speed-text');
			if(textNode)
			{
				textNode.innerHTML = this.getText();
			}
		}

		for(i = 0, length = this.players.length; i < length; i++)
		{
			this.players[i].vjsPlayer.playbackRate(this.getRate());
		}
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.getText = function() {
		var text;

		if(this.textMessageCode)
		{
			text = BX.Loc.getMessage(this.textMessageCode);
		}
		if(!text)
		{
			text = '#RATE#';
		}

		return text.replace('#RATE#', '<span>' + this.getRate() + 'x</span>');
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.render = function() {
		var item = BX.Dom.create('div', {
			attrs: {
				className: 'crm-audio-cap-speed-wrapper'
			},
			children: [
				BX.Dom.create('div', {
					attrs: {
						className: 'crm-audio-cap-speed',
					},
					children: [
						BX.Dom.create('div', {
							attrs: {
								className: 'crm-audio-cap-speed-text'
							},
							html: this.getText()
						})
					],
				})
			],
			events: {
				click: function(event) {
					event.preventDefault();
					this.getPopup(event.target).show()
				}.bind(this)
			}
		});
		this.renderedItems.push(item);

		return item;
	};

	BX.CrmTimelineAudioPlaybackRateSelector.prototype.addPlayer = function(player) {
		if(BX.Fileman.Player && player instanceof BX.Fileman.Player)
		{
			this.players.push(player);
		}
	};
}

/* End */
;
; /* Start:"a:4:{s:4:"full";s:76:"/local/js/im/lib/localstorage/dist/localstorage.bundle.min.js?16547598172914";s:6:"source";s:57:"/local/js/im/lib/localstorage/dist/localstorage.bundle.js";s:3:"min";s:61:"/local/js/im/lib/localstorage/dist/localstorage.bundle.min.js";s:3:"map";s:61:"/local/js/im/lib/localstorage/dist/localstorage.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e){"use strict";var t=function(){function e(){babelHelpers.classCallCheck(this,e);this.enabled=null;this.expireList=null;this.expireInterval=null}babelHelpers.createClass(e,[{key:"isEnabled",value:function e(){if(this.enabled!==null){return this.enabled}this.enabled=false;if(typeof window.localStorage!=="undefined"){try{window.localStorage.setItem("__bx_test_ls_feature__","ok");if(window.localStorage.getItem("__bx_test_ls_feature__")==="ok"){window.localStorage.removeItem("__bx_test_ls_feature__");this.enabled=true}}catch(e){}}if(this.enabled&&!this.expireInterval){try{var t=window.localStorage.getItem("bx-messenger-localstorage-expire");if(t){this.expireList=JSON.parse(t)}}catch(e){}clearInterval(this.expireInterval);this.expireInterval=setInterval(this._checkExpireInterval.bind(this),6e4)}return this.enabled}},{key:"set",value:function e(t,i,r,s){var n=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;if(!this.isEnabled()){return false}var l=null;if(n){l=new Date((new Date).getTime()+n*1e3)}var a=JSON.stringify({value:s,expire:l});if(window.localStorage.getItem(this._getKey(t,i,r))!==a){window.localStorage.setItem(this._getKey(t,i,r),a)}if(n){if(!this.expireList){this.expireList={}}this.expireList[this._getKey(t,i,r)]=l;window.localStorage.setItem("bx-messenger-localstorage-expire",JSON.stringify(this.expireList))}return true}},{key:"get",value:function e(t,i,r,s){if(!this.isEnabled()){return typeof s!=="undefined"?s:null}var n=window.localStorage.getItem(this._getKey(t,i,r));if(n===null){return typeof s!=="undefined"?s:null}try{n=JSON.parse(n);if(n&&typeof n.value!=="undefined"){if(!n.expire||new Date(n.expire)>new Date){n=n.value}else{window.localStorage.removeItem(this._getKey(t,i,r));if(this.expireList){delete this.expireList[this._getKey(t,i,r)]}return typeof s!=="undefined"?s:null}}else{return typeof s!=="undefined"?s:null}}catch(e){return typeof s!=="undefined"?s:null}return n}},{key:"remove",value:function e(t,i,r){if(!this.isEnabled()){return false}if(this.expireList){delete this.expireList[this._getKey(t,i,r)]}return window.localStorage.removeItem(this._getKey(t,i,r))}},{key:"_getKey",value:function e(t,i,r){return"bx-messenger-"+t+"-"+i+"-"+r}},{key:"_checkExpireInterval",value:function e(){if(!this.expireList)return true;var t=new Date;var i=0;for(var r in this.expireList){if(!this.expireList.hasOwnProperty(r)){continue}if(new Date(this.expireList[r])<=t){window.localStorage.removeItem(r);delete this.expireList[r]}else{i++}}if(i){window.localStorage.setItem("bx-messenger-localstorage-expire",JSON.stringify(this.expireList))}else{this.expireList=null;window.localStorage.removeItem("bx-messenger-localstorage-expire")}return true}}]);return e}();var i=new t;e.LocalStorage=i})(this.BX.Messenger.Lib=this.BX.Messenger.Lib||{});
/* End */
;
; /* Start:"a:4:{s:4:"full";s:64:"/local/js/im/lib/logger/dist/logger.bundle.min.js?16547598174491";s:6:"source";s:45:"/local/js/im/lib/logger/dist/logger.bundle.js";s:3:"min";s:49:"/local/js/im/lib/logger/dist/logger.bundle.min.js";s:3:"map";s:49:"/local/js/im/lib/logger/dist/logger.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e){"use strict";var t=new WeakMap;var a=new WeakMap;var l=new WeakMap;var r=function(){function e(){babelHelpers.classCallCheck(this,e);t.set(this,{writable:true,value:{}});a.set(this,{writable:true,value:{}});l.set(this,{writable:true,value:{}});babelHelpers.classPrivateFieldSet(this,t,{desktop:true,log:false,info:false,warn:false,error:true,trace:true});babelHelpers.classPrivateFieldSet(this,a,babelHelpers.classPrivateFieldGet(this,t));this.__load()}babelHelpers.createClass(e,[{key:"setConfig",value:function e(l){for(var r in l){if(l.hasOwnProperty(r)&&typeof babelHelpers.classPrivateFieldGet(this,t)[r]!=="undefined"){babelHelpers.classPrivateFieldGet(this,t)[r]=!!l[r];babelHelpers.classPrivateFieldGet(this,a)[r]=!!l[r]}}this.__load()}},{key:"enable",value:function e(a){if(typeof babelHelpers.classPrivateFieldGet(this,t)[a]==="undefined"){return false}babelHelpers.classPrivateFieldGet(this,t)[a]=true;babelHelpers.classPrivateFieldGet(this,l)[a]=true;this.__save();return true}},{key:"disable",value:function e(a){if(typeof babelHelpers.classPrivateFieldGet(this,t)[a]==="undefined"){return false}babelHelpers.classPrivateFieldGet(this,t)[a]=false;babelHelpers.classPrivateFieldGet(this,l)[a]=false;this.__save();return true}},{key:"isEnabled",value:function e(a){return babelHelpers.classPrivateFieldGet(this,t)[a]===true}},{key:"desktop",value:function e(){if(this.isEnabled("desktop")){var t;for(var a=arguments.length,l=new Array(a),r=0;r<a;r++){l[r]=arguments[r]}(t=console).log.apply(t,[].concat(babelHelpers.toConsumableArray(this.__getStyles("desktop")),l))}}},{key:"log",value:function e(){if(this.isEnabled("log")){var t;for(var a=arguments.length,l=new Array(a),r=0;r<a;r++){l[r]=arguments[r]}(t=console).log.apply(t,[].concat(babelHelpers.toConsumableArray(this.__getStyles("log")),l))}}},{key:"info",value:function e(){if(this.isEnabled("info")){var t;for(var a=arguments.length,l=new Array(a),r=0;r<a;r++){l[r]=arguments[r]}(t=console).info.apply(t,[].concat(babelHelpers.toConsumableArray(this.__getStyles("info")),l))}}},{key:"warn",value:function e(){if(this.isEnabled("warn")){var t;for(var a=arguments.length,l=new Array(a),r=0;r<a;r++){l[r]=arguments[r]}(t=console).warn.apply(t,[].concat(babelHelpers.toConsumableArray(this.__getStyles("warn")),l))}}},{key:"error",value:function e(){if(this.isEnabled("error")){var t;for(var a=arguments.length,l=new Array(a),r=0;r<a;r++){l[r]=arguments[r]}(t=console).error.apply(t,[].concat(babelHelpers.toConsumableArray(this.__getStyles("error")),l))}}},{key:"trace",value:function e(){if(this.isEnabled("trace")){var t;(t=console).trace.apply(t,arguments)}}},{key:"__save",value:function e(){if(typeof window.localStorage!=="undefined"){try{var t={};for(var r in babelHelpers.classPrivateFieldGet(this,l)){if(babelHelpers.classPrivateFieldGet(this,l).hasOwnProperty(r)&&babelHelpers.classPrivateFieldGet(this,a)[r]!==babelHelpers.classPrivateFieldGet(this,l)[r]){t[r]=!!babelHelpers.classPrivateFieldGet(this,l)[r]}}console.warn(JSON.stringify(t));window.localStorage.setItem("bx-messenger-logger",JSON.stringify(t))}catch(e){}}}},{key:"__load",value:function e(){if(typeof window.localStorage!=="undefined"){try{var a=window.localStorage.getItem("bx-messenger-logger");if(typeof a==="string"){babelHelpers.classPrivateFieldSet(this,l,JSON.parse(a));babelHelpers.classPrivateFieldSet(this,t,babelHelpers.objectSpread({},babelHelpers.classPrivateFieldGet(this,t),babelHelpers.classPrivateFieldGet(this,l)))}}catch(e){}}}},{key:"__getStyles",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"all";var a={desktop:["%cDESKTOP","color: white; font-style: italic; background-color: #29619b; padding: 0 6px"],log:["%cLOG","color: #2a323b; font-style: italic; background-color: #ccc; padding: 0 6px"],info:["%cINFO","color: #fff; font-style: italic; background-color: #6b7f96; padding: 0 6px"],warn:["%cWARNING","color: white; font-style: italic; padding: 0 6px; border: 1px solid #f0a74f"],error:["%cERROR","color: white; font-style: italic; padding: 0 6px; border: 1px solid #8a3232"]};if(t==="all"){return a}if(a[t]){return a[t]}return[]}},{key:"__getRemoveString",value:function e(){var t=this.__getStyles();var a=[];for(var l in t){if(t.hasOwnProperty(l)){a.push(t[l][1])}}return a}}]);return e}();var s=new r;e.Logger=s})(this.BX.Messenger.Lib=this.BX.Messenger.Lib||{});
/* End */
;
; /* Start:"a:4:{s:4:"full";s:61:"/local/js/im/const/dist/registry.bundle.min.js?16547598176519";s:6:"source";s:42:"/local/js/im/const/dist/registry.bundle.js";s:3:"min";s:46:"/local/js/im/const/dist/registry.bundle.min.js";s:3:"map";s:46:"/local/js/im/const/dist/registry.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e){"use strict";var i=Object.freeze({groupTitle:"groupTitle",message:"message",recentTitle:"recentTitle",recentLinesTitle:"recentLinesTitle",readedTitle:"readedTitle",default:"default",vacationTitle:"vacationTitle"});var t=Object.freeze({mobile:"mobile",desktop:"desktop"});var a=Object.freeze({horizontal:"horizontal",portrait:"portrait"});var s=Object.freeze({none:"none",add:"delete",update:"update",delete:"delete",set:"set",setAfter:"after",setBefore:"before"});var r=Object.freeze({dialogues:50,messages:100});var o=Object.freeze({imMessageAdd:"im.message.add",imMessageUpdate:"im.message.update",imMessageDelete:"im.message.delete",imMessageLike:"im.message.like",imMessageCommand:"im.message.command",imMessageShare:"im.message.share",imChatGet:"im.chat.get",imChatLeave:"im.chat.leave",imChatMute:"im.chat.mute",imChatParentJoin:"im.chat.parent.join",imDialogGet:"im.dialog.get",imDialogMessagesGet:"im.dialog.messages.get",imDialogRead:"im.dialog.read",imDialogUnread:"im.dialog.unread",imDialogWriting:"im.dialog.writing",imUserGet:"im.user.get",imUserListGet:"im.user.list.get",imDiskFolderGet:"im.disk.folder.get",imDiskFileUpload:"disk.folder.uploadfile",imDiskFileCommit:"im.disk.file.commit",mobileBrowserConstGet:"mobile.browser.const.get",imRecentGet:"im.recent.get",imRecentList:"im.recent.list",imCallGetCallLimits:"im.call.getCallLimits",imNotifyGet:"im.notify.get",imNotifySchemaGet:"im.notify.schema.get"});var l=Object.freeze({imChatGet:"im.chat.get",imMessageAdd:"im.message.add",imDialogRead:"im.dialog.read",imDialogMessagesGet:"im.dialog.messages.get",imDialogMessagesGetInit:"im.dialog.messages.get.init",imDialogMessagesGetUnread:"im.dialog.messages.get.unread",imDiskFolderGet:"im.disk.folder.get",imDiskFileUpload:"disk.folder.uploadfile",imDiskFileCommit:"im.disk.file.commit",imUserGet:"im.user.get",imUserListGet:"im.user.list.get",mobileBrowserConstGet:"mobile.browser.const.get",imRecentGet:"im.recent.get",imRecentList:"im.recent.list",imCallGetCallLimits:"im.call.getCallLimits",imNotifyGet:"im.notify.get",imNotifySchemaGet:"im.notify.schema.get"});var n=Object.freeze({dialog:{newMessage:"EventType.dialog.newMessage",scrollOnStart:"IM.Dialog:scrollOnStart",scrollToBottom:"IM.Dialog:scrollToBottom",readVisibleMessages:"IM.Dialog.readVisibleMessages",requestUnread:"IM.Dialog.requestUnread",readMessage:"IM.Dialog:readMessage",quoteMessage:"IM.Dialog:quoteMessage",clickOnCommand:"IM.Dialog:clickOnCommand",clickOnMention:"IM.Dialog:clickOnMention",clickOnUserName:"IM.Dialog:clickOnUserName",clickOnMessageMenu:"IM.Dialog:clickOnMessageMenu",clickOnMessageRetry:"IM.Dialog:clickOnMessageRetry",clickOnUploadCancel:"IM.Dialog:clickOnUploadCancel",clickOnReadList:"IM.Dialog:clickOnReadList",setMessageReaction:"IM.Dialog:setMessageReaction",openMessageReactionList:"IM.Dialog:openMessageReactionList",clickOnKeyboardButton:"IM.Dialog:clickOnKeyboardButton",clickOnChatTeaser:"IM.Dialog:clickOnChatTeaser",clickOnDialog:"IM.Dialog:clickOnDialog",quotePanelClose:"IM.Dialog:quotePanelClose",beforeMobileKeyboard:"IM.Dialog:beforeMobileKeyboard",messagesSet:"IM.Dialog:messagesSet"},textarea:{focus:"IM.Textarea:focus",setFocus:"IM.Textarea:setFocus",blur:"IM.Textarea:blur",setBlur:"IM.Textarea:setBlur",keyUp:"IM.Textarea:keyUp",edit:"IM.Textarea:edit",insertText:"IM.Textarea:insertText",sendMessage:"IM.Textarea:sendMessage",fileSelected:"IM.Textarea:fileSelected",startWriting:"IM.Textarea:startWriting",appButtonClick:"IM.Textarea:appButtonClick"},conference:{setPasswordFocus:"IM.Conference:setPasswordFocus",hideSmiles:"IM.Conference:hideSmiles",requestPermissions:"IM.Conference:requestPermissions",waitForStart:"IM.Conference:waitForStart",userRenameFocus:"IM.Conference:userRenameFocus",userRenameBlur:"IM.Conference:userRenameBlur"},notification:{updateState:"IM.Notifications:restoreConnection"}});var c=Object.freeze({private:"private",chat:"chat",open:"open",call:"call",crm:"crm"});var m=Object.freeze({lead:"lead",company:"company",contact:"contact",deal:"deal",none:"none"});var d=Object.freeze({listBody:"bx-im-dialog-list",listItem:"bx-im-dialog-list-item-reference",listItemName:"bx-im-dialog-list-item-name-reference",listItemBody:"bx-im-dialog-list-item-content-reference",listUnreadLoader:"bx-im-dialog-list-unread-loader-reference"});var g=Object.freeze({message:"message",delimiter:"delimiter",group:"group",historyLoader:"historyLoader",unreadLoader:"unreadLoader",button:"button",placeholder:"placeholder"});var M=Object.freeze({loading:"loading",empty:"empty",show:"show"});var f=Object.freeze({upload:"upload",wait:"wait",done:"done",error:"error"});var u=Object.freeze({image:"image",video:"video",audio:"audio",file:"file"});var p=Object.freeze({self:"self",opponent:"opponent",system:"system"});var C=Object.freeze({view:"view",edit:"edit",create:"create"});var h=Object.freeze({preparation:"preparation",call:"call"});var b=Object.freeze({userLimitReached:"userLimitReached",detectIntranetUser:"detectIntranetUser",bitrix24only:"bitrix24only",kickedFromCall:"kickedFromCall",unsupportedBrowser:"unsupportedBrowser",missingMicrophone:"missingMicrophone",unsafeConnection:"unsafeConnection",wrongAlias:"wrongAlias",notStarted:"notStarted",finished:"finished",userLeftCall:"userLeftCall",noSignalFromCamera:"noSignalFromCamera"});var D=Object.freeze({hidden:"hidden",chat:"chat",users:"users",split:"split"});var I=Object.freeze({Idle:"Idle",Busy:"Busy",Calling:"Calling",Unavailable:"Unavailable",Declined:"Declined",Ready:"Ready",Connecting:"Connecting",Connected:"Connected",Failed:"Failed"});var v={chat:"chat",open:"open",user:"user",notification:"notification"};var y={item:"item",placeholder:"placeholder"};var O={general:"general",pinned:"pinned"};var k={received:"received",delivered:"delivered",error:"error"};var T=Object.freeze({confirm:1,simple:3,placeholder:5});e.DateFormat=i;e.DeviceType=t;e.DeviceOrientation=a;e.MutationType=s;e.StorageLimit=r;e.RestMethod=o;e.RestMethodHandler=l;e.EventType=n;e.DialogType=c;e.DialogCrmType=m;e.DialogReferenceClassName=d;e.DialogTemplateType=g;e.DialogState=M;e.FileStatus=f;e.FileType=u;e.MessageType=p;e.ConferenceFieldState=C;e.ConferenceStateType=h;e.ConferenceErrorCode=b;e.ConferenceRightPanelMode=D;e.ConferenceUserState=I;e.ChatTypes=v;e.TemplateTypes=y;e.RecentSection=O;e.MessageStatus=k;e.NotificationTypesCodes=T})(this.BX.Messenger.Const=this.BX.Messenger.Const||{});
/* End */
;
; /* Start:"a:4:{s:4:"full";s:63:"/local/js/im/lib/utils/dist/utils.bundle.min.js?165475981718118";s:6:"source";s:43:"/local/js/im/lib/utils/dist/utils.bundle.js";s:3:"min";s:47:"/local/js/im/lib/utils/dist/utils.bundle.min.js";s:3:"map";s:47:"/local/js/im/lib/utils/dist/utils.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e,t){"use strict";var i={browser:{isSafari:function e(){if(this.isChrome()){return false}if(!navigator.userAgent.toLowerCase().includes("safari")){return false}return!this.isSafariBased()},isSafariBased:function e(){if(!navigator.userAgent.toLowerCase().includes("applewebkit")){return false}return navigator.userAgent.toLowerCase().includes("yabrowser")||navigator.userAgent.toLowerCase().includes("yaapp_ios_browser")||navigator.userAgent.toLowerCase().includes("crios")},isChrome:function e(){return navigator.userAgent.toLowerCase().includes("chrome")},isFirefox:function e(){return navigator.userAgent.toLowerCase().includes("firefox")},isIe:function e(){return navigator.userAgent.match(/(Trident\/|MSIE\/)/)!==null},findParent:function e(t,i){var n=i instanceof HTMLElement;if(!i||typeof i!=="string"&&!n){return null}for(;t&&t!==document;t=t.parentNode){if(typeof i==="string"){if(t.classList.contains(i)){return t}}else if(n){if(t===i){return t}}}return null}},platform:{isMac:function e(){return navigator.userAgent.toLowerCase().includes("macintosh")},isLinux:function e(){return navigator.userAgent.toLowerCase().includes("linux")},isWindows:function e(){return navigator.userAgent.toLowerCase().includes("windows")||!this.isMac()&&!this.isLinux()},isBitrixMobile:function e(){return navigator.userAgent.toLowerCase().includes("bitrixmobile")},isBitrixDesktop:function e(){return navigator.userAgent.toLowerCase().includes("bitrixdesktop")},getDesktopVersion:function e(){if(typeof this.getDesktopVersionStatic!=="undefined"){return this.getDesktopVersionStatic}if(typeof BXDesktopSystem==="undefined"){return 0}var t=BXDesktopSystem.GetProperty("versionParts");this.getDesktopVersionStatic=t[3];return this.getDesktopVersionStatic},isMobile:function e(){return this.isAndroid()||this.isIos()||this.isBitrixMobile()},isIos:function e(){return navigator.userAgent.toLowerCase().includes("iphone")||navigator.userAgent.toLowerCase().includes("ipad")},getIosVersion:function e(){if(!this.isIos()){return null}var t=navigator.userAgent.toLowerCase().match(/(iphone|ipad)(.+)(OS\s([0-9]+)([_.]([0-9]+))?)/i);if(!t||!t[4]){return null}return parseFloat(t[4]+"."+(t[6]?t[6]:0))},isAndroid:function e(){return navigator.userAgent.toLowerCase().includes("android")},openNewPage:function e(t){if(!t){return false}if(this.isBitrixMobile()){if(typeof BX.MobileTools!=="undefined"){var i=BX.MobileTools.resolveOpenFunction(t);if(i){i();return true}}app.openNewPage(t)}else{window.open(t,"_blank")}return true}},device:{isDesktop:function e(){return!this.isMobile()},isMobile:function e(){if(typeof this.isMobileStatic!=="undefined"){return this.isMobileStatic}this.isMobileStatic=navigator.userAgent.toLowerCase().includes("android")||navigator.userAgent.toLowerCase().includes("webos")||navigator.userAgent.toLowerCase().includes("iphone")||navigator.userAgent.toLowerCase().includes("ipad")||navigator.userAgent.toLowerCase().includes("ipod")||navigator.userAgent.toLowerCase().includes("blackberry")||navigator.userAgent.toLowerCase().includes("windows phone");return this.isMobileStatic},orientationHorizontal:"horizontal",orientationPortrait:"portrait",getOrientation:function e(){if(!this.isMobile()){return this.orientationHorizontal}return Math.abs(window.orientation)===0?this.orientationPortrait:this.orientationHorizontal}},types:{isString:function e(t){return t===""?true:t?typeof t=="string"||t instanceof String:false},isArray:function e(t){return t&&Object.prototype.toString.call(t)=="[object Array]"},isFunction:function e(t){return t===null?false:typeof t=="function"||t instanceof Function},isDomNode:function e(t){return t&&babelHelpers.typeof(t)=="object"&&"nodeType"in t},isDate:function e(t){return t&&Object.prototype.toString.call(t)=="[object Date]"},isPlainObject:function e(t){if(!t||babelHelpers.typeof(t)!=="object"||t.nodeType){return false}var i=Object.prototype.hasOwnProperty;try{if(t.constructor&&!i.call(t,"constructor")&&!i.call(t.constructor.prototype,"isPrototypeOf")){return false}}catch(e){return false}var n;return typeof n==="undefined"||i.call(t,n)}},dialog:{getChatIdByDialogId:function e(t){if(!this.isChatId(t)){return 0}return parseInt(t.toString().substr(4))},isChatId:function e(t){return t.toString().startsWith("chat")},isEmptyDialogId:function e(t){if(!t){return true}if(typeof t==="string"){if(t==="chat0"||t==="0"){return true}}return false}},text:{quote:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(typeof t!=="string"){return t.toString()}if(!r){r=BX.message}t=t.replace(/\[USER=([0-9]{1,})](.*?)\[\/USER]/gi,function(e,t,i){return i});t=t.replace(/\[CHAT=(imol\|)?([0-9]{1,})](.*?)[\/CHAT]/gi,function(e,t,i,n){return n});t=t.replace(/\[CALL(?:=(.+?))?](.+?)?\[\/CALL]/gi,function(e,t,i){return i?i:t});t=t.replace(/\[ATTACH=([0-9]{1,})]/gi,function(e,t,i){return t===1e4?"":"["+r["IM_UTILS_TEXT_ATTACH"]+"] "});t=t.replace(/\[RATING=([1-5]{1})]/gi,function(e,t){return"["+r.IM_F_RATING+"] "});t=t.replace(/&nbsp;/gi," ");t=t.replace(/\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D([\s\S]*?)\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D/gim,"["+r["IM_UTILS_TEXT_QUOTE"]+"]");t=t.replace(/^(>>(.*)\n)/gi,"["+r["IM_UTILS_TEXT_QUOTE"]+"]\n");if(i&&i.FILE_ID&&i.FILE_ID.length>0){var a=[];i.FILE_ID.forEach(function(e){if(n[e].type==="image"){a.push(r["IM_UTILS_TEXT_IMAGE"])}else if(n[e].type==="audio"){a.push(r["IM_UTILS_TEXT_AUDIO"])}else if(n[e].type==="video"){a.push(r["IM_UTILS_TEXT_VIDEO"])}else{a.push(n[e].name)}});if(a.length<=0){a.push(r["IM_UTILS_TEXT_FILE"])}t=a.join("\n")+t}else if(i&&i.ATTACH&&i.ATTACH.length>0){t="["+r["IM_UTILS_TEXT_ATTACH"]+"]\n"+t}if(t.length<=0){t=r["IM_UTILS_TEXT_DELETED"]}return t.trim()},purify:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(typeof t!=="string"){return t.toString()}if(!r){r=BX.message}t=t.trim();if(t.startsWith("/me")){t=t.substr(4)}else if(t.startsWith("/loud")){t=t.substr(6)}t=t.replace(/<br><br \/>/gi,"<br />");t=t.replace(/<br \/><br>/gi,"<br />");var a=[];t=t.replace(/\[CODE\]\n?([\0-\uFFFF]*?)\[\/CODE\]/gi,function(e,t){var i=a.length;a.push(t);return"####REPLACEMENT_CODE_"+i+"####"});t=t.replace(/\[PUT(?:=(?:.+?))?\](?:.+?)?\[\/PUT]/gi,function(e){return e.replace(/\[PUT(?:=(.+))?\](.+?)?\[\/PUT]/gi,function(e,t,i){return i?i:t})});t=t.replace(/\[SEND(?:=(?:.+?))?\](?:.+?)?\[\/SEND]/gi,function(e){return e.replace(/\[SEND(?:=(.+))?\](.+?)?\[\/SEND]/gi,function(e,t,i){return i?i:t})});t=t.replace(/\[[buis]](.*?)\[\/[buis]]/gi,"$1");t=t.replace(/\[url](.*?)\[\/url]/gi,"$1");t=t.replace(/\[RATING=([1-5]{1})]/gi,function(){return"["+r["IM_UTILS_TEXT_RATING"]+"] "});t=t.replace(/\[ATTACH=([0-9]{1,})]/gi,function(){return"["+r["IM_UTILS_TEXT_ATTACH"]+"] "});t=t.replace(/\[USER=([0-9]{1,})](.*?)\[\/USER]/gi,"$2");t=t.replace(/\[CHAT=([0-9]{1,})](.*?)\[\/CHAT]/gi,"$2");t=t.replace(/\[SEND(?:=(?:.+?))?\](.+?)?\[\/SEND]/gi,"$1");t=t.replace(/\[PUT(?:=(?:.+?))?\](.+?)?\[\/PUT]/gi,"$1");t=t.replace(/\[CALL=([0-9]{1,})](.*?)\[\/CALL]/gi,"$2");t=t.replace(/\[PCH=([0-9]{1,})](.*?)\[\/PCH]/gi,"$2");t=t.replace(/<img.*?data-code="([^"]*)".*?>/gi,"$1");t=t.replace(/<span.*?title="([^"]*)".*?>.*?<\/span>/gi,"($1)");t=t.replace(/<img.*?title="([^"]*)".*?>/gi,"($1)");t=t.replace(/\[ATTACH=([0-9]{1,})]/gi,function(e,t,i){return t===1e4?"":"["+r["IM_UTILS_TEXT_ATTACH"]+"] "});t=t.replace(/<s>([^"]*)<\/s>/gi," ");t=t.replace(/\[s]([^"]*)\[\/s]/gi," ");t=t.replace(/\[icon=([^\]]*)]/gi,function(e){var t=e.match(/title=(.*[^\s\]])/i);if(t&&t[1]){t=t[1];if(t.indexOf("width=")>-1){t=t.substr(0,t.indexOf("width="))}if(t.indexOf("height=")>-1){t=t.substr(0,t.indexOf("height="))}if(t.indexOf("size=")>-1){t=t.substr(0,t.indexOf("size="))}if(t){t="("+t.trim()+")"}}else{t="("+r["IM_UTILS_TEXT_ICON"]+")"}return t});a.forEach(function(e,i){t=t.replace("####REPLACEMENT_CODE_"+i+"####",e)});t=t.replace(/\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D([\s\S]*?)\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D/gim,"["+r["IM_UTILS_TEXT_QUOTE"]+"] ");t=t.replace(/^(>>(.*)(\n)?)/gim,"["+r["IM_UTILS_TEXT_QUOTE"]+"] ");t=t.replace(/<\/?[^>]+>/gi,"");if(i&&i.FILE_ID&&i.FILE_ID.length>0){var s=[];if(babelHelpers.typeof(n)==="object"){i.FILE_ID.forEach(function(e){if(typeof n[e]==="undefined");else if(n[e].type==="image"){s.push(r["IM_UTILS_TEXT_IMAGE"])}else if(n[e].type==="audio"){s.push(r["IM_UTILS_TEXT_AUDIO"])}else if(n[e].type==="video"){s.push(r["IM_UTILS_TEXT_VIDEO"])}else{s.push(n[e].name)}})}if(s.length<=0){s.push(r["IM_UTILS_TEXT_FILE"])}t=s.join(" ")+t}else if(i&&(i.WITH_ATTACH||i.ATTACH&&i.ATTACH.length>0)){t="["+r["IM_UTILS_TEXT_ATTACH"]+"] "+t}else if(i&&i.WITH_FILE){t="["+r["IM_UTILS_TEXT_FILE"]+"] "+t}if(t.length<=0){t=r["IM_UTILS_TEXT_DELETED"]}return t.replace("\n"," ").trim()},htmlspecialchars:function e(t){if(typeof t!=="string"){return t}return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},htmlspecialcharsback:function e(t){if(typeof t!=="string"){return t}return t.replace(/\&quot;/g,'"').replace(/&#039;/g,"'").replace(/\&lt;/g,"<").replace(/\&gt;/g,">").replace(/\&amp;/g,"&").replace(/\&nbsp;/g," ")},getLocalizeForNumber:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"en";var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(!r){r=BX.message}var a=1;i=parseInt(i);if(i<0){i=i*-1}if(n){switch(n){case"de":case"en":a=i!==1?1:0;break;case"ru":case"ua":a=i%10===1&&i%100!==11?0:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?1:2;break}}return r[t+"_PLURAL_"+a]}},date:{getFormatType:function e(){var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:t.DateFormat.default;var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!n){n=BX.message}var r=[];if(i===t.DateFormat.groupTitle){r=[["tommorow","tommorow"],["today","today"],["yesterday","yesterday"],["",n["IM_UTILS_FORMAT_DATE"]]]}else if(i===t.DateFormat.message){r=[["",n["IM_UTILS_FORMAT_TIME"]]]}else if(i===t.DateFormat.recentTitle){r=[["tommorow","today"],["today","today"],["yesterday","yesterday"],["",n["IM_UTILS_FORMAT_DATE_RECENT"]]]}else if(i===t.DateFormat.recentLinesTitle){r=[["tommorow","tommorow"],["today","today"],["yesterday","yesterday"],["",n["IM_UTILS_FORMAT_DATE_RECENT"]]]}else if(i===t.DateFormat.readedTitle){r=[["tommorow","tommorow, "+n["IM_UTILS_FORMAT_TIME"]],["today","today, "+n["IM_UTILS_FORMAT_TIME"]],["yesterday","yesterday, "+n["IM_UTILS_FORMAT_TIME"]],["",n["IM_UTILS_FORMAT_READED"]]]}else if(i===t.DateFormat.vacationTitle){r=[["",n["IM_UTILS_FORMAT_DATE_SHORT"]]]}else{r=[["tommorow","tommorow, "+n["IM_UTILS_FORMAT_TIME"]],["today","today, "+n["IM_UTILS_FORMAT_TIME"]],["yesterday","yesterday, "+n["IM_UTILS_FORMAT_TIME"]],["",n["IM_UTILS_FORMAT_DATE_TIME"]]]}return r},getDateFunction:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(this.dateFormatFunction){return this.dateFormatFunction}this.dateFormatFunction=Object.create(BX.Main.Date);if(t){this.dateFormatFunction._getMessage=function(e){return t[e]}}return this.dateFormatFunction},format:function e(i){var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!e){e=this.getFormatType(t.DateFormat.default,n)}return this.getDateFunction(n).format(e,i)},cast:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Date;var n=i;if(t instanceof Date){n=t}else if(typeof t==="string"){n=new Date(t)}else if(typeof t==="number"){n=new Date(t*1e3)}if(n instanceof Date&&Number.isNaN(n.getTime())){n=i}return n}},object:{countKeys:function e(t){var i=0;for(var n in t){if(t.hasOwnProperty(n)){i++}}return i}},user:{getLastDateText:function e(n){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!n){return""}var a=i.date.getDateFunction(r);if(!r){r=BX.message||{}}var s="";var o={};if(n.bot||n.network){s=""}else if(n.absent&&!this.isMobileActive(n,r)){o=this.getOnlineStatus(n,r);s=r["IM_STATUS_VACATION_TITLE"].replace("#DATE#",a.format(i.date.getFormatType(t.DateFormat.vacationTitle,r),n.absent.getTime()/1e3));if(o.isOnline&&n.idle){s=r["IM_STATUS_AWAY_TITLE"].replace("#TIME#",this.getIdleText(n,r))+". "+s}else if(o.isOnline&&!o.lastSeenText){s=o.statusText+". "+s}else if(o.lastSeenText){if(!i.platform.isMobile()){s=s+". "+r["IM_LAST_SEEN_"+(n.gender==="F"?"F":"M")].replace("#POSITION#",s).replace("#LAST_SEEN#",o.lastSeenText)}}}else if(n.lastActivityDate){o=this.getOnlineStatus(n,r);if(o.isOnline&&n.idle&&!this.isMobileActive(n,r)){s=r["IM_STATUS_AWAY_TITLE"].replace("#TIME#",this.getIdleText(n,r))}else if(o.isOnline&&!o.lastSeenText){if(i.platform.isMobile()&&this.isMobileActive(n,r)){s=r["IM_STATUS_MOBILE"]}else{s=o.statusText}}else if(o.lastSeenText){if(i.platform.isMobile()){s=r["IM_LAST_SEEN_SHORT_"+(n.gender==="F"?"F":"M")].replace("#LAST_SEEN#",o.lastSeenText)}else{s=r["IM_LAST_SEEN_"+(n.gender==="F"?"F":"M")].replace("#POSITION#",s).replace("#LAST_SEEN#",o.lastSeenText)}}}return s},getIdleText:function e(t){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!t){return""}if(!t.idle){return""}return i.date.getDateFunction(n).format([["s60","sdiff"],["i60","idiff"],["H24","Hdiff"],["","ddiff"]],t.idle)},getOnlineStatus:function e(t){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var r={isOnline:false,status:"offline",statusText:n?n.IM_STATUS_OFFLINE:"offline",lastSeen:t.lastActivityDate,lastSeenText:""};if(!t.lastActivityDate||t.lastActivityDate.getTime()===0){return r}var a=new Date;r.isOnline=a.getTime()-t.lastActivityDate.getTime()<=this.getOnlineLimit(n)*1e3;r.status=r.isOnline?t.status:"offline";r.statusText=n&&n["IM_STATUS_"+r.status.toUpperCase()]?n["IM_STATUS_"+r.status.toUpperCase()]:r.status;if(n&&t.lastActivityDate.getTime()>0&&a.getTime()-t.lastActivityDate.getTime()>300*1e3){r.lastSeenText=i.date.getDateFunction(n).formatLastActivityDate(t.lastActivityDate)}return r},isMobileActive:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!t){return false}if(!i){i=BX.message||{}}return t.mobileLastDate&&new Date-t.mobileLastDate<this.getOnlineLimit(i)*1e3&&t.lastActivityDate-t.mobileLastDate<300*1e3},getOnlineLimit:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(!t){t=BX.message||{}}return t.LIMIT_ONLINE?parseInt(t.LIMIT_ONLINE):15*60}},isDarkColor:function e(t){if(!t||!t.match(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)){return false}if(t.length===4){t=t.replace(/#([A-Fa-f0-9])/gi,"$1$1")}else{t=t.replace(/#([A-Fa-f0-9])/gi,"$1")}t=t.toLowerCase();var i=["#17a3ea","#00aeef","#00c4fb","#47d1e2","#75d900","#ffab00","#ff5752","#468ee5","#1eae43"];if(i.includes("#"+t)){return true}var n=parseInt(t,16);var r=n>>16&255;var a=n>>8&255;var s=n&255;var o=(r*299+a*587+s*114)/1e3;return o<128},hashCode:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";var i=0;if(babelHelpers.typeof(t)==="object"&&t){t=JSON.stringify(t)}else if(typeof t!=="string"){t=t.toString()}if(typeof t!=="string"){return i}for(var n=0;n<t.length;n++){var r=t.charCodeAt(n);i=(i<<5)-i+r;i=i&i}return i},versionCompare:function e(t,i){var n=/^([\d+\.]+)$/;if(!n.test(t)||!n.test(i)){return NaN}t=t.toString().split(".");i=i.toString().split(".");if(t.length<i.length){while(t.length<i.length){t.push(0)}}else if(i.length<t.length){while(i.length<t.length){i.push(0)}}for(var r=0;r<t.length;r++){if(t[r]>i[r]){return 1}else if(t[r]<i[r]){return-1}}return 0},throttle:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;var r=null;var a=null;var s=function e(){t.apply(n,a);r=null};return function(){if(!r){a=arguments;r=setTimeout(s,i)}}},debounce:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;var r=null;var a=null;var s=function e(){t.apply(n,a)};return function(){a=arguments;clearTimeout(r);r=setTimeout(s,i)}},getLogTrackingParams:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=[];var n=t.name,r=n===void 0?"tracking":n,a=t.data,s=a===void 0?[]:a,o=t.dialog,l=o===void 0?null:o,u=t.message,f=u===void 0?null:u,D=t.files,c=D===void 0?null:D;r=encodeURIComponent(r);if(s&&!(s instanceof Array)&&babelHelpers.typeof(s)==="object"){var x=[];for(var T in s){if(s.hasOwnProperty(T)){x.push(encodeURIComponent(T)+"="+encodeURIComponent(s[T]))}}s=x}else if(!s instanceof Array){s=[]}if(l){i.push("timType="+l.type);if(l.type==="lines"){i.push("timLinesType="+l.entityId.split("|")[0])}}if(c){var g="file";if(c instanceof Array&&c[0]){g=c[0].type}else{g=c.type}i.push("timMessageType="+g)}else if(f){i.push("timMessageType=text")}if(this.platform.isBitrixMobile()){i.push("timDevice=bitrixMobile")}else if(this.platform.isBitrixDesktop()){i.push("timDevice=bitrixDesktop")}else if(this.platform.isIos()||this.platform.isAndroid()){i.push("timDevice=mobile")}else{i.push("timDevice=web")}return r+(s.length?"&"+s.join("&"):"")+(i.length?"&"+i.join("&"):"")}};e.Utils=i})(this.BX.Messenger.Lib=this.BX.Messenger.Lib||{},BX.Messenger.Const);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:62:"/local/js/im/model/dist/registry.bundle.min.js?165475981797207";s:6:"source";s:42:"/local/js/im/model/dist/registry.bundle.js";s:3:"min";s:46:"/local/js/im/model/dist/registry.bundle.min.js";s:3:"map";s:46:"/local/js/im/model/dist/registry.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e,t,i,n,a,r,o,s){"use strict";var l=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"application"}},{key:"getState",value:function e(){return{common:{host:this.getVariable("common.host",location.protocol+"//"+location.host),siteId:this.getVariable("common.siteId","default"),userId:this.getVariable("common.userId",0),languageId:this.getVariable("common.languageId","en")},dialog:{dialogId:this.getVariable("dialog.dialogId","0"),chatId:this.getVariable("dialog.chatId",0),diskFolderId:this.getVariable("dialog.diskFolderId",0),messageLimit:this.getVariable("dialog.messageLimit",20),enableReadMessages:this.getVariable("dialog.enableReadMessages",true),messageExtraCount:0},disk:{enabled:false,maxFileSize:5242880},call:{serverEnabled:false,maxParticipants:24},mobile:{keyboardShow:false},device:{type:this.getVariable("device.type",s.DeviceType.desktop),orientation:this.getVariable("device.orientation",s.DeviceOrientation.portrait)},options:{quoteEnable:this.getVariable("options.quoteEnable",true),quoteFromRight:this.getVariable("options.quoteFromRight",true),autoplayVideo:this.getVariable("options.autoplayVideo",true),darkBackground:this.getVariable("options.darkBackground",false),showSmiles:false},error:{active:false,code:"",description:""}}}},{key:"getStateSaveException",value:function e(){return Object.assign({common:this.getVariable("saveException.common",null),dialog:this.getVariable("saveException.dialog",null),mobile:this.getVariable("saveException.mobile",null),device:this.getVariable("saveException.device",null),error:this.getVariable("saveException.error",null)})}},{key:"getActions",value:function e(){var t=this;return{set:function e(i,n){i.commit("set",t.validate(n))},showSmiles:function e(t,i){t.commit("showSmiles")},hideSmiles:function e(t,i){t.commit("hideSmiles")}}}},{key:"getMutations",value:function e(){var t=this;return{set:function e(i,n){var a=false;for(var r in n){if(!n.hasOwnProperty(r)){continue}for(var o in n[r]){if(!n[r].hasOwnProperty(o)){continue}i[r][o]=n[r][o];a=true}}if(a&&t.isSaveNeeded(n)){t.saveState(i)}},increaseDialogExtraCount:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=i.count,a=n===void 0?1:n;t.dialog.messageExtraCount+=a},decreaseDialogExtraCount:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=i.count,a=n===void 0?1:n;var r=t.dialog.messageExtraCount-a;if(r<=0){r=0}t.dialog.messageExtraCount=r},clearDialogExtraCount:function e(t){t.dialog.messageExtraCount=0},showSmiles:function e(t){t.options.showSmiles=true},hideSmiles:function e(t){t.options.showSmiles=false}}}},{key:"validate",value:function e(t){var i={};if(babelHelpers.typeof(t.common)==="object"&&t.common){i.common={};if(typeof t.common.userId==="number"){i.common.userId=t.common.userId}if(typeof t.common.languageId==="string"){i.common.languageId=t.common.languageId}}if(babelHelpers.typeof(t.dialog)==="object"&&t.dialog){i.dialog={};if(typeof t.dialog.dialogId==="number"){i.dialog.dialogId=t.dialog.dialogId.toString();i.dialog.chatId=0}else if(typeof t.dialog.dialogId==="string"){i.dialog.dialogId=t.dialog.dialogId;if(typeof t.dialog.chatId!=="number"){var n=t.dialog.dialogId;if(n.startsWith("chat")){n=t.dialog.dialogId.substr(4)}n=parseInt(n);i.dialog.chatId=!isNaN(n)?n:0;t.dialog.chatId=i.dialog.chatId}}if(typeof t.dialog.chatId==="number"){i.dialog.chatId=t.dialog.chatId}if(typeof t.dialog.diskFolderId==="number"){i.dialog.diskFolderId=t.dialog.diskFolderId}if(typeof t.dialog.messageLimit==="number"){i.dialog.messageLimit=t.dialog.messageLimit}if(typeof t.dialog.messageExtraCount==="number"){i.dialog.messageExtraCount=t.dialog.messageExtraCount}if(typeof t.dialog.enableReadMessages==="boolean"){i.dialog.enableReadMessages=t.dialog.enableReadMessages}}if(babelHelpers.typeof(t.disk)==="object"&&t.disk){i.disk={};if(typeof t.disk.enabled==="boolean"){i.disk.enabled=t.disk.enabled}if(typeof t.disk.maxFileSize==="number"){i.disk.maxFileSize=t.disk.maxFileSize}}if(babelHelpers.typeof(t.call)==="object"&&t.call){i.call={};if(typeof t.call.serverEnabled==="boolean"){i.call.serverEnabled=t.call.serverEnabled}if(typeof t.call.maxParticipants==="number"){i.call.maxParticipants=t.call.maxParticipants}}if(babelHelpers.typeof(t.mobile)==="object"&&t.mobile){i.mobile={};if(typeof t.mobile.keyboardShow==="boolean"){i.mobile.keyboardShow=t.mobile.keyboardShow}}if(babelHelpers.typeof(t.device)==="object"&&t.device){i.device={};if(typeof t.device.type==="string"&&typeof s.DeviceType[t.device.type]!=="undefined"){i.device.type=t.device.type}if(typeof t.device.orientation==="string"&&typeof s.DeviceOrientation[t.device.orientation]!=="undefined"){i.device.orientation=t.device.orientation}}if(babelHelpers.typeof(t.error)==="object"&&t.error){if(typeof t.error.active==="boolean"){i.error={active:t.error.active,code:t.error.code.toString()||"",description:t.error.description.toString()||""}}}return i}}]);return t}(r.VuexBuilderModel);var c=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"conference"}},{key:"getState",value:function e(){return{common:{inited:false,passChecked:true,showChat:false,userCount:0,messageCount:0,userInCallCount:0,state:s.ConferenceStateType.preparation,callEnded:false,showSmiles:false,error:"",conferenceTitle:"",alias:"",permissionsRequested:false,conferenceStarted:null,conferenceStartDate:null,joinWithVideo:null,userReadyToJoin:false,isBroadcast:false,users:[],usersInCall:[],presenters:[],rightPanelMode:s.ConferenceRightPanelMode.hidden},user:{id:-1,hash:""}}}},{key:"getActions",value:function e(){return{showChat:function e(t,i){if(typeof i.newState!=="boolean"){return false}t.commit("showChat",i)},changeRightPanelMode:function e(t,i){if(!s.ConferenceRightPanelMode[i.mode]){return false}t.commit("changeRightPanelMode",i)},setPermissionsRequested:function e(t,i){if(typeof i.status!=="boolean"){return false}t.commit("setPermissionsRequested",i)},setPresenters:function e(t,i){if(!Array.isArray(i.presenters)){i.presenters=[i.presenters]}t.commit("setPresenters",i)},setUsers:function e(t,i){if(!Array.isArray(i.users)){i.users=[i.users]}t.commit("setUsers",i)},removeUsers:function e(t,i){if(!Array.isArray(i.users)){i.users=[i.users]}t.commit("removeUsers",i)},setUsersInCall:function e(t,i){if(!Array.isArray(i.users)){i.users=[i.users]}t.commit("setUsersInCall",i)},removeUsersInCall:function e(t,i){if(!Array.isArray(i.users)){i.users=[i.users]}t.commit("removeUsersInCall",i)},setConferenceTitle:function e(t,i){if(typeof i.conferenceTitle!=="string"){return false}t.commit("setConferenceTitle",i)},setBroadcastMode:function e(t,i){if(typeof i.broadcastMode!=="boolean"){return false}t.commit("setBroadcastMode",i)}}}},{key:"getMutations",value:function e(){var t=this;return{common:function e(t,i){if(typeof i.inited==="boolean"){t.common.inited=i.inited}if(typeof i.passChecked==="boolean"){t.common.passChecked=i.passChecked}if(typeof i.userCount==="number"||typeof i.userCount==="string"){t.common.userCount=parseInt(i.userCount)}if(typeof i.messageCount==="number"||typeof i.messageCount==="string"){t.common.messageCount=parseInt(i.messageCount)}if(typeof i.userInCallCount==="number"||typeof i.userInCallCount==="string"){t.common.userInCallCount=parseInt(i.userInCallCount)}if(typeof i.componentError==="string"){t.common.componentError=i.componentError}if(typeof i.isBroadcast==="boolean"){t.common.isBroadcast=i.isBroadcast}if(Array.isArray(i.presenters)){t.common.presenters=i.presenters}},user:function e(i,n){if(typeof n.id==="number"){i.user.id=n.id}if(typeof n.hash==="string"&&n.hash!==i.user.hash){i.user.hash=n.hash}if(t.isSaveNeeded({user:n})){t.saveState(i)}},showChat:function e(t,i){var n=i.newState;t.common.showChat=n},changeRightPanelMode:function e(t,i){var n=i.mode;t.common.rightPanelMode=n},setPermissionsRequested:function e(t,i){t.common.permissionsRequested=i.status},startCall:function e(t,i){t.common.state=s.ConferenceStateType.call;t.common.callEnded=false},endCall:function e(t,i){t.common.state=s.ConferenceStateType.preparation;t.common.callEnded=true},returnToPreparation:function e(t,i){t.common.state=s.ConferenceStateType.preparation},toggleSmiles:function e(t,i){t.common.showSmiles=!t.common.showSmiles},setError:function e(t,i){if(typeof i.errorCode==="string"){t.common.error=i.errorCode}},setConferenceTitle:function e(t,i){t.common.conferenceTitle=i.conferenceTitle},setBroadcastMode:function e(t,i){t.common.isBroadcast=i.broadcastMode},setAlias:function e(t,i){if(typeof i.alias==="string"){t.common.alias=i.alias}},setJoinType:function e(t,i){if(typeof i.joinWithVideo==="boolean"){t.common.joinWithVideo=i.joinWithVideo}},setConferenceStatus:function e(t,i){if(typeof i.conferenceStarted==="boolean"){t.common.conferenceStarted=i.conferenceStarted}},setConferenceStartDate:function e(t,i){if(i.conferenceStartDate instanceof Date){t.common.conferenceStartDate=i.conferenceStartDate}},setUserReadyToJoin:function e(t,i){t.common.userReadyToJoin=true},setPresenters:function e(t,i){if(i.replace){t.common.presenters=i.presenters}else{i.presenters.forEach(function(e){e=parseInt(e);if(!t.common.presenters.includes(e)){t.common.presenters.push(e)}})}},setUsers:function e(t,i){i.users.forEach(function(e){e=parseInt(e);if(!t.common.users.includes(e)){t.common.users.push(e)}})},removeUsers:function e(t,i){t.common.users=t.common.users.filter(function(e){return!i.users.includes(parseInt(e))})},setUsersInCall:function e(t,i){i.users.forEach(function(e){e=parseInt(e);if(!t.common.usersInCall.includes(e)){t.common.usersInCall.push(e)}})},removeUsersInCall:function e(t,i){t.common.usersInCall=t.common.usersInCall.filter(function(e){return!i.users.includes(parseInt(e))})}}}},{key:"getStateSaveException",value:function e(){return{common:{inited:null,state:null,showSmiles:null,userCount:null,messageCount:null,userInCallCount:null,error:null,conferenceTitle:null,alias:null,conferenceStarted:null,conferenceStartDate:null,joinWithVideo:null,userReadyToJoin:null,rightPanelMode:null,presenters:null,users:null}}}}]);return t}(r.VuexBuilderModel);function u(e,t){var i;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(i=d(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var a=function e(){};return{s:a,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r=true,o=false,s;return{s:function t(){i=e[Symbol.iterator]()},n:function e(){var t=i.next();r=t.done;return t},e:function e(t){o=true;s=t},f:function e(){try{if(!r&&i.return!=null)i.return()}finally{if(o)throw s}}}}function d(e,t){if(!e)return;if(typeof e==="string")return f(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return f(e,t)}function f(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++){n[i]=e[i]}return n}var p={empty:"empty",equal:"equal",none:"none",found:"found",foundReverse:"foundReverse"};var h=function(e){babelHelpers.inherits(r,e);function r(){babelHelpers.classCallCheck(this,r);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(r).apply(this,arguments))}babelHelpers.createClass(r,[{key:"getName",value:function e(){return"messages"}},{key:"getState",value:function e(){return{created:0,collection:{},mutationType:{},saveMessageList:{},saveFileList:{},saveUserList:{},host:this.getVariable("host",location.protocol+"//"+location.host)}}},{key:"getElementState",value:function e(){return{templateId:0,templateType:"message",placeholderType:0,id:0,chatId:0,authorId:0,date:new Date,text:"",textConverted:"",params:{TYPE:"default",COMPONENT_ID:"bx-im-view-message"},push:false,unread:false,sending:false,error:false,retry:false,blink:false}}},{key:"getGetters",value:function e(){var t=this;return{getMutationType:function e(t){return function(e){if(!t.mutationType[e]){return{initialType:s.MutationType.none,appliedType:s.MutationType.none}}return t.mutationType[e]}},getLastId:function e(t){return function(e){if(!t.collection[e]||t.collection[e].length<=0){return null}var i=0;for(var n=0;n<t.collection[e].length;n++){var a=t.collection[e][n];if(a.push||a.sending||a.id.toString().startsWith("temporary")){continue}if(i<a.id){i=a.id}}return i?i:null}},getMessage:function e(t){return function(e,i){if(!t.collection[e]||t.collection[e].length<=0){return null}for(var n=t.collection[e].length-1;n>=0;n--){if(t.collection[e][n].id===i){return t.collection[e][n]}}return null}},get:function e(t){return function(e){if(!t.collection[e]||t.collection[e].length<=0){return[]}return t.collection[e]}},getBlank:function e(i){return function(e){return t.getElementState()}},getSaveFileList:function e(t){return function(e){return t.saveFileList}},getSaveUserList:function e(t){return function(e){return t.saveUserList}}}}},{key:"getActions",value:function e(){var t=this;return{add:function e(i,n){var a=t.validate(Object.assign({},n));a.params=Object.assign({},t.getElementState().params,a.params);a.id="temporary"+(new Date).getTime()+i.state.created;a.templateId=a.id;a.unread=false;i.commit("add",Object.assign({},t.getElementState(),a));if(n.sending!==false){i.dispatch("actionStart",{id:a.id,chatId:a.chatId})}return a.id},actionStart:function e(t,i){if(/^\d+$/.test(i.id)){i.id=parseInt(i.id)}i.chatId=parseInt(i.chatId);a.Vue.nextTick(function(){t.commit("update",{id:i.id,chatId:i.chatId,fields:{sending:true}})})},actionError:function e(t,i){if(/^\d+$/.test(i.id)){i.id=parseInt(i.id)}i.chatId=parseInt(i.chatId);a.Vue.nextTick(function(){t.commit("update",{id:i.id,chatId:i.chatId,fields:{sending:false,error:true,retry:i.retry!==false}})})},actionFinish:function e(t,i){if(/^\d+$/.test(i.id)){i.id=parseInt(i.id)}i.chatId=parseInt(i.chatId);a.Vue.nextTick(function(){t.commit("update",{id:i.id,chatId:i.chatId,fields:{sending:false,error:false,retry:false}})})},set:function e(i,n){if(n instanceof Array){n=n.map(function(e){return t.prepareMessage(e,{host:i.state.host})})}else{var a=t.prepareMessage(n,{host:i.state.host});(n=[]).push(a)}i.commit("set",{insertType:s.MutationType.set,data:n});return"set is done"},addPlaceholders:function e(i,n){if(n.placeholders instanceof Array){n.placeholders=n.placeholders.map(function(e){return t.prepareMessage(e,{host:i.state.host})})}else{return false}var a=n.requestMode==="history"?s.MutationType.setBefore:s.MutationType.setAfter;if(a===s.MutationType.setBefore){n.placeholders=n.placeholders.reverse()}i.commit("set",{insertType:a,data:n.placeholders});return n.placeholders[0].id},clearPlaceholders:function e(t,i){t.commit("clearPlaceholders",i)},updatePlaceholders:function e(i,n){if(n.data instanceof Array){n.data=n.data.map(function(e){return t.prepareMessage(e,{host:i.state.host})})}else{return false}i.commit("updatePlaceholders",n);return true},setAfter:function e(i,n){if(n instanceof Array){n=n.map(function(e){return t.prepareMessage(e)})}else{var a=t.prepareMessage(n);(n=[]).push(a)}i.commit("set",{insertType:s.MutationType.setAfter,data:n})},setBefore:function e(i,n){if(n instanceof Array){n=n.map(function(e){return t.prepareMessage(e)})}else{var a=t.prepareMessage(n);(n=[]).push(a)}i.commit("set",{insertType:s.MutationType.setBefore,data:n})},update:function e(i,n){if(/^\d+$/.test(n.id)){n.id=parseInt(n.id)}if(/^\d+$/.test(n.chatId)){n.chatId=parseInt(n.chatId)}i.commit("initCollection",{chatId:n.chatId});if(!i.state.collection[n.chatId]){return false}var a=i.state.collection[n.chatId].findIndex(function(e){return e.id===n.id});if(a<0){return false}var r=t.validate(Object.assign({},n.fields));if(r.params){r.params=Object.assign({},t.getElementState().params,i.state.collection[n.chatId][a].params,r.params)}i.commit("update",{id:n.id,chatId:n.chatId,index:a,fields:r});if(n.fields.blink){setTimeout(function(){i.commit("update",{id:n.id,chatId:n.chatId,fields:{blink:false}})},1e3)}return true},delete:function e(t,i){if(!(i.id instanceof Array)){i.id=[i.id]}i.id=i.id.map(function(e){if(/^\d+$/.test(e)){e=parseInt(e)}return e});t.commit("delete",{chatId:i.chatId,elements:i.id});return true},clear:function e(t,i){i.chatId=parseInt(i.chatId);if(i.keepPlaceholders){t.commit("clearMessages",{chatId:i.chatId})}else{t.commit("clear",{chatId:i.chatId})}return true},applyMutationType:function e(t,i){i.chatId=parseInt(i.chatId);t.commit("applyMutationType",{chatId:i.chatId});return true},readMessages:function e(t,i){i.readId=parseInt(i.readId)||0;i.chatId=parseInt(i.chatId);if(typeof t.state.collection[i.chatId]==="undefined"){return{count:0}}var n=0;for(var a=t.state.collection[i.chatId].length-1;a>=0;a--){var r=t.state.collection[i.chatId][a];if(!r.unread)continue;if(i.readId===0||r.id<=i.readId){n++}}t.commit("readMessages",{chatId:i.chatId,readId:i.readId});return{count:n}},unreadMessages:function e(t,i){i.unreadId=parseInt(i.unreadId)||0;i.chatId=parseInt(i.chatId);if(typeof t.state.collection[i.chatId]==="undefined"||!i.unreadId){return{count:0}}var n=0;for(var a=t.state.collection[i.chatId].length-1;a>=0;a--){var r=t.state.collection[i.chatId][a];if(r.unread)continue;if(r.id>=i.unreadId){n++}}t.commit("unreadMessages",{chatId:i.chatId,unreadId:i.unreadId});return{count:n}}}}},{key:"getMutations",value:function e(){var n=this;return{initCollection:function e(t,i){return n.initCollection(t,i)},add:function e(i,a){n.initCollection(i,{chatId:a.chatId});i.collection[a.chatId].push(a);i.saveMessageList[a.chatId].push(a.id);i.created+=1;i.collection[a.chatId].sort(function(e,t){return e.id-t.id});n.saveState(i,a.chatId);t.Logger.warn("Messages model: saving state after add")},clearPlaceholders:function e(t,i){if(!t.collection[i.chatId]){return false}t.collection[i.chatId]=t.collection[i.chatId].filter(function(e){return!e.id.toString().startsWith("placeholder")})},updatePlaceholders:function e(i,a){var r="placeholder".concat(a.firstMessage);var o=i.collection[a.chatId].findIndex(function(e){return e.id===r});if(o>=0){var s;i.collection[a.chatId].splice(o,a.amount);(s=i.collection[a.chatId]).splice.apply(s,[o,0].concat(babelHelpers.toConsumableArray(a.data)))}i.collection[a.chatId].sort(function(e,t){return e.id-t.id});t.Logger.warn("Messages model: saving state after updating placeholders");n.saveState(i,a.chatId)},set:function e(a,r){t.Logger.warn("Messages model: set mutation",r);var o=[];var l=[];var c=false;var d=r.insertType;if(r.insertType===s.MutationType.set){(function(){r.insertType=s.MutationType.setAfter;var e={};r.data.forEach(function(t){if(!e[t.chatId]){e[t.chatId]=[]}e[t.chatId].push(t.id)});var i=function i(o){if(!e.hasOwnProperty(o))return"continue";n.initCollection(a,{chatId:o});t.Logger.warn("Messages model: messages before adding from request - ",a.collection[o].length);if(a.saveMessageList[o].length>e[o].length||e[o].length<s.StorageLimit.messages){a.collection[o]=a.collection[o].filter(function(t){return e[o].includes(t.id)});a.saveMessageList[o]=a.saveMessageList[o].filter(function(t){return e[o].includes(t)})}t.Logger.warn("Messages model: cache length",a.saveMessageList[o].length);var l=n.manageCacheBeforeSet(babelHelpers.toConsumableArray(a.saveMessageList[o].reverse()),e[o]);t.Logger.warn("Messages model: set intersection with cache",l);if(l.type===p.none){if(l.foundElements.length>0){a.collection[o]=a.collection[o].filter(function(e){return!l.foundElements.includes(e.id)});a.saveMessageList[o]=a.saveMessageList[o].filter(function(e){return!l.foundElements.includes(e)})}t.Logger.warn("Messages model: no intersection - removing cache");n.removeIntersectionCacheElements=a.collection[o].map(function(e){return e.id});a.collection[o]=a.collection[o].filter(function(e){return!n.removeIntersectionCacheElements.includes(e.id)});a.saveMessageList[o]=a.saveMessageList[o].filter(function(e){return!n.removeIntersectionCacheElements.includes(e)});n.removeIntersectionCacheElements=[]}else if(l.type===p.foundReverse){t.Logger.warn("Messages model: found reverse intersection");r.insertType=s.MutationType.setBefore;r.data=r.data.reverse()}};for(var o in e){var l=i(o);if(l==="continue")continue}})()}t.Logger.warn("Messages model: adding messages to model",r.data);var f=u(r.data),h;try{var m=function e(){var t=h.value;n.initCollection(a,{chatId:t.chatId});var i=a.collection[t.chatId].findIndex(function(e){return e.id===t.id});if(i>-1){delete t.templateId;a.collection[t.chatId][i]=Object.assign(a.collection[t.chatId][i],t)}else if(r.insertType===s.MutationType.setBefore){a.collection[t.chatId].unshift(t)}else if(r.insertType===s.MutationType.setAfter){a.collection[t.chatId].push(t)}o.push(t.chatId);if(n.store.getters["dialogues/canSaveChat"]&&n.store.getters["dialogues/canSaveChat"](t.chatId)){l.push(t.chatId)}};for(f.s();!(h=f.n()).done;){m()}}catch(e){f.e(e)}finally{f.f()}o=babelHelpers.toConsumableArray(new Set(o));l=babelHelpers.toConsumableArray(new Set(l));c=r.data.every(function(e){return e.push===true});t.Logger.warn("Is it fake push message?",c);o.forEach(function(e){a.collection[e].sort(function(e,t){return e.id-t.id});if(!c){t.Logger.warn("setting messagesSet = true for chatId = ",e);setTimeout(function(){i.EventEmitter.emit(s.EventType.dialog.messagesSet,{chatId:e});i.EventEmitter.emit(s.EventType.dialog.readVisibleMessages,{chatId:e})},100)}});if(d!==s.MutationType.setBefore){l.forEach(function(e){t.Logger.warn("Messages model: saving state after set");n.saveState(a,e)})}},update:function e(i,a){n.initCollection(i,{chatId:a.chatId});var r=-1;if(typeof a.index!=="undefined"&&i.collection[a.chatId][a.index]){r=a.index}else{r=i.collection[a.chatId].findIndex(function(e){return e.id===a.id})}if(r>=0){var o=i.saveMessageList[a.chatId].includes(i.collection[a.chatId][r].id)||a.fields.id&&!a.fields.id.toString().startsWith("temporary")&&i.collection[a.chatId][r].id.toString().startsWith("temporary");delete a.fields.templateId;i.collection[a.chatId][r]=Object.assign(i.collection[a.chatId][r],a.fields);if(o){t.Logger.warn("Messages model: saving state after update");n.saveState(i,a.chatId)}}},delete:function e(i,a){n.initCollection(i,{chatId:a.chatId});i.collection[a.chatId]=i.collection[a.chatId].filter(function(e){return!a.elements.includes(e.id)});if(i.saveMessageList[a.chatId].length>0){var r=u(a.elements),o;try{for(r.s();!(o=r.n()).done;){var s=o.value;if(i.saveMessageList[a.chatId].includes(s)){t.Logger.warn("Messages model: saving state after delete");n.saveState(i,a.chatId);break}}}catch(e){r.e(e)}finally{r.f()}}},clear:function e(t,i){n.initCollection(t,{chatId:i.chatId});t.collection[i.chatId]=[];t.saveMessageList[i.chatId]=[]},clearMessages:function e(t,i){n.initCollection(t,{chatId:i.chatId});t.collection[i.chatId]=t.collection[i.chatId].filter(function(e){return e.id.toString().startsWith("placeholder")});t.saveMessageList[i.chatId]=[]},applyMutationType:function e(t,i){if(typeof t.mutationType[i.chatId]==="undefined"){a.Vue.set(t.mutationType,i.chatId,{applied:false,initialType:s.MutationType.none,appliedType:s.MutationType.none,scrollStickToTop:0,scrollMessageId:0})}t.mutationType[i.chatId].applied=true},readMessages:function e(i,a){n.initCollection(i,{chatId:a.chatId});var r=false;for(var o=i.collection[a.chatId].length-1;o>=0;o--){var s=i.collection[a.chatId][o];if(!s.unread)continue;if(a.readId===0||s.id<=a.readId){i.collection[a.chatId][o]=Object.assign(i.collection[a.chatId][o],{unread:false});r=true}}if(r){t.Logger.warn("Messages model: saving state after reading");n.saveState(i,a.chatId)}},unreadMessages:function e(i,a){n.initCollection(i,{chatId:a.chatId});var r=false;for(var o=i.collection[a.chatId].length-1;o>=0;o--){var s=i.collection[a.chatId][o];if(s.unread)continue;if(s.id>=a.unreadId){i.collection[a.chatId][o]=Object.assign(i.collection[a.chatId][o],{unread:true});r=true}}if(r){t.Logger.warn("Messages model: saving state after unreading");n.saveState(i,a.chatId);n.updateSubordinateStates()}}}}},{key:"initCollection",value:function e(t,i){if(typeof i.chatId==="undefined"){return false}if(typeof i.chatId==="undefined"||typeof t.collection[i.chatId]!=="undefined"){return true}a.Vue.set(t.collection,i.chatId,i.messages?[].concat(i.messages):[]);a.Vue.set(t.saveMessageList,i.chatId,[]);a.Vue.set(t.saveFileList,i.chatId,[]);a.Vue.set(t.saveUserList,i.chatId,[]);return true}},{key:"prepareMessage",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=this.validate(Object.assign({},t),i);n.params=Object.assign({},this.getElementState().params,n.params);n.templateId=n.id;return Object.assign({},this.getElementState(),n)}},{key:"manageCacheBeforeSet",value:function e(i,n){var a=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;t.Logger.warn("manageCacheBeforeSet",i,n);var r={type:p.empty,foundElements:[],noneElements:[]};if(!i||i.length<=0){return r}var o=u(n),s;try{for(o.s();!(s=o.n()).done;){var l=s.value;if(i.includes(l)){if(r.type===p.empty){r.type=p.found}r.foundElements.push(l)}else{if(r.type===p.empty){r.type=p.none}r.noneElements.push(l)}}}catch(e){o.e(e)}finally{o.f()}if(r.type===p.found&&i.length===n.length&&r.foundElements.length===n.length){r.type=p.equal}else if(r.type===p.none&&!a&&r.foundElements.length>0){var c=this.manageCacheBeforeSet(i.reverse(),n.reverse(),true);if(c.type===p.found){c.type=p.foundReverse;return c}}return r}},{key:"updateSaveLists",value:function e(t,i){if(!this.isSaveAvailable()){return true}if(!i||!this.store.getters["dialogues/canSaveChat"]||!this.store.getters["dialogues/canSaveChat"](i)){return false}this.initCollection(t,{chatId:i});var n=0;var a=[];var r=[];var o=[];var l=this.store.getters["dialogues/getByChatId"](i);if(l&&l.type==="private"){o.push(parseInt(l.dialogId))}var c=0;for(var u=t.collection[i].length-1;u>=0;u--){if(t.collection[i][u].id.toString().startsWith("temporary")){continue}if(!t.collection[i][u].unread){c++}if(n>=s.StorageLimit.messages&&c>=50){break}a.unshift(t.collection[i][u].id);n++}a=a.slice(0,s.StorageLimit.messages);t.collection[i].filter(function(e){return a.includes(e.id)}).forEach(function(e){if(e.authorId>0){o.push(e.authorId)}if(e.params.FILE_ID instanceof Array){r=e.params.FILE_ID.concat(r)}});t.saveMessageList[i]=a;t.saveFileList[i]=babelHelpers.toConsumableArray(new Set(r));t.saveUserList[i]=babelHelpers.toConsumableArray(new Set(o));return true}},{key:"getSaveTimeout",value:function e(){return 150}},{key:"saveState",value:function e(i,n){if(!this.updateSaveLists(i,n)){return false}babelHelpers.get(babelHelpers.getPrototypeOf(r.prototype),"saveState",this).call(this,function(){var e={collection:{},saveMessageList:{},saveUserList:{},saveFileList:{}};var n=function n(a){if(!i.saveMessageList.hasOwnProperty(a)){return"continue"}if(!i.collection[a]){return"continue"}if(!e.collection[a]){e.collection[a]=[]}i.collection[a].filter(function(e){return i.saveMessageList[a].includes(e.id)}).forEach(function(t){if(t.templateType!=="placeholder"){e.collection[a].push(t)}});t.Logger.warn("Cache after updating",e.collection[a]);e.saveMessageList[a]=i.saveMessageList[a];e.saveFileList[a]=i.saveFileList[a];e.saveUserList[a]=i.saveUserList[a]};for(var a in i.saveMessageList){var r=n(a);if(r==="continue")continue}return e})}},{key:"updateSubordinateStates",value:function e(){this.store.dispatch("users/saveState");this.store.dispatch("files/saveState")}},{key:"validate",value:function e(t,i){var a={};if(typeof t.id==="number"){a.id=t.id}else if(typeof t.id==="string"){if(t.id.startsWith("temporary")||t.id.startsWith("placeholder")){a.id=t.id}else{a.id=parseInt(t.id)}}if(typeof t.templateId==="number"){a.templateId=t.templateId}else if(typeof t.templateId==="string"){if(t.templateId.startsWith("temporary")){a.templateId=t.templateId}else{a.templateId=parseInt(t.templateId)}}if(typeof t.templateType==="string"){a.templateType=t.templateType}if(typeof t.placeholderType==="number"){a.placeholderType=t.placeholderType}if(typeof t.chat_id!=="undefined"){t.chatId=t.chat_id}if(typeof t.chatId==="number"||typeof t.chatId==="string"){a.chatId=parseInt(t.chatId)}if(typeof t.date!=="undefined"){a.date=n.Utils.date.cast(t.date)}if(typeof t.textOriginal==="string"||typeof t.textOriginal==="number"){a.text=t.textOriginal.toString();if(typeof t.text==="string"||typeof t.text==="number"){a.textConverted=this.convertToHtml({text:t.text.toString(),isConverted:true})}}else{if(typeof t.text_converted!=="undefined"){t.textConverted=t.text_converted}if(typeof t.textConverted==="string"||typeof t.textConverted==="number"){a.textConverted=t.textConverted.toString()}if(typeof t.text==="string"||typeof t.text==="number"){a.text=t.text.toString();var r=typeof a.textConverted!=="undefined";a.textConverted=this.convertToHtml({text:r?a.textConverted:a.text,isConverted:r})}}if(typeof t.senderId!=="undefined"){t.authorId=t.senderId}else if(typeof t.author_id!=="undefined"){t.authorId=t.author_id}if(typeof t.authorId==="number"||typeof t.authorId==="string"){if(t.system===true||t.system==="Y"){a.authorId=0}else{a.authorId=parseInt(t.authorId)}}if(babelHelpers.typeof(t.params)==="object"&&t.params!==null){var o=this.validateParams(t.params,i);if(o){a.params=o}}if(typeof t.push==="boolean"){a.push=t.push}if(typeof t.sending==="boolean"){a.sending=t.sending}if(typeof t.unread==="boolean"){a.unread=t.unread}if(typeof t.blink==="boolean"){a.blink=t.blink}if(typeof t.error==="boolean"||typeof t.error==="string"){a.error=t.error}if(typeof t.retry==="boolean"){a.retry=t.retry}return a}},{key:"validateParams",value:function e(t,i){var a={};try{for(var r in t){if(!t.hasOwnProperty(r)){continue}if(r==="COMPONENT_ID"){if(typeof t[r]==="string"&&BX.Vue.isComponent(t[r])){a[r]=t[r]}}else if(r==="LIKE"){if(t[r]instanceof Array){a["REACTION"]={like:t[r].map(function(e){return parseInt(e)})}}}else if(r==="CHAT_LAST_DATE"){a[r]=n.Utils.date.cast(t[r])}else if(r==="AVATAR"){if(t[r]){a[r]=t[r].startsWith("http")?t[r]:i.host+t[r]}}else if(r==="NAME"){if(t[r]){a[r]=t[r]}}else if(r==="ATTACH"){a[r]=this.decodeAttach(t[r])}else{a[r]=t[r]}}}catch(e){}var o=false;for(var s in a){if(!a.hasOwnProperty(s)){continue}o=true;break}return o?a:null}},{key:"convertToHtml",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.quote,n=i===void 0?true:i,a=t.image,r=a===void 0?true:a,o=t.text,s=o===void 0?"":o,l=t.isConverted,c=l===void 0?false:l,u=t.enableBigSmile,d=u===void 0?true:u;s=s.trim();if(!c){s=s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}if(s.startsWith("/me")){s="<i>".concat(s.substr(4),"</i>")}else if(s.startsWith("/loud")){s="<b>".concat(s.substr(6),"</b>")}var f="&gt;&gt;";if(n&&s.indexOf(f)>=0){var p=s.split(c?"<br />":"\n");for(var h=0;h<p.length;h++){if(p[h].startsWith(f)){p[h]=p[h].replace(f,'<div class="bx-im-message-content-quote"><div class="bx-im-message-content-quote-wrap">');while(++h<p.length&&p[h].startsWith(f)){p[h]=p[h].replace(f,"")}p[h-1]+="</div></div><br>"}}s=p.join("<br />")}s=s.replace(/\n/gi,"<br />");s=s.replace(/\t/gi,"&nbsp;&nbsp;&nbsp;&nbsp;");s=this.decodeBbCode(s,false,d);if(n){s=s.replace(/------------------------------------------------------<br \/>(.*?)\[(.*?)\]<br \/>(.*?)------------------------------------------------------(<br \/>)?/g,function(e,t,i,n,a,r){return(r>0?"<br>":"")+'<div class="bx-im-message-content-quote"><div class="bx-im-message-content-quote-wrap"><div class="bx-im-message-content-quote-name"><span class="bx-im-message-content-quote-name-text">'+t+'</span><span class="bx-im-message-content-quote-name-time">'+i+"</span></div>"+n+"</div></div><br />"});s=s.replace(/------------------------------------------------------<br \/>(.*?)------------------------------------------------------(<br \/>)?/g,function(e,t,i,n,a){return(a>0?"<br>":"")+'<div class="bx-im-message-content-quote"><div class="bx-im-message-content-quote-wrap">'+t+"</div></div><br />"})}if(r){var m=false;s=s.replace(/<a(.*?)>(http[s]{0,1}:\/\/.*?)<\/a>/gi,function(e,t,i,n){if(!i.match(/(\.(jpg|jpeg|png|gif|webp)\?|\.(jpg|jpeg|png|gif|webp)$)/i)||i.indexOf("/docs/pub/")>0||i.indexOf("logout=yes")>0){return e}else{m=true;return(n>0?"<br />":"")+"<a"+t+' target="_blank" class="bx-im-element-file-image"><img src="'+i+'" class="bx-im-element-file-image-source-text" onerror="BX.Messenger.Model.MessagesModel.hideErrorImage(this)"></a></span>'}});if(m){s=s.replace(/<\/span>(\n?)<br(\s\/?)>/gi,"</span>").replace(/<br(\s\/?)>(\n?)<br(\s\/?)>(\n?)<span/gi,"<br /><span")}}if(d){s=s.replace(/^(\s*<img\s+src=[^>]+?data-code=[^>]+?data-definition="UHD"[^>]+?style="width:)(\d+)(px[^>]+?height:)(\d+)(px[^>]+?class="bx-smile"\s*\/?>\s*)$/,function e(t,i,n,a,r,o){return i+parseInt(n,10)*1.7+a+parseInt(r,10)*1.7+o})}if(s.substr(-6)=="<br />"){s=s.substr(0,s.length-6)}s=s.replace(/<br><br \/>/gi,"<br />");s=s.replace(/<br \/><br>/gi,"<br />");return s}},{key:"decodeBbCode",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return r.decodeBbCode({text:t,textOnly:i,enableBigSmile:n})}},{key:"decodeAttach",value:function e(t){var i=this;if(Array.isArray(t)){t.forEach(function(e){e=i.decodeAttach(e)})}else if(babelHelpers.typeof(t)==="object"&&t!==null){for(var a in t){if(t.hasOwnProperty(a)){t[a]=this.decodeAttach(t[a])}}}else{if(typeof t==="string"){t=n.Utils.text.htmlspecialcharsback(t)}}return t}}],[{key:"decodeBbCode",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.text,a=t.textOnly,r=a===void 0?false:a,o=t.enableBigSmile,s=o===void 0?true:o;var l=[];i=i.replace(/\[PUT(?:=(.+?))?\](.+?)?\[\/PUT\]/gi,function(e){var t=l.length;l.push(e);return"####REPLACEMENT_PUT_"+t+"####"});var c=[];i=i.replace(/\[SEND(?:=(.+?))?\](.+?)?\[\/SEND\]/gi,function(e){var t=c.length;c.push(e);return"####REPLACEMENT_SEND_"+t+"####"});var u=[];i=i.replace(/\[CODE\]\n?([\s\S]*?)\[\/CODE\]/gi,function(e,t){var i=u.length;u.push(t);return"####REPLACEMENT_CODE_"+i+"####"});i=i.replace(/\[url=([^\]]+)\](.*?)\[\/url\]/gi,function(e,t,i){var a=document.createElement("a");a.href=n.Utils.text.htmlspecialcharsback(t);a.target="_blank";a.text=n.Utils.text.htmlspecialcharsback(i);var r=["http:","https:","ftp:","file:","tel:","callto:","mailto:","skype:","viber:"];if(r.indexOf(a.protocol)<=-1){return e}return a.outerHTML});i=i.replace(/\[url\]([^\]]+)\[\/url\]/gi,function(e,t){t=n.Utils.text.htmlspecialcharsback(t);var i=document.createElement("a");i.href=t;i.target="_blank";i.text=t;var a=["http:","https:","ftp:","file:","tel:","callto:","mailto:","skype:","viber:"];if(a.indexOf(i.protocol)<=-1){return e}return i.outerHTML});i=i.replace(/\[LIKE\]/gi,'<span class="bx-smile bx-im-smile-like"></span>');i=i.replace(/\[DISLIKE\]/gi,'<span class="bx-smile bx-im-smile-dislike"></span>');i=i.replace(/\[BR\]/gi,"<br/>");i=i.replace(/\[([buis])\](.*?)\[(\/[buis])\]/gi,function(e,t,i,n){return"<"+t+">"+i+"<"+n+">"});i=i.replace(/\[CHAT=(imol\|)?([0-9]{1,})\](.*?)\[\/CHAT\]/gi,function(e,t,i,n){return t?n:'<span class="bx-im-mention" data-type="CHAT" data-value="chat'+i+'">'+n+"</span>"});i=i.replace(/\[CALL(?:=(.+?))?\](.+?)?\[\/CALL\]/gi,function(e,t,i){return'<span class="bx-im-mention" data-type="CALL" data-value="'+n.Utils.text.htmlspecialchars(t)+'">'+i+"</span>"});i=i.replace(/\[PCH=([0-9]{1,})\](.*?)\[\/PCH\]/gi,function(e,t,i){return i});var d=0;if(s){d=i.replace(/\[icon\=([^\]]*)\]/gi,"").trim().length}i=i.replace(/\[icon\=([^\]]*)\]/gi,function(e){var t=e.match(/icon\=(\S+[^\s.,> )\];\'\"!?])/i);if(t&&t[1]){t=t[1]}else{return""}var i={src:t,border:0};var a=e.match(/size\=(\d+)/i);if(a&&a[1]){i["width"]=a[1];i["height"]=a[1]}else{var r=e.match(/width\=(\d+)/i);if(r&&r[1]){i["width"]=r[1]}var o=e.match(/height\=(\d+)/i);if(o&&o[1]){i["height"]=o[1]}if(i["width"]&&!i["height"]){i["height"]=i["width"]}else if(i["height"]&&!i["width"]){i["width"]=i["height"]}else if(i["height"]&&i["width"]);else{i["width"]=20;i["height"]=20}}i["width"]=i["width"]>100?100:i["width"];i["height"]=i["height"]>100?100:i["height"];if(s&&d===0&&i["width"]===i["height"]&&i["width"]===20){i["width"]=40;i["height"]=40}var l=e.match(/title\=(.*[^\s\]])/i);if(l&&l[1]){l=l[1];if(l.indexOf("width=")>-1){l=l.substr(0,l.indexOf("width="))}if(l.indexOf("height=")>-1){l=l.substr(0,l.indexOf("height="))}if(l.indexOf("size=")>-1){l=l.substr(0,l.indexOf("size="))}if(l){i["title"]=n.Utils.text.htmlspecialchars(l).trim();i["alt"]=i["title"]}}var c="";for(var u in i){if(i.hasOwnProperty(u)){c+=u+'="'+i[u]+'" '}}return'<img class="bx-smile bx-icon" '+c+">"});c.forEach(function(e,t){i=i.replace("####REPLACEMENT_SEND_"+t+"####",e)});i=i.replace(/\[SEND(?:=(?:.+?))?\](?:.+?)?\[\/SEND]/gi,function(e){return e.replace(/\[SEND(?:=(.+))?\](.+?)?\[\/SEND]/gi,function(e,t,i){var n="";i=i?i:t;t=(t?t:i).replace("<br />","\n");if(!r&&i){i=i.replace(/<([\w]+)[^>]*>(.*?)<\\1>/i,"$2",i);i=i.replace(/\[([\w]+)[^\]]*\](.*?)\[\/\1\]/i,"$2",i);t=t.split("####REPLACEMENT_PUT_").join("####REPLACEMENT_SP_");n="\x3c!--IM_COMMAND_START--\x3e"+'<span class="bx-im-message-command-wrap">'+'<span class="bx-im-message-command" data-entity="send">'+i+"</span>"+'<span class="bx-im-message-command-data">'+t+"</span>"+"</span>"+"\x3c!--IM_COMMAND_END--\x3e"}else{n=i}return n})});l.forEach(function(e,t){i=i.replace("####REPLACEMENT_PUT_"+t+"####",e)});i=i.replace(/\[PUT(?:=(?:.+?))?\](?:.+?)?\[\/PUT]/gi,function(e){return e.replace(/\[PUT(?:=(.+))?\](.+?)?\[\/PUT]/gi,function(e,t,i){var n="";i=i?i:t;t=(t?t:i).replace("<br />","\n");if(!r&&i){i=i.replace(/<([\w]+)[^>]*>(.*?)<\/\1>/i,"$2",i);i=i.replace(/\[([\w]+)[^\]]*\](.*?)\[\/\1\]/i,"$2",i);n="\x3c!--IM_COMMAND_START--\x3e"+'<span class="bx-im-message-command-wrap">'+'<span class="bx-im-message-command" data-entity="put">'+i+"</span>"+'<span class="bx-im-message-command-data">'+t+"</span>"+"</span>"+"\x3c!--IM_COMMAND_END--\x3e"}else{n=i}return n})});u.forEach(function(e,t){i=i.replace("####REPLACEMENT_CODE_"+t+"####",!r?'<div class="bx-im-message-content-code">'+e+"</div>":e)});if(c.length>0){do{c.forEach(function(e,t){i=i.replace("####REPLACEMENT_SEND_"+t+"####",e)})}while(i.includes("####REPLACEMENT_SEND_"))}i=i.split("####REPLACEMENT_SP_").join("####REPLACEMENT_PUT_");if(l.length>0){do{l.forEach(function(e,t){i=i.replace("####REPLACEMENT_PUT_"+t+"####",e)})}while(i.includes("####REPLACEMENT_PUT_"))}return i}},{key:"hideErrorImage",value:function e(t){if(t.parentNode&&t.parentNode){t.parentNode.innerHTML='<a href="'+t.src+'" target="_blank">'+t.src+"</a>"}return true}}]);return r}(r.VuexBuilderModel);function m(e,t){var i;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(i=g(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var a=function e(){};return{s:a,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r=true,o=false,s;return{s:function t(){i=e[Symbol.iterator]()},n:function e(){var t=i.next();r=t.done;return t},e:function e(t){o=true;s=t},f:function e(){try{if(!r&&i.return!=null)i.return()}finally{if(o)throw s}}}}function g(e,t){if(!e)return;if(typeof e==="string")return y(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return y(e,t)}function y(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++){n[i]=e[i]}return n}var v=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"dialogues"}},{key:"getState",value:function e(){return{host:this.getVariable("host",location.protocol+"//"+location.host),collection:{},saveDialogList:[],saveChatList:[]}}},{key:"getStateSaveException",value:function e(){return{host:null}}},{key:"getElementStateSaveException",value:function e(){return{writingList:null,quoteId:null}}},{key:"getElementState",value:function e(){return{dialogId:"0",chatId:0,counter:0,userCounter:0,messageCount:0,unreadId:0,lastMessageId:0,managerList:[],readedList:[],writingList:[],muteList:[],textareaMessage:"",quoteId:0,editId:0,init:false,name:"",owner:0,extranet:false,avatar:"",color:"#17A3EA",type:"chat",entityType:"",entityId:"",entityData1:"",entityData2:"",entityData3:"",dateCreate:new Date,restrictions:{avatar:true,extend:true,leave:true,leaveOwner:true,rename:true},public:{code:"",link:""}}}},{key:"getGetters",value:function e(){var t=this;return{get:function e(t){return function(e){if(!t.collection[e]){return null}return t.collection[e]}},getByChatId:function e(t){return function(e){e=parseInt(e);for(var i in t.collection){if(!t.collection.hasOwnProperty(i)){continue}if(t.collection[i].chatId===e){return t.collection[i]}}return null}},getBlank:function e(i){return function(e){return t.getElementState()}},getQuoteId:function e(t){return function(e){if(!t.collection[e]){return 0}return t.collection[e].quoteId}},getEditId:function e(t){return function(e){if(!t.collection[e]){return 0}return t.collection[e].editId}},canSaveChat:function e(t){return function(e){if(/^\d+$/.test(e)){e=parseInt(e)}return t.saveChatList.includes(parseInt(e))}},canSaveDialog:function e(t){return function(e){return t.saveDialogList.includes(e.toString())}},isPrivateDialog:function e(t){return function(e){e=e.toString();return t.collection[e.toString()]&&t.collection[e].type==="private"}}}}},{key:"getActions",value:function e(){var t=this;return{set:function e(i,n){if(n instanceof Array){n=n.map(function(e){return Object.assign({},t.validate(Object.assign({},e),{host:i.state.host}),{init:true})})}else{var a=[];a.push(Object.assign({},t.validate(Object.assign({},n),{host:i.state.host}),{init:true}));n=a}i.commit("set",n)},update:function e(i,n){if(typeof i.state.collection[n.dialogId]==="undefined"||i.state.collection[n.dialogId].init===false){return true}i.commit("update",{dialogId:n.dialogId,fields:t.validate(Object.assign({},n.fields),{host:i.state.host})});return true},delete:function e(t,i){t.commit("delete",i.dialogId);return true},updateWriting:function e(i,n){if(typeof i.state.collection[n.dialogId]==="undefined"||i.state.collection[n.dialogId].init===false){return true}var a=i.state.collection[n.dialogId].writingList.findIndex(function(e){return e.userId===n.userId});if(n.action){if(a>=0){return true}else{var r=[].concat(i.state.collection[n.dialogId].writingList);r.unshift({userId:n.userId,userName:n.userName});i.commit("update",{actionName:"updateWriting/1",dialogId:n.dialogId,fields:t.validate({writingList:r},{host:i.state.host})})}}else{if(a>=0){var o=i.state.collection[n.dialogId].writingList.filter(function(e){return e.userId!==n.userId});i.commit("update",{actionName:"updateWriting/2",dialogId:n.dialogId,fields:t.validate({writingList:o},{host:i.state.host})});return true}else{return true}}return false},updateReaded:function e(i,n){if(typeof i.state.collection[n.dialogId]==="undefined"||i.state.collection[n.dialogId].init===false){return true}var a=i.state.collection[n.dialogId].readedList.filter(function(e){return e.userId!==n.userId});if(n.action){a.push({userId:n.userId,userName:n.userName||"",messageId:n.messageId,date:n.date||new Date})}i.commit("update",{actionName:"updateReaded",dialogId:n.dialogId,fields:t.validate({readedList:a},{host:i.state.host})});return false},increaseCounter:function e(t,i){var n;if(typeof t.state.collection[i.dialogId]==="undefined"||t.state.collection[i.dialogId].init===false){return true}var a=t.state.collection[i.dialogId].counter;if(a===100){return true}var r=a+i.count;if(r>100){r=100}var o=(n=t.rootState.application)===null||n===void 0?void 0:n.common.userId;var s=o&&t.state.collection[i.dialogId].muteList.includes(o);t.commit("update",{actionName:"increaseCounter",dialogId:i.dialogId,dialogMuted:s,fields:{counter:r,previousCounter:a}});return false},decreaseCounter:function e(t,i){if(typeof t.state.collection[i.dialogId]==="undefined"||t.state.collection[i.dialogId].init===false){return true}var n=t.state.collection[i.dialogId].counter;if(n===100){return true}var a=n-i.count;if(a<0){a=0}var r=i.unreadId>t.state.collection[i.dialogId].unreadId?i.unreadId:t.state.collection[i.dialogId].unreadId;if(t.state.collection[i.dialogId].unreadId!==r||t.state.collection[i.dialogId].counter!==a){var o;var s=t.state.collection[i.dialogId].counter;if(a===0){r=0}var l=(o=t.rootState.application)===null||o===void 0?void 0:o.common.userId;var c=l&&t.state.collection[i.dialogId].muteList.includes(l);t.commit("update",{actionName:"decreaseCounter",dialogId:i.dialogId,dialogMuted:c,fields:{counter:a,previousCounter:s,unreadId:r}})}return false},increaseMessageCounter:function e(t,i){if(typeof t.state.collection[i.dialogId]==="undefined"||t.state.collection[i.dialogId].init===false){return true}var n=t.state.collection[i.dialogId].messageCount;t.commit("update",{actionName:"increaseMessageCount",dialogId:i.dialogId,fields:{messageCount:n+i.count}})},saveDialog:function e(t,i){if(typeof t.state.collection[i.dialogId]==="undefined"||t.state.collection[i.dialogId].init===false){return true}t.commit("saveDialog",{dialogId:i.dialogId,chatId:i.chatId});return false}}}},{key:"getMutations",value:function e(){var t=this;return{initCollection:function e(i,n){t.initCollection(i,n)},saveDialog:function e(i,n){if(!(n.chatId>0&&n.dialogId.length>0)){return false}var a=i.saveDialogList.filter(function(e){return e!==n.dialogId});a.unshift(n.dialogId);a=a.slice(0,s.StorageLimit.dialogues);if(i.saveDialogList.join(",")===a.join(",")){return true}i.saveDialogList=a;var r=i.saveChatList.filter(function(e){return e!==n.chatId});r.unshift(n.chatId);i.saveChatList=r.slice(0,s.StorageLimit.dialogues);t.saveState(i)},set:function e(i,n){var a=m(n),r;try{for(a.s();!(r=a.n()).done;){var o=r.value;t.initCollection(i,{dialogId:o.dialogId});i.collection[o.dialogId]=Object.assign(t.getElementState(),i.collection[o.dialogId],o)}}catch(e){a.e(e)}finally{a.f()}t.saveState(i)},update:function e(i,n){t.initCollection(i,n);i.collection[n.dialogId]=Object.assign(i.collection[n.dialogId],n.fields);t.saveState(i)},delete:function e(i,n){delete i.collection[n.dialogId];t.saveState(i)}}}},{key:"initCollection",value:function e(t,i){if(typeof t.collection[i.dialogId]!=="undefined"){return true}a.Vue.set(t.collection,i.dialogId,this.getElementState());if(i.fields){t.collection[i.dialogId]=Object.assign(t.collection[i.dialogId],this.validate(Object.assign({},i.fields),{host:t.host}))}return true}},{key:"getSaveTimeout",value:function e(){return 100}},{key:"saveState",value:function e(){var i=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!this.isSaveAvailable()){return true}babelHelpers.get(babelHelpers.getPrototypeOf(t.prototype),"saveState",this).call(this,function(){var e={collection:{},saveDialogList:[].concat(n.saveDialogList),saveChatList:[].concat(n.saveChatList)};n.saveDialogList.forEach(function(t){if(!n.collection[t])return false;e.collection[t]=Object.assign(i.getElementState(),i.cloneState(n.collection[t],i.getElementStateSaveException()))});return e})}},{key:"validate",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var a={};i.host=i.host||this.getState().host;if(typeof t.dialog_id!=="undefined"){t.dialogId=t.dialog_id}if(typeof t.dialogId==="number"||typeof t.dialogId==="string"){a.dialogId=t.dialogId.toString()}if(typeof t.chat_id!=="undefined"){t.chatId=t.chat_id}else if(typeof t.id!=="undefined"){t.chatId=t.id}if(typeof t.chatId==="number"||typeof t.chatId==="string"){a.chatId=parseInt(t.chatId)}if(typeof t.quoteId==="number"){a.quoteId=parseInt(t.quoteId)}if(typeof t.editId==="number"){a.editId=parseInt(t.editId)}if(typeof t.counter==="number"||typeof t.counter==="string"){a.counter=parseInt(t.counter)}if(typeof t.user_counter==="number"||typeof t.user_counter==="string"){a.userCounter=parseInt(t.user_counter)}if(typeof t.userCounter==="number"||typeof t.userCounter==="string"){a.userCounter=parseInt(t.userCounter)}if(typeof t.message_count==="number"||typeof t.message_count==="string"){a.messageCount=parseInt(t.message_count)}if(typeof t.messageCount==="number"||typeof t.messageCount==="string"){a.messageCount=parseInt(t.messageCount)}if(typeof t.unread_id!=="undefined"){t.unreadId=t.unread_id}if(typeof t.unreadId==="number"||typeof t.unreadId==="string"){a.unreadId=parseInt(t.unreadId)}if(typeof t.last_message_id!=="undefined"){t.lastMessageId=t.last_message_id}if(typeof t.lastMessageId==="number"||typeof t.lastMessageId==="string"){a.lastMessageId=parseInt(t.lastMessageId)}if(typeof t.readed_list!=="undefined"){t.readedList=t.readed_list}if(typeof t.readedList!=="undefined"){a.readedList=[];if(t.readedList instanceof Array){t.readedList.forEach(function(e){var t={};if(typeof e.user_id!=="undefined"){e.userId=e.user_id}if(typeof e.user_name!=="undefined"){e.userName=e.user_name}if(typeof e.message_id!=="undefined"){e.messageId=e.message_id}if(!e.userId||!e.userName||!e.messageId){return false}t.userId=parseInt(e.userId);t.userName=e.userName.toString();t.messageId=parseInt(e.messageId);t.date=n.Utils.date.cast(e.date);a.readedList.push(t)})}}if(typeof t.writing_list!=="undefined"){t.writingList=t.writing_list}if(typeof t.writingList!=="undefined"){a.writingList=[];if(t.writingList instanceof Array){t.writingList.forEach(function(e){var t={};if(!e.userId){return false}t.userId=parseInt(e.userId);t.userName=n.Utils.text.htmlspecialcharsback(e.userName);a.writingList.push(t)})}}if(typeof t.manager_list!=="undefined"){t.managerList=t.manager_list}if(typeof t.managerList!=="undefined"){a.managerList=[];if(t.managerList instanceof Array){t.managerList.forEach(function(e){e=parseInt(e);if(e>0){a.managerList.push(e)}})}}if(typeof t.mute_list!=="undefined"){t.muteList=t.mute_list}if(typeof t.muteList!=="undefined"){a.muteList=[];if(t.muteList instanceof Array){t.muteList.forEach(function(e){e=parseInt(e);if(e>0){a.muteList.push(e)}})}else if(babelHelpers.typeof(t.muteList)==="object"){Object.entries(t.muteList).forEach(function(e){if(e[1]===true){var t=parseInt(e[0]);if(t>0){a.muteList.push(t)}}})}}if(typeof t.textareaMessage!=="undefined"){a.textareaMessage=t.textareaMessage.toString()}if(typeof t.title!=="undefined"){t.name=t.title}if(typeof t.name==="string"||typeof t.name==="number"){a.name=n.Utils.text.htmlspecialcharsback(t.name.toString())}if(typeof t.owner!=="undefined"){t.ownerId=t.owner}if(typeof t.ownerId==="number"||typeof t.ownerId==="string"){a.ownerId=parseInt(t.ownerId)}if(typeof t.extranet==="boolean"){a.extranet=t.extranet}if(typeof t.avatar==="string"){var r;if(!t.avatar||t.avatar.endsWith("/js/im/images/blank.gif")){r=""}else if(t.avatar.startsWith("http")){r=t.avatar}else{r=i.host+t.avatar}if(r){a.avatar=encodeURI(r)}}if(typeof t.color==="string"){a.color=t.color.toString()}if(typeof t.type==="string"){a.type=t.type.toString()}if(typeof t.entity_type!=="undefined"){t.entityType=t.entity_type}if(typeof t.entityType==="string"){a.entityType=t.entityType.toString()}if(typeof t.entity_id!=="undefined"){t.entityId=t.entity_id}if(typeof t.entityId==="string"||typeof t.entityId==="number"){a.entityId=t.entityId.toString()}if(typeof t.entity_data_1!=="undefined"){t.entityData1=t.entity_data_1}if(typeof t.entityData1==="string"){a.entityData1=t.entityData1.toString()}if(typeof t.entity_data_2!=="undefined"){t.entityData2=t.entity_data_2}if(typeof t.entityData2==="string"){a.entityData2=t.entityData2.toString()}if(typeof t.entity_data_3!=="undefined"){t.entityData3=t.entity_data_3}if(typeof t.entityData3==="string"){a.entityData3=t.entityData3.toString()}if(typeof t.date_create!=="undefined"){t.dateCreate=t.date_create}if(typeof t.dateCreate!=="undefined"){a.dateCreate=n.Utils.date.cast(t.dateCreate)}if(typeof t.dateLastOpen!=="undefined"){a.dateLastOpen=n.Utils.date.cast(t.dateLastOpen)}if(babelHelpers.typeof(t.restrictions)==="object"&&t.restrictions){a.restrictions={};if(typeof t.restrictions.AVATAR==="boolean"){a.restrictions.avatar=t.restrictions.AVATAR}if(typeof t.restrictions.EXTEND==="boolean"){a.restrictions.extend=t.restrictions.EXTEND}if(typeof t.restrictions.LEAVE==="boolean"){a.restrictions.leave=t.restrictions.LEAVE}if(typeof t.restrictions.LEAVE_OWNER==="boolean"){a.restrictions.leaveOwner=t.restrictions.LEAVE_OWNER}if(typeof t.restrictions.RENAME==="boolean"){a.restrictions.rename=t.restrictions.RENAME}}if(babelHelpers.typeof(t.public)==="object"&&t.public){a.public={};if(typeof t.public.code==="string"){a.public.code=t.public.code}if(typeof t.public.link==="string"){a.public.link=t.public.link}}return a}}]);return t}(r.VuexBuilderModel);function b(e,t){var i;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(i=I(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var a=function e(){};return{s:a,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r=true,o=false,s;return{s:function t(){i=e[Symbol.iterator]()},n:function e(){var t=i.next();r=t.done;return t},e:function e(t){o=true;s=t},f:function e(){try{if(!r&&i.return!=null)i.return()}finally{if(o)throw s}}}}function I(e,t){if(!e)return;if(typeof e==="string")return S(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return S(e,t)}function S(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++){n[i]=e[i]}return n}var C=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"users"}},{key:"getState",value:function e(){this.startOnlineCheckInterval();return{host:this.getVariable("host",location.protocol+"//"+location.host),collection:{},onlineList:[],mobileOnlineList:[],absentList:[]}}},{key:"getElementState",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.id,n=i===void 0?0:i,a=t.name,r=a===void 0?this.getVariable("default.name",""):a,o=t.firstName,s=o===void 0?this.getVariable("default.name",""):o,l=t.lastName,c=l===void 0?"":l;return{id:n,name:r,firstName:s,lastName:c,workPosition:"",color:"#048bd0",avatar:"",gender:"M",birthday:false,isBirthday:false,extranet:false,network:false,bot:false,connector:false,externalAuthId:"default",status:"online",idle:false,lastActivityDate:false,mobileLastDate:false,isOnline:false,isMobileOnline:false,absent:false,isAbsent:false,departments:[],phones:{workPhone:"",personalMobile:"",personalPhone:"",innerPhone:""},init:false}}},{key:"getGetters",value:function e(){var t=this;return{get:function e(i){return function(e){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;e=parseInt(e);if(e<=0){if(n){e=0}else{return null}}if(!n&&(!i.collection[e]||!i.collection[e].init)){return null}if(!i.collection[e]){return t.getElementState({id:e})}return i.collection[e]}},getBlank:function e(i){return function(e){return t.getElementState(e)}},getList:function e(i){return function(e){var n=[];if(!Array.isArray(e)){return null}e.forEach(function(e){if(i.collection[e]){n.push(i.collection[e])}else{n.push(t.getElementState({id:e}))}});return n}}}}},{key:"getActions",value:function e(){var t=this;return{set:function e(i,n){if(n instanceof Array){n=n.map(function(e){return Object.assign({},t.getElementState(),t.validate(Object.assign({},e),{host:i.state.host}),{init:true})})}else{var a=[];a.push(Object.assign({},t.getElementState(),t.validate(Object.assign({},n),{host:i.state.host}),{init:true}));n=a}i.commit("set",n)},update:function e(i,n){n.id=parseInt(n.id);if(typeof i.state.collection[n.id]==="undefined"||i.state.collection[n.id].init===false){return true}i.commit("update",{id:n.id,fields:t.validate(Object.assign({},n.fields),{host:i.state.host})});return true},delete:function e(t,i){t.commit("delete",i.id);return true},saveState:function e(t,i){t.commit("saveState",{});return true}}}},{key:"getMutations",value:function e(){var t=this;return{set:function e(i,a){var r=b(a),o;try{var s=function e(){var a=o.value;t.initCollection(i,{id:a.id});i.collection[a.id]=Object.assign(i.collection[a.id],a);var r=n.Utils.user.getOnlineStatus(a);if(r.isOnline){i.collection[a.id].isOnline=true;t.addToOnlineList(i,a.id)}var s=n.Utils.user.isMobileActive(a);if(s){i.collection[a.id].isMobileOnline=true;t.addToMobileOnlineList(i,a.id)}if(a.birthday){var l=n.Utils.date.format(new Date,"d-m");if(a.birthday===l){i.collection[a.id].isBirthday=true;var c=t.getTimeToNextMidnight();setTimeout(function(){i.collection[a.id].isBirthday=false},c)}}if(a.absent){a.isAbsent=true;if(!i.absentList.includes(a.id)){t.addToAbsentList(i,a.id);var u=t.getTimeToNextMidnight();var d=1e3*60*60*24;setTimeout(function(){setInterval(function(){return t.startAbsentCheckInterval(i)},d)},u)}}t.saveState(i)};for(r.s();!(o=r.n()).done;){s()}}catch(e){r.e(e)}finally{r.f()}},update:function e(i,a){t.initCollection(i,a);if(typeof a.fields.lastActivityDate!=="undefined"&&i.collection[a.id].lastActivityDate){var r=i.collection[a.id].lastActivityDate.getTime();var o=a.fields.lastActivityDate.getTime();if(o>r){var s=n.Utils.user.getOnlineStatus(a.fields);if(s.isOnline){i.collection[a.id].isOnline=true;t.addToOnlineList(i,a.fields.id)}}}if(typeof a.fields.mobileLastDate!=="undefined"&&i.collection[a.id].mobileLastDate!==a.fields.mobileLastDate){var l=n.Utils.user.isMobileActive(a.fields);if(l){i.collection[a.id].isMobileOnline=true;t.addToMobileOnlineList(i,a.fields.id)}}i.collection[a.id]=Object.assign(i.collection[a.id],a.fields);t.saveState(i)},delete:function e(i,n){delete i.collection[n.id];t.saveState(i)},saveState:function e(i,n){t.saveState(i)}}}},{key:"initCollection",value:function e(t,i){if(typeof t.collection[i.id]!=="undefined"){return true}a.Vue.set(t.collection,i.id,this.getElementState());return true}},{key:"getSaveUserList",value:function e(){if(!this.db){return[]}if(!this.store.getters["messages/getSaveUserList"]){return[]}var t=this.store.getters["messages/getSaveUserList"]();if(!t){return[]}return t}},{key:"getSaveTimeout",value:function e(){return 250}},{key:"saveState",value:function e(i){var n=this;if(!this.isSaveAvailable()){return false}babelHelpers.get(babelHelpers.getPrototypeOf(t.prototype),"saveState",this).call(this,function(){var e=n.getSaveUserList();if(!e){return false}var t={collection:{}};var a={absent:true,idle:true,mobileLastDate:true,lastActivityDate:true};for(var r in e){if(!e.hasOwnProperty(r)){continue}e[r].forEach(function(e){if(!i.collection[e]){return false}t.collection[e]=n.cloneState(i.collection[e],a)})}return t})}},{key:"validate",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var a={};i.host=i.host||this.getState().host;if(typeof t.id==="number"||typeof t.id==="string"){a.id=parseInt(t.id)}if(typeof t.first_name!=="undefined"){t.firstName=n.Utils.text.htmlspecialcharsback(t.first_name)}if(typeof t.last_name!=="undefined"){t.lastName=n.Utils.text.htmlspecialcharsback(t.last_name)}if(typeof t.name==="string"||typeof t.name==="number"){t.name=n.Utils.text.htmlspecialcharsback(t.name.toString());a.name=t.name}if(typeof t.firstName==="string"||typeof t.firstName==="number"){a.firstName=n.Utils.text.htmlspecialcharsback(t.firstName.toString())}if(typeof t.lastName==="string"||typeof t.lastName==="number"){a.lastName=n.Utils.text.htmlspecialcharsback(t.lastName.toString())}if(typeof t.work_position!=="undefined"){t.workPosition=t.work_position}if(typeof t.workPosition==="string"||typeof t.workPosition==="number"){a.workPosition=t.workPosition.toString()}if(typeof t.color==="string"){a.color=t.color}if(typeof t.avatar==="string"){var r;if(!t.avatar||t.avatar.endsWith("/js/im/images/blank.gif")){r=""}else if(t.avatar.startsWith("http")){r=t.avatar}else{r=i.host+t.avatar}if(r){a.avatar=encodeURI(r)}}if(typeof t.gender!=="undefined"){a.gender=t.gender==="F"?"F":"M"}if(typeof t.birthday==="string"){a.birthday=t.birthday}if(typeof t.extranet==="boolean"){a.extranet=t.extranet}if(typeof t.network==="boolean"){a.network=t.network}if(typeof t.bot==="boolean"){a.bot=t.bot}if(typeof t.connector==="boolean"){a.connector=t.connector}if(typeof t.external_auth_id!=="undefined"){t.externalAuthId=t.external_auth_id}if(typeof t.externalAuthId==="string"&&t.externalAuthId){a.externalAuthId=t.externalAuthId}if(typeof t.status==="string"){a.status=t.status}if(typeof t.idle!=="undefined"){a.idle=n.Utils.date.cast(t.idle,false)}if(typeof t.last_activity_date!=="undefined"){t.lastActivityDate=t.last_activity_date}if(typeof t.lastActivityDate!=="undefined"){a.lastActivityDate=n.Utils.date.cast(t.lastActivityDate,false)}if(typeof t.mobile_last_date!=="undefined"){t.mobileLastDate=t.mobile_last_date}if(typeof t.mobileLastDate!=="undefined"){a.mobileLastDate=n.Utils.date.cast(t.mobileLastDate,false)}if(typeof t.absent!=="undefined"){a.absent=n.Utils.date.cast(t.absent,false)}if(typeof t.departments!=="undefined"){a.departments=[];if(t.departments instanceof Array){t.departments.forEach(function(e){e=parseInt(e);if(e>0){a.departments.push(e)}})}}if(babelHelpers.typeof(t.phones)==="object"&&t.phones){a.phones={};if(typeof t.phones.work_phone!=="undefined"){t.phones.workPhone=t.phones.work_phone}if(typeof t.phones.workPhone==="string"||typeof t.phones.workPhone==="number"){a.phones.workPhone=t.phones.workPhone.toString()}if(typeof t.phones.personal_mobile!=="undefined"){t.phones.personalMobile=t.phones.personal_mobile}if(typeof t.phones.personalMobile==="string"||typeof t.phones.personalMobile==="number"){a.phones.personalMobile=t.phones.personalMobile.toString()}if(typeof t.phones.personal_phone!=="undefined"){t.phones.personalPhone=t.phones.personal_phone}if(typeof t.phones.personalPhone==="string"||typeof t.phones.personalPhone==="number"){a.phones.personalPhone=t.phones.personalPhone.toString()}if(typeof t.phones.inner_phone!=="undefined"){t.phones.innerPhone=t.phones.inner_phone}if(typeof t.phones.innerPhone==="string"||typeof t.phones.innerPhone==="number"){a.phones.innerPhone=t.phones.innerPhone.toString()}}return a}},{key:"addToOnlineList",value:function e(t,i){if(!t.onlineList.includes(i)){t.onlineList.push(i)}}},{key:"addToMobileOnlineList",value:function e(t,i){if(!t.mobileOnlineList.includes(i)){t.mobileOnlineList.push(i)}}},{key:"addToAbsentList",value:function e(t,i){if(!t.absentList.includes(i)){t.absentList.push(i)}}},{key:"getTimeToNextMidnight",value:function e(){var t=new Date((new Date).setHours(24,0,0)).getTime();return t-new Date}},{key:"startAbsentCheckInterval",value:function e(t){var i=b(t.absentList),n;try{var a=function e(){var i=n.value;var a=t.collection[i];if(!a){return"continue"}var r=(new Date).getTime();var o=new Date(t.collection[i].absent).getTime();if(o<=r){t.absentList=t.absentList.filter(function(e){return e!==i});a.isAbsent=false}};for(i.s();!(n=i.n()).done;){var r=a();if(r==="continue")continue}}catch(e){i.e(e)}finally{i.f()}}},{key:"startOnlineCheckInterval",value:function e(){var t=this;var i=6e4;setInterval(function(){var e=b(t.store.state.users.onlineList),i;try{var a=function e(){var a=i.value;var r=t.store.state.users.collection[a];if(!r){return"continue"}var o=n.Utils.user.getOnlineStatus(r);if(o.isOnline){r.isOnline=true}else{r.isOnline=false;t.store.state.users.onlineList=t.store.state.users.onlineList.filter(function(e){return e!==a})}};for(e.s();!(i=e.n()).done;){var r=a();if(r==="continue")continue}}catch(t){e.e(t)}finally{e.f()}var o=b(t.store.state.users.mobileOnlineList),s;try{var l=function e(){var i=s.value;var a=t.store.state.users.collection[i];if(!a){return"continue"}var r=n.Utils.user.isMobileActive(a);if(r){a.isMobileOnline=true}else{a.isMobileOnline=false;t.store.state.users.mobileOnlineList=t.store.state.users.mobileOnlineList.filter(function(e){return e!==i})}};for(o.s();!(s=o.n()).done;){var c=l();if(c==="continue")continue}}catch(e){o.e(e)}finally{o.f()}},i)}}]);return t}(r.VuexBuilderModel);function x(e,t){var i;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(i=T(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var a=function e(){};return{s:a,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r=true,o=false,s;return{s:function t(){i=e[Symbol.iterator]()},n:function e(){var t=i.next();r=t.done;return t},e:function e(t){o=true;s=t},f:function e(){try{if(!r&&i.return!=null)i.return()}finally{if(o)throw s}}}}function T(e,t){if(!e)return;if(typeof e==="string")return k(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return k(e,t)}function k(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++){n[i]=e[i]}return n}var E=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"files"}},{key:"getState",value:function e(){return{created:0,host:this.getVariable("host",location.protocol+"//"+location.host),collection:{},index:{}}}},{key:"getElementState",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.id,n=i===void 0?0:i,a=t.chatId,r=a===void 0?0:a,o=t.name,l=o===void 0?this.getVariable("default.name",""):o;return{id:n,chatId:r,name:l,templateId:n,date:new Date,type:"file",extension:"",icon:"empty",size:0,image:false,status:s.FileStatus.done,progress:100,authorId:0,authorName:"",urlPreview:"",urlShow:"",urlDownload:"",init:false,viewerAttrs:{}}}},{key:"getGetters",value:function e(){var t=this;return{get:function e(t){return function(e,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!e||!i){return null}if(!t.index[e]||!t.index[e][i]){return null}if(!n&&!t.index[e][i].init){return null}return t.index[e][i]}},getList:function e(t){return function(e){if(!t.index[e]){return null}return t.index[e]}},getBlank:function e(i){return function(e){return t.getElementState(e)}}}}},{key:"getActions",value:function e(){var t=this;return{add:function e(i,n){var a=t.validate(Object.assign({},n),{host:i.state.host});a.id="temporary"+(new Date).getTime()+i.state.created;a.templateId=a.id;a.init=true;i.commit("add",Object.assign({},t.getElementState(),a));return a.id},set:function e(i,n){if(n instanceof Array){n=n.map(function(e){var n=t.validate(Object.assign({},e),{host:i.state.host});n.templateId=n.id;return Object.assign({},t.getElementState(),n,{init:true})})}else{var a=t.validate(Object.assign({},n),{host:i.state.host});a.templateId=a.id;n=[];n.push(Object.assign({},t.getElementState(),a,{init:true}))}i.commit("set",{insertType:s.MutationType.setAfter,data:n})},setBefore:function e(i,n){if(n instanceof Array){n=n.map(function(e){var n=t.validate(Object.assign({},e),{host:i.state.host});n.templateId=n.id;return Object.assign({},t.getElementState(),n,{init:true})})}else{var a=t.validate(Object.assign({},n),{host:i.state.host});a.templateId=a.id;n=[];n.push(Object.assign({},t.getElementState(),a,{init:true}))}i.commit("set",{actionName:"setBefore",insertType:s.MutationType.setBefore,data:n})},update:function e(i,n){var a=t.validate(Object.assign({},n.fields),{host:i.state.host});i.commit("initCollection",{chatId:n.chatId});var r=i.state.collection[n.chatId].findIndex(function(e){return e.id===n.id});if(r<0){return false}i.commit("update",{id:n.id,chatId:n.chatId,index:r,fields:a});if(n.fields.blink){setTimeout(function(){i.commit("update",{id:n.id,chatId:n.chatId,fields:{blink:false}})},1e3)}return true},delete:function e(t,i){t.commit("delete",{id:i.id,chatId:i.chatId});return true},saveState:function e(t,i){t.commit("saveState",{});return true}}}},{key:"getMutations",value:function e(){var t=this;return{initCollection:function e(i,n){t.initCollection(i,n)},add:function e(i,n){t.initCollection(i,n);i.collection[n.chatId].push(n);i.index[n.chatId][n.id]=n;i.created+=1;t.saveState(i)},set:function e(i,n){var a=x(n.data),r;try{var o=function e(){var a=r.value;t.initCollection(i,{chatId:a.chatId});var o=i.collection[a.chatId].findIndex(function(e){return e.id===a.id});if(o>-1){delete a.templateId;i.collection[a.chatId][o]=Object.assign(i.collection[a.chatId][o],a)}else if(n.insertType===s.MutationType.setBefore){i.collection[a.chatId].unshift(a)}else{i.collection[a.chatId].push(a)}i.index[a.chatId][a.id]=a;t.saveState(i)};for(a.s();!(r=a.n()).done;){o()}}catch(e){a.e(e)}finally{a.f()}},update:function e(i,n){t.initCollection(i,n);var a=-1;if(typeof n.index!=="undefined"&&i.collection[n.chatId][n.index]){a=n.index}else{a=i.collection[n.chatId].findIndex(function(e){return e.id===n.id})}if(a>=0){delete n.fields.templateId;var r=Object.assign(i.collection[n.chatId][a],n.fields);i.collection[n.chatId][a]=r;i.index[n.chatId][r.id]=r;t.saveState(i)}},delete:function e(i,n){t.initCollection(i,n);i.collection[n.chatId]=i.collection[n.chatId].filter(function(e){return e.id!==n.id});delete i.index[n.chatId][n.id];t.saveState(i)},saveState:function e(i,n){t.saveState(i)}}}},{key:"initCollection",value:function e(t,i){if(typeof t.collection[i.chatId]!=="undefined"){return true}a.Vue.set(t.collection,i.chatId,[]);a.Vue.set(t.index,i.chatId,{});return true}},{key:"getLoadedState",value:function e(t){if(!t||babelHelpers.typeof(t)!=="object"){return t}if(babelHelpers.typeof(t.collection)!=="object"){return t}t.index={};var i=function e(i){if(!t.collection.hasOwnProperty(i)){return"continue"}t.index[i]={};t.collection[i].filter(function(e){return e!=null}).forEach(function(e){t.index[i][e.id]=e})};for(var n in t.collection){var a=i(n);if(a==="continue")continue}return t}},{key:"getSaveFileList",value:function e(){if(!this.db){return[]}if(!this.store.getters["messages/getSaveFileList"]){return[]}var t=this.store.getters["messages/getSaveFileList"]();if(!t){return[]}return t}},{key:"getSaveTimeout",value:function e(){return 250}},{key:"saveState",value:function e(i){var n=this;if(!this.isSaveAvailable()){return false}babelHelpers.get(babelHelpers.getPrototypeOf(t.prototype),"saveState",this).call(this,function(){var e=n.getSaveFileList();if(!e){return false}var t={collection:{}};var a=function n(a){if(!e.hasOwnProperty(a)){return"continue"}e[a].forEach(function(e){if(!i.index[a]){return false}if(!i.index[a][e]){return false}if(!t.collection[a]){t.collection[a]=[]}t.collection[a].push(i.index[a][e])})};for(var r in e){var o=a(r);if(o==="continue")continue}return t})}},{key:"validate",value:function e(i){var a=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var r={};a.host=a.host||this.getState().host;if(typeof i.id==="number"){r.id=i.id}else if(typeof i.id==="string"){if(i.id.startsWith("temporary")){r.id=i.id}else{r.id=parseInt(i.id)}}if(typeof i.templateId==="number"){r.templateId=i.templateId}else if(typeof i.templateId==="string"){if(i.templateId.startsWith("temporary")){r.templateId=i.templateId}else{r.templateId=parseInt(i.templateId)}}if(typeof i.chatId==="number"||typeof i.chatId==="string"){r.chatId=parseInt(i.chatId)}if(typeof i.date!=="undefined"){r.date=n.Utils.date.cast(i.date)}if(typeof i.type==="string"){r.type=i.type}if(typeof i.extension==="string"){r.extension=i.extension.toString();if(r.type==="image"){r.icon="img"}else if(r.type==="video"){r.icon="mov"}else{r.icon=t.getIconType(r.extension)}}if(typeof i.name==="string"||typeof i.name==="number"){r.name=i.name.toString()}if(typeof i.size==="number"||typeof i.size==="string"){r.size=parseInt(i.size)}if(typeof i.image==="boolean"){r.image=false}else if(babelHelpers.typeof(i.image)==="object"&&i.image){r.image={width:0,height:0};if(typeof i.image.width==="string"||typeof i.image.width==="number"){r.image.width=parseInt(i.image.width)}if(typeof i.image.height==="string"||typeof i.image.height==="number"){r.image.height=parseInt(i.image.height)}if(r.image.width<=0||r.image.height<=0){r.image=false}}if(typeof i.status==="string"&&typeof s.FileStatus[i.status]!=="undefined"){r.status=i.status}if(typeof i.progress==="number"||typeof i.progress==="string"){r.progress=parseInt(i.progress)}if(typeof i.authorId==="number"||typeof i.authorId==="string"){r.authorId=parseInt(i.authorId)}if(typeof i.authorName==="string"||typeof i.authorName==="number"){r.authorName=i.authorName.toString()}if(typeof i.urlPreview==="string"){if(!i.urlPreview||i.urlPreview.startsWith("http")||i.urlPreview.startsWith("bx")||i.urlPreview.startsWith("file")||i.urlPreview.startsWith("blob")){r.urlPreview=i.urlPreview}else{r.urlPreview=a.host+i.urlPreview}}if(typeof i.urlDownload==="string"){if(!i.urlDownload||i.urlDownload.startsWith("http")||i.urlDownload.startsWith("bx")||i.urlPreview.startsWith("file")){r.urlDownload=i.urlDownload}else{r.urlDownload=a.host+i.urlDownload}}if(typeof i.urlShow==="string"){if(!i.urlShow||i.urlShow.startsWith("http")||i.urlShow.startsWith("bx")||i.urlShow.startsWith("file")){r.urlShow=i.urlShow}else{r.urlShow=a.host+i.urlShow}}if(babelHelpers.typeof(i.viewerAttrs)==="object"){if(r.type==="image"&&!n.Utils.platform.isBitrixMobile()){r.viewerAttrs=i.viewerAttrs}if(r.type==="video"&&!n.Utils.platform.isBitrixMobile()&&r.size>t.maxDiskFileSize){r.viewerAttrs=i.viewerAttrs}}return r}}],[{key:"getType",value:function e(t){t=t.toString().toLowerCase().split(".").splice(-1)[0];switch(t){case"png":case"jpe":case"jpg":case"jpeg":case"gif":case"heic":case"bmp":case"webp":return s.FileType.image;case"mp4":case"mkv":case"webm":case"mpeg":case"hevc":case"avi":case"3gp":case"flv":case"m4v":case"ogg":case"wmv":case"mov":return s.FileType.video;case"mp3":return s.FileType.audio}return s.FileType.file}},{key:"getIconType",value:function e(t){var i="empty";switch(t.toString()){case"png":case"jpe":case"jpg":case"jpeg":case"gif":case"heic":case"bmp":case"webp":i="img";break;case"mp4":case"mkv":case"webm":case"mpeg":case"hevc":case"avi":case"3gp":case"flv":case"m4v":case"ogg":case"wmv":case"mov":i="mov";break;case"txt":i="txt";break;case"doc":case"docx":i="doc";break;case"xls":case"xlsx":i="xls";break;case"php":i="php";break;case"pdf":i="pdf";break;case"ppt":case"pptx":i="ppt";break;case"rar":i="rar";break;case"zip":case"7z":case"tar":case"gz":case"gzip":i="zip";break;case"set":i="set";break;case"conf":case"ini":case"plist":i="set";break}return i}}]);return t}(r.VuexBuilderModel);babelHelpers.defineProperty(E,"maxDiskFileSize",5242880);var M=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"recent"}},{key:"getState",value:function e(){return{host:this.getVariable("host",location.protocol+"//"+location.host),collection:[]}}},{key:"getElementState",value:function e(){return{id:0,templateId:"",template:s.TemplateTypes.item,chatType:s.ChatTypes.chat,sectionCode:s.RecentSection.general,avatar:"",color:"#048bd0",title:"",lines:{id:0,status:0},message:{id:0,text:"",date:new Date,senderId:0,status:s.MessageStatus.received},counter:0,pinned:false,chatId:0,userId:0}}},{key:"getGetters",value:function e(){var t=this;return{get:function e(i){return function(e){if(o.Type.isNumber(e)){e=e.toString()}var i=t.findItem(e);if(i){return i}return false}}}}},{key:"getActions",value:function e(){var t=this;return{set:function e(i,n){var a=[];if(n instanceof Array){a=n.map(function(e){return t.prepareItem(e,{host:i.state.host})})}if(a.length===0){return false}a.forEach(function(e){var n=t.findItem(e.id);if(n){i.commit("update",{index:n.index,fields:e})}else{i.commit("add",{fields:e})}});i.state.collection.sort(t.sortListByMessageDate)},addPlaceholders:function e(t,i){i.forEach(function(e){t.commit("addPlaceholder",{fields:e})})},updatePlaceholders:function e(i,n){n.items=n.items.map(function(e){return t.prepareItem(e)});n.items.forEach(function(e,a){var r="placeholder"+(n.firstMessage+a);var o=t.findItem(r,"templateId");var s=t.findItem(e.id);if(s){i.commit("update",{index:s.index,fields:e});i.commit("delete",{index:o.index})}else{i.commit("update",{index:o.index,fields:e})}})},update:function e(i,n){if(typeof n.id==="string"&&!n.id.startsWith("chat")&&n.id!=="notify"){n.id=parseInt(n.id)}var a=t.findItem(n.id);if(!a){return false}n.fields=t.validate(Object.assign({},n.fields));i.commit("update",{index:a.index,fields:n.fields});i.state.collection.sort(t.sortListByMessageDate)},pin:function e(i,n){if(typeof n.id==="string"&&!n.id.startsWith("chat")&&n.id!=="notify"){n.id=parseInt(n.id)}var a=t.findItem(n.id);if(!a){return false}i.commit("update",{index:a.index,fields:Object.assign({},a.element,{pinned:n.action})});i.state.collection.sort(t.sortListByMessageDate)},clearPlaceholders:function e(t){t.commit("clearPlaceholders")},delete:function e(i,n){if(typeof n.id==="string"&&!n.id.startsWith("chat")&&n.id!=="notify"){n.id=parseInt(n.id)}var a=t.findItem(n.id);if(!a){return false}i.commit("delete",{index:a.index});i.state.collection.sort(t.sortListByMessageDate)}}}},{key:"getMutations",value:function e(){var t=this;return{add:function e(i,n){i.collection.push(Object.assign({},t.getElementState(),n.fields))},update:function e(t,i){t.collection.splice(i.index,1,Object.assign({},t.collection[i.index],i.fields))},delete:function e(t,i){t.collection.splice(i.index,1)},addPlaceholder:function e(i,n){i.collection.push(Object.assign({},t.getElementState(),n.fields))},clearPlaceholders:function e(t){t.collection=t.collection.filter(function(e){return!e.id.toString().startsWith("placeholder")})}}}},{key:"validate",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var a={};if(o.Type.isNumber(t.id)){a.id=t.id.toString()}if(o.Type.isStringFilled(t.id)){a.id=t.id}if(o.Type.isString(t.templateId)){a.templateId=t.templateId}if(o.Type.isString(t.template)){a.template=t.template}if(o.Type.isString(t.type)){if(t.type===s.ChatTypes.chat){if(t.chat.type===s.ChatTypes.open){a.chatType=s.ChatTypes.open}else if(t.chat.type===s.ChatTypes.chat){a.chatType=s.ChatTypes.chat}}else if(t.type===s.ChatTypes.user){a.chatType=s.ChatTypes.user}else if(t.type===s.ChatTypes.notification){a.chatType=s.ChatTypes.notification;t.title="Notifications"}else{a.chatType=s.ChatTypes.chat}}if(o.Type.isString(t.avatar)){var r;if(!t.avatar||t.avatar.endsWith("/js/im/images/blank.gif")){r=""}else if(t.avatar.startsWith("http")){r=t.avatar}else{r=i.host+t.avatar}if(r){a.avatar=encodeURI(r)}}if(o.Type.isString(t.color)){a.color=t.color}if(o.Type.isString(t.title)){a.title=t.title}if(o.Type.isPlainObject(t.message)){var l={};if(o.Type.isNumber(t.message.id)){l.id=t.message.id}if(o.Type.isString(t.message.text)){var c={};if(t.message.withAttach){c.WITH_ATTACH=true}else if(t.message.withFile){c.WITH_FILE=true}l.text=n.Utils.text.purify(t.message.text,c)}if(o.Type.isDate(t.message.date)||o.Type.isString(t.message.date)){l.date=t.message.date}if(o.Type.isNumber(t.message.author_id)){l.senderId=t.message.author_id}if(o.Type.isNumber(t.message.senderId)){l.senderId=t.message.senderId}if(o.Type.isStringFilled(t.message.status)){l.status=t.message.status}a.message=l}if(o.Type.isNumber(t.counter)){a.counter=t.counter}if(o.Type.isBoolean(t.pinned)){a.pinned=t.pinned}if(o.Type.isNumber(t.chatId)){a.chatId=t.chatId}if(o.Type.isNumber(t.userId)){a.userId=t.userId}return a}},{key:"sortListByMessageDate",value:function e(t,i){if(t.message&&i.message){var n=new Date(t.message.date).getTime();var a=new Date(i.message.date).getTime();return a-n}}},{key:"prepareItem",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=this.validate(Object.assign({},t));return Object.assign({},this.getElementState(),n,i)}},{key:"findItem",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"id";var n={};if(i==="id"&&o.Type.isNumber(t)){t=t.toString()}var a=this.store.state.recent.collection.findIndex(function(e,n){return e[i]===t});if(a!==-1){n.index=a;n.element=this.store.state.recent.collection[a];return n}return false}}]);return t}(r.VuexBuilderModel);function w(e,t){var i;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(i=L(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var a=function e(){};return{s:a,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r=true,o=false,s;return{s:function t(){i=e[Symbol.iterator]()},n:function e(){var t=i.next();r=t.done;return t},e:function e(t){o=true;s=t},f:function e(){try{if(!r&&i.return!=null)i.return()}finally{if(o)throw s}}}}function L(e,t){if(!e)return;if(typeof e==="string")return A(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return A(e,t)}function A(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++){n[i]=e[i]}return n}var O=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"notifications"}},{key:"getState",value:function e(){return{collection:[],searchCollection:[],chat_id:0,total:0,host:this.getVariable("host",location.protocol+"//"+location.host),unreadCounter:0,schema:{}}}},{key:"getElementState",value:function e(){return{id:0,authorId:0,date:new Date,text:"",sectionCode:s.NotificationTypesCodes.simple,textConverted:"",unread:false,display:true,settingName:"im|default"}}},{key:"getGetters",value:function e(){var t=this;return{get:function e(t){return function(){return t.collection}},getById:function e(i){return function(e){if(o.Type.isString(e)){e=parseInt(e)}var n=t.findItemInArr(i.collection,e);if(!n.element){return false}return n.element}},getSearchItemById:function e(i){return function(e){if(o.Type.isString(e)){e=parseInt(e)}var n=t.findItemInArr(i.searchCollection,e);if(!n.element){return false}return n.element}},getBlank:function e(i){return function(e){return t.getElementState()}}}}},{key:"getActions",value:function e(){var t=this;return{set:function e(i,n){var a={notification:[]};if(n.notification instanceof Array){a.notification=n.notification.map(function(e){return t.prepareNotification(e,{host:i.state.host})})}if(o.Type.isNumber(n.total)||o.Type.isString(n.total)){a.total=parseInt(n.total)}i.commit("set",a)},setSearchResults:function e(i,n){var a={notification:[]};if(!(n.notification instanceof Array)){return false}if(n.type==="local"){a.notification=n.notification}else{a.notification=n.notification.map(function(e){return t.prepareNotification(e,{host:i.state.host})})}i.commit("setSearchResults",{data:a})},deleteSearchResults:function e(t,i){t.commit("deleteSearchResults")},setCounter:function e(t,i){if(o.Type.isNumber(i.unreadTotal)||o.Type.isString(i.unreadTotal)){var n=parseInt(i.unreadTotal);t.commit("setCounter",n)}},setTotal:function e(t,i){if(o.Type.isNumber(i.total)||o.Type.isString(i.total)){t.commit("setTotal",i.total)}},add:function e(i,n){var a=t.prepareNotification(n.data,{host:i.state.host});a.unread=true;var r=t.findItemInArr(i.state.collection,a.id);if(!r.element){i.commit("add",{data:a});i.commit("setTotal",i.state.total+1)}else{i.commit("update",{index:r.index,fields:Object.assign({},n.fields)})}},updatePlaceholders:function e(i,n){if(n.items instanceof Array){n.items=n.items.map(function(e){return t.prepareNotification(e)})}else{return false}i.commit("updatePlaceholders",n);return true},clearPlaceholders:function e(t,i){t.commit("clearPlaceholders",i)},update:function e(i,n){var a=t.findItemInArr(i.state.collection,n.id);if(a.element){i.commit("update",{index:a.index,fields:Object.assign({},n.fields)})}if(n.searchMode){var r=t.findItemInArr(i.state.searchCollection,n.id);if(r.element){i.commit("update",{searchCollection:true,index:r.index,fields:Object.assign({},n.fields)})}}},read:function e(i,n){var a=w(n.ids),r;try{for(a.s();!(r=a.n()).done;){var o=r.value;var s=t.findItemInArr(i.state.collection,o);if(!s.element){return false}i.commit("read",{index:s.index,action:!n.action})}}catch(e){a.e(e)}finally{a.f()}},readAll:function e(t,i){t.commit("readAll")},delete:function e(i,n){var a=t.findItemInArr(i.state.collection,n.id);if(a.element){i.commit("delete",{searchCollection:false,index:a.index});i.commit("setTotal",i.state.total-1)}if(n.searchMode){var r=t.findItemInArr(i.state.searchCollection,n.id);if(r.element){i.commit("delete",{searchCollection:true,index:r.index})}}},deleteAll:function e(t,i){t.commit("deleteAll")},setSchema:function e(t,i){t.commit("setSchema",{data:i.data})}}}},{key:"getMutations",value:function e(){var t=this;return{set:function e(i,n){i.total=n.hasOwnProperty("total")?n.total:i.total;if(!n.hasOwnProperty("notification")||!o.Type.isArray(n.notification)){return}var a=w(n.notification),r;try{for(a.s();!(r=a.n()).done;){var s=r.value;var l=t.findItemInArr(i.collection,s.id);if(!l.element){i.collection.push(s)}else{if(s.unread!==i.collection[l.index].unread){s.unread=i.collection[l.index].unread;i.unreadCounter=s.unread===true?i.unreadCounter+1:i.unreadCounter-1}i.collection[l.index]=Object.assign(i.collection[l.index],s)}}}catch(e){a.e(e)}finally{a.f()}i.collection.sort(t.sortByType)},setSearchResults:function e(i,n){var a=w(n.data.notification),r;try{for(a.s();!(r=a.n()).done;){var o=r.value;var s=t.findItemInArr(i.searchCollection,o.id);if(!s.element){i.searchCollection.push(o)}else{i.searchCollection[s.index]=Object.assign(i.searchCollection[s.index],o)}}}catch(e){a.e(e)}finally{a.f()}},deleteAll:function e(t,i){t.collection=[]},deleteSearchResults:function e(t,i){t.searchCollection=[]},add:function e(i,n){var a=null;if(n.data.sectionCode===s.NotificationTypesCodes.confirm){i.collection.unshift(n.data)}else{for(var r=0;i.collection.length>r;r++){if(i.collection[r].sectionCode===s.NotificationTypesCodes.simple){a=r;break}}if(a===null){i.collection.push(n.data)}else{i.collection.splice(a,0,n.data)}}i.collection.sort(t.sortByType)},update:function e(t,i){var n=i.searchCollection?"searchCollection":"collection";a.Vue.set(t[n],i.index,Object.assign({},t[n][i.index],i.fields))},delete:function e(t,i){var n=i.searchCollection?"searchCollection":"collection";t[n].splice(i.index,1)},read:function e(t,i){t.collection[i.index].unread=i.action},readAll:function e(t,i){for(var n=0;t.collection.length>n;n++){if(t.collection[n].sectionCode===s.NotificationTypesCodes.simple){t.collection[n].unread=false}}},updatePlaceholders:function e(i,n){var a=n.searchCollection?"searchCollection":"collection";n.items.forEach(function(e,t){var r="placeholder".concat(n.firstItem+t);var o=i[a].findIndex(function(e){return e.id===r});var s=i[a].findIndex(function(t){return t.id===e.id});if(s>=0){i[a][s]=Object.assign(i[a][s],e);i[a].splice(o,1)}else{i[a].splice(o,1,Object.assign({},e))}});i[a].sort(t.sortByType)},clearPlaceholders:function e(t,i){t.collection=t.collection.filter(function(e){return!e.id.toString().startsWith("placeholder")});t.searchCollection=t.searchCollection.filter(function(e){return!e.id.toString().startsWith("placeholder")})},setCounter:function e(t,i){t.unreadCounter=i},setTotal:function e(t,i){t.total=i},setSchema:function e(t,i){t.schema=i.data}}}},{key:"validate",value:function e(t,i){var a={};if(o.Type.isString(t.id)||o.Type.isNumber(t.id)){a.id=t.id}if(!o.Type.isNil(t.date)){a.date=n.Utils.date.cast(t.date)}if(o.Type.isString(t.textOriginal)||o.Type.isNumber(t.textOriginal)){a.text=t.textOriginal.toString();if(o.Type.isString(t.text)||o.Type.isNumber(t.text)){a.textConverted=this.convertToHtml({text:t.text.toString()})}}else{if(!o.Type.isNil(t.text_converted)){t.textConverted=t.text_converted}if(o.Type.isString(t.textConverted)||o.Type.isNumber(t.textConverted)){a.textConverted=t.textConverted.toString()}if(o.Type.isString(t.text)||o.Type.isNumber(t.text)){a.text=t.text.toString();var r=!o.Type.isNil(a.textConverted);a.textConverted=this.convertToHtml({text:r?a.textConverted:a.text})}}if(o.Type.isNumber(t.author_id)){if(t.system===true||t.system==="Y"){a.authorId=0}else{a.authorId=t.author_id}}if(o.Type.isNumber(t.userId)){a.authorId=t.userId}if(o.Type.isObjectLike(t.params)){var l=this.validateParams(t.params);if(l){a.params=l}}if(!o.Type.isNil(t.notify_buttons)){a.notifyButtons=JSON.parse(t.notify_buttons)}if(!o.Type.isNil(t.buttons)){a.notifyButtons=t.buttons.map(function(e){return{COMMAND:"notifyConfirm",COMMAND_PARAMS:"".concat(a.id,"|").concat(e.VALUE),TEXT:"".concat(e.TITLE),TYPE:"BUTTON",DISPLAY:"LINE",BG_COLOR:e.VALUE==="Y"?"#8bc84b":"#ef4b57",TEXT_COLOR:"#fff"}})}if(t.notify_type===s.NotificationTypesCodes.confirm||t.type===s.NotificationTypesCodes.confirm){a.sectionCode=s.NotificationTypesCodes.confirm}else if(t.type===s.NotificationTypesCodes.placeholder){a.sectionCode=s.NotificationTypesCodes.placeholder}if(!o.Type.isNil(t.notify_read)){a.unread=t.notify_read==="N"}if(!o.Type.isNil(t.read)){a.unread=t.read==="N"}if(o.Type.isString(t.setting_name)){a.settingName=t.setting_name}return a}},{key:"validateParams",value:function e(t){var i={};try{for(var a in t){if(!t.hasOwnProperty(a)){continue}if(a==="COMPONENT_ID"){if(o.Type.isString(t[a])&&BX.Vue.isComponent(t[a])){i[a]=t[a]}}else if(a==="LIKE"){if(t[a]instanceof Array){i["REACTION"]={like:t[a].map(function(e){return parseInt(e)})}}}else if(a==="CHAT_LAST_DATE"){i[a]=n.Utils.date.cast(t[a])}else if(a==="AVATAR"){if(t[a]){i[a]=t[a].startsWith("http")?t[a]:options.host+t[a]}}else if(a==="NAME"){if(t[a]){i[a]=t[a]}}else{i[a]=t[a]}}}catch(e){}var r=false;for(var s in i){if(!i.hasOwnProperty(s)){continue}r=true;break}return r?i:null}},{key:"prepareNotification",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=this.validate(Object.assign({},t));return Object.assign({},this.getElementState(),n,i)}},{key:"findItemInArr",value:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"id";var a={};var r=t.findIndex(function(e,t){return e[n]===i});if(r!==-1){a.index=r;a.element=t[r]}return a}},{key:"sortByType",value:function e(t,i){if(t.sectionCode===s.NotificationTypesCodes.confirm&&i.sectionCode!==s.NotificationTypesCodes.confirm){return-1}else if(t.sectionCode!==s.NotificationTypesCodes.confirm&&i.sectionCode===s.NotificationTypesCodes.confirm){return 1}else{return i.id-t.id}}},{key:"convertToHtml",value:function e(){var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var a=i.text,r=a===void 0?"":a;r=r.trim();r=r.replace(/\n/gi,"<br />");r=r.replace(/\t/gi,"&nbsp;&nbsp;&nbsp;&nbsp;");r=t.decodeBbCode({text:r});if(n.Utils.platform.isBitrixDesktop()){r=r.replace(/<a(.*?)>(.*?)<\/a>/gi,function(e,t,i){return"<a"+t.replace('target="_self"','target="_blank"')+' class="bx-im-notifications-item-link">'+i+"</a>"})}return r}}],[{key:"decodeBbCode",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.text;i=i.replace(/\[url=([^\]]+)\](.*?)\[\/url\]/gi,function(e,t,i){var a=document.createElement("a");a.href=n.Utils.text.htmlspecialcharsback(t);a.target="_blank";a.text=n.Utils.text.htmlspecialcharsback(i);var r=["http:","https:","ftp:","file:","tel:","callto:","mailto:","skype:","viber:"];if(r.indexOf(a.protocol)<=-1){return e}return a.outerHTML});i=i.replace(/\[LIKE\]/gi,'<span class="bx-smile bx-im-smile-like"></span>');i=i.replace(/\[DISLIKE\]/gi,'<span class="bx-smile bx-im-smile-dislike"></span>');i=i.replace(/\[RATING\=([1-5]{1})\]/gi,function(e,t){return BX.MessengerCommon.linesVoteHeadNodes(0,t,false).outerHTML});i=i.replace(/\[BR\]/gi,"<br/>");i=i.replace(/\[([buis])\](.*?)\[(\/[buis])\]/gi,function(e,t,i,n){return"<"+t+">"+i+"<"+n+">"});i=i.replace(/\[CHAT=(imol\|)?([0-9]{1,})\](.*?)\[\/CHAT\]/gi,function(e,t,i,n){i=parseInt(i);if(i<=0){return n}if(t){return'<span class="bx-im-mention" data-type="OPENLINES" data-value="'+i+'">'+n+"</span>"}else{return'<span class="bx-im-mention" data-type="CHAT" data-value="'+i+'">'+n+"</span>"}});i=i.replace(/\[USER=([0-9]{1,})\](.*?)\[\/USER\]/gi,function(e,t,i){var n="";t=parseInt(t);if(t>0&&typeof BXIM!="undefined"){n='<span class="bx-im-mention '.concat(t===+BXIM.userId?"bx-messenger-ajax-self":"",'" data-type="USER" data-value="').concat(t,'">').concat(i,"</span>")}else{n=i}return n});i=i.replace(/\[PCH=([0-9]{1,})\](.*?)\[\/PCH\]/gi,function(e,t,i){return i});return i}}]);return t}(r.VuexBuilderModel);var N=function(e){babelHelpers.inherits(t,e);function t(){babelHelpers.classCallCheck(this,t);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).apply(this,arguments))}babelHelpers.createClass(t,[{key:"getName",value:function e(){return"call"}},{key:"getState",value:function e(){return{users:{}}}},{key:"getElementState",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return{id:t.id?t.id:0,state:s.ConferenceUserState.Idle,talking:false,pinned:false,cameraState:false,microphoneState:false,screenState:false,floorRequestState:false}}},{key:"getGetters",value:function e(){var t=this;return{getUser:function e(i){return function(e){e=parseInt(e,10);if(!i.users[e]){return t.getElementState({id:e})}return i.users[e]}},getBlankUser:function e(i){return function(e){e=parseInt(e,10);return t.getElementState({id:e})}}}}},{key:"getActions",value:function e(){var t=this;return{updateUser:function e(i,n){n.id=parseInt(n.id,10);n.fields=Object.assign({},t.validate(n.fields));i.commit("updateUser",n)},unpinUser:function e(t,i){t.commit("unpinUser")}}}},{key:"getMutations",value:function e(){var t=this;return{updateUser:function e(i,n){if(!i.users[n.id]){a.Vue.set(i.users,n.id,Object.assign(t.getElementState(),n.fields,{id:n.id}))}else{i.users[n.id]=Object.assign(i.users[n.id],n.fields)}},unpinUser:function e(t,i){var n=Object.values(t.users).find(function(e){return e.pinned===true});if(n){t.users[n.id].pinned=false}}}}},{key:"validate",value:function e(t){var i={};if(o.Type.isNumber(t.id)||o.Type.isString(t.id)){i.id=parseInt(t.id,10)}if(s.ConferenceUserState[t.state]){i.state=t.state}if(o.Type.isBoolean(t.talking)){i.talking=t.talking}if(o.Type.isBoolean(t.pinned)){i.pinned=t.pinned}if(o.Type.isBoolean(t.cameraState)){i.cameraState=t.cameraState}if(o.Type.isBoolean(t.microphoneState)){i.microphoneState=t.microphoneState}if(o.Type.isBoolean(t.screenState)){i.screenState=t.screenState}if(o.Type.isBoolean(t.floorRequestState)){i.floorRequestState=t.floorRequestState}return i}},{key:"getStateSaveException",value:function e(){return{users:false}}}]);return t}(r.VuexBuilderModel);e.ApplicationModel=l;e.ConferenceModel=c;e.MessagesModel=h;e.DialoguesModel=v;e.UsersModel=C;e.FilesModel=E;e.RecentModel=M;e.NotificationsModel=O;e.CallModel=N})(this.BX.Messenger.Model=this.BX.Messenger.Model||{},BX.Messenger.Lib,BX.Event,BX.Messenger.Lib,BX,BX,BX,BX.Messenger.Const);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:70:"/local/js/im/provider/pull/dist/registry.bundle.min.js?165475981718727";s:6:"source";s:50:"/local/js/im/provider/pull/dist/registry.bundle.js";s:3:"min";s:54:"/local/js/im/provider/pull/dist/registry.bundle.min.js";s:3:"map";s:54:"/local/js/im/provider/pull/dist/registry.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.Provider=this.BX.Messenger.Provider||{};(function(e,t,s,a,i,n){"use strict";var r=function(){babelHelpers.createClass(e,null,[{key:"create",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return new this(t)}}]);function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,e);if(babelHelpers.typeof(t.controller)==="object"&&t.controller){this.controller=t.controller}if(babelHelpers.typeof(t.store)==="object"&&t.store){this.store=t.store}this.option=babelHelpers.typeof(t.store)==="object"&&t.store?t.store:{};if(!(babelHelpers.typeof(this.option.handlingDialog)==="object"&&this.option.handlingDialog&&this.option.handlingDialog.chatId&&this.option.handlingDialog.dialogId)){this.option.handlingDialog=false}}babelHelpers.createClass(e,[{key:"getModuleId",value:function e(){return"im"}},{key:"getSubscriptionType",value:function e(){return n.PullClient.SubscriptionType.Server}},{key:"skipExecute",value:function e(t){var s=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!s.optionImportant){if(this.option.skip){a.Logger.info("Pull: command skipped while loading messages",t);return true}if(!this.option.handlingDialog){return false}}if(typeof t.chatId!=="undefined"||typeof t.dialogId!=="undefined"){if(typeof t.chatId!=="undefined"&&parseInt(t.chatId)===parseInt(this.option.handlingDialog.chatId)){return false}if(typeof t.dialogId!=="undefined"&&t.dialogId.toString()===this.option.handlingDialog.dialogId.toString()){return false}return true}return false}},{key:"handleMessage",value:function e(t,s){this.handleMessageAdd(t,s)}},{key:"handleMessageChat",value:function e(t,s){this.handleMessageAdd(t,s)}},{key:"handleMessageAdd",value:function e(n,r){var o=this;a.Logger.warn("handleMessageAdd",n);if(this.skipExecute(n,r)){return false}var d=this.store.state.messages.collection[n.chatId];if(!d){d=[]}var l=d.find(function(e){if(n.message.templateId&&e.id===n.message.templateId){return true}return e.id===n.message.id});if(l&&n.message.push){return false}if(n.chat&&n.chat[n.chatId]){var c=this.store.getters["dialogues/getByChatId"](n.chatId);if(!c){var u=Object.assign({},n.chat[n.chatId],{dialogId:n.dialogId});this.store.dispatch("dialogues/set",u)}else{this.store.dispatch("dialogues/update",{dialogId:n.dialogId,fields:n.chat[n.chatId]})}}var h=this.store.getters["recent/get"](n.dialogId);if(!h){var f=this.prepareRecentItem(n);this.store.dispatch("recent/set",[f])}else{this.store.dispatch("recent/update",{id:n.dialogId,fields:{lines:n.lines||{id:0},message:{id:n.message.id,text:n.message.textOriginal,date:n.message.date,senderId:n.message.senderId,withFile:typeof n.message.params["FILE_ID"]!=="undefined",withAttach:typeof n.message.params["ATTACH"]!=="undefined"},counter:n.counter}})}if(n.users){this.store.dispatch("users/set",t.VuexBuilderModel.convertToArray(n.users))}if(n.files){var p=this.controller.application.prepareFilesBeforeSave(t.VuexBuilderModel.convertToArray(n.files));p.forEach(function(e){if(p.length===1&&n.message.templateFileId&&o.store.state.files.index[n.chatId]&&o.store.state.files.index[n.chatId][n.message.templateFileId]){o.store.dispatch("files/update",{id:n.message.templateFileId,chatId:n.chatId,fields:e}).then(function(){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{chatId:n.chatId,cancelIfScrollChange:true})})}else{o.store.dispatch("files/set",e)}})}if(l){a.Logger.warn("New message pull handler: we already have this message",n.message);this.store.dispatch("messages/update",{id:l.id,chatId:l.chatId,fields:babelHelpers.objectSpread({},n.message,{sending:false,error:false})}).then(function(){if(!n.message.push){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{chatId:l.chatId,cancelIfScrollChange:n.message.senderId!==o.controller.application.getUserId()})}})}else if(this.controller.application.isUnreadMessagesLoaded()){a.Logger.warn("New message pull handler: we dont have this message",n.message);this.store.dispatch("messages/setAfter",babelHelpers.objectSpread({},n.message,{unread:true})).then(function(){if(!n.message.push){i.EventEmitter.emit(s.EventType.dialog.newMessage,{chatId:n.message.chatId,messageId:n.message.id})}})}this.controller.application.stopOpponentWriting({dialogId:n.dialogId,userId:n.message.senderId});if(n.message.senderId===this.controller.application.getUserId()&&this.controller.application.isUnreadMessagesLoaded()){if(this.store.state.dialogues.collection[n.dialogId]&&this.store.state.dialogues.collection[n.dialogId].counter!==0){this.controller.restClient.callMethod("im.dialog.read",{dialog_id:n.dialogId}).then(function(){o.store.dispatch("messages/readMessages",{chatId:n.chatId}).then(function(e){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{chatId:n.chatId,cancelIfScrollChange:false});o.store.dispatch("dialogues/update",{dialogId:n.dialogId,fields:{counter:0}})})})}}else if(n.message.senderId!==this.controller.application.getUserId()){this.store.dispatch("dialogues/increaseCounter",{dialogId:n.dialogId,count:1})}this.store.dispatch("dialogues/update",{dialogId:n.dialogId,fields:{lastMessageId:n.message.id}});this.store.dispatch("dialogues/increaseMessageCounter",{dialogId:n.dialogId,count:1})}},{key:"handleMessageUpdate",value:function e(t,s,a){this.execMessageUpdateOrDelete(t,s,a)}},{key:"handleMessageDelete",value:function e(t,s,a){this.execMessageUpdateOrDelete(t,s,a)}},{key:"execMessageUpdateOrDelete",value:function e(t,a,n){if(this.skipExecute(t,a)){return false}this.controller.application.stopOpponentWriting({dialogId:t.dialogId,userId:t.senderId});this.store.dispatch("messages/update",{id:t.id,chatId:t.chatId,fields:{text:n==="messageUpdate"?t.text:"",textOriginal:n==="messageUpdate"?t.textOriginal:"",params:t.params,blink:true}}).then(function(){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{chatId:t.chatId,cancelIfScrollChange:true})});var r=this.store.getters["recent/get"](t.dialogId);if(n==="messageUpdate"&&r.element&&r.element.message.id===t.id){this.store.dispatch("recent/update",{id:t.dialogId,fields:{message:{id:t.id,text:t.text,date:r.element.message.date}}})}if(n==="messageDelete"&&r.element&&r.element.message.id===t.id){this.store.dispatch("recent/update",{id:t.dialogId,fields:{message:{id:t.id,text:"Message deleted",date:r.element.message.date}}})}}},{key:"handleMessageDeleteComplete",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("messages/delete",{id:t.id,chatId:t.chatId});this.controller.application.stopOpponentWriting({dialogId:t.dialogId,userId:t.senderId,action:false})}},{key:"handleMessageLike",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("messages/update",{id:t.id,chatId:t.chatId,fields:{params:{LIKE:t.users}}})}},{key:"handleChatOwner",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{ownerId:t.userId}})}},{key:"handleChatManagers",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{managerList:t.list}})}},{key:"handleChatUpdateParams",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:t.params})}},{key:"handleChatUserAdd",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{userCounter:t.userCount}})}},{key:"handleChatUserLeave",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{userCounter:t.userCount}})}},{key:"handleMessageParamsUpdate",value:function e(t,a){if(this.skipExecute(t,a)){return false}this.store.dispatch("messages/update",{id:t.id,chatId:t.chatId,fields:{params:t.params}}).then(function(){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{chatId:t.chatId,cancelIfScrollChange:true})})}},{key:"handleStartWriting",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.controller.application.startOpponentWriting(t)}},{key:"handleReadMessage",value:function e(t,s){var a=this;if(this.skipExecute(t,s)){return false}this.store.dispatch("messages/readMessages",{chatId:t.chatId,readId:t.lastId}).then(function(e){a.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{counter:t.counter}})});this.store.dispatch("recent/update",{id:t.dialogId,fields:{counter:t.counter}})}},{key:"handleReadMessageChat",value:function e(t,s){this.handleReadMessage(t,s)}},{key:"handleReadMessageOpponent",value:function e(t,s){this.execReadMessageOpponent(t,s)}},{key:"handleReadMessageChatOpponent",value:function e(t,s){this.execReadMessageOpponent(t,s)}},{key:"execReadMessageOpponent",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/updateReaded",{dialogId:t.dialogId,userId:t.userId,userName:t.userName,messageId:t.lastId,date:t.date,action:true});var a=this.store.getters["recent/get"](t.dialogId);if(a){var i=a.element.message;this.store.dispatch("recent/update",{id:t.dialogId,fields:{counter:t.counter,message:babelHelpers.objectSpread({},i,{status:"delivered"})}})}}},{key:"handleUnreadMessageOpponent",value:function e(t,s){this.execUnreadMessageOpponent(t,s)}},{key:"handleUnreadMessageChatOpponent",value:function e(t,s){this.execUnreadMessageOpponent(t,s)}},{key:"execUnreadMessageOpponent",value:function e(t,s){if(this.skipExecute(t,s)){return false}this.store.dispatch("dialogues/updateReaded",{dialogId:t.dialogId,userId:t.userId,action:false})}},{key:"handleFileUpload",value:function e(a,n){if(this.skipExecute(a,n)){return false}this.store.dispatch("files/set",this.controller.application.prepareFilesBeforeSave(t.VuexBuilderModel.convertToArray({file:a.fileParams}))).then(function(){i.EventEmitter.emit(s.EventType.dialog.scrollToBottom,{cancelIfScrollChange:true})})}},{key:"handleChatPin",value:function e(t,s){this.store.dispatch("recent/pin",{id:t.dialogId,action:t.active})}},{key:"handleChatHide",value:function e(t,s){this.store.dispatch("recent/delete",{id:t.dialogId})}},{key:"handleChatMuteNotify",value:function e(t,s){var a=this.store.getters["dialogues/get"](t.dialogId);if(!a){return false}var i=a.muteList;var n=[];var r=this.store.state.application.common.userId;if(t.mute){n=[].concat(babelHelpers.toConsumableArray(i),[r])}else{n=i.filter(function(e){return e!==r})}this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{muteList:n}})}},{key:"handleReadNotifyList",value:function e(t,s){this.store.dispatch("recent/update",{id:"notify",fields:{counter:t.counter}})}},{key:"handleUserInvite",value:function e(t,s){if(!t.invited){this.store.dispatch("users/update",{id:t.userId,fields:t.user})}}},{key:"prepareRecentItem",value:function e(t){var s="user";if(t.dialogId.toString().startsWith("chat")){s="chat"}t.dialogId.toString().startsWith("chat");var a=s==="chat"?t.chat[t.chatId].name:t.users[t.dialogId].name;var i=t.chat[t.chatId]?t.chat[t.chatId]:{};if(!t.users){t.users={}}var n=t.users[t.dialogId]?t.users[t.dialogId]:{};var r=s==="user"?t.dialogId:0;return{id:t.dialogId,type:s,title:a,counter:t.counter,chatId:t.chatId,chat:i,user:n,userId:r,message:{id:t.message.id,text:t.message.textOriginal,date:t.message.date,senderId:t.message.senderId,withFile:typeof t.message.params["FILE_ID"]!=="undefined",withAttach:typeof t.message.params["ATTACH"]!=="undefined"}}}}]);return e}();var o=function(){babelHelpers.createClass(e,null,[{key:"create",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return new this(t)}}]);function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,e);if(babelHelpers.typeof(t.application)==="object"&&t.application){this.application=t.application}if(babelHelpers.typeof(t.controller)==="object"&&t.controller){this.controller=t.controller}if(babelHelpers.typeof(t.store)==="object"&&t.store){this.store=t.store}this.option=babelHelpers.typeof(t.store)==="object"&&t.store?t.store:{}}babelHelpers.createClass(e,[{key:"getModuleId",value:function e(){return"im"}},{key:"getSubscriptionType",value:function e(){return n.PullClient.SubscriptionType.Server}},{key:"handleChatUserAdd",value:function e(t){var s=Object.values(t.users).map(function(e){return babelHelpers.objectSpread({},e,{lastActivityDate:new Date})});this.store.commit("conference/common",{userCount:t.userCount});this.store.dispatch("users/set",s);this.store.dispatch("conference/setUsers",{users:s.map(function(e){return e.id})})}},{key:"handleChatUserLeave",value:function e(t){if(t.userId===this.controller.getUserId()&&t.dialogId===this.store.state.application.dialog.dialogId){this.application.kickFromCall()}this.store.commit("conference/common",{userCount:t.userCount});this.store.dispatch("conference/removeUsers",{users:[t.userId]})}},{key:"handleCallUserNameUpdate",value:function e(t){var s=this.store.getters["users/get"](t.userId);if(!s){this.store.dispatch("users/set",{id:t.userId,lastActivityDate:new Date})}this.store.dispatch("users/update",{id:t.userId,fields:{name:t.name,lastActivityDate:new Date}})}},{key:"handleVideoconfShareUpdate",value:function e(t){if(t.dialogId===this.store.state.application.dialog.dialogId){this.store.dispatch("dialogues/update",{dialogId:t.dialogId,fields:{public:{code:t.newCode,link:t.newLink}}});this.application.changeVideoconfUrl(t.newLink)}}},{key:"handleMessageChat",value:function e(t){this.application.sendNewMessageNotify(t)}},{key:"handleChatRename",value:function e(t){if(t.chatId!==this.application.getChatId()){return false}this.store.dispatch("conference/setConferenceTitle",{conferenceTitle:t.name})}},{key:"handleConferenceUpdate",value:function e(t){if(t.chatId!==this.application.getChatId()){return false}if(t.isBroadcast!==""){this.store.dispatch("conference/setBroadcastMode",{broadcastMode:t.isBroadcast})}if(t.presenters.length>0){this.store.dispatch("conference/setPresenters",{presenters:t.presenters,replace:true})}}}]);return e}();function d(e,t){var s;if(typeof Symbol==="undefined"||e[Symbol.iterator]==null){if(Array.isArray(e)||(s=l(e))||t&&e&&typeof e.length==="number"){if(s)e=s;var a=0;var i=function e(){};return{s:i,n:function t(){if(a>=e.length)return{done:true};return{done:false,value:e[a++]}},e:function e(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n=true,r=false,o;return{s:function t(){s=e[Symbol.iterator]()},n:function e(){var t=s.next();n=t.done;return t},e:function e(t){r=true;o=t},f:function e(){try{if(!n&&s.return!=null)s.return()}finally{if(r)throw o}}}}function l(e,t){if(!e)return;if(typeof e==="string")return c(e,t);var s=Object.prototype.toString.call(e).slice(8,-1);if(s==="Object"&&e.constructor)s=e.constructor.name;if(s==="Map"||s==="Set")return Array.from(e);if(s==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s))return c(e,t)}function c(e,t){if(t==null||t>e.length)t=e.length;for(var s=0,a=new Array(t);s<t;s++){a[s]=e[s]}return a}var u=function(){babelHelpers.createClass(e,null,[{key:"create",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return new this(t)}}]);function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,e);if(babelHelpers.typeof(t.application)==="object"&&t.application){this.application=t.application}if(babelHelpers.typeof(t.controller)==="object"&&t.controller){this.controller=t.controller}if(babelHelpers.typeof(t.store)==="object"&&t.store){this.store=t.store}this.option=babelHelpers.typeof(t.store)==="object"&&t.store?t.store:{}}babelHelpers.createClass(e,[{key:"getModuleId",value:function e(){return"im"}},{key:"getSubscriptionType",value:function e(){return n.PullClient.SubscriptionType.Server}},{key:"handleNotifyAdd",value:function e(t,s){if(s.server_time_ago>30||t.onlyFlash===true){return false}var a=this.store.getters["users/get"](t.userId);if(!a){var i=[];i.push({id:t.userId,avatar:t.userAvatar,color:t.userColor,name:t.userName});this.store.dispatch("users/set",i)}this.store.dispatch("notifications/add",{data:t});this.store.dispatch("notifications/setCounter",{unreadTotal:t.counter});this.store.dispatch("recent/update",{id:"notify",fields:{message:{id:t.id,text:t.text,date:t.date},counter:t.counter}})}},{key:"handleNotifyConfirm",value:function e(t,s){if(s.server_time_ago>30){return false}this.store.dispatch("notifications/delete",{id:t.id});this.store.dispatch("notifications/setCounter",{unreadTotal:t.counter});this.updateRecentListOnDelete(t.counter)}},{key:"handleNotifyRead",value:function e(t,s){var a=this;if(s.server_time_ago>30){return false}t.list.forEach(function(e){a.store.dispatch("notifications/read",{ids:[e],action:true})});this.store.dispatch("notifications/setCounter",{unreadTotal:t.counter});this.store.dispatch("recent/update",{id:"notify",fields:{counter:t.counter}})}},{key:"handleNotifyUnread",value:function e(t,s){var a=this;if(s.server_time_ago>30){return false}t.list.forEach(function(e){a.store.dispatch("notifications/read",{ids:[e],action:false})});this.store.dispatch("notifications/setCounter",{unreadTotal:t.counter});this.store.dispatch("recent/update",{id:"notify",fields:{counter:t.counter}})}},{key:"handleNotifyDelete",value:function e(t,s){var a=this;if(s.server_time_ago>30){return false}var i=Object.keys(t.id).map(function(e){return parseInt(e,10)});i.forEach(function(e){a.store.dispatch("notifications/delete",{id:e})});this.updateRecentListOnDelete(t.counter);this.store.dispatch("notifications/setCounter",{unreadTotal:t.counter})}},{key:"updateRecentListOnDelete",value:function e(t){var s;var a=this.getLatest();if(a!==null){s={id:a.id,text:a.text,date:a.date}}else{var i=this.store.getters["recent/get"]("notify");if(i===false){return}s=i.element.message;s.text=this.controller.localize["IM_NOTIFICATIONS_DELETED_ITEM_STUB"]}this.store.dispatch("recent/update",{id:"notify",fields:{message:s,counter:t}})}},{key:"getLatest",value:function e(){var t={id:0};var s=d(this.store.state.notifications.collection),a;try{for(s.s();!(a=s.n()).done;){var i=a.value;if(i.id>t.id){t=i}}}catch(e){s.e(e)}finally{s.f()}if(t.id===0){return null}return t}}]);return e}();e.ImBasePullHandler=r;e.ImCallPullHandler=o;e.ImNotificationsPullHandler=u})(this.BX.Messenger.Provider.Pull=this.BX.Messenger.Provider.Pull||{},BX,BX.Messenger.Const,BX.Messenger.Lib,BX.Event,BX);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:69:"/local/js/im/provider/rest/dist/registry.bundle.min.js?16547598175400";s:6:"source";s:50:"/local/js/im/provider/rest/dist/registry.bundle.js";s:3:"min";s:54:"/local/js/im/provider/rest/dist/registry.bundle.min.js";s:3:"map";s:54:"/local/js/im/provider/rest/dist/registry.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.Provider=this.BX.Messenger.Provider||{};(function(e,s,t,i,a){"use strict";var r=function(){babelHelpers.createClass(e,null,[{key:"create",value:function e(){var s=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return new this(s)}}]);function e(){var s=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,e);if(babelHelpers.typeof(s.controller)==="object"&&s.controller){this.controller=s.controller}if(babelHelpers.typeof(s.store)==="object"&&s.store){this.store=s.store}}babelHelpers.createClass(e,[{key:"execute",value:function e(s,t){var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};s="handle"+s.split(".").map(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}).join("");if(t.error()){if(typeof this[s+"Error"]==="function"){return this[s+"Error"](t.error(),i)}}else{if(typeof this[s+"Success"]==="function"){return this[s+"Success"](t.data(),i)}}return typeof this[s]==="function"?this[s](t,i):null}}]);return e}();var l=function(e){babelHelpers.inherits(r,e);function r(){babelHelpers.classCallCheck(this,r);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(r).apply(this,arguments))}babelHelpers.createClass(r,[{key:"handleImUserListGetSuccess",value:function e(t){this.store.dispatch("users/set",s.VuexBuilderModel.convertToArray(t))}},{key:"handleImUserGetSuccess",value:function e(s){this.store.dispatch("users/set",[s])}},{key:"handleImChatGetSuccess",value:function e(s){this.store.dispatch("dialogues/set",s)}},{key:"handleImDialogMessagesGetSuccess",value:function e(s){this.store.dispatch("users/set",s.users);this.store.dispatch("files/setBefore",this.controller.application.prepareFilesBeforeSave(s.files))}},{key:"handleImDialogMessagesGetInitSuccess",value:function e(s){this.store.dispatch("users/set",s.users);this.store.dispatch("files/set",this.controller.application.prepareFilesBeforeSave(s.files));if(s.messages.length===0&&s.chat_id){i.Logger.warn("setting messagesSet for empty chat",s.chat_id);setTimeout(function(){a.EventEmitter.emit(t.EventType.dialog.messagesSet,{chatId:s.chat_id})},100)}else{this.store.dispatch("messages/set",s.messages.reverse())}}},{key:"handleImDialogMessagesGetUnreadSuccess",value:function e(s){this.store.dispatch("users/set",s.users);this.store.dispatch("files/set",this.controller.application.prepareFilesBeforeSave(s.files))}},{key:"handleImDiskFolderGetSuccess",value:function e(s){this.store.commit("application/set",{dialog:{diskFolderId:s.ID}})}},{key:"handleImMessageAddSuccess",value:function e(s,t){var i=this;this.store.dispatch("messages/update",{id:t.id,chatId:t.chatId,fields:{id:s,sending:false,error:false}}).then(function(){i.store.dispatch("messages/actionFinish",{id:s,chatId:t.chatId})})}},{key:"handleImMessageAddError",value:function e(s,t){this.store.dispatch("messages/actionError",{id:t.id,chatId:t.chatId})}},{key:"handleImDiskFileCommitSuccess",value:function e(s,t){var i=this;this.store.dispatch("messages/update",{id:t.id,chatId:t.chatId,fields:{id:s["MESSAGE_ID"],sending:false,error:false}}).then(function(){i.store.dispatch("messages/actionFinish",{id:s["MESSAGE_ID"],chatId:t.chatId})})}},{key:"handleImDiskFileCommitError",value:function e(s,i){this.store.dispatch("files/update",{chatId:i.chatId,id:i.file.id,fields:{status:t.FileStatus.error,progress:0}});this.store.dispatch("messages/actionError",{id:i.id,chatId:i.chatId,retry:false})}},{key:"handleImRecentListSuccess",value:function e(s,t){i.Logger.warn("Provider.Rest.handleImRecentGetSuccess",s);var a=[];var r=[];var l=[];s.items.forEach(function(e){var s=0;var t=0;if(e.user&&e.user.id>0){s=e.user.id;a.push(e.user)}if(e.chat){t=e.chat.id;r.push(Object.assign(e.chat,{dialogId:e.id}))}else{r.push(Object.assign({},{dialogId:e.id}))}l.push(babelHelpers.objectSpread({},e,{avatar:e.avatar.url,color:e.avatar.color,userId:s,chatId:t}))});this.store.dispatch("users/set",a);this.store.dispatch("dialogues/set",r);this.store.dispatch("recent/set",l)}}]);return r}(r);var n=function(e){babelHelpers.inherits(s,e);function s(e){var t;babelHelpers.classCallCheck(this,s);t=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(s).call(this,e));t.application=e.application;return t}babelHelpers.createClass(s,[{key:"handleImChatGetSuccess",value:function e(s){this.store.commit("application/set",{dialog:{chatId:s.id,dialogId:s.dialog_id,diskFolderId:s.disk_folder_id}})}},{key:"handleImCallGetCallLimitsSuccess",value:function e(s){this.store.commit("application/set",{call:{serverEnabled:s.callServerEnabled,maxParticipants:s.maxParticipants}})}},{key:"handleImChatGetError",value:function e(s){if(s.ex.error==="ACCESS_ERROR"){i.Logger.error("MobileRestAnswerHandler.handleImChatGetError: ACCESS_ERROR")}}},{key:"handleImDialogMessagesGetInitSuccess",value:function e(s){}},{key:"handleImMessageAddSuccess",value:function e(s,t){console.warn("im.message.add success in dialog handler")}},{key:"handleImMessageAddError",value:function e(s,t){}},{key:"handleImDiskFileCommitSuccess",value:function e(s,t){}}]);return s}(r);e.BaseRestHandler=r;e.CoreRestHandler=l;e.DialogRestHandler=n})(this.BX.Messenger.Provider.Rest=this.BX.Messenger.Provider.Rest||{},BX,BX.Messenger.Const,BX.Messenger.Lib,BX.Event);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:62:"/local/js/im/lib/timer/dist/timer.bundle.min.js?16547598172172";s:6:"source";s:43:"/local/js/im/lib/timer/dist/timer.bundle.js";s:3:"min";s:47:"/local/js/im/lib/timer/dist/timer.bundle.min.js";s:3:"map";s:47:"/local/js/im/lib/timer/dist/timer.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(t){"use strict";var e=function(){function t(){babelHelpers.classCallCheck(this,t);this.list={};this.updateInterval=1e3;clearInterval(this.updateIntervalId);this.updateIntervalId=setInterval(this.worker.bind(this),this.updateInterval)}babelHelpers.createClass(t,[{key:"start",value:function t(e){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"default";var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var l=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};i=i==null?"default":i;n=parseFloat(n);if(isNaN(n)||n<=0){return false}n=n*1e3;if(typeof this.list[e]==="undefined"){this.list[e]={}}this.list[e][i]={dateStop:(new Date).getTime()+n,callback:typeof s==="function"?s:function(){},callbackParams:l};return true}},{key:"has",value:function t(e){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"default";i=i==null?"default":i;if(i.toString().length<=0||typeof this.list[e]==="undefined"){return false}return!!this.list[e][i]}},{key:"stop",value:function t(e){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"default";var n=arguments.length>2?arguments[2]:undefined;i=i==null?"default":i;if(i.toString().length<=0||typeof this.list[e]==="undefined"){return false}if(!this.list[e][i]){return true}if(n!==true){this.list[e][i]["callback"](i,this.list[e][i]["callbackParams"])}delete this.list[e][i];return true}},{key:"stopAll",value:function t(e){for(var i in this.list){if(this.list.hasOwnProperty(i)){for(var n in this.list[i]){if(this.list[i].hasOwnProperty(n)){this.stop(i,n,e)}}}}return true}},{key:"worker",value:function t(){for(var e in this.list){if(!this.list.hasOwnProperty(e)){continue}for(var i in this.list[e]){if(!this.list[e].hasOwnProperty(i)||this.list[e][i]["dateStop"]>new Date){continue}this.stop(e,i)}}return true}},{key:"clean",value:function t(){clearInterval(this.updateIntervalId);this.stopAll(true);return true}}]);return t}();t.Timer=e})(this.BX.Messenger.Lib=this.BX.Messenger.Lib||{});
/* End */
;
; /* Start:"a:4:{s:4:"full";s:69:"/local/js/im/controller/dist/controller.bundle.min.js?165475981720247";s:6:"source";s:49:"/local/js/im/controller/dist/controller.bundle.js";s:3:"min";s:53:"/local/js/im/controller/dist/controller.bundle.min.js";s:3:"map";s:53:"/local/js/im/controller/dist/controller.bundle.map.js";}"*/
this.BX=this.BX||{};(function(e,t,i,s,n,a,r,o,l,u,d,c){"use strict";var h=function(){function e(){babelHelpers.classCallCheck(this,e);this.controller=null;this.timer=new o.Timer;this._prepareFilesBeforeSave=function(e){return e};this.defaultMessageLimit=50;this.requestMessageLimit=this.getDefaultMessageLimit();this.messageLastReadId={};this.messageReadQueue={}}babelHelpers.createClass(e,[{key:"setCoreController",value:function e(t){this.controller=t}},{key:"getSiteId",value:function e(){return this.controller.getStore().state.application.common.siteId}},{key:"getUserId",value:function e(){return this.controller.getStore().state.application.common.userId}},{key:"getLanguageId",value:function e(){return this.controller.getStore().state.application.common.languageId}},{key:"getCurrentUser",value:function e(){return this.controller.getStore().getters["users/get"](this.controller.getStore().state.application.common.userId,true)}},{key:"getChatId",value:function e(){return this.controller.getStore().state.application.dialog.chatId}},{key:"getDialogId",value:function e(){return this.controller.getStore().state.application.dialog.dialogId}},{key:"getData",value:function e(){return this.controller.getStore().state.application}},{key:"getDialogData",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.getDialogId();if(this.controller.getStore().state.dialogues.collection[t]){return this.controller.getStore().state.dialogues.collection[t]}return this.controller.getStore().getters["dialogues/getBlank"]()}},{key:"getDialogCrmData",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.getDialogId();var i={enabled:false,entityType:l.DialogCrmType.none,entityId:0};var s=this.getDialogData(t);if(s.type===l.DialogType.call){if(s.entityData1&&typeof s.entityData1==="string"){var n=s.entityData1.split("|"),a=babelHelpers.slicedToArray(n,3),r=a[0],o=a[1],u=a[2];if(r){o=o?o.toString().toLowerCase():l.DialogCrmType.none;i={enabled:r,entityType:o,entityId:u}}}}else if(s.type===l.DialogType.crm){var d=s.entityId.split("|"),c=babelHelpers.slicedToArray(d,2),h=c[0],g=c[1];h=h?h.toString().toLowerCase():l.DialogCrmType.none;i={enabled:true,entityType:h,entityId:g}}return i}},{key:"getDialogIdByChatId",value:function e(t){if(this.getDialogId()==="chat"+t){return this.getDialogId()}var i=this.controller.getStore().getters["dialogues/getByChatId"](t);if(!i){return 0}return i.dialogId}},{key:"getDiskFolderId",value:function e(){return this.controller.getStore().state.application.dialog.diskFolderId}},{key:"getDefaultMessageLimit",value:function e(){return this.defaultMessageLimit}},{key:"getRequestMessageLimit",value:function e(){return this.requestMessageLimit}},{key:"muteDialog",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var s=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.getDialogId();if(u.Utils.dialog.isEmptyDialogId(s)){return false}if(i===null){i=!this.isDialogMuted()}this.timer.start("muteDialog",s,.3,function(e){t.controller.restClient.callMethod(l.RestMethod.imChatMute,{DIALOG_ID:s,ACTION:i?"Y":"N"})});var n=[];if(i){n=this.getDialogData().muteList;n.push(this.getUserId())}else{n=this.getDialogData().muteList.filter(function(e){return e!==t.getUserId()})}this.controller.getStore().dispatch("dialogues/update",{dialogId:s,fields:{muteList:n}});return true}},{key:"isDialogMuted",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.getDialogId();return this.getDialogData().muteList.includes(this.getUserId())}},{key:"isUnreadMessagesLoaded",value:function e(){var t=this.controller.getStore().state.dialogues.collection[this.getDialogId()];if(!t){return true}if(t.lastMessageId<=0){return true}var i=this.controller.getStore().state.messages.collection[this.getChatId()];if(!i||i.length<=0){return true}var s=0;for(var n=i.length-1;n>=0;n--){var a=i[n];if(typeof a.id==="number"){s=a.id;break}}return s>=t.lastMessageId}},{key:"prepareFilesBeforeSave",value:function e(t){return this._prepareFilesBeforeSave(t)}},{key:"setPrepareFilesBeforeSaveFunction",value:function e(t){this._prepareFilesBeforeSave=t.bind(this)}},{key:"showSmiles",value:function e(){this.store.dispatch("application/showSmiles")}},{key:"hideSmiles",value:function e(){this.store.dispatch("application/hideSmiles")}},{key:"startOpponentWriting",value:function e(t){var i=this;var s=t.dialogId,n=t.userId,a=t.userName;this.controller.getStore().dispatch("dialogues/updateWriting",{dialogId:s,userId:n,userName:a,action:true});this.timer.start("writingEnd",s+"|"+n,35,function(e,t){var s=t.dialogId,n=t.userId;i.controller.getStore().dispatch("dialogues/updateWriting",{dialogId:s,userId:n,action:false})},{dialogId:s,userId:n});return true}},{key:"stopOpponentWriting",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=t.dialogId,s=t.userId,n=t.userName;this.timer.stop("writingStart",i+"|"+s,true);this.timer.stop("writingEnd",i+"|"+s);return true}},{key:"startWriting",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.getDialogId();if(u.Utils.dialog.isEmptyDialogId(i)||this.timer.has("writes",i)){return false}this.timer.start("writes",i,28);this.timer.start("writesSend",i,5,function(e){t.controller.restClient.callMethod(l.RestMethod.imDialogWriting,{DIALOG_ID:i}).catch(function(){t.timer.stop("writes",i)})})}},{key:"stopWriting",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.getDialogId();this.timer.stop("writes",t,true);this.timer.stop("writesSend",t,true)}},{key:"joinParentChat",value:function e(t,i){var s=this;return new Promise(function(e,n){if(!t||!i){return n()}if(typeof s.tempJoinChat==="undefined"){s.tempJoinChat={}}else if(s.tempJoinChat["wait"]){return n()}s.tempJoinChat["wait"]=true;s.controller.restClient.callMethod(l.RestMethod.imChatParentJoin,{DIALOG_ID:i,MESSAGE_ID:t}).then(function(){s.tempJoinChat["wait"]=false;s.tempJoinChat[i]=true;return e(i)}).catch(function(){s.tempJoinChat["wait"]=false;return n()})})}},{key:"setTextareaMessage",value:function e(t){var i=t.message,s=i===void 0?"":i,n=t.dialogId,a=n===void 0?this.getDialogId():n;this.controller.getStore().dispatch("dialogues/update",{dialogId:a,fields:{textareaMessage:s}})}},{key:"setSendingMessageFlag",value:function e(t){this.controller.getStore().dispatch("messages/actionStart",{id:t,chatId:this.getChatId()})}},{key:"reactMessage",value:function e(t){var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"auto";this.controller.restClient.callMethod(l.RestMethod.imMessageLike,{MESSAGE_ID:t,ACTION:i==="auto"?"auto":i==="set"?"plus":"minus"})}},{key:"readMessage",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var s=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var a=this.getChatId();if(typeof this.messageLastReadId[a]==="undefined"){this.messageLastReadId[a]=null}if(typeof this.messageReadQueue[a]==="undefined"){this.messageReadQueue[a]=[]}if(i){this.messageReadQueue[a].push(parseInt(i))}this.timer.stop("readMessage",a,true);this.timer.stop("readMessageServer",a,true);if(s){return this.readMessageExecute(a,n)}return new Promise(function(e,i){t.timer.start("readMessage",a,.1,function(i,s){return t.readMessageExecute(i,n).then(function(t){return e(t)})})})}},{key:"readMessageExecute",value:function e(t){var i=this;var s=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return new Promise(function(e,n){if(i.messageReadQueue[t]){i.messageReadQueue[t]=i.messageReadQueue[t].filter(function(e){if(!i.messageLastReadId[t]){i.messageLastReadId[t]=e}else if(i.messageLastReadId[t]<e){i.messageLastReadId[t]=e}})}var a=i.getDialogIdByChatId(t);var r=i.messageLastReadId[t]||0;if(r<=0){e({dialogId:a,lastId:0});return true}i.controller.getStore().dispatch("messages/readMessages",{chatId:t,readId:r}).then(function(n){i.controller.getStore().dispatch("dialogues/decreaseCounter",{dialogId:a,count:n.count});if(i.getChatId()===t&&i.controller.getStore().getters["dialogues/canSaveChat"]){var o=i.controller.getStore().getters["dialogues/get"](a);if(o.counter<=0){i.controller.getStore().commit("application/clearDialogExtraCount")}}if(s){e({dialogId:a,lastId:r})}else{i.timer.start("readMessageServer",t,.5,function(){i.controller.restClient.callMethod(l.RestMethod.imDialogRead,{DIALOG_ID:a,MESSAGE_ID:r}).then(function(){return e({dialogId:a,lastId:r})}).catch(function(){return e({dialogId:a,lastId:r})})})}}).catch(function(){e()})})}},{key:"unreadMessage",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var s=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n=this.getChatId();if(typeof this.messageLastReadId[n]==="undefined"){this.messageLastReadId[n]=null}if(typeof this.messageReadQueue[n]==="undefined"){this.messageReadQueue[n]=[]}if(i){this.messageReadQueue[n]=this.messageReadQueue[n].filter(function(e){return e<i})}this.timer.stop("readMessage",n,true);this.timer.stop("readMessageServer",n,true);this.messageLastReadId[n]=i;this.controller.getStore().dispatch("messages/unreadMessages",{chatId:n,unreadId:this.messageLastReadId[n]}).then(function(e){var a=t.getDialogIdByChatId(n);t.controller.getStore().dispatch("dialogues/update",{dialogId:a,fields:{unreadId:i}});t.controller.getStore().dispatch("dialogues/increaseCounter",{dialogId:a,count:e.count});if(!s){t.controller.restClient.callMethod(l.RestMethod.imDialogUnread,{DIALOG_ID:a,MESSAGE_ID:t.messageLastReadId[n]})}}).catch(function(){})}},{key:"shareMessage",value:function e(t,i){this.controller.restClient.callMethod(l.RestMethod.imMessageShare,{DIALOG_ID:this.getDialogId(),MESSAGE_ID:t,TYPE:i});return true}},{key:"replyToUser",value:function e(t,i){return true}},{key:"openMessageReactionList",value:function e(t,i){return true}},{key:"emit",value:function e(t){var i;for(var s=arguments.length,n=new Array(s>1?s-1:0),a=1;a<s;a++){n[a-1]=arguments[a]}(i=d.Vue.event).$emit.apply(i,[t].concat(n))}},{key:"listen",value:function e(t,i){d.Vue.event.$on(t,i)}}]);return e}();var g=function(){function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,e);this.inited=false;this.initPromise=new Promise(function(e,i){t.initPromiseResolver=e});this.offline=false;this.restAnswerHandler=[];this.vuexAdditionalModel=[];this.store=null;this.storeBuilder=null;this.init().then(function(){return t.prepareParams(i)}).then(function(){return t.initController()}).then(function(){return t.initLocalStorage()}).then(function(){return t.initStorage()}).then(function(){return t.initRestClient()}).then(function(){return t.initPullClient()}).then(function(){return t.initEnvironment()}).then(function(){return t.initComplete()}).catch(function(e){c.Logger.error("error initializing core controller",e)})}babelHelpers.createClass(e,[{key:"init",value:function e(){return Promise.resolve()}},{key:"prepareParams",value:function e(n){var a=this;if(typeof n.localize!=="undefined"){this.localize=n.localize}else{if(typeof BX!=="undefined"){this.localize=babelHelpers.objectSpread({},BX.message)}else{this.localize={}}}if(typeof n.host!=="undefined"){this.host=n.host}else{this.host=location.origin}if(typeof n.userId!=="undefined"){var r=parseInt(n.userId);if(!isNaN(r)){this.userId=r}else{this.userId=0}}else{var o=this.getLocalize("USER_ID");this.userId=o?parseInt(o):0}if(typeof n.siteId!=="undefined"){if(typeof n.siteId==="string"&&n.siteId!==""){this.siteId=n.siteId}else{this.siteId="s1"}}else{this.siteId=this.getLocalize("SITE_ID")||"s1"}if(typeof n.siteDir!=="undefined"){if(typeof n.siteDir==="string"&&n.siteDir!==""){this.siteDir=n.siteDir}else{this.siteDir="s1"}}else{this.siteDir=this.getLocalize("SITE_DIR")||"s1"}if(typeof n.languageId!=="undefined"){if(typeof n.languageId==="string"&&n.languageId!==""){this.languageId=n.languageId}else{this.languageId="en"}}else{this.languageId=this.getLocalize("LANGUAGE_ID")||"en"}this.pullInstance=t.PullClient;this.pullClient=t.PULL;if(typeof n.pull!=="undefined"){if(typeof n.pull.instance!=="undefined"){this.pullInstance=n.pull.instance}if(typeof n.pull.client!=="undefined"){this.pullClient=n.pull.client}}this.restInstance=i.RestClient;this.restClient=i.rest;if(typeof n.rest!=="undefined"){if(typeof n.rest.instance!=="undefined"){this.restInstance=n.rest.instance}if(typeof n.rest.client!=="undefined"){this.restClient=n.rest.client}}this.vuexBuilder={database:false,databaseName:"desktop/im",databaseType:s.VuexBuilder.DatabaseType.indexedDb};if(typeof n.vuexBuilder!=="undefined"){if(typeof n.vuexBuilder.database!=="undefined"){this.vuexBuilder.database=n.vuexBuilder.database}if(typeof n.vuexBuilder.databaseName!=="undefined"){this.vuexBuilder.databaseName=n.vuexBuilder.databaseName}if(typeof n.vuexBuilder.databaseType!=="undefined"){this.vuexBuilder.databaseType=n.vuexBuilder.databaseType}if(typeof n.vuexBuilder.models!=="undefined"){n.vuexBuilder.models.forEach(function(e){a.addVuexModel(e)})}}return Promise.resolve()}},{key:"initController",value:function e(){this.application=new h;this.application.setCoreController(this);return new Promise(function(e,t){return e()})}},{key:"initLocalStorage",value:function e(){return new Promise(function(e,t){return e()})}},{key:"initStorage",value:function e(){var t=this;var i={common:{host:this.getHost(),userId:this.getUserId(),siteId:this.getSiteId(),languageId:this.getLanguageId()},dialog:{messageLimit:this.application.getDefaultMessageLimit(),enableReadMessages:true},device:{type:u.Utils.device.isMobile()?l.DeviceType.mobile:l.DeviceType.desktop,orientation:u.Utils.device.getOrientation()}};var a=(new s.VuexBuilder).addModel(n.ApplicationModel.create().useDatabase(false).setVariables(i)).addModel(n.MessagesModel.create().useDatabase(this.vuexBuilder.database).setVariables({host:this.getHost()})).addModel(n.DialoguesModel.create().useDatabase(this.vuexBuilder.database).setVariables({host:this.getHost()})).addModel(n.FilesModel.create().useDatabase(this.vuexBuilder.database).setVariables({host:this.getHost(),default:{name:"File is deleted"}})).addModel(n.UsersModel.create().useDatabase(this.vuexBuilder.database).setVariables({host:this.getHost(),default:{name:"Anonymous"}})).addModel(n.RecentModel.create().useDatabase(false).setVariables({host:this.getHost()})).addModel(n.NotificationsModel.create().useDatabase(false).setVariables({host:this.getHost()}));this.vuexAdditionalModel.forEach(function(e){a.addModel(e)});a.setDatabaseConfig({name:this.vuexBuilder.databaseName,type:this.vuexBuilder.databaseType,siteId:this.getSiteId(),userId:this.getUserId()});return a.build().then(function(e){t.store=e.store;t.storeBuilder=e.builder;return new Promise(function(e,t){return e()})})}},{key:"initRestClient",value:function e(t){this.addRestAnswerHandler(r.CoreRestHandler.create({store:this.store,controller:this}));return new Promise(function(e,t){return e()})}},{key:"initPullClient",value:function e(){if(!this.pullClient){return false}this.pullClient.subscribe(this.pullBaseHandler=new a.ImBasePullHandler({store:this.store,controller:this}));this.pullClient.subscribe({type:this.pullInstance.SubscriptionType.Status,callback:this.eventStatusInteraction.bind(this)});this.pullClient.subscribe({type:this.pullInstance.SubscriptionType.Online,callback:this.eventOnlineInteraction.bind(this)});return new Promise(function(e,t){return e()})}},{key:"initEnvironment",value:function e(t){var i=this;window.addEventListener("orientationchange",function(){if(!i.store){return}i.store.commit("application/set",{device:{orientation:u.Utils.device.getOrientation()}});if(i.store.state.application.device.type===l.DeviceType.mobile&&i.store.state.application.device.orientation===l.DeviceOrientation.horizontal){document.activeElement.blur()}});return new Promise(function(e,t){return e()})}},{key:"initComplete",value:function e(){this.inited=true;this.initPromiseResolver(this)}},{key:"eventStatusInteraction",value:function e(t){if(t.status===this.pullInstance.PullStatus.Online){this.offline=false}else if(t.status===this.pullInstance.PullStatus.Offline){this.offline=true}}},{key:"eventOnlineInteraction",value:function e(t){if(t.command==="list"||t.command==="userStatus"){for(var i in t.params.users){if(!t.params.users.hasOwnProperty(i)){continue}this.store.dispatch("users/update",{id:t.params.users[i].id,fields:t.params.users[i]})}}}},{key:"executeRestAnswer",value:function e(t,i,s){c.Logger.warn("Core.controller.executeRestAnswer",t,i,s);this.restAnswerHandler.forEach(function(e){e.execute(t,i,s)})}},{key:"createVue",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var s=this;var n=function e(){};if(i.beforeCreate){n=i.beforeCreate}var a=function e(){};if(i.destroyed){a=i.destroyed}var r=function e(){};if(i.created){r=i.created}var o={store:this.store,beforeCreate:function e(){this.$bitrix.Data.set("controller",s);this.$bitrix.Application.set(t);this.$bitrix.Loc.setMessage(s.localize);if(s.restClient){this.$bitrix.RestClient.set(s.restClient)}if(s.pullClient){this.$bitrix.PullClient.set(s.pullClient)}n.bind(this)()},created:function e(){r.bind(this)()},destroyed:function e(){a.bind(this)()}};if(i.el){o.el=i.el}if(i.template){o.template=i.template}if(i.computed){o.computed=i.computed}if(i.data){o.data=i.data}var l=o.created;return new Promise(function(e,t){o.created=function(){l.bind(this)();e(this)};d.BitrixVue.createApp(o)})}},{key:"getHost",value:function e(){return this.host}},{key:"setHost",value:function e(t){this.host=t;this.store.commit("application/set",{common:{host:t}})}},{key:"getUserId",value:function e(){return this.userId}},{key:"setUserId",value:function e(t){var i=parseInt(t);if(!isNaN(i)){this.userId=i}else{this.userId=0}this.store.commit("application/set",{common:{userId:t}})}},{key:"getSiteId",value:function e(){return this.siteId}},{key:"setSiteId",value:function e(t){if(typeof t==="string"&&t!==""){this.siteId=t}else{this.siteId="s1"}this.store.commit("application/set",{common:{siteId:this.siteId}})}},{key:"getLanguageId",value:function e(){return this.languageId}},{key:"setLanguageId",value:function e(t){if(typeof t==="string"&&t!==""){this.languageId=t}else{this.languageId="en"}this.store.commit("application/set",{common:{languageId:this.languageId}})}},{key:"getStore",value:function e(){return this.store}},{key:"getStoreBuilder",value:function e(){return this.storeBuilder}},{key:"addRestAnswerHandler",value:function e(t){this.restAnswerHandler.push(t)}},{key:"addVuexModel",value:function e(t){this.vuexAdditionalModel.push(t)}},{key:"isOnline",value:function e(){return!this.offline}},{key:"ready",value:function e(){if(this.inited){return Promise.resolve(this)}return this.initPromise}},{key:"setError",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";c.Logger.error("Messenger.Application.error: ".concat(t," (").concat(i,")"));var s="";if(t.endsWith("LOCALIZED")){s=i}this.store.commit("application/set",{error:{active:true,code:t,description:s}})}},{key:"clearError",value:function e(){this.store.commit("application/set",{error:{active:false,code:"",description:""}})}},{key:"addLocalize",value:function e(t){if(babelHelpers.typeof(t)!=="object"||!t){return false}for(var i in t){if(t.hasOwnProperty(i)){this.localize[i]=t[i]}}return true}},{key:"getLocalize",value:function e(t){var i="";if(typeof t==="undefined"){return this.localize}else if(typeof this.localize[t.toString()]==="undefined"){c.Logger.warn("Controller.Core.getLocalize: message with code '".concat(t.toString(),"' is undefined."))}else{i=this.localize[t]}return i}}]);return e}();e.Controller=g})(this.BX.Messenger=this.BX.Messenger||{},BX,BX,BX,BX.Messenger.Model,BX.Messenger.Provider.Pull,BX.Messenger.Provider.Rest,BX.Messenger.Lib,BX.Messenger.Const,BX.Messenger.Lib,BX,BX.Messenger.Lib);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:72:"/local/js/im/application/launch/dist/launch.bundle.min.js?16547598171204";s:6:"source";s:53:"/local/js/im/application/launch/dist/launch.bundle.js";s:3:"min";s:57:"/local/js/im/application/launch/dist/launch.bundle.min.js";s:3:"map";s:57:"/local/js/im/application/launch/dist/launch.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e,n){"use strict";var i=function e(i){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var r="";var s="";if(babelHelpers.typeof(i)==="object"){s=i.name.toString();r=i.application.toString()}else{s=i.toString();r=i}r=r.substr(0,1).toUpperCase()+r.substr(1);if(r==="Launch"||r==="Core"||r.endsWith("Application")){n.Logger.error("BX.Messenger.Application.Launch: specified name is forbidden.");return new Promise(function(e,n){return n()})}var o=function e(){try{BX.Messenger.Application[s]=new BX.Messenger.Application[r+"Application"](t);return BX.Messenger.Application[s].ready()}catch(e){n.Logger.error('BX.Messenger.Application.Launch: application "'.concat(r,'" is not initialized.'));return false}};if(typeof BX.Messenger.Application[r+"Application"]==="undefined"&&typeof BX.Runtime!=="undefined"&&typeof BX.Runtime.loadExtension!=="undefined"){var a="im.application."+r.toString().toLowerCase();return BX.Runtime.loadExtension(a).then(function(){return o()})}return o()};e.Launch=i})(this.BX.Messenger.Application=this.BX.Messenger.Application||{},BX.Messenger.Lib);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:67:"/local/js/im/application/core/dist/core.bundle.min.js?1654759817436";s:6:"source";s:49:"/local/js/im/application/core/dist/core.bundle.js";s:3:"min";s:53:"/local/js/im/application/core/dist/core.bundle.min.js";s:3:"map";s:53:"/local/js/im/application/core/dist/core.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e,s){"use strict";var r=function(){function e(){babelHelpers.classCallCheck(this,e);this.controller=new s.Controller}babelHelpers.createClass(e,[{key:"ready",value:function e(){return this.controller.ready()}}]);return e}();var t=new r;e.Core=t})(this.BX.Messenger.Application=this.BX.Messenger.Application||{},BX.Messenger);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:70:"/local/js/im/lib/animation/dist/animation.bundle.min.js?16547598171109";s:6:"source";s:51:"/local/js/im/lib/animation/dist/animation.bundle.js";s:3:"min";s:55:"/local/js/im/lib/animation/dist/animation.bundle.min.js";s:3:"map";s:55:"/local/js/im/lib/animation/dist/animation.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(e){"use strict";var n=function(){function e(){babelHelpers.classCallCheck(this,e)}babelHelpers.createClass(e,null,[{key:"start",value:function e(n){var i=n.start,e=i===void 0?0:i,t=n.end,r=t===void 0?0:t,a=n.increment,o=a===void 0?20:a,s=n.callback,u=s===void 0?function(){}:s,c=n.duration,l=c===void 0?500:c,m=n.element,f=n.elementProperty;var v=r-e;var w=0;var d=function e(n,i,t,r){n/=r/2;if(n<1){return t/2*n*n+i}n--;return-t/2*(n*(n-2)-1)+i};var b=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)};var h=null;var A=function n(){w+=o;m[f]=d(w,e,v,l);if(w<l){h=b(n)}else{if(u&&typeof u==="function"){u()}}return h};return A()}},{key:"cancel",value:function e(n){var i=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||function(e){clearTimeout(e)};i(n)}}]);return e}();n.frameIds={};e.Animation=n})(this.BX.Messenger.Lib=this.BX.Messenger.Lib||{});
/* End */
;
; /* Start:"a:4:{s:4:"full";s:74:"/local/js/im/view/element/attach/dist/attach.bundle.min.js?165475981717056";s:6:"source";s:54:"/local/js/im/view/element/attach/dist/attach.bundle.js";s:3:"min";s:58:"/local/js/im/view/element/attach/dist/attach.bundle.min.js";s:3:"map";s:58:"/local/js/im/view/element/attach/dist/attach.bundle.map.js";}"*/
(function(t,e,n,i,l,a){"use strict";var m={property:"DELIMITER",name:"bx-im-view-element-attach-delimiter",component:{props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},computed:{styles:function t(){return{width:this.config.DELIMITER.SIZE?this.config.DELIMITER.SIZE+"px":"",backgroundColor:this.config.DELIMITER.COLOR?this.config.DELIMITER.COLOR:this.color}}},template:'<div class="bx-im-element-attach-type-delimiter" :style="styles"></div>'}};var r={property:"FILE",name:"bx-im-element-attach-file",component:{props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},methods:{openLink:function t(e){l.Utils.platform.openNewPage(e.LINK)},file:function t(){return{name:this.config.FILE.NAME,extension:this.config.FILE.NAME.split(".").splice(-1)[0],size:this.config.FILE.SIZE}},fileName:function t(e){var n=70;if(!e.NAME||e.NAME.length<n){return e.NAME}var i=10;var l=e.NAME.split(".").splice(-1)[0];var a=e.NAME.substring(e.NAME.length-1-(l.length+1+i));var m=e.NAME.substring(0,n-a.length-3);return m.trim()+"..."+a.trim()},fileNameFull:function t(e){return e.NAME},fileSize:function t(e){var n=e.SIZE;if(n<=0){return""}var i=["BYTE","KB","MB","GB","TB"];var l=0;while(n>=1024&&l<4){n/=1024;l++}return Math.round(n)+" "+this.$Bitrix.Loc.getMessage("IM_MESSENGER_ATTACH_FILE_SIZE_"+i[l])},fileIcon:function t(e){return i.FilesModel.getIconType(e.NAME.split(".").splice(-1)[0])}},template:'\n\t\t\t<div class="bx-im-element-attach-type-file-element">\n\t\t\t\t<template v-for="(element, index) in config.FILE">\n\t\t\t\t\t<div class="bx-im-element-attach-type-file" @click="openLink(element)">\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-file-icon">\n\t\t\t\t\t\t\t<div :class="[\'ui-icon\', \'ui-icon-file-\'+fileIcon(element)]"><i></i></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-file-block">\n\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-file-name" :title="fileNameFull(element)">\n\t\t\t\t\t\t\t\t{{fileName(element)}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-file-size">{{fileSize(element)}}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};var o={methods:{openLink:function t(e){var n=e.element;var i=e.event;if(!l.Utils.platform.isBitrixMobile()&&n.LINK){return}if(n.LINK&&i.target.tagName!=="A"){l.Utils.platform.openNewPage(n.LINK)}else if(!n.LINK){var a={id:null,type:null};if(n.hasOwnProperty("USER_ID")&&n.USER_ID>0){a.id=n.USER_ID;a.type="user"}if(n.hasOwnProperty("CHAT_ID")&&n.CHAT_ID>0){a.id=n.CHAT_ID;a.type="chat"}if(a.id&&a.type&&window.top["BXIM"]){var m=!BX.MessengerTheme.isDark();window.top["BXIM"].messenger.openPopupExternalData(i.target,a.type,m,{ID:a.id})}else if(navigator.userAgent.toLowerCase().includes("bitrixmobile")){var r="";if(a.type==="chat"){r="chat".concat(a.id)}else{r=a.id}if(r!==""){BXMobileApp.Events.postToComponent("onOpenDialog",[{dialogId:r},true],"im.recent")}}}}}};var c={property:"GRID",name:"bx-im-view-element-attach-grid",component:{mixins:[o],props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},created:function t(){if(l.Utils.platform.isBitrixMobile()){this.maxCellWith=Math.floor(Math.min(screen.availWidth,screen.availHeight)/4)}else{this.maxCellWith=null}},methods:{getWidth:function t(e){if(e.DISPLAY!=="row"){return e.WIDTH?e.WIDTH+"px":""}if(!e.VALUE){return false}if(this.maxCellWith&&e.WIDTH>this.maxCellWith){return this.maxCellWith+"px"}return e.WIDTH?e.WIDTH+"px":""},getValue:function t(e){var n=this;if(!e.VALUE){return""}var a=l.Utils.text.htmlspecialchars(e.VALUE);a=a.replace(/\[USER=([0-9]{1,})\](.*?)\[\/USER\]/gi,function(t,e,i){var a=n.$store.getters["users/get"](e);i=a?l.Utils.text.htmlspecialchars(a.name):i;return'<span class="bx-im-mention" data-type="USER" data-value="'+e+'">'+i+"</span>"});return i.MessagesModel.decodeBbCode({text:a})}},template:'\n\t\t\t<div class="bx-im-element-attach-type-grid">\n\t\t\t\t<template v-for="(element, index) in config.GRID">\n\t\t\t\t\t<template v-if="element.DISPLAY.toLowerCase() === \'block\'">\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-display bx-im-element-attach-type-display-block" :style="{width: getWidth(element)}">\n\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-element-name">{{element.NAME}}</div>\n\t\t\t\t\t\t\t<template v-if="element.LINK">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass="bx-im-element-attach-type-grid-element-value bx-im-element-attach-type-grid-element-value-link"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a :href="element.LINK" target="_blank" @click="openLink({element: element, event: $event})" v-html="getValue(element)"></a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-element-value" v-html="getValue(element)"></div>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-else-if="element.DISPLAY.toLowerCase() === \'line\'">\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-display bx-im-element-attach-type-display-card" :style="{width: getWidth(element)}">\n\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-element-name">{{element.NAME}}</div>\n\t\t\t\t\t\t\t<template v-if="element.LINK">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclass="bx-im-element-attach-type-grid-element-value bx-im-element-attach-type-grid-element-value-link"\n\t\t\t\t\t\t\t\t\t:style="{color: element.COLOR? element.COLOR: \'\'}"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a :href="element.LINK" target="_blank" @click="openLink({element: element, event: $event})" v-html="getValue(element)"></a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-element-value" :style="{color: element.COLOR? element.COLOR: \'\'}" v-html="getValue(element)"></div>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-else-if="element.DISPLAY.toLowerCase() === \'row\'">\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-grid-display bx-im-element-attach-type-display-column">\n\t\t\t\t\t\t\t<table class="bx-im-element-attach-type-display-column-table">\n\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<template v-if="element.NAME">\n\t\t\t\t\t\t\t\t\t\t\t<td class="bx-im-element-attach-type-grid-element-name" :colspan="element.VALUE? 1: 2" :style="{width: getWidth(element)}">{{element.NAME}}</td>\n\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t<template v-if="element.VALUE">\n\t\t\t\t\t\t\t\t\t\t\t<template v-if="element.LINK">\n\t\t\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass="bx-im-element-attach-type-grid-element-value bx-im-element-attach-type-grid-element-value-link"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:colspan="element.NAME? 1: 2"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:style="{color: element.COLOR? element.COLOR: \'\'}"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a :href="element.LINK" target="_blank" @click="openLink({element: element, event: $event})" v-html="getValue(element)"></a>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class="bx-im-element-attach-type-grid-element-value" :colspan="element.NAME? 1: 2" :style="{color: element.COLOR? element.COLOR: \'\'}" v-html="getValue(element)"></td>\n\t\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};var s={property:"HTML",name:"bx-im-view-element-attach-html",component:{props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},template:'<div class="bx-im-element-attach-type-html" v-html="config.HTML"></div>'}};var p={property:"IMAGE",name:"bx-im-view-element-attach-image",component:{props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},methods:{open:function t(e){if(!e){return false}if(l.Utils.platform.isBitrixMobile()){BXMobileApp.UI.Photo.show({photos:[{url:e}],default_photo:e})}else{window.open(e,"_blank")}},getImageSize:function t(e,n,i){var l;if(e>i){l=i/e}else{l=1}return{width:e*l,height:n*l}},getElementSource:function t(e){return e.PREVIEW?e.PREVIEW:e.LINK},getElementTitle:function t(e){return l.Utils.text.htmlspecialcharsback(e.NAME)},lazyLoadCallback:function t(e){if(!e.element.style.width){e.element.style.width=e.element.offsetWidth+"px"}if(!e.element.style.height){e.element.style.height=e.element.offsetHeight+"px"}},styleFileSizes:function t(e){if(!(e.WIDTH&&e.HEIGHT)){return{maxHeight:"100%",backgroundSize:"contain"}}var n=this.getImageSize(e.WIDTH,e.HEIGHT,250);return{width:n.width+"px",height:n.height+"px",backgroundSize:n.width<100||n.height<100?"contain":"initial"}},styleBoxSizes:function t(e){if(!(e.WIDTH&&e.HEIGHT)){return{height:"150px"}}if(parseInt(this.styleFileSizes(e).height)<=250){return{}}return{height:"280px"}}},template:'\n\t\t\t<div class="bx-im-element-attach-type-image">\n\t\t\t\t<template v-for="(image, index) in config.IMAGE">\n\t\t\t\t\t<div class="bx-im-element-attach-type-image-block" @click="open(image.LINK)" :style="styleBoxSizes(image)" :key="index">\n\t\t\t\t\t\t<img v-bx-lazyload="{callback: lazyLoadCallback}"\n\t\t\t\t\t\t\tclass="bx-im-element-attach-type-image-source"\n\t\t\t\t\t\t\t:data-lazyload-src="getElementSource(image)"\n\t\t\t\t\t\t\t:style="styleFileSizes(image)"\n\t\t\t\t\t\t\t:title="getElementTitle(image)"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};var d={property:"LINK",name:"bx-im-view-element-attach-link",component:{mixins:[o],props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},methods:{getImageConfig:function t(e){return{IMAGE:[{NAME:e.NAME,PREVIEW:e.PREVIEW,WIDTH:e.WIDTH,HEIGHT:e.HEIGHT}]}},getLinkName:function t(e){return e.NAME?e.NAME:e.LINK}},computed:{imageComponentName:function t(){return p.name}},components:babelHelpers.defineProperty({},p.name,p.component),template:'\n\t\t\t<div class="bx-im-element-attach-type-link">\n\t\t\t\t<template v-for="(element, index) in config.LINK">\n\t\t\t\t\t<div class="bx-im-element-attach-type-link-element" :key="index">\n\t\t\t\t\t\t<a \n\t\t\t\t\t\t\tv-if="element.LINK"\n\t\t\t\t\t\t\t:href="element.LINK"\n\t\t\t\t\t\t\ttarget="_blank"\n\t\t\t\t\t\t\tclass="bx-im-element-attach-type-link-name" \n\t\t\t\t\t\t\t@click="openLink({element: element, event: $event})"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{getLinkName(element)}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<span \n\t\t\t\t\t\t\tv-else\n\t\t\t\t\t\t\tclass="bx-im-element-attach-type-ajax-link"\n\t\t\t\t\t\t\t@click="openLink({element: element, event: $event})"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{getLinkName(element)}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<div v-if="element.DESC" class="bx-im-element-attach-type-link-desc">{{element.DESC}}</div>\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tv-if="element.PREVIEW" \n\t\t\t\t\t\t\tclass="bx-im-element-attach-type-link-image"\n\t\t\t\t\t\t\t@click="openLink({element: element, event: $event})"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<component :is="imageComponentName" :config="getImageConfig(element)" :color="color"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};var f={property:"MESSAGE",name:"bx-im-view-element-attach-message",component:{props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},computed:{message:function t(){var e=this;var n=l.Utils.text.htmlspecialchars(this.config.MESSAGE);n=n.replace(/\[USER=([0-9]{1,})\](.*?)\[\/USER\]/gi,function(t,n,i){var a=e.$store.getters["users/get"](n);i=a?l.Utils.text.htmlspecialchars(a.name):i;return'<span class="bx-im-mention" data-type="USER" data-value="'+n+'">'+i+"</span>"});return i.MessagesModel.decodeBbCode({text:n})}},template:'<div class="bx-im-element-attach-type-message" v-html="message"></div>'}};var v={property:"RICH_LINK",name:"bx-im-view-element-attach-rich",component:{mixins:[o],props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},methods:{getImageConfig:function t(e){return{IMAGE:[{NAME:e.NAME,PREVIEW:e.PREVIEW,WIDTH:e.WIDTH,HEIGHT:e.HEIGHT}]}}},computed:{imageComponentName:function t(){return p.name}},components:babelHelpers.defineProperty({},p.name,p.component),template:'\n\t\t\t<div class="bx-im-element-attach-type-rich">\n\t\t\t\t<template v-for="(element, index) in config.RICH_LINK">\n\t\t\t\t\t<div class="bx-im-element-attach-type-rich-element" :key="index">\n\t\t\t\t\t\t<div v-if="element.PREVIEW" class="bx-im-element-attach-type-rich-image" @click="openLink({element: element, event: $event})">\n\t\t\t\t\t\t\t<component :is="imageComponentName" :config="getImageConfig(element)" :color="color"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-rich-name" @click="openLink({element: element, event: $event})">{{element.NAME}}</div>\n\t\t\t\t\t\t<div v-if="element.DESC" class="bx-im-element-attach-type-rich-desc">{{element.DESC}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};var h={property:"USER",name:"bx-im-view-element-attach-user",component:{mixins:[o],props:{config:{type:Object,default:{}},color:{type:String,default:"transparent"}},methods:{getAvatarType:function t(e){if(e.AVATAR){return""}var n="user";if(e.AVATAR_TYPE==="CHAT"){n="chat"}else if(e.AVATAR_TYPE==="BOT"){n="bot"}return"bx-im-element-attach-type-user-avatar-type-"+n}},template:'\n\t\t\t<div class="bx-im-element-attach-type-user">\n\t\t\t\t<template v-for="(element, index) in config.USER">\n\t\t\t\t\t<div class="bx-im-element-attach-type-user-body">\n\t\t\t\t\t\t<div class="bx-im-element-attach-type-user-avatar">\n\t\t\t\t\t\t\t<div :class="[\'bx-im-element-attach-type-user-avatar-type\', getAvatarType(element)]" :style="{backgroundColor: element.AVATAR? \'\': color}">\n\t\t\t\t\t\t\t\t<img v-if="element.AVATAR" \n\t\t\t\t\t\t\t\t\tv-bx-lazyload\n\t\t\t\t\t\t\t\t\tclass="bx-im-element-attach-type-user-avatar-source"\n\t\t\t\t\t\t\t\t\t:data-lazyload-src="element.AVATAR"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tv-if="element.LINK"\n\t\t\t\t\t\t\t:href="element.LINK" \n\t\t\t\t\t\t\tclass="bx-im-element-attach-type-user-name"\n\t\t\t\t\t\t\ttarget="_blank"\n\t\t\t\t\t\t\t@click="openLink({element: element, event: $event})"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{element.NAME}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<span v-else @click.prevent="openLink({element: element, event: $event})">\n\t\t\t\t\t\t\t{{element.NAME}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t'}};function u(t,e){var n;if(typeof Symbol==="undefined"||t[Symbol.iterator]==null){if(Array.isArray(t)||(n=g(t))||e&&t&&typeof t.length==="number"){if(n)t=n;var i=0;var l=function t(){};return{s:l,n:function e(){if(i>=t.length)return{done:true};return{done:false,value:t[i++]}},e:function t(e){throw e},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a=true,m=false,r;return{s:function e(){n=t[Symbol.iterator]()},n:function t(){var e=n.next();a=e.done;return e},e:function t(e){m=true;r=e},f:function t(){try{if(!a&&n.return!=null)n.return()}finally{if(m)throw r}}}}function g(t,e){if(!t)return;if(typeof t==="string")return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor)n=t.constructor.name;if(n==="Map"||n==="Set")return Array.from(t);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return y(t,e)}function y(t,e){if(e==null||e>t.length)e=t.length;for(var n=0,i=new Array(e);n<e;n++){i[n]=t[n]}return i}var b=[m,r,c,s,p,d,f,v,h];var x={};b.forEach(function(t){x[t.name]=t.component});a.BitrixVue.component("bx-im-view-element-attach",{props:{config:{type:Object,default:{}},baseColor:{type:String,default:"#17a3ea"}},methods:{getComponentForBlock:function t(e){var n=u(b),i;try{for(n.s();!(i=n.n()).done;){var l=i.value;if(typeof e[l.property]!=="undefined"){return l.name}}}catch(t){n.e(t)}finally{n.f()}return""}},computed:{color:function t(){if(typeof this.config.COLOR==="undefined"||!this.config.COLOR){return this.baseColor}if(this.config.COLOR==="transparent"){return""}return this.config.COLOR}},components:x,template:'\n\t\t<div class="bx-im-element-attach">\n\t\t\t<div v-if="color" class="bx-im-element-attach-border" :style="{borderColor: color}"></div>\n\t\t\t<div class="bx-im-element-attach-content">\n\t\t\t\t<template v-for="(block, index) in config.BLOCKS">\n\t\t\t\t\t<component :is="getComponentForBlock(block)" :config="block" :color="color" :key="index" />\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t</div>\n\t'})})(this.window=this.window||{},BX,window,BX.Messenger.Model,BX.Messenger.Lib,BX);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:77:"/local/js/im/view/element/keyboard/dist/keyboard.bundle.min.js?16547598173415";s:6:"source";s:58:"/local/js/im/view/element/keyboard/dist/keyboard.bundle.js";s:3:"min";s:62:"/local/js/im/view/element/keyboard/dist/keyboard.bundle.min.js";s:3:"map";s:62:"/local/js/im/view/element/keyboard/dist/keyboard.bundle.map.js";}"*/
(function(exports,ui_vue,im_lib_utils,im_lib_logger){"use strict";var _ButtonType=Object.freeze({newline:"NEWLINE",button:"BUTTON"});ui_vue.BitrixVue.component("bx-im-view-element-keyboard",{props:{buttons:{type:Array,default:function t(){return[]}},messageId:{default:0},userId:{default:0},dialogId:{default:0}},data:function t(){return{isMobile:im_lib_utils.Utils.platform.isMobile(),isBlocked:false,localButtons:[]}},created:function t(){this.localButtons=this.prepareButtons(this.buttons)},watch:{buttons:function t(){clearTimeout(this.recoverStateButton);this.isBlocked=false;this.localButtons=this.prepareButtons(this.buttons)}},methods:{click:function click(button){var _this=this;if(this.isBlocked){return false}if(button.DISABLED&&button.DISABLED==="Y"){return false}if(button.ACTION&&button.ACTION_VALUE.toString()){this.$emit("click",{action:"ACTION",params:{dialogId:this.dialogId,messageId:this.messageId,botId:button.BOT_ID,action:button.ACTION,value:button.ACTION_VALUE}})}else if(button.FUNCTION){var execFunction=button.FUNCTION.toString().replace("#MESSAGE_ID#",this.messageId).replace("#DIALOG_ID#",this.dialogId).replace("#USER_ID#",this.userId);eval(execFunction)}else if(button.APP_ID){im_lib_logger.Logger.warn("Messenger keyboard: open app is not implemented.")}else if(button.LINK){if(im_lib_utils.Utils.platform.isBitrixMobile()){app.openNewPage(button.LINK)}else{window.open(button.LINK,"_blank")}}else if(button.WAIT!=="Y"){if(button.BLOCK==="Y"){this.isBlocked=true}button.WAIT="Y";this.$emit("click",{action:"COMMAND",params:{dialogId:this.dialogId,messageId:this.messageId,botId:button.BOT_ID,command:button.COMMAND,params:button.COMMAND_PARAMS}});this.recoverStateButton=setTimeout(function(){_this.isBlocked=false;button.WAIT="N"},1e4)}return true},getStyles:function t(e){var i={};if(e.WIDTH){i["width"]=e.WIDTH+"px"}else if(e.DISPLAY==="BLOCK"){i["width"]="225px"}if(e.BG_COLOR){i["backgroundColor"]=e.BG_COLOR}if(e.TEXT_COLOR){i["color"]=e.TEXT_COLOR}return i},prepareButtons:function t(e){return e.filter(function(t){if(!t.CONTEXT){return true}if(im_lib_utils.Utils.platform.isBitrixMobile()&&t.CONTEXT==="DESKTOP"){return false}if(!im_lib_utils.Utils.platform.isBitrixMobile()&&t.CONTEXT==="MOBILE"){return false}if(!im_lib_utils.Utils.platform.isBitrixMobile()&&(t.ACTION==="DIALOG"||t.ACTION==="CALL")){return false}return true})}},computed:{ButtonType:function t(){return _ButtonType}},template:'\n\t\t<div :class="[\'bx-im-element-keyboard\', {\'bx-im-element-keyboard-mobile\': isMobile}]">\n\t\t\t<template v-for="(button, index) in localButtons">\n\t\t\t\t<div v-if="button.TYPE === ButtonType.newline" class="bx-im-element-keyboard-button-separator"></div>\n\t\t\t\t<span v-else-if="button.TYPE === ButtonType.button" :class="[\n\t\t\t\t\t\'bx-im-element-keyboard-button\', \n\t\t\t\t\t\'bx-im-element-keyboard-button-\'+button.DISPLAY.toLowerCase(), \n\t\t\t\t\t{\n\t\t\t\t\t\t\'bx-im-element-keyboard-button-disabled\': isBlocked || button.DISABLED === \'Y\',\n\t\t\t\t\t\t\'bx-im-element-keyboard-button-progress\': button.WAIT === \'Y\',\n\t\t\t\t\t}\n\t\t\t\t]" @click="click(button)">\n\t\t\t\t\t<span class="bx-im-element-keyboard-button-text" :style="getStyles(button)">{{button.TEXT}}</span>\n\t\t\t\t</span>\n\t\t\t</template>\n\t\t</div>\n\t'})})(this.window=this.window||{},BX,BX.Messenger.Lib,BX.Messenger.Lib);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:63:"/local/js/im/view/popup/dist/popup.bundle.min.js?16547598189787";s:6:"source";s:44:"/local/js/im/view/popup/dist/popup.bundle.js";s:3:"min";s:48:"/local/js/im/view/popup/dist/popup.bundle.min.js";s:3:"map";s:48:"/local/js/im/view/popup/dist/popup.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(t,e,s){"use strict";var n={props:["value","popupInstance"],data:function t(){return{chat:{},hasError:false,requestFinished:false}},created:function t(){var e=this.getChat(this.value);if(e){this.chat=e;this.requestFinished=true}else{this.requestChatData(this.value)}},mounted:function t(){this.popupInstance.show()},beforeDestroy:function t(){this.popupInstance.destroy()},methods:{getChat:function t(e){return this.$store.getters["dialogues/get"](e)},requestChatData:function t(e){var n=this;this.$Bitrix.RestClient.get().callMethod(s.RestMethod.imChatGet,{dialog_id:e}).then(function(t){n.$Bitrix.Data.get("controller").executeRestAnswer(s.RestMethodHandler.imChatGet,t);n.chat=n.getChat(n.value);n.requestFinished=true}).catch(function(t){n.hasError=true;console.error(t);n.requestFinished=true})},onOpenChat:function t(e){this.popupInstance.destroy();BXIM.openMessenger(this.value)},onOpenHistory:function t(e){this.popupInstance.destroy();BXIM.openHistory(this.value)}},computed:{avatarStyles:function t(){var e={};if(this.emptyAvatar){e.backgroundColor=this.chat.color}return e},chatAvatar:function t(){if(this.emptyAvatar){return"/bitrix/js/im/images/blank.gif"}else{return this.chat.avatar}},emptyAvatar:function t(){return this.chat.avatar===""||this.chat.avatar.indexOf("/bitrix/js/im/images/blank.gif")>=0}},template:'\n\t\t<div class="bx-messenger-external-data" style="width: 272px; max-width: 272px; height: 100px;">\n\t\t\t<div v-if="requestFinished && !hasError">\n\t\t\t\t<div class="bx-messenger-external-avatar">\n\t\t\t\t\t<div class="bx-messenger-panel-avatar bx-messenger-panel-avatar-chat">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t:src="chatAvatar"\n\t\t\t\t\t\t\t:alt="chat.name"\n\t\t\t\t\t\t\t:style="avatarStyles"\n\t\t\t\t\t\t\t:class="[emptyAvatar ? \'bx-messenger-panel-avatar-img-default\' : \'\', \'bx-messenger-panel-avatar-img\']"\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span v-if="chat.extranet" class="bx-messenger-panel-title"><div class="bx-messenger-user-extranet">{{ chat.name }}</div></span>\n\t\t\t\t\t<span v-else class="bx-messenger-panel-title">{{ chat.name }}</span>\n\t\t\t\t\t<span class="bx-messenger-panel-desc">{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_GROUP_CHAT\') }}</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-messenger-external-data-buttons">\n\t\t\t\t<span class="bx-notifier-item-button bx-notifier-item-button-white" @click="onOpenChat">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_OPEN_CHAT\') }}\n\t\t\t\t</span>\n\t\t\t\t\t<span class="bx-notifier-item-button bx-notifier-item-button-white" @click="onOpenHistory">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_OPEN_HISTORY\') }}\n\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span v-else-if="!requestFinished && !hasError" class="bx-messenger-content-load-img"></span>\n\t\t\t<div v-else-if="requestFinished && hasError">\n\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_NO_ACCESS\') }}\n\t\t\t</div>\n\t\t</div>\n\t'};var a={props:["value","popupInstance"],data:function t(){return{user:{},hasError:false,requestFinished:false}},created:function t(){var e=this.getUser(this.value);if(e){this.user=e;this.requestFinished=true}else{this.requestUserData(this.value)}},mounted:function t(){this.popupInstance.show()},beforeDestroy:function t(){this.popupInstance.destroy()},methods:{getUser:function t(e){return this.$store.getters["users/get"](e)},requestUserData:function t(e){var n=this;this.$Bitrix.RestClient.get().callMethod(s.RestMethod.imUserGet,{ID:e}).then(function(t){n.$Bitrix.Data.get("controller").executeRestAnswer(s.RestMethodHandler.imUserGet,t);n.user=n.getUser(n.value);n.requestFinished=true}).catch(function(t){n.hasError=true;console.error(t);n.requestFinished=true})},onOpenChat:function t(e){this.popupInstance.destroy();BXIM.openMessenger(this.value)},onOpenHistory:function t(e){this.popupInstance.destroy();BXIM.openHistory(this.value)}},computed:{avatarStyles:function t(){var e={};if(this.emptyAvatar){e.backgroundColor=this.chat.color}return e},userAvatar:function t(){if(this.emptyAvatar){return"/bitrix/js/im/images/blank.gif"}else{return this.user.avatar}},emptyAvatar:function t(){return this.user.avatar===""||this.user.avatar.indexOf("/bitrix/js/im/images/blank.gif")>=0},botStyles:function t(){return"bx-messenger-user-bot"},userStatusText:function t(){return BX.MessengerCommon.getUserStatus(this.user.id,false).statusText},userStatusClass:function t(){return"bx-messenger-panel-avatar-status-"+BX.MessengerCommon.getUserStatus(this.user.id,true)},userPosition:function t(){return BX.MessengerCommon.getUserPosition(this.user.id)}},template:'\n\t\t<div class="bx-messenger-external-data" style="width: 272px; max-width: 272px; height: 100px;">\n\t\t\t<div v-if="requestFinished && !hasError">\n\t\t\t\t<div class="bx-messenger-external-avatar">\n\t\t\t\t\t<div :class="[userStatusClass, \'bx-messenger-panel-avatar\']">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t:src="userAvatar"\n\t\t\t\t\t\t\t:style="avatarStyles"\n\t\t\t\t\t\t\t:class="[emptyAvatar ? \'bx-messenger-panel-avatar-img-default\' : \'\', \'bx-messenger-panel-avatar-img\']"\n\t\t\t\t\t\t\t:alt="user.name"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span :title="userStatusText" class="bx-messenger-panel-avatar-status"></span>\n\t\t\t\t\t</div>\n\t\n\t\t\t\t\t<span v-if="user.extranet" class="bx-messenger-panel-title"><div class="bx-messenger-user-extranet">{{ user.name }}</div></span>\n\t\t\t\t\t<span v-else-if="user.bot" class="bx-messenger-panel-title"><div :class="botStyles">{{ user.name }}</div></span>\n\t\t\t\t\t<span v-else class="bx-messenger-panel-title">{{ user.name }}</span>\n\t\n\t\t\t\t\t<span class="bx-messenger-panel-desc">{{ userPosition }}</span>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-messenger-external-data-buttons">\n\t\t\t\t\t<span class="bx-notifier-item-button bx-notifier-item-button-white" @click="onOpenChat">\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_USER_OPEN_CHAT\') }}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="bx-notifier-item-button bx-notifier-item-button-white" @click="onOpenHistory">\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_OPEN_HISTORY\') }}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span v-else-if="!requestFinished && !hasError" class="bx-messenger-content-load-img"></span>\n\t\t\t<div v-else-if="requestFinished && hasError">\n\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_NO_ACCESS\') }}\n\t\t\t</div>\n\t\t</div>\n\t'};var r={props:["value","popupInstance"],data:function t(){return{users:{},hasError:false,requestFinished:false}},created:function t(){var e=this.isNeedUserRequest(this.value);if(e){this.requestUserData(this.value)}else{this.users=this.getUsersForPopup();this.requestFinished=true}},mounted:function t(){this.popupInstance.show()},beforeDestroy:function t(){this.popupInstance.destroy()},computed:{popupHeight:function t(){var e=this.value.length*30;if(e>150){e=150}return e+"px"}},methods:{getUser:function t(e){return this.$store.getters["users/get"](e)},getUsersForPopup:function t(){var e=this;return this.value.map(function(t){return e.getUser(t)})},getUserAvatar:function t(e){if(this.isEmptyAvatar(e)){return"/bitrix/js/im/images/blank.gif"}else{return e.avatar}},isEmptyAvatar:function t(e){return e.avatar===""||e.avatar.indexOf("/bitrix/js/im/images/blank.gif")>=0},getAvatarStyles:function t(e){var s={};if(this.isEmptyAvatar(e)){s.backgroundColor=e.color}return s},getUserStatusClass:function t(e){return"bx-notifier-popup-avatar-status-".concat(e.status)},isNeedUserRequest:function t(e){for(var s=0;s<e.length;s++){if(!this.getUser(e[s])){return true}}return false},requestUserData:function t(e){var n=this;this.$Bitrix.RestClient.get().callMethod(s.RestMethod.imUserListGet,{ID:e}).then(function(t){n.$Bitrix.Data.get("controller").executeRestAnswer(s.RestMethodHandler.imUserListGet,t);n.users=n.getUsersForPopup();n.requestFinished=true}).catch(function(t){n.hasError=true;console.error(t);n.requestFinished=true})},onUserClick:function t(e){this.popupInstance.destroy();BXIM.openMessenger(e)}},template:'\n\t\t<div\n\t\t\tclass="bx-im-vue-popup-container" \n\t\t\t:style="{height: popupHeight, width: \'180px\', display: \'flex\', alignItems: \'center\', justifyContent: \'center\'}"\n\t\t>\n\t\t\t<span v-if="requestFinished && !hasError" class="bx-notifier-item-help-popup">\n\t\t\t\t<a \n\t\t\t\t\tv-for="user in users"\n\t\t\t\t\tclass="bx-notifier-item-help-popup-img"\n\t\t\t\t\t@click.prevent="onUserClick(user.id)"\n\t\t\t\t>\n\t\t\t\t\t<span :class="[getUserStatusClass(user), \'bx-notifier-popup-avatar\']">\n\t\t\t\t\t\t<img \n\t\t\t\t\t\t\t:src="getUserAvatar(user)"\n\t\t\t\t\t\t\t:class="[\'bx-notifier-popup-avatar-img\', isEmptyAvatar(user) ? \'bx-notifier-popup-avatar-img-default\' : \'\']"\n\t\t\t\t\t\t\t:style="getAvatarStyles(user)"\n\t\t\t\t\t\t\t:alt="user.name"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span \n\t\t\t\t\t\t:class="[\'bx-notifier-item-help-popup-name\', user.extranet ? \'bx-notifier-popup-avatar-extranet\' : \'\']"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ user.name }}\n\t\t\t\t\t</span>\n\t\t\t\t</a>\n\t\t\t</span>\n\t\t\t<span v-else-if="!requestFinished && !hasError" class="bx-messenger-content-load-img"></span>\n\t\t\t<div v-else-if="requestFinished && hasError">\n\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_VIEW_POPUP_CONTENT_NO_ACCESS\') }}\n\t\t\t</div>\n\t\t</div>\n\t'};var i={props:["type","value","popupInstance"],components:{Chat:n,User:a,Users:r},template:'\n\t\t<component :is="type" :value="value" :popupInstance="popupInstance"/>\n\t'};t.Popup=i})(this.BX.Messenger.View=this.BX.Messenger.View||{},BX,BX.Messenger.Const);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:85:"/local/js/im/component/notifications/dist/notifications.bundle.min.js?165475981747876";s:6:"source";s:65:"/local/js/im/component/notifications/dist/notifications.bundle.js";s:3:"min";s:69:"/local/js/im/component/notifications/dist/notifications.bundle.min.js";s:3:"map";s:69:"/local/js/im/component/notifications/dist/notifications.bundle.map.js";}"*/
this.BX=this.BX||{};(function(t,e,i,n,s,o,a,r,c,l,u,d,f,h,p,m){"use strict";var g={props:["listItem"],data:function t(){return{quickAnswerText:"",quickAnswerResultMessage:"",showQuickAnswer:false,isSendingQuickAnswer:false,successSentQuickAnswer:false}},methods:{toggleQuickAnswer:function t(){var e=this;if(this.successSentQuickAnswer){this.showQuickAnswer=true;this.successSentQuickAnswer=false;this.quickAnswerResultMessage=""}else{this.showQuickAnswer=!this.showQuickAnswer}if(this.showQuickAnswer){this.$nextTick(function(){e.$refs["input"].focus()})}},sendQuickAnswer:function t(e){var i=this;if(this.quickAnswerText.trim()===""){return}this.isSendingQuickAnswer=true;var n=e.item.id;this.$Bitrix.RestClient.get().callMethod("im.notify.answer",{notify_id:n,answer_text:this.quickAnswerText}).then(function(t){i.quickAnswerResultMessage=t.data().result_message[0];i.successSentQuickAnswer=true;i.quickAnswerText="";i.isSendingQuickAnswer=false}).catch(function(t){console.error(t);i.quickAnswerResultMessage=result.data().result_message[0];i.isSendingQuickAnswer=false})}},template:'\n\t\t<div class="bx-notifier-item-text-vue">\n\t\t\t<div class="bx-notifier-answer-link-vue">\n\t\t\t\t<span class="bx-notifier-answer-reply bx-messenger-ajax" @click="toggleQuickAnswer()" @dblclick.stop>\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_QUICK_ANSWER_BUTTON\') }}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<transition name="quick-answer-slide">\n\t\t\t\t<div v-if="showQuickAnswer && !successSentQuickAnswer" class="bx-notifier-answer-box-vue">\n\t\t\t\t\t<span v-if="isSendingQuickAnswer" class="bx-notifier-answer-progress-vue bx-messenger-content-load-img"></span>\n\t\t\t\t\t<span class="bx-notifier-answer-input">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tref="input"\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t\tclass="bx-messenger-input"\n\t\t\t\t\t\t\tv-model="quickAnswerText"\n\t\t\t\t\t\t\t:disabled="isSendingQuickAnswer"\n\t\t\t\t\t\t\t@keyup.enter="sendQuickAnswer({item: listItem, event: $event})"\n\t\t\t\t\t\t>\n\t\t\t\t\t</span>\n\t\t\t\t\t<div class="bx-notifier-answer-button" @click="sendQuickAnswer({item: listItem, event: $event})"></div>\n\t\t\t\t</div>\n\t\t\t</transition>\n\t\t\t<div v-if="successSentQuickAnswer" class="bx-notifier-answer-text-vue">\n\t\t\t\t{{ quickAnswerResultMessage }}\n\t\t\t</div>\n\t\t</div>\n\t'};var v={props:["listItem"],computed:{moreUsers:function t(){var e=this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_MORE_USERS").split("#COUNT#");return{start:e[0],end:this.listItem.params.USERS.length+e[1]}},isMoreUsers:function t(){return this.listItem.params.hasOwnProperty("USERS")&&this.listItem.params.USERS.length>0},isAbleToDelete:function t(){return this.listItem.sectionCode===h.NotificationTypesCodes.simple}},methods:{onDeleteClick:function t(e){if(e.item.sectionCode===h.NotificationTypesCodes.simple){this.$emit("deleteClick",e)}},onMoreUsersClick:function t(e){if(e.users){this.$emit("moreUsersClick",{event:e.event,content:{type:"USERS",value:e.users}})}},onUserTitleClick:function t(e){if(window.top["BXIM"]&&e.userId>0){window.top["BXIM"].openMessenger(e.userId)}}},template:'\n\t\t<div class="bx-im-notifications-item-content-header">\n\t\t\t<div v-if="listItem.title" class="bx-im-notifications-item-header-title">\n\t\t\t\t<span\n\t\t\t\t\tv-if="!listItem.systemType"\n\t\t\t\t\t@click.prevent="onUserTitleClick({userId: listItem.authorId, event: $event})"\n\t\t\t\t\tclass="bx-im-notifications-item-header-title-text"\n\t\t\t\t>\n\t\t\t\t\t{{ listItem.title.value }}\n\t\t\t\t</span>\n\t\t\t\t<span v-else-if="listItem.systemType" class="bx-im-notifications-item-bottom-subtitle-text" v-html="listItem.subtitle.value"></span>\n\t\t\t\t<span\n\t\t\t\t\tv-if="isMoreUsers && !listItem.systemType"\n\t\t\t\t\tclass="bx-im-notifications-item-header-more-users"\n\t\t\t\t>\n\t\t\t\t\t{{ moreUsers.start }}\n\t\t\t\t\t<span class="bx-messenger-ajax" @click="onMoreUsersClick({users: listItem.params.USERS, event: $event})">\n\t\t\t\t\t\t{{ moreUsers.end }}\n\t\t\t\t\t</span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-notifications-item-content-header-right">\n\t\t\t\t<div class="bx-im-notifications-item-header-date">\n\t\t\t\t\t{{ listItem.date.value }}\n\t\t\t\t</div>\n\t\t\t\t<span\n\t\t\t\t\tv-if="isAbleToDelete"\n\t\t\t\t\tclass="bx-im-notifications-item-header-delete"\n\t\t\t\t\t@click="onDeleteClick({item: listItem, event: $event})">\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t'};var I={template:'\n\t\t<div style="display: flex; width: 100%;">\n\t\t\t<div class="bx-im-notifications-item-image-wrap">\n\t\t\t\t<div class="bx-im-notifications-item-image bx-im-notifications-item-placeholder-image"></div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-notifications-item-content bx-im-notifications-skeleton">\n\t\t\t\t<div class="bx-im-notifications-item-content-header">\n\t\t\t\t\t<div class="bx-im-notifications-item-placeholder-title"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-notifications-item-content-middle">\n\t\t\t\t\t<div class="bx-im-notifications-item-bottom-subtitle">\n\t\t\t\t\t\t<div class="bx-im-notifications-item-placeholder-subtitle"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-notifications-item-content-bottom">\n\t\t\t\t\t<div class="bx-im-notifications-item-bottom-subtitle">\n\t\t\t\t\t\t<div class="bx-im-notifications-item-placeholder-subtitle"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t'};var T={components:{NotificationQuickAnswer:g,NotificationItemHeader:v,NotificationPlaceholder:I},props:["rawListItem","searchMode"],data:function t(){return{menuId:"popup-window-content-bx-messenger-popup-notify"}},computed:{NotificationTypesCodes:function t(){return h.NotificationTypesCodes},listItem:function t(){return{id:this.rawListItem.id,type:this.rawListItem.type,sectionCode:this.rawListItem.sectionCode,authorId:this.rawListItem.authorId,systemType:this.rawListItem.type===4||this.rawListItem.authorId===0&&this.avatar==="",title:{value:this.userTitle},subtitle:{value:this.rawListItem.textConverted},avatar:{url:this.avatar,color:this.defaultAvatarColor},params:this.rawListItem.params||{},notifyButtons:this.rawListItem.notifyButtons||undefined,unread:this.rawListItem.unread,settingName:this.rawListItem.settingName,date:{value:f.Utils.date.format(this.rawListItem.date,null,this.$Bitrix.Loc.getMessages())}}},isRealItem:function t(){return this.rawListItem.sectionCode!==h.NotificationTypesCodes.placeholder},isNeedQuickAnswer:function t(){return this.listItem.params.CAN_ANSWER&&this.listItem.params.CAN_ANSWER==="Y"},userTitle:function t(){if(this.isRealItem&&this.rawListItem.authorId>0){return this.userData.name}else if(this.isRealItem&&this.rawListItem.authorId===0){return""}else{return""}},avatar:function t(){var t="";if(this.isRealItem&&this.rawListItem.authorId>0){t=this.userData.avatar}else if(this.isRealItem&&this.rawListItem.authorId===0){return""}return t},defaultAvatarColor:function t(){if(this.rawListItem.authorId<=0){return""}return this.userData.color},userData:function t(){return this.$store.getters["users/get"](this.rawListItem.authorId,true)},avatarStyles:function t(){return{backgroundImage:'url("'+this.listItem.avatar.url+'")'}}},methods:{onDoubleClick:function t(e){if(!this.searchMode&&e.item.sectionCode===h.NotificationTypesCodes.simple){this.$emit("dblclick",e)}},onButtonsClick:function t(e){if(e.action==="COMMAND"){this.$emit("buttonsClick",e)}},onDeleteClick:function t(e){this.$emit("deleteClick",e)},onMoreUsersClick:function t(e){this.$emit("contentClick",e)},onContentClick:function t(e){if(o.Vue.testNode(e.target,{className:"bx-im-mention"})){this.$emit("contentClick",{event:e,content:{type:e.target.dataset.type,value:e.target.dataset.value}})}},onRightClick:function t(e){var i=this;if(f.Utils.platform.isBitrixDesktop()&&e.target.tagName==="A"&&(!e.target.href.startsWith("/desktop_app/")||e.target.href.startsWith("/desktop_app/show.file.php"))){var n=e.target.href;if(!n){return}if(this.menuPopup){this.menuPopup.destroy();this.menuPopup=null}var s=d.PopupManager.getPopupById(this.menuId);if(s){s.destroy()}var o=a.Dom.create("span",{attrs:{className:"bx-messenger-popup-menu-item-text bx-messenger-popup-menu-item"},events:{click:function t(e){BX.desktop.clipboardCopy(n);i.menuPopup.destroy();i.menuPopup=null}},text:this.$Bitrix.Loc.getMessage("IM_NOTIFICATIONS_CONTEXT_COPY_LINK")});this.menuPopup=d.PopupManager.create({id:this.menuId,targetContainer:document.body,className:BX.MessengerTheme.isDark()?"bx-im-notifications-popup-window-dark":"",darkMode:BX.MessengerTheme.isDark(),bindElement:e,offsetLeft:13,autoHide:true,closeByEsc:true,events:{onPopupClose:function t(){return i.menuPopup.destroy()},onPopupDestroy:function t(){return i.menuPopup=null}},content:o});if(!BX.MessengerTheme.isDark()){this.menuPopup.setAngle({})}this.menuPopup.show()}}},template:'\n\t\t<div \n\t\t\tclass="bx-im-notifications-item"\n\t\t\t:class="[listItem.unread && !searchMode ? \'bx-im-notifications-item-unread\' : \'\']"\n\t\t\t@dblclick="onDoubleClick({item: listItem, event: $event})"\n\t\t\t@contextmenu="onRightClick"\n\t\t>\n\t\t\t<template v-if="listItem.sectionCode !== NotificationTypesCodes.placeholder">\n\t\t\t\t<div v-if="listItem.avatar" class="bx-im-notifications-item-image-wrap">\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-if="listItem.avatar.url" \n\t\t\t\t\t\tclass="bx-im-notifications-item-image"\n\t\t\t\t\t\t:style="avatarStyles"\n\t\t\t\t\t></div>\n\t\t\t\t\t<div v-else-if="listItem.systemType" class="bx-im-notifications-item-image bx-im-notifications-image-system"></div>\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-else-if="!listItem.avatar.url" \n\t\t\t\t\t\tclass="bx-im-notifications-item-image bx-im-notifications-item-image-default"\n\t\t\t\t\t\t:style="{backgroundColor: listItem.avatar.color}"\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-notifications-item-content" @click="onContentClick">\n\t\t\t\t\t<NotificationItemHeader \n\t\t\t\t\t\t:listItem="listItem"\n\t\t\t\t\t\t@deleteClick="onDeleteClick"\n\t\t\t\t\t\t@moreUsersClick="onMoreUsersClick"\n\t\t\t\t\t/>\n\t\t\t\t\t<div v-if="listItem.subtitle.value.length > 0" class="bx-im-notifications-item-content-bottom">\n\t\t\t\t\t\t<div class="bx-im-notifications-item-bottom-subtitle">\n\t\t\t\t\t\t\t<span v-if="!listItem.systemType" class="bx-im-notifications-item-bottom-subtitle-text" v-html="listItem.subtitle.value"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<NotificationQuickAnswer v-if="isNeedQuickAnswer" :listItem="listItem"/>\n\t\t\t\t\t<div v-if="listItem.params[\'ATTACH\']" class="bx-im-notifications-item-content-additional">\n\t\t\t\t\t\t<div v-for="attach in listItem.params[\'ATTACH\']">\n\t\t\t\t\t\t\t<bx-im-view-element-attach :config="attach"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="listItem.notifyButtons">\n\t\t\t\t\t\t<bx-im-view-element-keyboard @click="onButtonsClick" :buttons="listItem.notifyButtons"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<NotificationPlaceholder v-else-if="listItem.sectionCode === NotificationTypesCodes.placeholder"/>\n\t\t</div>\n\t'};var b={data:function t(){return{placeholderCount:0}},methods:{isReadyToLoadNewPage:function t(e){var i=e.target.scrollHeight-e.target.scrollTop-e.target.clientHeight;return i<200},getLastItemId:function t(e){return e[e.length-1].id},generatePlaceholders:function t(e){var i=[];for(var n=0;n<e;n++){i.push({id:"placeholder".concat(this.placeholderCount),type:h.NotificationTypesCodes.placeholder});this.placeholderCount++}return i},getRestClient:function t(){return this.$Bitrix.RestClient.get()},onContentClick:function t(e){var i=this;this.contentPopupType=e.content.type.toLowerCase();this.contentPopupValue=e.content.value;if(this.popupInstance!=null){this.popupInstance.destroy();this.popupInstance=null}if(this.contentPopupType==="user"||this.contentPopupType==="chat"){var n=!this.isDarkTheme;BXIM.messenger.openPopupExternalData(e.event.target,this.contentPopupType,n,{ID:this.contentPopupValue})}else if(this.contentPopupType==="openlines"){BX.MessengerCommon.linesGetSessionHistory(this.contentPopupValue)}else{var s=d.PopupManager.create({id:"bx-messenger-popup-external-data",targetContainer:document.body,className:this.isDarkTheme?"bx-im-notifications-popup-window-dark":"",bindElement:e.event.target,lightShadow:true,offsetTop:0,offsetLeft:10,autoHide:true,closeByEsc:true,bindOptions:{position:"top"},events:{onPopupClose:function t(){return i.popupInstance.destroy()},onPopupDestroy:function t(){return i.popupInstance=null}}});if(!this.isDarkTheme){s.setAngle({})}this.popupIdSelector="#".concat(s.getContentContainer().id);this.$nextTick(function(){return i.popupInstance=s})}}},computed:{isDarkTheme:function t(){if(this.darkTheme===undefined){return BX.MessengerTheme.isDark()}return this.darkTheme}}};var y={components:{NotificationItem:T,MountingPortal:l.MountingPortal,Popup:u.Popup},mixins:[b],props:["searchQuery","searchType","searchDate"],data:function t(){return{pageLimit:50,lastId:0,initialDataReceived:false,isLoadingNewPage:false,contentPopupType:"",contentPopupValue:"",popupInstance:null,popupIdSelector:"",searchResultsTotal:0,searchPageLoaded:0,searchPagesRequested:0}},computed:babelHelpers.objectSpread({remainingPages:function t(){return Math.ceil((this.searchResultsTotal-this.searchResults.length)/this.pageLimit)}},r.Vuex.mapState({notification:function t(e){return e.notifications.collection},searchResults:function t(e){return e.notifications.searchCollection}})),watch:{searchQuery:function t(e){if(e.length>=3||e===""){this.search()}},searchType:function t(){this.search()},searchDate:function t(e){if(BX.parseDate(e)instanceof Date||e===""){this.search()}}},created:function t(){this.searchServerDelayed=f.Utils.debounce(this.getSearchResultsFromServer,1500,this);this.search()},beforeDestroy:function t(){this.$store.dispatch("notifications/deleteSearchResults")},methods:{search:function t(){var e=this;this.resetSearchState();var i=this.notification.filter(function(t){var i=false;if(e.searchQuery.length>=3){i=t.textConverted.toLowerCase().includes(e.searchQuery.toLowerCase());if(!i){return i}}if(e.searchType!==""){i=t.settingName===e.searchType;if(!i){return i}}if(e.searchDate!==""){var n=BX.parseDate(e.searchDate);if(n instanceof Date){var s=new Date(t.date.getTime()).setHours(0,0,0,0);var o=n.setHours(0,0,0,0);i=s===o}}return i});if(i.length>0){this.$store.dispatch("notifications/setSearchResults",{notification:i,type:"local"})}var n=this.pageLimit-i.length>0;if(n>0){this.drawPlaceholders(this.pageLimit).then(function(){e.searchServerDelayed()})}else{this.searchServerDelayed()}},getSearchResultsFromServer:function t(){var e=this;var i=this.getSearchRequestParams();this.getRestClient().callMethod("im.notify.history.search",i).then(function(t){c.Logger.warn("im.notify.history.search: first page results",t.data());e.processHistoryData(t.data());e.initialDataReceived=true;e.isLoadingNewPage=false;e.searchPageLoaded++}).catch(function(t){c.Logger.warn("History request error",t)})},processHistoryData:function t(e){this.$store.dispatch("notifications/clearPlaceholders");if(e.notifications.length<=0){return false}this.lastId=this.getLastItemId(e.notifications);this.searchResultsTotal=e.total_results;this.$store.dispatch("notifications/setSearchResults",{notification:e.notifications});this.$store.dispatch("users/set",e.users);this.isLoadingNewPage=false},loadNextPage:function t(){var e=this;c.Logger.warn("Loading more search results!");var i=this.getSearchRequestParams();this.getRestClient().callMethod("im.notify.history.search",i).then(function(t){c.Logger.warn("im.notify.history.search: new page results",t.data());var i=t.data().users;var n=t.data().notifications;if(!n||n.length===0){e.$store.dispatch("notifications/clearPlaceholders");e.searchResultsTotal=e.searchResults.length;return false}e.lastId=e.getLastItemId(n);e.$store.dispatch("users/set",i);return e.$store.dispatch("notifications/updatePlaceholders",{searchCollection:true,items:n,firstItem:e.searchPageLoaded*e.pageLimit})}).then(function(){e.searchPageLoaded++;return e.onAfterLoadNextPageRequest()}).catch(function(t){e.$store.dispatch("notifications/clearPlaceholders");c.Logger.warn("History request error",t)})},onAfterLoadNextPageRequest:function t(){c.Logger.warn("onAfterLoadNextPageRequest");if(this.searchPagesRequested>0){c.Logger.warn("We have delayed requests -",this.searchPagesRequested);this.searchPagesRequested--;return this.loadNextPage()}else{c.Logger.warn("No more delayed requests, clearing placeholders");this.$store.dispatch("notifications/clearPlaceholders");this.isLoadingNewPage=false;return true}},getSearchRequestParams:function t(){var e={SEARCH_TEXT:this.searchQuery,SEARCH_TYPE:this.searchType,LIMIT:this.pageLimit,CONVERT_TEXT:"Y"};if(BX.parseDate(this.searchDate)instanceof Date){e["SEARCH_DATE"]=BX.parseDate(this.searchDate).toISOString()}if(this.lastId>0){e["LAST_ID"]=this.lastId}return e},resetSearchState:function t(){this.$store.dispatch("notifications/deleteSearchResults");this.initialDataReceived=false;this.lastId=0;this.isLoadingNewPage=true;this.placeholderCount=0;this.searchPageLoaded=0},drawPlaceholders:function t(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var i=this.generatePlaceholders(e);return this.$store.dispatch("notifications/setSearchResults",{notification:i})},onScroll:function t(e){var i=this;if(!this.isReadyToLoadNewPage(e)||!this.initialDataReceived||this.remainingPages<=0){return}if(this.isLoadingNewPage){this.drawPlaceholders(this.pageLimit).then(function(){i.searchPagesRequested++;c.Logger.warn("Already loading! Draw placeholders and add request, total - ",i.pagesRequested)})}else{c.Logger.warn("Starting new request");this.isLoadingNewPage=true;this.drawPlaceholders(this.pageLimit).then(function(){i.loadNextPage()})}},onButtonsClick:function t(e){var i=this;var n=this.getConfirmRequestParams(e);var s=+n.NOTIFY_ID;var o=this.$store.getters["notifications/getById"](s);this.getRestClient().callMethod("im.notify.confirm",n).then(function(){i.$store.dispatch("notifications/delete",{id:s});if(o.unread){i.$store.dispatch("notifications/setCounter",{unreadTotal:i.unreadCounter-1})}}).catch(function(){i.$store.dispatch("notifications/update",{id:s,fields:{display:true}})});this.$store.dispatch("notifications/update",{id:s,fields:{display:false}})},onDeleteClick:function t(e){var i=this;var n=+e.item.id;var s=this.$store.getters["notifications/getSearchItemById"](n);this.getRestClient().callMethod("im.notify.delete",{id:n}).then(function(){i.$store.dispatch("notifications/delete",{id:n,searchMode:true});if(!i.isLoadingNewPage&&i.remainingPages>0&&i.searchResults.length<15){i.isLoadingNewPage=true;i.drawPlaceholders(i.pageLimit).then(function(){i.loadNextPage()})}if(s.unread){i.$store.dispatch("notifications/setCounter",{unreadTotal:i.unreadCounter-1})}}).catch(function(t){console.error(t);i.$store.dispatch("notifications/update",{id:n,fields:{display:true},searchMode:true})});this.$store.dispatch("notifications/update",{id:n,fields:{display:false},searchMode:true})}},template:'\n\t\t<div class="bx-messenger-notifications-search-results-wrap" @scroll.passive="onScroll">\n\t\t\t<notification-item\n\t\t\t\tv-for="listItem in searchResults"\n\t\t\t\tv-if="listItem.display"\n\t\t\t\t:key="listItem.id"\n\t\t\t\t:data-id="listItem.id"\n\t\t\t\t:rawListItem="listItem"\n\t\t\t\tsearchMode="true"\n\t\t\t\t@buttonsClick="onButtonsClick"\n\t\t\t\t@contentClick="onContentClick"\n\t\t\t\t@deleteClick="onDeleteClick"\n\t\t\t/>\n\t\t\t<mounting-portal :mount-to="popupIdSelector" append v-if="popupInstance">\n\t\t\t\t<popup :type="contentPopupType" :value="contentPopupValue" :popupInstance="popupInstance"/>\n\t\t\t</mounting-portal>\n\t\t\t<div \n\t\t\t\tv-if="searchResults.length <= 0" \n\t\t\t\tstyle="padding-top: 210px; margin-bottom: 20px;"\n\t\t\t\tclass="bx-messenger-box-empty bx-notifier-content-empty" \n\t\t\t>\n\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_SEARCH_RESULTS_NOT_FOUND\') }}\n\t\t\t</div>\n\t\t</div>\n\t'};function C(t,e){var i;if(typeof Symbol==="undefined"||t[Symbol.iterator]==null){if(Array.isArray(t)||(i=w(t))||e&&t&&typeof t.length==="number"){if(i)t=i;var n=0;var s=function t(){};return{s:s,n:function e(){if(n>=t.length)return{done:true};return{done:false,value:t[n++]}},e:function t(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o=true,a=false,r;return{s:function e(){i=t[Symbol.iterator]()},n:function t(){var e=i.next();o=e.done;return e},e:function t(e){a=true;r=e},f:function t(){try{if(!o&&i.return!=null)i.return()}finally{if(a)throw r}}}}function w(t,e){if(!t)return;if(typeof t==="string")return N(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);if(i==="Object"&&t.constructor)i=t.constructor.name;if(i==="Map"||i==="Set")return Array.from(t);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return N(t,e)}function N(t,e){if(e==null||e>t.length)e=t.length;for(var i=0,n=new Array(e);i<e;i++){n[i]=t[i]}return n}var x=Object.freeze({read:"read",none:"none"});o.BitrixVue.component("bx-im-component-notifications",{components:{NotificationItem:T,MountingPortal:l.MountingPortal,Popup:u.Popup,NotificationSearchResult:y},directives:{"bx-im-directive-notifications-observer":{inserted:function t(e,i,n){if(i.value===x.none){return false}if(!n.context.observers[i.value]){n.context.observers[i.value]=n.context.getObserver({type:i.value})}n.context.observers[i.value].observe(e);return true},unbind:function t(e,i,n){if(i.value===x.none){return true}if(n.context.observers[i.value]){n.context.observers[i.value].unobserve(e)}return true}}},mixins:[b],props:{darkTheme:{default:undefined}},data:function t(){return{initialDataReceived:false,perPage:50,isLoadingInitialData:false,isLoadingNewPage:false,pagesRequested:0,pagesLoaded:0,lastId:0,lastType:h.NotificationTypesCodes.confirm,ObserverType:x,notificationsOnScreen:[],notificationsToRead:[],notificationsToDelete:[],changeReadStatusBlockTimeout:{},firstUnreadNotificationOnInit:null,contentPopupType:"",contentPopupValue:"",popupInstance:null,popupIdSelector:"",contextPopupInstance:null,searchQuery:"",searchType:"",searchDate:"",showSearch:false,callViewState:false}},computed:babelHelpers.objectSpread({NotificationTypesCodes:function t(){return h.NotificationTypesCodes},remainingPages:function t(){return Math.ceil((this.total-this.notification.length)/this.perPage)},localize:function t(){return o.BitrixVue.getFilteredPhrases("IM_NOTIFICATIONS_",this)},visibleNotifications:function t(){return this.notification.filter(function(t){return t.display})},highestNotificationId:function t(){return this.notification.reduce(function(t,e){return e.id>t?e.id:t},0)},isNeedToReadAll:function t(){var e=this.notification.filter(function(t){return t.sectionCode===h.NotificationTypesCodes.confirm}).length;return e<this.unreadCounter},panelStyles:function t(){if(this.callViewState===BX.Call.Controller.ViewState.Folded&&!this.showSearch){return{paddingBottom:"60px"}}return{}},filterBoxStyles:function t(){if(this.callViewState===BX.Call.Controller.ViewState.Folded&&this.showSearch){return{paddingTop:"70px"}}return{}},firstUnreadNotification:function t(){var e=null;var i=this.notification.length-1;for(var n=0;n<=i;n++){if(this.notification[n].unread&&this.notification[n].sectionCode!==h.NotificationTypesCodes.placeholder){e=this.notification[n];break}}return e},firstUnreadNotificationBelowVisible:function t(){var e=Math.max.apply(Math,babelHelpers.toConsumableArray(this.notificationsOnScreen));var i=null;var n=this.notification.length-1;for(var s=0;s<=n;s++){if(this.notification[s].unread&&e>this.notification[s].id&&this.notification[s].sectionCode===h.NotificationTypesCodes.simple){i=this.notification[s].id;break}}return i},isUnreadNotificationVisible:function t(){var e=this;var i=Array.from(this.notificationsOnScreen).filter(function(t){var i=e.$store.getters["notifications/getById"](t);return i?i.unread:false});return i.length>0},showScrollButton:function t(){if(!this.initialDataReceived){return false}if(this.unreadCounter<=0||!BXIM.settings.notifyAutoRead){return false}if(this.notificationsOnScreen.length===0){return false}if(this.isUnreadNotificationVisible){return false}return true},hasUnreadBelowVisible:function t(){var e=0;for(var i=0;i<=this.notification.length-1;i++){if(this.notification[i].unread&&this.notification[i].sectionCode!==h.NotificationTypesCodes.placeholder){++e}if(this.notificationsOnScreen.includes(this.notification[i].id)&&this.unreadCounter===e){return false}}return true},arrowButtonClass:function t(){var e=!this.hasUnreadBelowVisible;return{"bx-im-notifications-scroll-button-arrow-down":!e,"bx-im-notifications-scroll-button-arrow-up":e,"bx-im-notifications-scroll-button-arrow":true}},filterTypes:function t(){var e=Object.assign({},this.schema);var i=["timeman","mail","disk","bizproc","voximplant","sender","blog","vote","socialnetwork","imopenlines","photogallery","intranet","forum"];i.forEach(function(t){if(e.hasOwnProperty(t)){delete e[t].LIST}});if(e.hasOwnProperty("calendar")){e["calendar"].NAME=this.localize["IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_CALENDAR"]}if(e.hasOwnProperty("sender")){e["sender"].NAME=this.localize["IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_SENDER"]}if(e.hasOwnProperty("blog")){e["blog"].NAME=this.localize["IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_BLOG"]}if(e.hasOwnProperty("socialnetwork")){e["socialnetwork"].NAME=this.localize["IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_SOCIALNETWORK"]}if(e.hasOwnProperty("intranet")){e["intranet"].NAME=this.localize["IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_INTRANET"]}var n=["tasks","calendar","crm","timeman","mail","disk","bizproc","voximplant","sender","blog","vote","socialnetwork","imopenlines","photogallery","intranet","forum"];var s=[];n.forEach(function(t){if(e.hasOwnProperty(t)){s.push(e[t])}});return s}},r.Vuex.mapState({notification:function t(e){return e.notifications.collection},total:function t(e){return e.notifications.total},unreadCounter:function t(e){return e.notifications.unreadCounter},schema:function t(e){return e.notifications.schema}})),created:function t(){var e=this;this.drawPlaceholders().then(function(){e.getInitialData()});m.EventEmitter.subscribe(h.EventType.notification.updateState,this.onUpdateState);window.addEventListener("focus",this.onWindowFocus);window.addEventListener("blur",this.onWindowBlur);if(BXIM&&BX.Call){this.callViewState=BXIM.callController.callViewState;BXIM.callController.subscribe(BX.Call.Controller.Events.onViewStateChanged,this.onCallViewStateChange)}this.timer=new p.Timer;this.readNotificationsQueue=new Set;this.readNotificationsNodes={};this.observers={};this.readVisibleNotificationsDelayed=f.Utils.debounce(this.readVisibleNotifications,50,this)},mounted:function t(){this.windowFocused=document.hasFocus()},beforeDestroy:function t(){this.observers={};window.removeEventListener("focus",this.onWindowFocus);window.removeEventListener("blur",this.onWindowBlur);m.EventEmitter.unsubscribe(h.EventType.notification.updateState,this.onUpdateState);if(BXIM&&BX.Call){BXIM.callController.unsubscribe(BX.Call.Controller.Events.onViewStateChanged,this.onCallViewStateChange)}},methods:{getFirstUnreadNotificationOnInit:function t(){if(this.unreadCounter<=0){return null}var e=null;var i=this.notification.length-1;for(var n=0;n<=i;n++){if(this.notification[n].unread){e=this.notification[n].id;break}}return e},onCallViewStateChange:function t(e){var i=e.data;this.callViewState=i.callViewState},onUpdateState:function t(e){var i=e.data.lastId;if(!this.isLoadingInitialData&&this.highestNotificationId>0&&i!==this.highestNotificationId){this.getInitialData()}},readVisibleNotifications:function t(){var e=this;if(!this.windowFocused||!BXIM.settings.notifyAutoRead){c.Logger.warn("reading is disabled!");return false}this.readNotificationsQueue.forEach(function(t){if(e.readNotificationsNodes[t]){delete e.readNotificationsNodes[t]}e.readNotifications(parseInt(t,10))});this.readNotificationsQueue.clear()},getInitialData:function t(){var e,i=this;this.isLoadingInitialData=true;var n=(e={},babelHelpers.defineProperty(e,h.RestMethodHandler.imNotifyGet,[h.RestMethod.imNotifyGet,{LIMIT:this.perPage,CONVERT_TEXT:"Y"}]),babelHelpers.defineProperty(e,h.RestMethodHandler.imNotifySchemaGet,[h.RestMethod.imNotifySchemaGet,{}]),e);this.getRestClient().callBatch(n,function(t){c.Logger.warn("im.notify.get: initial result",t[h.RestMethodHandler.imNotifyGet].data());i.processInitialData(t[h.RestMethodHandler.imNotifyGet].data());i.processSchemaData(t[h.RestMethodHandler.imNotifySchemaGet].data());i.pagesLoaded++;i.isLoadingInitialData=false;i.firstUnreadNotificationOnInit=i.getFirstUnreadNotificationOnInit()},false,false)},processInitialData:function t(e){if(!e.notifications||e.notifications.length===0){this.$store.dispatch("notifications/clearPlaceholders");this.$store.dispatch("notifications/setTotal",{total:this.notification.length});return false}this.lastId=this.getLastItemId(e.notifications);this.lastType=this.getLastItemType(e.notifications);this.$store.dispatch("notifications/clearPlaceholders");this.$store.dispatch("notifications/setCounter",{unreadTotal:e.total_unread_count});this.$store.dispatch("notifications/set",{notification:e.notifications,total:e.total_count});this.$store.dispatch("users/set",e.users);this.updateRecentList(e.total_unread_count,true);this.initialDataReceived=true},processSchemaData:function t(e){this.$store.dispatch("notifications/setSchema",{data:e})},drawPlaceholders:function t(){var e=this.generatePlaceholders(this.perPage);return this.$store.dispatch("notifications/set",{notification:e})},loadNextPage:function t(){var e=this;c.Logger.warn("Loading more notifications!");var i={LIMIT:this.perPage,LAST_ID:this.lastId,LAST_TYPE:this.lastType,CONVERT_TEXT:"Y"};this.getRestClient().callMethod("im.notify.get",i).then(function(t){c.Logger.warn("im.notify.get: new page results",t.data());var i=t.data().users;var n=t.data().notifications;if(!n||n.length===0){e.$store.dispatch("notifications/clearPlaceholders");e.$store.dispatch("notifications/setTotal",{total:e.notification.length});return false}e.lastId=e.getLastItemId(n);e.lastType=e.getLastItemType(n);e.$store.dispatch("users/set",i);return e.$store.dispatch("notifications/updatePlaceholders",{items:n,firstItem:e.pagesLoaded*e.perPage})}).then(function(){e.pagesLoaded++;c.Logger.warn("Page loaded. Total loaded - ",e.pagesLoaded);return e.onAfterLoadNextPageRequest()}).catch(function(t){c.Logger.warn("Request history error",t)})},onAfterLoadNextPageRequest:function t(){c.Logger.warn("onAfterLoadNextPageRequest");if(this.pagesRequested>0){c.Logger.warn("We have delayed requests -",this.pagesRequested);this.pagesRequested--;return this.loadNextPage()}else{c.Logger.warn("No more delayed requests, clearing placeholders");this.$store.dispatch("notifications/clearPlaceholders");this.isLoadingNewPage=false;return true}},changeReadStatus:function t(e){var i=this;this.$store.dispatch("notifications/read",{ids:[e.id],action:e.unread});var n=this.unreadCounter;var s=e.unread?this.unreadCounter-1:this.unreadCounter+1;this.updateRecentList(s);this.$store.dispatch("notifications/setCounter",{unreadTotal:s});clearTimeout(this.changeReadStatusBlockTimeout[e.id]);this.changeReadStatusBlockTimeout[e.id]=setTimeout(function(){i.getRestClient().callMethod("im.notify.read",{id:e.id,action:e.unread?"Y":"N",only_current:"Y"}).then(function(){c.Logger.warn("Notification ".concat(e.id," unread status set to ").concat(!e.unread))}).catch(function(t){console.error(t);i.$store.dispatch("notifications/read",{ids:[e.id],action:!e.unread});i.updateRecentList(n);i.$store.dispatch("notifications/setCounter",{unreadTotal:n})})},1500)},delete:function t(e){var i=this;var n=+e.id;this.notificationsToDelete.push(n);var s=this.$store.getters["notifications/getById"](n);this.$store.dispatch("notifications/update",{id:n,fields:{display:false}});var o=this.unreadCounter;var a=s.unread?this.unreadCounter-1:this.unreadCounter;this.updateRecentList(a,true);this.$store.dispatch("notifications/setCounter",{unreadTotal:a});this.timer.stop("deleteNotificationServer","notifications",true);this.timer.start("deleteNotificationServer","notifications",.5,function(){var t=i.notificationsToDelete;i.notificationsToDelete=[];i.getRestClient().callMethod("im.notify.delete",{id:t}).then(function(){t.forEach(function(t){i.$store.dispatch("notifications/delete",{id:t})})}).catch(function(e){console.error(e);t.forEach(function(t){i.$store.dispatch("notifications/update",{id:t,fields:{display:true}})});i.updateRecentList(o,true);i.$store.dispatch("notifications/setCounter",{unreadTotal:o})})})},getObserver:function t(e){var i=this;if(typeof window.IntersectionObserver==="undefined"||e.type===x.none){return{observe:function t(){},unobserve:function t(){}}}var n=function t(e){e.forEach(function(t){var e=false;var n=parseInt(t.target.dataset.id,10);if(t.isIntersecting){if(t.intersectionRatio>=.99){e=true;i.notificationsOnScreen.push(n)}else if(t.intersectionRatio>0&&t.intersectionRect.height>t.rootBounds.height/2){e=true;i.notificationsOnScreen.push(n)}else{i.notificationsOnScreen=i.notificationsOnScreen.filter(function(t){return t!==n})}}else{i.notificationsOnScreen=i.notificationsOnScreen.filter(function(t){return t!==n})}if(e){i.readNotificationsQueue.add(n);i.readNotificationsNodes[n]=t.target}else{i.readNotificationsQueue.delete(n);delete i.readNotificationsNodes[n]}i.readVisibleNotificationsDelayed()})};var s={root:this.$refs["listNotifications"],threshold:new Array(101).fill(0).map(function(t,e){return e*.01})};return new IntersectionObserver(n,s)},onScroll:function t(e){var i=this;if(!this.isReadyToLoadNewPage(e)){return}if(this.remainingPages===0||!this.initialDataReceived){return}if(this.isLoadingNewPage){this.drawPlaceholders().then(function(){i.pagesRequested++;c.Logger.warn("Already loading! Draw placeholders and add request, total - ",i.pagesRequested)})}else{c.Logger.warn("Starting new request");this.isLoadingNewPage=true;this.drawPlaceholders().then(function(){i.loadNextPage()})}},onWindowFocus:function t(){this.windowFocused=true;this.readVisibleNotifications()},onWindowBlur:function t(){this.windowFocused=false},onDoubleClick:function t(e){this.changeReadStatus(e.item)},onButtonsClick:function t(e){var i=this;var n=this.getConfirmRequestParams(e);var s=+n.NOTIFY_ID;this.$store.dispatch("notifications/update",{id:s,fields:{display:false}});var o=this.unreadCounter;var a=this.unreadCounter-1;this.updateRecentList(a,true);this.$store.dispatch("notifications/setCounter",{unreadTotal:a});this.getRestClient().callMethod("im.notify.confirm",n).then(function(){i.$store.dispatch("notifications/delete",{id:s})}).catch(function(){i.$store.dispatch("notifications/update",{id:s,fields:{display:true}});i.updateRecentList(o,true);i.$store.dispatch("notifications/setCounter",{unreadTotal:o})})},onDeleteClick:function t(e){var i=this;this.delete(e.item);if(!this.isLoadingNewPage&&this.remainingPages>0&&this.notification.length===this.perPage-1){this.isLoadingNewPage=true;this.drawPlaceholders().then(function(){i.loadNextPage()})}},onRightClick:function t(e){var i=this;if(this.contextPopupInstance!==null){this.closeContextMenuPopup()}var n=this.getContextMenu(e.item);this.contextPopupInstance=d.MenuManager.create({id:"bx-messenger-context-popup-external-data",bindElement:e.event,items:n,events:{onPopupClose:function t(){return i.contextPopupInstance.destroy()},onPopupDestroy:function t(){return i.contextPopupInstance=null}}});this.contextPopupInstance.show()},onDateFilterClick:function t(e){var i=this;if(typeof BX!=="undefined"&&BX.calendar&&BX.calendar.get().popup){BX.calendar.get().popup.close()}BX.calendar({node:e.target,field:e.target,bTime:false,callback_after:function t(){i.searchDate=e.target.value}});return false},getContextMenu:function t(e){var i=this;var n=e.unread?this.localize["IM_NOTIFICATIONS_CONTEXT_POPUP_SET_READ"]:this.localize["IM_NOTIFICATIONS_CONTEXT_POPUP_SET_UNREAD"];var s=a.Type.isUndefined(BXIM.settingsNotifyBlocked[e.settingName])?this.localize["IM_NOTIFICATIONS_CONTEXT_POPUP_DONT_NOTIFY"]:this.localize["IM_NOTIFICATIONS_CONTEXT_POPUP_NOTIFY"];return[{text:n,onclick:function t(n,s){i.changeReadStatus(e);i.closeContextMenuPopup()}},{text:this.localize["IM_NOTIFICATIONS_CONTEXT_POPUP_DELETE_NOTIFICATION"],onclick:function t(n,s){i.delete(e);i.closeContextMenuPopup()}},{text:s,onclick:function t(n,s){console.log(e);i.closeContextMenuPopup()}}]},closeContextMenuPopup:function t(){this.contextPopupInstance.destroy();this.contextPopupInstance=null},getConfirmRequestParams:function t(e){if(e.params){var i=e.params.params.split("|");return{NOTIFY_ID:i[0],NOTIFY_VALUE:i[1]}}return null},readNotifications:function t(e){var i=this;var n=this.$store.getters["notifications/getById"](e);if(n.unread===false||n.sectionCode===h.NotificationTypesCodes.confirm){return false}this.notificationsToRead.push(e);this.$store.dispatch("notifications/read",{ids:[e],action:true});var s=this.unreadCounter;var o=this.unreadCounter-1;this.$store.dispatch("notifications/setCounter",{unreadTotal:o});this.updateRecentList(o);this.timer.stop("readNotificationServer","notifications",true);this.timer.start("readNotificationServer","notifications",.5,function(){var t=i.notificationsToRead;i.notificationsToRead=[];var e=false;if(i.firstUnreadNotificationOnInit!==null){e=Math.max.apply(Math,babelHelpers.toConsumableArray(t))<=i.firstUnreadNotificationOnInit}var n="im.notify.read.list";var o={ids:t,action:"Y"};if(e){var a=Math.min.apply(Math,babelHelpers.toConsumableArray(t));n="im.notify.read";o={id:a,action:"Y"}}i.getRestClient().callMethod(n,o).then(function(){c.Logger.warn("I have read the notifications",o)}).catch(function(){i.$store.dispatch("notifications/read",{ids:t,action:false});i.$store.dispatch("notifications/setCounter",{unreadTotal:s});i.updateRecentList(s)})})},getLastItemType:function t(e){return this.getItemType(e[e.length-1])},getItemType:function t(e){if(e.notify_type===h.NotificationTypesCodes.confirm){return h.NotificationTypesCodes.confirm}else{return h.NotificationTypesCodes.simple}},getLatest:function t(){var e={id:0};var i=C(this.notification),n;try{for(i.s();!(n=i.n()).done;){var s=n.value;if(s.id>e.id){e=s}}}catch(t){i.e(t)}finally{i.f()}return e},showConfirmPopupOnReadAll:function t(){var e=this.readAll.bind(this);BXIM.openConfirm(this.localize["IM_NOTIFICATIONS_READ_ALL_WARNING_POPUP"],[new BX.PopupWindowButton({text:this.localize["IM_NOTIFICATIONS_READ_ALL_WARNING_POPUP_YES"],className:"popup-window-button-accept",events:{click:function t(){e();this.popupWindow.close()}}}),new BX.PopupWindowButton({text:this.localize["IM_NOTIFICATIONS_READ_ALL_WARNING_POPUP_CANCEL"],className:"popup-window-button",events:{click:function t(){this.popupWindow.close()}}})])},readAll:function t(){var e=this;if(this.notification.lastId<=0){return}if(!this.isNeedToReadAll){return false}this.$store.dispatch("notifications/readAll");var i=this.notification.filter(function(t){return t.sectionCode===h.NotificationTypesCodes.confirm});this.$store.dispatch("notifications/setCounter",{unreadTotal:i.length});this.updateRecentList(i.length);this.getRestClient().callMethod("im.notify.read",{id:0,action:"Y"}).catch(function(t){e.getInitialData();console.error(t)})},updateRecentList:function t(e){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n={counter:e};if(i){var s=this.getLatest();n.message={id:s.id,text:s.text,date:s.date}}this.$store.dispatch("recent/update",{id:"notify",fields:n})},onScrollButtonClick:function t(e){if(this.isLoadingNewPage||!this.initialDataReceived){return false}var i=null;if(this.firstUnreadNotificationBelowVisible!==null){i=this.firstUnreadNotificationBelowVisible}else if(!this.hasUnreadBelowVisible){i=this.firstUnreadNotification.id}var n=null;if(i!==null){var s='.bx-im-notifications-item[data-id="'.concat(i,'"]');n=document.querySelector(s)}if(n){this.animatedScrollToPosition({start:this.$refs["listNotifications"].scrollTop,end:n.offsetTop})}else{var o=this.notification[this.notification.length-1];var a='.bx-im-notifications-item[data-id="'.concat(o.id,'"]');var r=document.querySelector(a);this.animatedScrollToPosition({start:this.$refs["listNotifications"].scrollTop,end:r.offsetTop})}},animatedScrollToPosition:function t(){var i=this;var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(this.animateScrollId){e.Animation.cancel(this.animateScrollId);this.scrollAnimating=false}if(typeof n==="function"){n={callback:n}}var s=this.$refs.listNotifications;var o=n,a=o.start,r=a===void 0?s.scrollTop:a,c=o.end,l=c===void 0?s.scrollHeight-s.clientHeight:c,u=o.increment,d=u===void 0?20:u,f=o.callback,h=o.duration,p=h===void 0?500:h;if(s&&l-r>s.offsetHeight*3){r=l-s.offsetHeight*3}this.scrollAnimating=true;this.animateScrollId=e.Animation.start({start:r,end:l,increment:d,duration:p,element:s,elementProperty:"scrollTop",callback:function t(){i.animateScrollId=null;i.scrollAnimating=false;if(f&&typeof f==="function"){f()}}})}},template:'\n\t\t<div class="bx-messenger-next-notify">\n\t\t\t<div class="bx-messenger-panel-next-wrapper" :style="panelStyles">\n\t\t\t\t<div class="bx-messenger-panel-next">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span \n\t\t\t\t\t\t\tclass="bx-messenger-panel-avatar bx-im-notifications-image-system bx-im-notifications-header-image"\n\t\t\t\t\t\t></span>\n\t\t\t\t\t\t<span class="bx-messenger-panel-title bx-messenger-panel-title-middle" style="flex-shrink: 0;">\n\t\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_HEADER\') }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="notification.length > 0" class="bx-im-notifications-header-buttons">\n\t\t\t\t\t\t<transition name="notifications-read-all-fade">\n\t\t\t\t\t\t\t<div v-if="isNeedToReadAll" class="bx-im-notifications-header-read-all">\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\'bx-messenger-panel-button bx-im-notifications-header-read-all-icon\'\n\t\t\t\t\t\t\t\t\t@click="showConfirmPopupOnReadAll"\n\t\t\t\t\t\t\t\t\t:title="$Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_READ_ALL_BUTTON\')"\n\t\t\t\t\t\t\t\t></span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t\t<div class="bx-im-notifications-header-filter">\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t:class="[\'bx-messenger-panel-button bx-messenger-panel-history bx-im-notifications-header-filter-icon\', (showSearch? \'bx-im-notifications-header-filter-active\': \'\')]"\n\t\t\t\t\t\t\t\t@click="showSearch = !showSearch"\n\t\t\t\t\t\t\t\t:title="$Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_SEARCH_FILTER_OPEN_BUTTON\')"\n\t\t\t\t\t\t\t></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-if="showSearch" class="bx-im-notifications-header-filter-box" :style="filterBoxStyles">\n\t\t\t\t\t<div class="ui-ctl ui-ctl-after-icon ui-ctl-dropdown ui-ctl-xs ui-ctl-w25">\n\t\t\t\t\t\t<div class="ui-ctl-after ui-ctl-icon-angle"></div>\n\t\t\t\t\t\t<select class="ui-ctl-element" v-model="searchType">\n\t\t\t\t\t\t\t<option value="">\n\t\t\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_SEARCH_FILTER_TYPE_PLACEHOLDER\') }}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t<template v-for="group in filterTypes">\n\t\t\t\t\t\t\t\t<template v-if="group.LIST">\n\t\t\t\t\t\t\t\t\t<optgroup :label="group.NAME">\n\t\t\t\t\t\t\t\t\t\t<option v-for="option in group.LIST" :value="option.ID">\n\t\t\t\t\t\t\t\t\t\t\t{{ option.NAME }}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t<template v-else>   \n\t\t\t\t\t\t\t\t\t<option :value="group.MODULE_ID">\n\t\t\t\t\t\t\t\t\t\t{{ group.NAME }}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="ui-ctl ui-ctl-textbox ui-ctl-after-icon ui-ctl-xs ui-ctl-w50"> \n\t\t\t\t\t\t<button class="ui-ctl-after ui-ctl-icon-clear" @click.prevent="searchQuery=\'\'"></button>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t\ttype="text" \n\t\t\t\t\t\t\tclass="ui-ctl-element" \n\t\t\t\t\t\t\tv-model="searchQuery" \n\t\t\t\t\t\t\t:placeholder="$Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_SEARCH_FILTER_TEXT_PLACEHOLDER\')"\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="ui-ctl ui-ctl-after-icon ui-ctl-before-icon ui-ctl-xs ui-ctl-w25">\n\t\t\t\t\t\t<div class="ui-ctl-before ui-ctl-icon-calendar"></div>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype="text" \n\t\t\t\t\t\t\tclass="ui-ctl-element ui-ctl-textbox" \n\t\t\t\t\t\t\tv-model="searchDate"\n\t\t\t\t\t\t\t@focus.prevent.stop="onDateFilterClick"\n\t\t\t\t\t\t\t@click.prevent.stop="onDateFilterClick"\n\t\t\t\t\t\t\t:placeholder="$Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_SEARCH_FILTER_DATE_PLACEHOLDER\')"\n\t\t\t\t\t\t\treadonly\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button class="ui-ctl-after ui-ctl-icon-clear" @click.prevent="searchDate=\'\'"></button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div \n\t\t\t\tv-if="showSearch && (searchQuery.length >= 3 || searchType !== \'\' || searchDate !== \'\')" \n\t\t\t\tclass="bx-messenger-list-notifications-wrap"\n\t\t\t>\n\t\t\t\t<NotificationSearchResult :searchQuery="searchQuery" :searchType="searchType" :searchDate="searchDate"/>\n\t\t\t</div>\n\t\t\t<div v-else class="bx-messenger-list-notifications-wrap">\n\t\t\t\t<div :class="[ darkTheme ? \'bx-messenger-dark\' : \'\', \'bx-messenger-list-notifications\']" @scroll.passive="onScroll" ref="listNotifications">\n\t\t\t\t\t<notification-item\n\t\t\t\t\t\tv-for="listItem in visibleNotifications"\n\t\t\t\t\t\t:key="listItem.id"\n\t\t\t\t\t\t:data-id="listItem.id"\n\t\t\t\t\t\t:rawListItem="listItem"\n\t\t\t\t\t\t@dblclick="onDoubleClick"\n\t\t\t\t\t\t@buttonsClick="onButtonsClick"\n\t\t\t\t\t\t@deleteClick="onDeleteClick"\n\t\t\t\t\t\t@contentClick="onContentClick"\n\t\t\t\t\t\tv-bx-im-directive-notifications-observer="\n\t\t\t\t\t\t\tlistItem.sectionCode !== NotificationTypesCodes.placeholder\n\t\t\t\t\t\t\t? ObserverType.read \n\t\t\t\t\t\t\t: ObserverType.none\n\t\t\t\t\t\t"\n\t\t\t\t\t/>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="notification.length <= 0"\n\t\t\t\t\t\tstyle="padding-top: 210px; margin-bottom: 20px;"\n\t\t\t\t\t\tclass="bx-messenger-box-empty bx-notifier-content-empty"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ $Bitrix.Loc.getMessage(\'IM_NOTIFICATIONS_NO_ITEMS\') }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\x3c!-- Scroll button --\x3e\n\t\t\t\t<transition name="bx-im-notifications-scroll-button">\n\t\t\t\t\t<div v-show="showScrollButton" class="bx-im-notifications-scroll-button-box" @click="onScrollButtonClick">\n\t\t\t\t\t\t<div class="bx-im-notifications-scroll-button">\n\t\t\t\t\t\t\t<div class="bx-im-notifications-scroll-button-counter">\n\t\t\t\t\t\t\t\t<div class="bx-im-notifications-scroll-button-counter-digit">{{ unreadCounter }}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div :class="arrowButtonClass"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</transition>\n\t\t\t\t\n\t\t\t\t<mounting-portal :mount-to="popupIdSelector" append v-if="popupInstance">\n\t\t\t\t\t<popup :type="contentPopupType" :value="contentPopupValue" :popupInstance="popupInstance"/>\n\t\t\t\t</mounting-portal>\n\t\t\t</div>\n\t\t</div>\n\t'})})(this.BX.Messenger=this.BX.Messenger||{},BX.Messenger.Lib,BX,window,window,BX,BX,BX,BX.Messenger.Lib,BX.Vue,BX.Messenger.View,BX.Main,BX.Messenger.Lib,BX.Messenger.Const,BX.Messenger.Lib,BX.Event);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:86:"/local/js/im/application/notifications/dist/notifications.bundle.min.js?16547598173079";s:6:"source";s:67:"/local/js/im/application/notifications/dist/notifications.bundle.js";s:3:"min";s:71:"/local/js/im/application/notifications/dist/notifications.bundle.min.js";s:3:"map";s:71:"/local/js/im/application/notifications/dist/notifications.bundle.map.js";}"*/
this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};(function(t,e,n,i,r){"use strict";var o=function(){function t(){var e=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,t);this.inited=false;this.initPromise=new BX.Promise;this.params=i;this.template=null;this.rootNode=this.params.node||document.createElement("div");this.legacyMode=this.params.mode==="legacy";this.initCounter=this.params.initCounter||null;this.templateTemp=null;this.eventBus=new n.VueVendorV2;this.initCore().then(function(){return e.initParams()}).then(function(){return e.initComponent(e.legacyMode)}).then(function(){return e.initPullClient()}).then(function(){return e.initPullHandlers()}).then(function(){return e.initComplete()})}babelHelpers.createClass(t,[{key:"initPullClient",value:function t(){this.pullClient=BX.PULL;return new Promise(function(t,e){return t()})}},{key:"initPullHandlers",value:function t(){this.pullClient.subscribe(new r.ImNotificationsPullHandler({store:this.controller.getStore(),application:this,controller:this.controller}));return new Promise(function(t,e){return t()})}},{key:"initCore",value:function t(){var n=this;return new Promise(function(t,i){e.Core.ready().then(function(e){n.controller=e;t()})})}},{key:"initParams",value:function t(){var e=this;if(this.initCounter){this.controller.getStore().dispatch("notifications/setCounter",{unreadTotal:this.initCounter})}this.controller.getStore().subscribe(function(t){return e.eventStoreInteraction(t)});return new Promise(function(t,e){return t()})}},{key:"initComponent",value:function t(e){var n=this;if(e){return new Promise(function(t,e){return t()})}var i;if(this.legacyMode){i="<bx-im-component-notifications/>"}else{i='<div style="height: 400px; border: 1px solid #ccc;">\n\t\t\t\t<bx-im-component-notifications/>\n\t\t\t</div>'}return this.controller.createVue(this,{el:this.rootNode,template:i}).then(function(t){n.template=t;n.template.$el.id=n.rootNode.substr(1);return new Promise(function(t,e){return t()})})}},{key:"initComplete",value:function t(){this.inited=true;this.initPromise.resolve(this)}},{key:"ready",value:function t(){if(this.inited){var e=new BX.Promise;e.resolve(this);return e}return this.initPromise}},{key:"emit",value:function t(e){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.eventBus.$emit(e,n);return true}},{key:"listen",value:function t(e,n){if(typeof n!=="function"){return false}this.eventBus.$on(e,n);return true}},{key:"hasVueInstance",value:function t(){return this.template!==null}},{key:"destroyVueInstance",value:function t(){this.template.$destroy();this.template=null}},{key:"eventStoreInteraction",value:function t(e){if(e.type==="notifications/setCounter"){if(parseInt(e.payload)>=0){BXIM.notify.updateNotifyNextCount(parseInt(e.payload),true)}}}}]);return t}();t.NotificationsApplication=o})(this.BX.Messenger.Application=this.BX.Messenger.Application||{},BX.Messenger.Application,BX,BX.Messenger,BX.Messenger.Provider.Pull);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:90:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js?1654841546154696";s:6:"source";s:69:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.js";s:3:"min";s:73:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js";s:3:"map";s:73:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.map.js";}"*/
this.BX=this.BX||{};(function(e,t,i,s){"use strict";(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["date-group"]=function(e){var t,i,s,n,a;t={block:"main-ui-control-field-group",name:e.name+"_datesel",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:"","data-time":e.enableTime},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){n={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:e.label};t.content.push(n)}i={block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",items:"items"in e?e.items:"",name:"name"in e?e.name+"_datesel":"",params:"params"in e?e.params:"",valueDelete:false}};t.content.push(i);if("content"in e&&BX.type.isArray(e.content)){e.content.forEach(function(e){t.content.push(e)})}if("content"in e&&(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content))){t.content.push(e.content)}s={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(s);if(!("dragButton"in e)||e.dragButton!==false){a={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(a)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-field"]=function(e){var t,i,s,n,a;t={block:"main-ui-control-field",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){n={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:e.label};t.content.push(n)}if(BX.type.isArray(e.content)){e.content.forEach(function(e){t.content.push(e)})}else if(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content)){t.content.push(e.content)}if("valueDelete"in e&&e.valueDelete===true){s={block:"main-ui-control-value-delete",content:{block:"main-ui-control-value-delete-item",tag:"span"}};t.content.push(s)}if("deleteButton"in e&&e.deleteButton===true){i={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(i)}if(!("dragButton"in e)||e.dragButton!==false){a={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(a)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-field-group"]=function(e){var t,i,s,n;t={block:"main-ui-control-field-group",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){s={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:e.label};t.content.push(s)}if(BX.type.isArray(e.content)){e.content.forEach(function(e){t.content.push(e)})}else if(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content)){t.content.push(e.content)}if("deleteButton"in e&&e.deleteButton===true){i={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(i)}if(!("dragButton"in e)||e.dragButton!==false){n={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(n)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-string"]=function(e){return{block:"main-ui-control-string",mix:["main-ui-control"],tag:"input",attrs:{type:"type"in e?e.type:"text",name:"name"in e?e.name:"",placeholder:"placeholder"in e?e.placeholder:"",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:""}}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-textarea"]=function(e){return{block:"main-ui-control-string",mix:["main-ui-control main-ui-control-textarea"],tag:"textarea",attrs:{name:"name"in e?e.name:"",placeholder:"placeholder"in e?e.placeholder:"",tabindex:"tabindex"in e?e.tabindex:""},content:"value"in e?e.value:""}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-filter-field-list-item"]=function(e){var t={block:"main-ui-select-inner-label",content:"label"in e?e.label:""};var i={block:"main-ui-filter-field-list-item",mix:"main-ui-select-inner-item",attrs:{"data-id":e.id,"data-name":e.name,"data-item":"item"in e?JSON.stringify(e.item):{}},events:{click:"onClick"in e?e.onClick:""},content:t};return i}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-filter-info"]=function(e){return{block:"main-ui-filter-info",tag:"span",content:e.content,attrs:{title:e.title}}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-number"]=function(e){var t,i,s;t={block:"main-ui-number",mix:["main-ui-control"],content:[]};if("mix"in e&&BX.type.isArray(e.mix)){e.mix.forEach(function(e){t.mix.push(e)})}i={block:"main-ui-number-input",mix:["main-ui-control-input"],tag:"input",attrs:{type:"number",name:"name"in e?e.name:"",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",placeholder:"placeholder"in e?e.placeholder:"",autocomplete:"off"}};t.content.push(i);if("valueDelete"in e&&e.valueDelete===true){s={block:"main-ui-control-value-delete",content:{block:"main-ui-control-value-delete-item",tag:"span"}};t.content.push(s)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-search-square"]=function(e){var t=["main-ui-filter-search-square"];if("isPreset"in e&&e.isPreset){t.push("main-ui-filter-search-square-preset")}return{block:"main-ui-square",mix:t,attrs:{"data-item":"item"in e?JSON.stringify(e.item):"",title:"title"in e?e.title:""},content:[{block:"main-ui-square-item",content:"name"in e?BX.util.htmlspecialcharsback(e.name):""},{block:"main-ui-square-delete",mix:["main-ui-item-icon"]}]}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["number-group"]=function(e){var t,i,s,n,a;t={block:"main-ui-control-field-group",name:"name"in e?e.name+"_numsel":"",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){n={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:e.label};t.content.push(n)}i={block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",items:"items"in e?e.items:"",name:"name"in e?e.name+"_numsel":"",params:"params"in e?e.params:"",valueDelete:false}};t.content.push(i);if("content"in e&&BX.type.isArray(e.content)){e.content.forEach(function(e){t.content.push(e)})}if("content"in e&&(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content))){t.content.push(e.content)}s={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(s);if(!("dragButton"in e)||e.dragButton!==false){a={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(a)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["sidebar-item"]=function(e){return{block:"main-ui-filter-sidebar-item"+("pinned"in e&&e.pinned?" main-ui-item-pin":""),attrs:{"data-id":"id"in e?e.id:""},content:[{block:"main-ui-filter-icon-grab",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}},{block:"main-ui-filter-sidebar-item-text-container",tag:"span",content:[{block:"main-ui-filter-sidebar-item-input",tag:"input",attrs:{type:"text",placeholder:"placeholder"in e?e.placeholder:"",value:"text"in e?BX.util.htmlspecialchars(BX.util.htmlspecialcharsback(e.text)):""}},{block:"main-ui-filter-sidebar-item-text",tag:"span",content:"text"in e?e.text:""},{block:"main-ui-filter-icon-pin",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"noEditPinTitle"in e&&e.noEditPinTitle?e.noEditPinTitle:""}}]},{block:"main-ui-filter-icon-edit",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"editNameTitle"in e&&e.editNameTitle?e.editNameTitle:""}},{block:"main-ui-delete",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"removeTitle"in e&&e.removeTitle?e.removeTitle:""}},{block:"main-ui-filter-icon-pin",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"editPinTitle"in e&&e.editPinTitle?e.editPinTitle:""}},{block:"main-ui-filter-edit-mask"}]}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Utils={cache:{},styleForEach:function e(t,i){var s;i=BX.type.isPlainObject(i)?i:null;s=Object.keys(i);[].forEach.call(t||[],function(e){s.forEach(function(t){BX.style(e,t,i[t])})})},closestParent:function e(t,i){if(t){if(!i){return t.parentNode||null}else{return BX.findParent(t,{className:i})}}},closestChilds:function e(t){return!!t?t.children:null},getNext:function e(t){return!!t?t.nextElementSibling:null},getPrev:function e(t){return!!t?t.previousElementSibling:null},collectionSort:function e(t,i){var s,n,a,r,l;if(t&&i&&t!==i&&t.parentNode===i.parentNode){s=this.closestParent(i);n=this.closestChilds(s);a=n.length;r=this.getIndex(n,t);l=this.getIndex(n,i);if(a===l){s.appendChild(i)}if(r>l){s.insertBefore(t,i)}if(r<l&&a!==l){s.insertBefore(t,this.getNext(i))}}},getIndex:function e(t,i){return[].indexOf.call(t||[],i)},getByClass:function e(t,i,s){var n=[];if(i){n=(t||document.body).getElementsByClassName(i);if(!s){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getByTag:function e(t,i,s){var n=[];if(i){n=(t||document.body).getElementsByTagName(i);if(!s){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getBySelector:function e(t,i,s){var n=[];if(i){if(!s){n=(t||document.body).querySelector(i)}else{n=(t||document.body).querySelectorAll(i);n=[].slice.call(n)}}return n},requestAnimationFrame:function e(){var t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};t.apply(window,arguments)},sortObject:function e(t){var i={};Object.keys(t).sort().forEach(function(e){i[e]=t[e]});return i},objectsIsEquals:function e(t,i){return JSON.stringify(t)===JSON.stringify(i)},isKey:function e(t,i){var s={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",27:"escape",32:"space",37:"leftArrow",38:"upArrow",39:"rightArrow",40:"downArrow",46:"delete",112:"f1",113:"f2",114:"f3",115:"f4",116:"f5",117:"f6",118:"f7",119:"f8",120:"f9",121:"f10",122:"f11",123:"f12",65:"a"};var n=!!t?"keyCode"in t?t.keyCode:"which"in t?t.which:0:0;return n in s&&s[n]===i}}})();(function(){BX.namespace("BX.Filter");BX.Filter.DestinationSelectorManager={fields:[],controls:{},onSelect:function e(t,i,s){if(!BX.type.isNotEmptyObject(s)||!BX.type.isNotEmptyObject(s.item)||!BX.type.isNotEmptyString(s.selectorId)){return}var n=s.selectorId,a=s.item;var r=BX.Filter.DestinationSelectorManager.controls[n];if(r){var l=a.id;if(BX.type.isNotEmptyString(t)&&t=="Y"&&BX.type.isNotEmptyString(i)){var o=new RegExp("^"+i+"(\\d+)$");var u=l.match(o);if(BX.type.isArray(u)){l=u[1]}}else{var c={};BX.onCustomEvent(window,"BX.Filter.DestinationSelector:convert",[{selectorId:n,value:l},c]);if(BX.type.isNotEmptyString(c.value)){l=c.value}}r.setData(BX.util.htmlspecialcharsback(a.name),l);r.getLabelNode().value="";r.getLabelNode().blur()}},onDialogOpen:function e(t){if(typeof t=="undefined"||!BX.type.isNotEmptyString(t.selectorId)){return}var i=t.selectorId;var s=BX.Filter.DestinationSelector.items[i];if(s){s.onDialogOpen()}},onDialogClose:function e(t){if(typeof t=="undefined"||!BX.type.isNotEmptyString(t.selectorId)){return}var i=t.selectorId;var s=BX.Filter.DestinationSelector.items[i];if(s){s.onDialogClose()}}};BX.Filter.DestinationSelector=function(){this.id="";this.filterId="";this.settings={};this.fieldId="";this.control=null;this.inited=null};BX.Filter.DestinationSelector.items={};BX.Filter.DestinationSelector.create=function(e,t){if(typeof this.items[e]!="undefined"){return this.items[e]}var i=new BX.Filter.DestinationSelector(e,t);i.initialize(e,t);this.items[e]=i;BX.onCustomEvent(window,"BX.Filter.DestinationSelector:create",[e]);return i};BX.Filter.DestinationSelector.prototype.getSetting=function(e,t){return this.settings.hasOwnProperty(e)?this.settings[e]:t};BX.Filter.DestinationSelector.prototype.getSearchInput=function(){return this.control?this.control.getLabelNode():null};BX.Filter.DestinationSelector.prototype.initialize=function(e,t){this.id=e;this.settings=t?t:{};this.fieldId=this.getSetting("fieldId","");this.filterId=this.getSetting("filterId","");this.inited=false;this.opened=null;var i=this.getSetting("initialValue",false);if(!!i){var s={};s[this.fieldId]=i.itemId;s[this.fieldId+"_label"]=i.itemName;BX.Main.filterManager.getById(this.filterId).getApi().setFields(s)}BX.addCustomEvent(window,"BX.Main.Filter:customEntityFocus",BX.delegate(this.onCustomEntitySelectorOpen,this));BX.addCustomEvent(window,"BX.Main.Filter:customEntityBlur",BX.delegate(this.onCustomEntitySelectorClose,this));BX.addCustomEvent(window,"BX.Main.Filter:onGetStopBlur",BX.delegate(this.onGetStopBlur,this));BX.addCustomEvent(window,"BX.Main.SelectorV2:beforeInitDialog",BX.delegate(this.onBeforeInitDialog,this));BX.addCustomEvent(window,"BX.Main.Filter:customEntityRemove",BX.delegate(this.onCustomEntityRemove,this))};BX.Filter.DestinationSelector.prototype.open=function(){var e=this.id;if(!this.inited){var t=this.getSearchInput();t.id=t.name;BX.addCustomEvent(window,"BX.Main.SelectorV2:afterInitDialog",BX.delegate(function(e){if(typeof e.id!="undefined"||e.id!=this.id){return}this.opened=true},this));BX.addCustomEvent(window,"BX.UI.SelectorManager:onCreate",BX.delegate(function(e){if(!BX.type.isNotEmptyString(e)||e!=this.id){return}BX.onCustomEvent(window,"BX.Filter.DestinationSelector:setSelected",[{selectorId:e,current:this.control.getCurrentValues()}])},this));BX.onCustomEvent(window,"BX.Filter.DestinationSelector:openInit",[{id:this.id,inputId:t.id,containerId:t.id}])}else{var i={};i[this.currentUser.entityId]="users";BX.onCustomEvent(window,"BX.Filter.DestinationSelector:open",[{id:this.id,bindNode:this.control.getField(),value:i}]);this.opened=true}};BX.Filter.DestinationSelector.prototype.close=function(){if(typeof BX.Main.selectorManagerV2.controls[this.id]!=="undefined"){BX.Main.selectorManagerV2.controls[this.id].closeDialog()}};BX.Filter.DestinationSelector.prototype.onCustomEntitySelectorOpen=function(e){var t=e.getId();if(this.fieldId!==t){this.control=null}else{this.control=e;if(this.control){var i=this.control.getCurrentValues();this.currentUser={entityId:i["value"]}}BX.Filter.DestinationSelectorManager.controls[this.id]=this.control;if(!this.opened){this.open()}else{this.close()}}};BX.Filter.DestinationSelector.prototype.onCustomEntitySelectorClose=function(e){if(this.fieldId===e.getId()&&this.inited===true&&this.opened===true){this.control=null;window.setTimeout(BX.delegate(this.close,this),0)}};BX.Filter.DestinationSelector.prototype.onGetStopBlur=function(e,t){if(BX.findParent(e.target,{className:"bx-lm-box"})){t.stopBlur=true}};BX.Filter.DestinationSelector.prototype.onCustomEntityRemove=function(e){if(this.fieldId===e.getId()){var t=BX.UI.SelectorManager.instances[e.getId()];if(t&&typeof e.hiddenInput!="undefined"&&typeof e.hiddenInput.value!="undefined"&&BX.type.isNotEmptyObject(t.itemsSelected)&&typeof t.itemsSelected[e.hiddenInput.value]!="undefined"){delete t.itemsSelected[e.hiddenInput.value]}}};BX.Filter.DestinationSelector.prototype.onBeforeInitDialog=function(e){if(typeof e.id=="undefined"||e.id!=this.id){return}this.inited=true;if(!this.control){e.blockInit=true}};BX.Filter.DestinationSelector.prototype.onDialogOpen=function(){this.opened=true};BX.Filter.DestinationSelector.prototype.onDialogClose=function(){this.opened=false}})();var n=function(){function e(t,s){babelHelpers.classCallCheck(this,e);babelHelpers.defineProperty(this,"id",null);babelHelpers.defineProperty(this,"filter",null);babelHelpers.defineProperty(this,"dialog",null);babelHelpers.defineProperty(this,"dialogOptions",null);babelHelpers.defineProperty(this,"control",null);babelHelpers.defineProperty(this,"isMultiple",false);babelHelpers.defineProperty(this,"needAddEntityIdToFilter",false);babelHelpers.defineProperty(this,"isActive",false);this.id=t;this.settings=s?s:{};this.filter=this.getSetting("filter",null);if(!this.filter){throw new Error("Filter option is required for EntitySelector field")}this.isMultiple=!!this.getSetting("isMultiple",false);this.needAddEntityIdToFilter=this.getSetting("addEntityIdToResult","N")==="Y";this.dialogOptions=this.getSetting("dialogOptions",{});this.dialog=null;i.EventEmitter.subscribe("BX.Main.Filter:customEntityFocus",this.onCustomEntityFocus.bind(this));i.EventEmitter.subscribe("BX.Main.Filter:customEntityBlur",this.onCustomEntityBlur.bind(this));i.EventEmitter.subscribe("BX.Main.Filter:onGetStopBlur",this.onGetStopBlur.bind(this));i.EventEmitter.subscribe('BX.Main.Filter:move", ',this.onCustomEntityRemove.bind(this));this.controlInputChangeHandler=this.onSearchInputChange.bind(this)}babelHelpers.createClass(e,[{key:"open",value:function e(){var t=this;this.isActive=true;if(!this.dialog){this.initDialog().then(function(){if(t.isActive){t.openDialog()}})}else{this.openDialog()}}},{key:"close",value:function e(){this.isActive=false;if(this.dialog&&this.dialog.isOpen()){this.dialog.hide()}s.Event.unbind(this.getFilterFieldInput(),"input",this.controlInputChangeHandler)}},{key:"getFilterField",value:function e(){return this.filter.getField(this.id)}},{key:"getFilterFieldInputWrapper",value:function e(){var t=this.getFilterField();if(!t){return null}return BX.Filter.Utils.getBySelector(t.node,".main-ui-control-entity")}},{key:"getFilterFieldInput",value:function e(){var t=this.getFilterField();if(!t){return null}return BX.Filter.Utils.getBySelector(t.node,"."+this.filter.settings.classStringInput+'[type="text"]')}},{key:"setControl",value:function e(t){this.control=t}},{key:"unsetControl",value:function e(){this.control=null}},{key:"getSetting",value:function e(t,i){return this.settings.hasOwnProperty(t)?this.settings[t]:i}},{key:"openDialog",value:function e(){if(this.dialog.isOpen()){return}var t=this.getFilterFieldInputWrapper();this.dialog.setTargetNode(t);this.dialog.setWidth(t.offsetWidth);this.dialog.show();this.updateSelectedItemsInDialog(this.dialog);var i=this.getFilterFieldInput();var n=s.Type.isDomNode(i)?i.value.trim():"";if(n.length){this.dialog.search(n)}s.Event.bind(i,"input",this.controlInputChangeHandler)}},{key:"initDialog",value:function t(){var i=this;return e.initDialogExtension().then(function(e){var t=e.Dialog;i.dialog=new t(babelHelpers.objectSpread({},i.dialogOptions,{id:i.getDialogId(),multiple:i.isMultiple,enableSearch:false,hideOnSelect:true,autoHide:false,hideByEsc:false,events:{"Item:onSelect":i.onDialogItemSelect.bind(i),"Item:onDeselect":i.onDialogItemDeSelect.bind(i),onLoad:i.onDialogLoad.bind(i)}}))})}},{key:"addItemToFilter",value:function e(t,i){if(!this.control){return}if(this.isMultiple){var s=this.control.getCurrentValues();if(!s.filter(function(e){return e.value===t}).length){s.push({value:t,label:i});this.control.setMultipleData(s)}}else{this.control.setSingleData(i,t)}}},{key:"removeItemFromFilter",value:function e(t){if(!this.control){return}if(this.isMultiple){var i=this.control.getCurrentValues();this.control.setMultipleData(i.filter(function(e){return e.value!==t}))}else{this.control.clearValue()}}},{key:"getDialogId",value:function e(){return this.id+"_"+this.filter.getParam("FILTER_ID")}},{key:"getItemId",value:function e(t){if(this.needAddEntityIdToFilter){return JSON.stringify([t.getEntityId()+"",t.getId()+""])}return t.getId()+""}},{key:"updateSelectedItemsInDialog",value:function e(t){var i=this;if(!this.control){return}var s=this.control.getCurrentValues();if(!this.isMultiple){s=[s]}var n=s.map(function(e){return e.value});t.getItems().forEach(function(e){if(n.indexOf(i.getItemId(e))>-1){e.select(true)}else{e.deselect()}})}},{key:"onCustomEntityFocus",value:function e(t){var i=t.getData(),s=babelHelpers.slicedToArray(i,1),n=s[0];if(this.id!==n.getId()){return}this.setControl(n);this.open()}},{key:"onCustomEntityBlur",value:function e(t){var i=t.getData(),s=babelHelpers.slicedToArray(i,1),n=s[0];if(this.id!==n.getId()){return}this.close();this.unsetControl()}},{key:"onGetStopBlur",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,2),a=n[0],r=n[1];if(!(this.dialog&&this.dialog.isOpen())){return}var l=this.getFilterField();if(!l){return}var o=a.target;if(o===l.node||l.node.contains(o)&&!s.Dom.hasClass(o,this.filter.settings.classFieldDelete)||o===document.body){r.stopBlur=true;return}var u=this.dialog.getPopup().getContentContainer();if(o===u||u.contains(o)){r.stopBlur=true}}},{key:"onCustomEntityRemove",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,1),a=n[0];if(this.id!==a.getId()){return}if(this.dialog){this.dialog.destroy();this.dialog=null}s.Event.unbind(this.getFilterFieldInput(),"input",this.controlInputChangeHandler);this.unsetControl()}},{key:"onSearchInputChange",value:function e(t){if(this.dialog){this.dialog.search(t.target.value)}}},{key:"onDialogItemSelect",value:function e(t){var i=t.getData(),s=i.item;this.addItemToFilter(this.getItemId(s),s.getTitle());this.getFilterFieldInput().value=""}},{key:"onDialogItemDeSelect",value:function e(t){var i=t.getData(),s=i.item;this.removeItemFromFilter(this.getItemId(s))}},{key:"onDialogLoad",value:function e(t){var i=t.getTarget();this.updateSelectedItemsInDialog(i)}}],[{key:"initDialogExtension",value:function t(){if(!e.initExtensionPromise){e.initExtensionPromise=s.Runtime.loadExtension("ui.entity-selector")}return e.initExtensionPromise}},{key:"create",value:function t(i,n){if(s.Type.isObject(this.items[i])){return this.items[i]}var a=new e(i,n);this.items[i]=a;return a}}]);return e}();babelHelpers.defineProperty(n,"initExtensionPromise",null);babelHelpers.defineProperty(n,"items",{});var a=s.Reflection.namespace("BX.Filter");a.EntitySelector=n;(function(){BX.namespace("BX.Filter");BX.Filter.FieldController=function(e,t){this.field=null;this.parent=null;this.type=null;this.input=null;this.deleteButton=null;this.init(e,t)};BX.Filter.FieldController.prototype={init:function e(t,i){if(!BX.type.isDomNode(t)){throw"BX.Filter.FieldController.init: field isn't dom node"}if(!(i instanceof BX.Main.Filter)){throw"BX.Filter.FieldController.init: parent not instance of BX.Main.ui.Filter"}this.field=t;this.parent=i;this.bind();this.isShowDelete()?this.showDelete():this.hideDelete()},isShowDelete:function e(){var t=this.getSquares();return this.getInputValue()||BX.type.isArray(t)&&t.length},getField:function e(){return this.field},getInput:function e(){var t,i;if(!BX.type.isDomNode(this.input)){t=this.getType();i=this.parent.types;if(t===i.DATE){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classDateInput)}if(t===i.NUMBER||t==="number"){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classNumberInput)}if(t===i.STRING){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classStringInput)}if(t===i.CUSTOM_ENTITY){this.input=BX.Filter.Utils.getBySelector(this.getField(),'input[type="hidden"]')}}return this.input},getDeleteButton:function e(){if(!BX.type.isDomNode(this.deleteButton)){this.deleteButton=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classValueDelete)}return this.deleteButton},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classSquare)},bind:function e(){if(this.getType()!==this.parent.types.MULTI_SELECT&&this.getType()!==this.parent.types.SELECT){BX.bind(this.getDeleteButton(),"click",BX.delegate(this._onDeleteClick,this));BX.bind(this.getInput(),"input",BX.delegate(this._onInput,this))}},clearInput:function e(){var t=this.getInput();if(BX.type.isDomNode(t)){t.value=""}},hideDelete:function e(){var t=this.getDeleteButton();if(BX.type.isDomNode(t)){BX.addClass(t,this.parent.settings.classHide)}},showDelete:function e(){var t=this.getDeleteButton();if(BX.type.isDomNode(t)){BX.removeClass(t,this.parent.settings.classHide)}},removeSquares:function e(){var t=this.getSquares();if(BX.type.isArray(t)&&t.length){t.forEach(function(e){BX.remove(e)})}},_onDeleteClick:function e(){this.removeSquares();this.clearInput();this.hideDelete()},_onInput:function e(){this.getInputValue()?this.showDelete():this.hideDelete()},getInputValue:function e(){var t="";var i=this.getInput();if(BX.type.isDomNode(i)){t=i.value}return t},getType:function e(){if(!BX.type.isNotEmptyString(this.type)){this.type=BX.data(this.getField(),"type")}return this.type}}})();(function(){BX.namespace("BX.Main.ui");BX.Main.ui.CustomEntity=function(){this.field=null;this.labelInput=null;this.hiddenInput=null;this.popupContainer=null;this.inputClass="main-ui-control-string";this.squareClass="main-ui-square";this.multiple=null};BX.Main.ui.CustomEntity.isMultiple=function(e){if(!!e&&!BX.hasClass(e,"main-ui-control-entity")){e=BX.Filter.Utils.getByClass(e,"main-ui-control-entity")}return!!e&&JSON.parse(BX.data(e,"multiple"))};BX.Main.ui.CustomEntity.prototype={setField:function e(t){if(this.field!==t){this.field=t;this.reset()}},isMultiple:function e(){return BX.Main.ui.CustomEntity.isMultiple(this.getField())},reset:function e(){this.labelInput=null;this.hiddenInput=null},getField:function e(){return this.field},getId:function e(){var t=this.getHiddenNode();var i=null;if(BX.type.isDomNode(t)){i=t.name}return i},getLabelNode:function e(){if(!BX.type.isDomNode(this.labelInput)){this.labelInput=BX.Filter.Utils.getBySelector(this.getField(),"."+this.inputClass+'[type="text"]')}return this.labelInput},getHiddenNode:function e(){if(!BX.type.isDomNode(this.hiddenInput)){this.hiddenInput=BX.Filter.Utils.getBySelector(this.getField(),"."+this.inputClass+'[type="hidden"]')}return this.hiddenInput},getSquareByValue:function e(t){return BX.Filter.Utils.getBySelector(this.getField(),['[data-item*=":'+BX.util.jsencode(t)+'}"]','[data-item*=":\\"'+BX.util.jsencode(t)+'\\"}"]'].join(", "))},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getField(),this.squareClass,true)},removeSquares:function e(){this.getSquares().forEach(BX.remove)},setSquare:function e(t,i){var s=this.getField();var n={block:"main-ui-square",name:t,item:{_label:t,_value:i}};var a=BX.decl(n);var r=this.getSquares();if(!r.length){BX.prepend(a,s)}else{BX.insertAfter(a,r[r.length-1])}},getCurrentValues:function e(){var t=this.getSquares();var i,s;if(this.isMultiple()){s=[];for(var n=0,a=t.length;n<a;n++){try{i=JSON.parse(BX.data(t[n],"item"));s.push({label:i._label,value:i._value})}catch(e){}}}else{if(t.length===0){s={label:"",value:""}}else{try{i=JSON.parse(BX.data(t[0],"item"));s={label:i._label,value:i._value}}catch(e){s={label:"",value:""}}}}return s},setData:function e(t,i){return this.isMultiple()?this.setMultipleData(t,i):this.setSingleData(t,i)},setSingleData:function e(t,i){var s=this.getHiddenNode();this.removeSquares();this.setSquare(t,i);if(BX.type.isDomNode(s)){s.value=i;BX.fireEvent(s,"input")}},setMultipleData:function e(t,i){var s=[];var n=this.getHiddenNode();if(BX.type.isArray(t)){this.removeSquares();if(BX.type.isArray(t)){t.forEach(function(e){s.push(e.value);this.setSquare(e.label,e.value)},this);if(BX.type.isDomNode(n)){n.value=JSON.stringify(s);BX.fireEvent(n,"input")}}}if(!BX.type.isArray(t)&&i!==null){if(!this.getSquareByValue(i)){this.setSquare(t,i);this.getSquares().forEach(function(e){var t=JSON.parse(BX.data(e,"item"));if(BX.type.isPlainObject(t)){s.push(t._value)}});n.value=JSON.stringify(s);BX.fireEvent(n,"input")}}},clearValue:function e(){this.removeSquares();var t=this.getHiddenNode();t.value=this.isMultiple()?"[]":""},setPopupContainer:function e(t){if(BX.type.isDomNode(t)){this.popupContainer=t}},getPopupContainer:function e(){return this.popupContainer}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Search=function(e){this.parent=null;this.container=null;this.input=null;this.preset=null;this.buttonsContainer=null;this.delay=800;this.timeout=null;this.init(e)};BX.Filter.Search.prototype={init:function e(t){this.parent=t;BX.bind(this.getInput(),"input",BX.delegate(this._onInputWithoutDebounce,this));if(this.parent.getParam("ENABLE_LIVE_SEARCH")){BX.bind(this.getInput(),"input",BX.debounce(this._onInput,this.delay,this))}BX.bind(this.getInput(),"keydown",BX.delegate(this._onKeyDown,this));BX.bind(this.getFindButton(),"click",BX.delegate(this._onSearchClick,this));BX.bind(this.getContainer(),"click",BX.delegate(this._onSearchContainerClick,this));this.removeAutofocus();this.firstInit=true},removeAutofocus:function e(){var t=this.getInput();if(!!t){t.blur();t.autofocus=null}},getFindButton:function e(){if(!BX.type.isDomNode(this.findButton)){this.findButton=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSearchButton)}return this.findButton},_onSearchClick:function e(){this.apply()},selectSquare:function e(t){!!t&&BX.addClass(t,this.parent.settings.classSquareSelected)},selectSquares:function e(){this.getSquares().forEach(this.selectSquare,this)},unselectSquare:function e(t){!!t&&BX.removeClass(t,this.parent.settings.classSquareSelected)},unselectSquares:function e(){this.getSquares().forEach(this.unselectSquare,this)},removeSquares:function e(){this.getSquares().forEach(this.removeSquare,this)},isSquaresSelected:function e(){var t=this.getSquares();return t.length&&t.every(this.isSquareSelected,this)},isSquareSelected:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSquareSelected)},getLastSquare:function e(){var t=this.getSquares();return!!t?t[t.length-1]:null},isTextSelected:function e(){var t=this.getSearchString().length;var i=this.getInput();var s=i.selectionStart;var n=i.selectionEnd;return s===0&&n!==0&&n===t},isSelectionStart:function e(){var t=this.getInput();var i=t.selectionStart;var s=t.selectionEnd;return i===0&&s===0},isSquareRemoveButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSquareDelete)},isClearButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classClearSearchValueButton)},getClearButton:function e(){return this.getContainer().querySelector("."+this.parent.settings.classClearSearchValueButton)},isSearchButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSearchButton)},adjustFocus:function e(){if(!BX.browser.IsMobile()){var t=this.getInput();if(document.activeElement!==t&&window.scrollY<BX.pos(t).top){t.value=t.value;t.blur();t.focus()}}},findSquareByChild:function e(t){return BX.findParent(t,{className:this.parent.settings.classSquare},true,false)},getSquareData:function e(t){var i=BX.data(t,"item");return!!t&&!!i?JSON.parse(i):null},isSquareControl:function e(t){var i=this.getSquareData(t);return!!i&&(i.type==="control"||BX.type.isArray(i))},onPresetSquareRemove:function e(){var t=this.parent;var i=t.getPreset();var s=i.getCurrentPresetId();var n=t.getParam("RESET_TO_DEFAULT_MODE");var a=t.getParam("VALUE_REQUIRED");var r=i.isPinned(s);var l=this.getSquares();if(l.length===1){if(a&&r){this.parent.showPopup();this.adjustPlaceholder();this.parent.getPreset().deactivateAllPresets()}else{if(n&&r||!n){var o=true;this.lastPromise=t.resetFilter(o);t.closePopup()}}if(n&&!r){this.lastPromise=t.getPreset().applyPinnedPreset()}}if(l.length>1){var u=i.getPreset(i.getCurrentPresetId());var c=i.getPreset("tmp_filter");c.FIELDS=BX.clone(u.ADDITIONAL);u.ADDITIONAL=[];i.deactivateAllPresets();i.applyPreset("tmp_filter");t.applyFilter()}},onControlSquareRemove:function e(t){var i=this.parent;var s=i.getPreset();var n=i.getParam("RESET_TO_DEFAULT_MODE");var a=i.getParam("VALUE_REQUIRED");var r;if(n&&this.getSquares().length===1){if(a){r=this.getSquareData(t);i.clearControls(r);this.parent.showPopup();this.adjustPlaceholder();this.parent.getPreset().deactivateAllPresets()}else{this.lastPromise=i.getPreset().applyPinnedPreset()}}else{r=this.getSquareData(t);i.clearControls(r);i.closePopup();if(BX.type.isArray(r)){r.forEach(function(e){s.removeAdditionalField(e.name)})}if(BX.type.isPlainObject(r)){s.removeAdditionalField(r.name)}this.apply()}},onValueRequiredSquareRemove:function e(){var t=this.parent;t.getPreset().deactivateAllPresets();t.showPopup();this.adjustPlaceholder()},complexSquareRemove:function e(t){var i=this.parent.getParam("VALUE_REQUIRED_MODE");var s=!this.isSquareControl(t);if(i){this.onValueRequiredSquareRemove()}else{if(s){this.onPresetSquareRemove()}else{this.onControlSquareRemove(t)}}this.removeSquare(t);this.adjustClearButton()},adjustClearButton:function e(){!!this.getLastSquare()?this.showClearButton():this.hideClearButton()},removeSquare:function e(t){!!t&&BX.remove(t)},_onSearchContainerClick:function e(t){var i=this.parent;if(this.isClearButton(t.target)){if(!i.getParam("VALUE_REQUIRED")){if(!i.getParam("VALUE_REQUIRED_MODE")){if(i.getParam("RESET_TO_DEFAULT_MODE")){this.clearInput();this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.resetFilter()}i.closePopup();this.adjustFocus()}else{this.removeSquares();i.showPopup();this.adjustPlaceholder();this.hideClearButton();i.getPreset().deactivateAllPresets()}}else{var s=i.getPreset().isPinned(i.getPreset().getCurrentPresetId());if(s||i.getPreset().getCurrentPresetId()==="tmp_filter"){var n=i.getPreset().getPreset(i.getPreset().getCurrentPresetId());if(n.ADDITIONAL.length){n.ADDITIONAL=[];this.lastPromise=i.getPreset().applyPreset(i.getPreset().getCurrentPresetId());this.apply()}else{this.removeSquares();i.showPopup();this.adjustPlaceholder();this.hideClearButton();i.getPreset().deactivateAllPresets()}}else{if(i.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.resetFilter()}i.closePopup();this.adjustFocus()}this.clearInput()}}else if(this.isSearchButton(t.target)){this.apply();this.adjustFocus()}else if(this.isSquareRemoveButton(t.target)){var a=this.findSquareByChild(t.target);this.complexSquareRemove(a);this.adjustFocus()}else{if(!i.getPopup().isShown()){i.showPopup()}else{var r=this.getInput();var l=r.selectionStart;var o=r.selectionEnd;var u=this.getSearchString().length;if(!(u&&l===0&&o===u)){if(i.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.closePopup()}}else{i.closePopup();if(i.getParam("VALUE_REQUIRED_MODE")){i.restoreRemovedPreset()}}}}}},_onKeyDown:function e(t){var i=BX.Filter.Utils;var s=this.parent;if(i.isKey(t,"enter")){if(s.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.parent.getPreset().applyPinnedPreset()}else{this.apply();this.firstInit=false;this.lastSearchString=this.getSearchString()}}else{this.apply();this.firstInit=false;this.lastSearchString=this.getSearchString()}s.closePopup()}if(i.isKey(t,"tab")||i.isKey(t,"downArrow")){s.showPopup();s.adjustFocus();this.unselectSquares()}if(i.isKey(t,"upArrow")){s.closePopup();if(s.getParam("VALUE_REQUIRED_MODE")){this.parent.restoreRemovedPreset()}if(s.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.parent.getPreset().applyPinnedPreset()}}}if(i.isKey(t,"a")&&t.metaKey||i.isKey(t,"a")&&t.ctrlKey){this.selectSquares()}if(i.isKey(t,"backspace")&&this.isTextSelected()&&this.isSquaresSelected()){clearTimeout(this.timeout);if(this.parent.getParam("VALUE_REQUIRED")){var n=this.parent.getPreset().isPinned(this.parent.getPreset().getCurrentPresetId());if(n){this.removeSquares();this.parent.showPopup();this.adjustPlaceholder();this.hideClearButton();this.parent.getPreset().deactivateAllPresets()}else{if(this.parent.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=this.parent.getPreset().applyPinnedPreset()}else{this.parent.resetFilter()}this.parent.closePopup();this.adjustFocus()}this.clearInput()}else{if(this.parent.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=this.parent.getPreset().applyPinnedPreset()}else{this.lastPromise=this.parent.resetFilter()}this.parent.closePopup()}}if(i.isKey(t,"backspace")&&this.isSelectionStart()){clearTimeout(this.timeout);var a=this.getLastSquare();this.isSquareSelected(a)?this.complexSquareRemove(a):this.selectSquare(a)}if(!i.isKey(t,"backspace")&&!t.metaKey&&this.isSquaresSelected()){this.unselectSquares()}},getSearchString:function e(){var t=this.getInput();return!!t?t.value:""},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare,true)},adjustPlaceholder:function e(){if(this.parent.getParam("LIMITS_ENABLED")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_LIMITS_EXCEEDED"))}else if(this.parent.getParam("DISABLE_SEARCH")||!this.parent.settings.get("SEARCH")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER"))}else{this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_DEFAULT"))}},isResolvedRequest:function e(){return!this.lastPromise||!!this.lastPromise&&this.lastPromise.state},apply:function e(){if(this.isResolvedRequest()){this.lastPromise=this.parent._onFindButtonClick()}return this.lastPromise},reset:function e(){if(this.isResolvedRequest()){this.parent.getSearch().removePreset();this.parent.getPreset().deactivateAllPresets();this.parent.getPreset().resetPreset(true);this.timeout=setTimeout(BX.delegate(function(){this.lastPromise=this.parent.resetFilter()},this),this.delay)}return this.lastPromise},_onInputWithoutDebounce:function e(){clearTimeout(this.timeout);var t=this.getSearchString();this.lastSearchString=!!this.lastSearchString?this.lastSearchString:t;if(t!==this.lastSearchString&&(!this.parent.isIe()||!this.firstInit)){if(this.parent.getParam("ENABLE_LIVE_SEARCH")){this.parent.showGridAnimation();BX.onCustomEvent(window,"BX.Filter.Search:input",[this.parent.params.FILTER_ID,t])}this.parent.getPopup().isShown()&&this.parent.closePopup()}if(t){this.showClearButton()}else{if(!this.getSquares().length&&this.lastSearchString!==t){this.hideClearButton();this.adjustPlaceholder()}}if(this.parent.isAppliedUserFilter()){BX.Dom.addClass(this.container,"main-ui-filter-search--active")}else{BX.Dom.removeClass(this.container,"main-ui-filter-search--active")}},_onInput:function e(){var t=this.getSearchString();if(t!==this.lastSearchString&&(!this.parent.isIe()||!this.firstInit)){this.apply()}this.firstInit=false;this.lastSearchString=t},getButtonsContainer:function e(){if(!BX.type.isDomNode(this.buttonsContainer)){this.buttonsContainer=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSearchButtonsContainer)}return this.buttonsContainer},showClearButton:function e(){BX.addClass(this.getButtonsContainer(),this.parent.settings.classShow)},hideClearButton:function e(){BX.removeClass(this.getButtonsContainer(),this.parent.settings.classShow)},getInput:function e(){var t;if(!BX.type.isDomNode(this.input)){t=[this.parent.getParam("FILTER_ID",""),"_search"].join("");this.input=BX(t)}return this.input},getContainer:function e(){var t;if(!BX.type.isDomNode(this.container)){t=[this.parent.getParam("FILTER_ID"),"_search_container"].join("");this.container=BX(t)}return this.container},setInputPlaceholder:function e(t){var i=this.getInput();i.placeholder=t},clearInput:function e(){var t=this.getInput();if(BX.type.isDomNode(t)){t.value=null}},clearForm:function e(){this.clearInput();this.removePreset()},makeSquares:function e(t,i,s){var n;var a=null;var r=this.getContainer();var l={squares:[],moreSquares:[]};t.forEach(function(e,t){if(t<i){n=BX.decl(e);a=a||n;if(!s){if(t===0){BX.prepend(n,r)}else{BX.insertAfter(n,a)}}else{var o=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare);if(o){BX.insertAfter(n,o)}else{BX.prepend(n,r)}}a=n;l.squares.push(n)}else{l.moreSquares.push({type:"control",name:e.value,title:e.title})}},this);return l},squares:function e(t,i,s){var n,a,r,l,o;var e=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare,true);if(s){e.forEach(function(e){var t=BX.data(e,"item");if(t){BX.remove(e)}})}else{e.forEach(BX.remove)}n=this.prepareSquaresData(t);a=this.makeSquares(n,i,s);l=0;o={squaresData:n,width:0};if(a.moreSquares.length){r={block:"main-ui-search-square",name:this.parent.getParam("MAIN_UI_FILTER__AND")+" "+this.parent.getParam("MAIN_UI_FILTER__MORE")+" "+a.moreSquares.length,item:a.moreSquares,title:a.moreSquares.map(function(e){return e.title}).join(", \n")};r=BX.decl(r);a.squares.push(r);BX.insertAfter(r,a.squares[a.squares.length-2]);l=a.squares.reduce(function(e,t){return e+BX.width(t)+(parseFloat(BX.style(t,"margin-right"))||0)},0)}o.width=l;return o},setPreset:function e(t){var i=this.getContainer();var s,n;var a;if(BX.type.isPlainObject(t)){n=BX.Filter.Utils.getByClass(i,this.parent.settings.classSquare,true);n.forEach(BX.remove);t=BX.clone(t);t.ADDITIONAL=t.ADDITIONAL||[];BX.onCustomEvent(window,"BX.Filter.Search:beforeSquaresUpdate",[t,this]);if(t.ID!=="default_filter"&&t.ID!=="tmp_filter"){s=BX.decl({block:"main-ui-search-square",name:t.TITLE,value:t.ID,isPreset:true});BX.prepend(s,i);if("ADDITIONAL"in t&&BX.type.isArray(t.ADDITIONAL)&&t.ADDITIONAL.length){a=this.squares(t.ADDITIONAL,1,true);if(BX.width(i)-a.width<100){a=this.squares(t.ADDITIONAL,0,true)}}}else{if("ADDITIONAL"in t&&BX.type.isArray(t.ADDITIONAL)&&t.ADDITIONAL.length){t.ADDITIONAL.forEach(function(e,i){if(!("ID"in e)){e.ID="ADDITIONAL_ID_"+i}if(!("NAME"in e)){e.NAME="ADDITIONAL_NAME_"+i}if(!("TYPE"in e)){e.TYPE="STRING"}if("LABEL"in e&&"LABEL"in e){t.FIELDS.push(e)}})}if(BX.type.isArray(t.FIELDS)&&t.FIELDS.length){a=this.squares(t.FIELDS,2);if(BX.width(i)-a.width<100){a=this.squares(t.FIELDS,1)}}}if(a&&BX.type.isArray(a.squaresData)&&a.squaresData.length||t.ID!=="default_filter"&&t.ID!=="tmp_filter"){if(this.parent.getParam("LIMITS_ENABLED")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_LIMITS_EXCEEDED"))}else{this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_WITH_FILTER"))}this.showClearButton()}else{this.adjustPlaceholder()}if(BX.type.isNotEmptyString(this.parent.getSearch().getInput().value)){this.showClearButton()}}},prepareSquaresData:function e(t){var i,s,n;var a=[];t=t.filter(function(e){return!!e&&this.parent.params.FIELDS.some(function(t){return e.NAME===t.NAME})},this);t.map(function(e){i=null;switch(e.TYPE){case this.parent.types.DATE:{i=e.LABEL+": "+e.SUB_TYPE.NAME;if(e.SUB_TYPE.VALUE===this.parent.dateTypes.QUARTER&&BX.type.isNotEmptyString(e.VALUES._quarter)){var t=e.QUARTERS.filter(function(t){return t.VALUE==e.VALUES._quarter}).map(function(e){return e.NAME});t=t.length?t.join(""):"";i=e.LABEL+": "+t+" "+this.parent.getParam("MAIN_UI_FILTER__QUARTER").toLocaleLowerCase()+" "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.YEAR&&BX.type.isNotEmptyString(e.VALUES._year)){i=e.LABEL+": "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.MONTH&&BX.type.isNotEmptyString(e.VALUES._month)){var r=e.MONTHS.filter(function(t){return t.VALUE==e.VALUES._month}).map(function(e){return e.NAME});r=r.length?r.join(""):"";i=e.LABEL+": "+r+" "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.EXACT&&BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": "+e.VALUES._from}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.RANGE){if(BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+e.VALUES._from+"-"+e.VALUES._to}else if(!BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__BEFORE")+" "+e.VALUES._to}else if(BX.type.isNotEmptyString(e.VALUES._from)&&!BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__AFTER")+" "+e.VALUES._from}}if((e.SUB_TYPE.VALUE===this.parent.dateTypes.NEXT_DAYS||e.SUB_TYPE.VALUE===this.parent.dateTypes.PREV_DAYS)&&!BX.type.isNumber(parseInt(e.VALUES._days))){i=null}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.NEXT_DAYS&&BX.type.isNumber(parseInt(e.VALUES._days))){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__DATE_NEXT_DAYS_LABEL").replace("#N#",e.VALUES._days)}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.PREV_DAYS&&BX.type.isNumber(parseInt(e.VALUES._days))){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__DATE_PREV_DAYS_LABEL").replace("#N#",e.VALUES._days)}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.NONE){i=null}break}case this.parent.types.CUSTOM_DATE:{if(BX.type.isArray(e.VALUE.days)&&e.VALUE.days.length||BX.type.isArray(e.VALUE.months)&&e.VALUE.months.length||BX.type.isArray(e.VALUE.years)&&e.VALUE.years.length){i=e.LABEL}break}case this.parent.types.SELECT:{if(BX.type.isPlainObject(e.VALUE)&&e.VALUE.VALUE||e.STRICT){i=e.LABEL+": "+e.VALUE.NAME}break}case this.parent.types.MULTI_SELECT:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){s=[];i=e.LABEL+": ";e.VALUE.forEach(function(e,t){if(t<2){s.push(e.NAME)}});i+=s.join(", ");if(e.VALUE.length>2){n=[];e.VALUE.forEach(function(e){n.push(e.NAME)});i=n.join(", ")}}break}case this.parent.types.NUMBER:{if(e.SUB_TYPE.VALUE==="exact"){if(BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": "+e.VALUES._from}else{i=null}}if(e.SUB_TYPE.VALUE==="range"){if(BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+e.VALUES._from+"-"+e.VALUES._to}else if(!BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__NUMBER_LESS")+" "+e.VALUES._to}else if(BX.type.isNotEmptyString(e.VALUES._from)&&!BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__NUMBER_MORE")+" "+e.VALUES._from}else{i=null}}if(e.SUB_TYPE.VALUE==="more"){if(BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": > ";i+=e.VALUES._from}}if(e.SUB_TYPE.VALUE==="less"){if(BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": < ";i+=e.VALUES._to}}break}case this.parent.types.CUSTOM_ENTITY:case this.parent.types.DEST_SELECTOR:case this.parent.types.ENTITY_SELECTOR:{if(e.MULTIPLE){var l=!!e.VALUES._label?e.VALUES._label:[];if(BX.type.isPlainObject(l)){l=Object.keys(l).map(function(e){return l[e]})}if(!BX.type.isArray(l)){l=[l]}if(l.length>0){i=e.LABEL+": ";i+=l.join(", ")}}else{if(BX.type.isNotEmptyString(e.VALUES._value)&&BX.type.isNotEmptyString(e.VALUES._label)){i=e.LABEL+": ";i+=e.VALUES._label}}break}case this.parent.types.CUSTOM:{i="_VALUE"in e&&BX.type.isNotEmptyString(e._VALUE)?e.LABEL:null;break}default:{if(BX.type.isNotEmptyString(e.VALUE)){i=e.LABEL+": "+e.VALUE}break}}if(i!==null){a.push({block:"main-ui-search-square",name:i,value:e.NAME,item:{type:"control",name:e.NAME},title:i})}},this);return a},getPreset:function e(){var t=this.getContainer();var i=this.parent.settings.classSquare;var s=null;if(BX.type.isDomNode(t)){s=BX.Filter.Utils.getByClass(t,i)}return s},removePreset:function e(){var t=this.getPreset();if(BX.type.isDomNode(t)){BX.remove(t);this.adjustPlaceholder()}this.hideClearButton()},updatePreset:function e(t){this.removePreset();this.setPreset(t)}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Settings=function(e,t){this.classField="main-ui-control-field";this.classFieldGroup="main-ui-control-field-group";this.classFieldLine="main-ui-filter-field-line";this.classFieldDelete="main-ui-filter-field-delete";this.classFieldLabel="main-ui-control-field-label";this.classFieldWithLabel="main-ui-filter-wield-with-label";this.classPresetName="main-ui-filter-sidebar-item-text";this.classControl="main-ui-control";this.classDateInput="main-ui-date-input";this.classHide="main-ui-hide";this.classNumberInput="main-ui-number-input";this.classSelect="main-ui-select";this.classMultiSelect="main-ui-multi-select";this.classValueDelete="main-ui-control-value-delete";this.classStringInput="main-ui-control-string";this.classAddField="main-ui-filter-field-add-item";this.classAddPresetField="main-ui-filter-new-filter";this.classAddPresetFieldInput="main-ui-filter-sidebar-edit-control";this.classAddPresetButton="main-ui-filter-add-item";this.classButtonsContainer="main-ui-filter-field-button-container";this.classSaveButton="main-ui-filter-save";this.classCancelButton="main-ui-filter-cancel";this.classMenuItem="main-ui-select-inner-item";this.classMenuItemText="main-ui-select-inner-item-element";this.classMenuMultiItemText="main-ui-select-inner-label";this.classMenuItemChecked="main-ui-checked";this.classSearchContainer="main-ui-filter-search";this.classDefaultPopup="popup-window";this.classPopupFieldList="main-ui-filter-popup-field-list";this.classPopupFieldList1Column="main-ui-filter-field-list-1-column";this.classPopupFieldList2Column="main-ui-filter-field-list-2-column";this.classPopupFieldList3Column="main-ui-filter-field-list-3-column";this.classFieldListItem="main-ui-filter-field-list-item";this.classEditButton="main-ui-filter-add-edit";this.classPresetEdit="main-ui-filter-edit";this.classPresetNameEdit="main-ui-filter-edit-text";this.classPresetDeleteButton="main-ui-delete";this.classPresetDragButton="main-ui-filter-icon-grab";this.classPresetEditButton="main-ui-filter-icon-edit";this.classPresetEditInput="main-ui-filter-sidebar-item-input";this.classPresetOndrag="main-ui-filter-sidebar-item-ondrag";this.classSquare="main-ui-square";this.classSquareDelete="main-ui-square-delete";this.classSquareSelected="main-ui-square-selected";this.classPresetsContainer="main-ui-filter-sidebar-item-container";this.classPreset="main-ui-filter-sidebar-item";this.classPresetCurrent="main-ui-filter-current-item";this.classFilterContainer="main-ui-filter-wrapper";this.classFileldControlList="main-ui-filter-field-container-list";this.classRestoreFieldsButton="main-ui-filter-field-restore-items";this.classClearSearchValueButton="main-ui-delete";this.classSearchButtonsContainer="main-ui-item-icon-block";this.classSearchButton="main-ui-search";this.classDisabled="main-ui-disable";this.classAnimationShow="main-ui-popup-show-animation";this.classAnimationClose="main-ui-popup-close-animation";this.classLimitsAnimation="main-ui-filter-field-limits-animate";this.classSidebarControlsContainer="main-ui-filter-add-container";this.searchContainerPostfix="_search_container";this.classPresetButtonsContainer="main-ui-filter-field-preset-button-container";this.classFindButton="main-ui-filter-find";this.classResetButton="main-ui-filter-reset";this.classDefaultFilter="main-ui-filter-default-preset";this.classRestoreButton="main-ui-filter-reset-link";this.classPinButton="main-ui-filter-icon-pin";this.classPopupOverlay="popup-window-overlay";this.classPinnedPreset="main-ui-item-pin";this.classWaitButtonClass="ui-btn-clock";this.classForAllCheckbox="main-ui-filter-save-for-all";this.classShow="main-ui-show";this.classFocus="main-ui-focus";this.classPresetField="main-ui-filter-preset-field";this.numberPostfix="_numsel";this.datePostfix="_datesel";this.toPostfix="_to";this.fromPostfix="_from";this.daysPostfix="_days";this.monthPostfix="_month";this.quarterPostfix="_quarter";this.yearPostfix="_year";this.generalTemplateId="";this.init(e,t)};BX.Filter.Settings.prototype={init:function e(t,i){this.generalTemplateId=i.getParam("FILTER_ID")+"_GENERAL_template";this.mergeSettings(t)},get:function e(t,i){return t&&t in this&&!BX.type.isFunction(this[t])?this[t]:i},mergeSettings:function e(t){if(BX.type.isPlainObject(t)){Object.keys(t).forEach(function(e){if(!BX.type.isFunction(this[e])){this[e]=t[e]}},this)}}}})();(function(){BX.namespace("BX.Main");BX.Main.Filter=function(e,t,i,s,n,a){this.params=e;this.search=null;this.popup=null;this.presets=null;this.fields=null;this.types=i;this.dateTypes=s;this.additionalDateTypes=a;this.numberTypes=n;this.settings=new BX.Filter.Settings(t,this);this.filter=null;this.api=null;this.isAddPresetModeState=false;this.firstInit=true;this.analyticsLabel=null;this.emitter=new BX.Event.EventEmitter;this.emitter.setEventNamespace("BX.Filter.Field");this.emitter.subscribe=function(e,t){BX.Event.EventEmitter.subscribe(this.emitter,e.replace("BX.Filter.Field:",""),t)}.bind(this);this.init()};function e(e){if(BX.type.isString(e)){e=e.toLowerCase();e=e.replace(/[\-_\s]+(.)?/g,function(e,t){return t?t.toUpperCase():""});return e.substr(0,1).toLowerCase()+e.substr(1)}return e}BX.Main.Filter.prototype={init:function e(){BX.bind(document,"mousedown",BX.delegate(this._onDocumentClick,this));BX.bind(document,"keydown",BX.delegate(this._onDocumentKeydown,this));BX.bind(window,"load",BX.delegate(this.onWindowLoad,this));BX.addCustomEvent("Grid::ready",BX.delegate(this._onGridReady,this));this.getSearch().updatePreset(this.getParam("CURRENT_PRESET"))},getEmitter:function e(){return this.emitter},onWindowLoad:function e(){this.settings.get("AUTOFOCUS")&&this.adjustFocus()},clearGet:function e(){if("history"in window){var t=window.location.toString();var i=BX.util.remove_url_param(t,"apply_filter");window.history.replaceState(null,"",i)}},adjustFocus:function e(){this.getSearch().adjustFocus()},_onAddPresetKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")){this._onSaveButtonClick()}},_onDocumentKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"escape")){if(this.getPopup().isShown()){BX.onCustomEvent(window,"BX.Main.Filter:blur",[this]);this.closePopup();if(this.getParam("VALUE_REQUIRED_MODE")){this.restoreRemovedPreset()}if(this.getParam("VALUE_REQUIRED")){if(!this.getSearch().getSquares().length){this.getPreset().applyPinnedPreset()}}}}},getApi:function e(){if(!(this.api instanceof BX.Filter.Api)){this.api=new BX.Filter.Api(this)}return this.api},addSidebarItem:function e(t,i,s){var n=this.getPreset();var a=n.getContainer();var r=n.createSidebarItem(t,i,s);var l=n.getPresetNodeById(t);if(BX.type.isDomNode(l)){BX.remove(l);BX.prepend(r,a)}else{a&&a.insertBefore(r,n.getAddPresetField())}BX.bind(r,"click",BX.delegate(n._onPresetClick,n))},saveUserSettings:function e(t){var i={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER_ARRAY"};var s=this.getPreset();var n=s.getCurrentPresetId();var a={};this.params["PRESETS"]=BX.clone(this.editablePresets);a.current_preset=n;s.getPresets().forEach(function(e,i){var n=s.getPresetId(e);if(n&&n!=="tmp_filter"){var r=s.getPreset(n);r.TITLE=BX.util.htmlspecialchars(BX.util.htmlspecialcharsback(r.TITLE));r.SORT=i;s.updatePresetName(e,r.TITLE);a[n]={sort:i,name:r.TITLE,fields:this.preparePresetSettingsFields(r.FIELDS),for_all:t&&!BX.type.isBoolean(r.FOR_ALL)||t&&r.FOR_ALL===true}}},this);this.saveOptions(a,i,null,t)},isForAll:function e(t){var i=this.getForAllCheckbox();return BX.type.isBoolean(t)&&t||!!i&&!!i.checked},getForAllCheckbox:function e(){if(!this.forAllCheckbox){this.forAllCheckbox=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classForAllCheckbox)}return this.forAllCheckbox},preparePresetSettingsFields:function e(t){var i={};var s;(t||[]).forEach(function(e){switch(e.TYPE){case this.types.STRING:{i[e.NAME]=e.VALUE;break}case this.types.TEXTAREA:{i[e.NAME]=e.VALUE;break}case this.types.SELECT:{i[e.NAME]="VALUE"in e.VALUE?e.VALUE.VALUE:"";break}case this.types.MULTI_SELECT:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){e.VALUE.forEach(function(t,s){i[e.NAME]=BX.type.isPlainObject(i[e.NAME])?i[e.NAME]:{};i[e.NAME][s]=t.VALUE},this)}break}case this.types.CHECKBOX:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){e.VALUE.forEach(function(t,s){i[e.NAME]=BX.type.isPlainObject(i[e.NAME])?i[e.NAME]:{};i[e.NAME][s]=t.VALUE},this)}break}case this.types.DATE:{if(BX.type.isPlainObject(e.VALUES)){s=Object.keys(e.VALUES);i[e.NAME+"_datesel"]=e.SUB_TYPE.VALUE;s.forEach(function(t){i[e.NAME+t]=e.VALUES[t]},this)}break}case this.types.NUMBER:{if(BX.type.isPlainObject(e.VALUES)){s=Object.keys(e.VALUES);i[e.NAME+"_numsel"]=e.SUB_TYPE.VALUE;s.forEach(function(t){i[e.NAME+t]=e.VALUES[t]},this)}break}case this.types.DEST_SELECTOR:{if(BX.type.isPlainObject(e.VALUES)){i[e.NAME]=e.VALUES._value;i[e.NAME+"_label"]=e.VALUES._label}break}case this.types.DEST_SELECTOR:case this.types.ENTITY_SELECTOR:case this.types.CUSTOM_ENTITY:{if(BX.type.isPlainObject(e.VALUES)){i[e.NAME]=e.VALUES._value;i[e.NAME+"_label"]=e.VALUES._label}break}default:{break}}},this);return i},savePreset:function e(){var t="filter_"+ +new Date;var i=BX.util.htmlspecialcharsback(this.getPreset().getAddPresetFieldInput().value);this.updatePreset(t,i,null,true,null,null,true);this.addSidebarItem(t,i);this.getPreset().applyPreset(t);this.getPreset().activatePreset(t);this.applyFilter()},updatePreset:function e(t,i,s,n,a,r,l){var o=this.getFilterFieldsValues();var u=this.getPreset().getFields().map(function(e){return BX.data(e,"name")});var c=this.getPreset().getCurrentPresetData();var h={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var d,p,f,m,E;var g={};g.additional={};if(t!=="tmp_filter"&&t!=="default_filter"&&!l){var y=BX.type.isArray(c.ADDITIONAL)?c.ADDITIONAL:[];y.forEach(function(e){Object.keys(o).forEach(function(t){if(t.indexOf(e.NAME)!==-1){g.additional[t]=o[t];delete o[t]}})})}d=Object.keys(o);if(!s){g.apply_filter="Y"}else{g.clear_filter="Y"}g.save="Y";g.fields=o;g.rows=u.join(",");g.preset_id=t||c.ID;if(BX.type.isNotEmptyString(i)){g.name=BX.util.htmlspecialchars(i)}else{f=this.getPreset().getPresetNodeById(g.preset_id);m=this.getPreset().getPresetInput(f);if(BX.type.isDomNode(m)&&BX.type.isNotEmptyString(m.value)){g.name=m.value}else{g.name=c.TITLE}}if((!("sort"in g)||!BX.type.isNumber(g.sort))&&n){E=this.getParam("PRESETS");g.sort=E.length+2}if(!s){d.forEach(function(e){if(BX.type.isArray(g.fields[e])){p=g.fields[e].length?{}:"";g.fields[e].forEach(function(e,t){p[t]=e},this);if(p||BX.type.isNumber(p)||BX.type.isBoolean(p)){g.fields[e]=p}}},this)}if(g.preset_id==="tmp_filter"||this.isAddPresetEnabled()||s){this.updateParams(g)}if(BX.type.isFunction(a)){a()}var B=new BX.Promise(null,this);B.setAutoResolve("fulfill",0);B.then(function(){var e=new BX.Promise(null,this);this.saveOptions(g,h,BX.proxy(e.fulfill,e));return e}).then(function(){!!r&&r()});return B},saveFieldsSort:function e(){var t={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var i=this.getPreset().getFields();var s={};s.preset_id="default_filter";if(BX.type.isArray(i)){s.rows=i.map(function(e){return BX.data(e,"name")});s.rows=s.rows.join(",")}this.updateParams(s);this.saveOptions(s,t)},updateParams:function e(t){var i,s;if(BX.type.isPlainObject(t)&&"preset_id"in t){i=this.getPreset().getPreset(t.preset_id);if(BX.type.isPlainObject(i)){if("name"in t&&BX.type.isNotEmptyString(t.name)){i.TITLE=t.name}if("rows"in t&&!("fields"in t)){t.fields={};t.rows.split(",").forEach(function(e){t.fields[e]=""})}if("fields"in t){i.FIELDS=this.preparePresetFields(t.fields,t.rows)}if("additional"in t&&i.ID!=="tmp_filter"){i.ADDITIONAL=this.preparePresetFields(t.additional,t.rows)}}else{s=this.getParam("PRESETS");i={ID:t.preset_id,TITLE:t.name,SORT:s.length+2,FIELDS:this.preparePresetFields(t.fields,t.rows)};s.push(i)}}},preparePresetFields:function e(t,i){var s,n;var a=[];if(BX.type.isPlainObject(t)){i=BX.type.isNotEmptyString(i)?i.split(","):[];s=i.length?i:Object.keys(t);s.forEach(function(e){e=e.replace("_datesel","").replace("_numsel","");n=BX.clone(this.getFieldByName(e));if(BX.type.isPlainObject(n)){if(n.TYPE===this.types.STRING){n.VALUE=t[e]}if(n.TYPE===this.types.TEXTAREA){n.VALUE=t[e]}if(n.TYPE===this.types.MULTI_SELECT){n.VALUE=this.prepareMultiSelectValue(t[e],n.ITEMS)}if(n.TYPE===this.types.SELECT||n.TYPE===this.types.CHECKBOX){n.VALUE=this.prepareSelectValue(t[e],n.ITEMS)}if(n.TYPE===this.types.DATE){n.SUB_TYPE=this.prepareSelectValue(t[e+"_datesel"],n.SUB_TYPES);n.VALUES={_from:t[e+"_from"],_to:t[e+"_to"],_days:t[e+"_days"],_month:t[e+"_month"],_quarter:t[e+"_quarter"],_year:t[e+"_year"],_allow_year:t[e+"_allow_year"]}}if(n.TYPE===this.types.CUSTOM_DATE){n.VALUE={days:Object.keys(t[e+"_days"]||{}).map(function(i){return t[e+"_days"][i]}),months:Object.keys(t[e+"_months"]||{}).map(function(i){return t[e+"_months"][i]}),years:Object.keys(t[e+"_years"]||{}).map(function(i){return t[e+"_years"][i]})}}if(n.TYPE===this.types.NUMBER){n.SUB_TYPE=this.prepareSelectValue(t[e+"_numsel"],n.SUB_TYPES);n.VALUES={_from:t[e+"_from"],_to:t[e+"_to"]}}if(n.TYPE===this.types.DEST_SELECTOR||n.TYPE===this.types.ENTITY_SELECTOR||n.TYPE===this.types.CUSTOM_ENTITY){if(typeof t[e+"_label"]!=="undefined"){n.VALUES._label=t[e+"_label"]}if(typeof t[e]!=="undefined"){n.VALUES._value=t[e]}}if(n.TYPE===this.types.CUSTOM){n._VALUE=t[e]}a.push(n)}},this)}return a},prepareSelectValue:function e(t,i){var s={};var n;if(BX.type.isNotEmptyString(t)&&BX.type.isArray(i)){n=this.prepareMultiSelectValue({0:t},i);s=n.length>0?n[0]:{}}else{s=i[0]}return s},prepareMultiSelectValue:function e(t,i){var s=[];if(BX.type.isPlainObject(t)&&BX.type.isArray(i)){var n=Object.keys(t);var a=n.map(function(e){return t[e]});s=i.filter(function(e){return a.some(function(t){return t===e.VALUE})},this)}return s},getFieldByName:function e(t){var i=this.getParam("FIELDS");var s=i.find(function(e){return e.NAME===t});if(s){return s}var n=this.getFieldListContainer().querySelector('[data-name="'+t+'"]');s=BX.Filter.Field.instances.get(n);if(s){return s.options}return null},confirmSaveForAll:function e(){return new Promise(function(e){var t={CONFIRM:true,CONFIRM_MESSAGE:this.getParam("MAIN_UI_FILTER__CONFIRM_MESSAGE_FOR_ALL"),CONFIRM_APPLY_BUTTON:this.getParam("MAIN_UI_FILTER__CONFIRM_APPLY_FOR_ALL"),CONFIRM_CANCEL_BUTTON:this.getParam("CONFIRM_CANCEL")};this.confirmDialog(t,e)}.bind(this))},saveOptions:function t(i,s,n,a){s.action=e(s.action);s.forAll=this.isForAll(a);s.commonPresetsId=this.getParam("COMMON_PRESETS_ID");s.apply_filter=i.apply_filter||"N";s.clear_filter=i.clear_filter||"N";s.with_preset=i.with_preset||"N";s.save=i.save||"N";var r={params:s,data:i};delete i.apply_filter;delete i.save;delete i.clear_filter;delete i.with_preset;if(s.forAll&&s.action==="setFilterArray"){return this.confirmSaveForAll().then(function(){return this.backend(s.action,r)}.bind(this)).then(function(){this.disableEdit();this.disableAddPreset()}.bind(this))}return this.backend(s.action,r).then(function(){BX.removeClass(this.getFindButton(),this.settings.classWaitButtonClass);BX.type.isFunction(n)&&n()}.bind(this))},backend:function e(t,i){var s=this.analyticsLabel||{};this.analyticsLabel={};return BX.ajax.runComponentAction("bitrix:main.ui.filter",t,{mode:"ajax",data:i,analyticsLabel:babelHelpers.objectSpread({FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),PRESET_ID:i["data"]["preset_id"],FIND:i["data"].hasOwnProperty("fields")&&i["data"]["fields"].hasOwnProperty("FIND")&&!!i["data"]["fields"]["FIND"]?"Y":"N",ROWS:BX.Type.isObject(i["data"]["additional"])&&Object.keys(i["data"]["additional"]).length==0?"N":"Y"},s)})},limitAnalyticsSend:function e(){BX.ajax.runComponentAction("bitrix:main.ui.filter","limitAnalytics",{mode:"ajax",data:{},analyticsLabel:{FILTER_ID:this.getParam("FILTER_ID"),LIMIT:this.getParam("FILTER_ID")}})},prepareEvent:function e(t){var i,s;if(!("path"in t)||!t.path.length){t.path=[t.target];i=0;while((s=t.path[i++].parentNode)!==null){t.path.push(s)}}return t},restoreRemovedPreset:function e(){if(this.getParam("VALUE_REQUIRED_MODE")){var t=this.getParam("CURRENT_PRESET");if(BX.type.isPlainObject(t)){var i=t.ID;var s=this.getPreset().getPresetNodeById(i);this.getPreset().applyPreset(i);this.getPreset().activatePreset(s)}}},hasScrollClick:function e(t){var i="clientX"in t?t.clientX:"x"in t?t.x:0;return i>=document.documentElement.offsetWidth},isUseCommonPresets:function e(){return!!this.getParam("COMMON_PRESETS_ID")},isInsideFilterEvent:function e(t){t=this.prepareEvent(t);return(t.path||[]).some(function(e){return BX.type.isDomNode(e)&&(BX.hasClass(e,this.settings.classFilterContainer)||BX.hasClass(e,this.settings.classSearchContainer)||BX.hasClass(e,this.settings.classDefaultPopup)||BX.hasClass(e,this.settings.classPopupOverlay))},this)},_onDocumentClick:function e(t){var i=this.getPopup();if(!this.isInsideFilterEvent(t)&&!this.hasScrollClick(t)){if(i&&i.isShown()){this.closePopup();if(this.getParam("VALUE_REQUIRED_MODE")){this.restoreRemovedPreset()}if(this.getParam("VALUE_REQUIRED")){if(!this.getSearch().getSquares().length){this.getPreset().applyPinnedPreset()}}}BX.onCustomEvent(window,"BX.Main.Filter:blur",[this])}},_onAddFieldClick:function e(t){var i=this.getFieldsPopup();t.stopPropagation();t.preventDefault();if(i&&!i.isShown()){this.showFieldsPopup();this.syncFields()}else{this.closeFieldListPopup()}},syncFields:function e(t){if(BX.type.isPlainObject(t)){if(t.cache===false){this.fieldsPopupItems=null}}var i=this.getPreset().getFields();var s=this.getFieldsPopupItems();var n,a;if(BX.type.isArray(s)&&s.length){s.forEach(function(e){n=BX.data(e,"name").replace("_datesel","").replace("_numsel","");a=i.some(function(e){return BX.data(e,"name")===n});if(a){BX.addClass(e,this.settings.classMenuItemChecked)}else{BX.removeClass(e,this.settings.classMenuItemChecked)}},this)}},getFieldsPopupItems:function e(){if(!BX.type.isArray(this.fieldsPopupItems)){var t=this.getFieldsPopup();if("contentContainer"in t&&BX.type.isDomNode(t.contentContainer)){this.fieldsPopupItems=BX.Filter.Utils.getByClass(t.contentContainer,this.settings.classMenuItem,true)}}return this.fieldsPopupItems},getFieldListContainerClassName:function e(t){var i=this.settings.classPopupFieldList1Column;if(t>6&&t<12){i=this.settings.classPopupFieldList2Column}if(t>12){i=this.settings.classPopupFieldList3Column}return i},prepareFieldsDecl:function e(t){return(t||[]).map(function(e){return{block:"main-ui-filter-field-list-item",label:"LABEL"in e?e.LABEL:"",id:"ID"in e?e.ID:"",name:"NAME"in e?e.NAME:"",item:e,onClick:BX.delegate(this._clickOnFieldListItem,this)}},this)},getLazyLoadFields:function e(){var t=new BX.Promise;BX.ajax({method:"GET",url:this.getParam("LAZY_LOAD")["GET_LIST"],dataType:"json",onsuccess:function e(i){t.fulfill(i)}});return t},getFieldsListPopupContent:function e(){var t=new BX.Promise;var i=this.getParam("FIELDS");var s=BX.type.isArray(i)?i.length:0;if(this.getParam("LAZY_LOAD")){var n=function(e){var i={block:this.settings.classPopupFieldList,mix:this.getFieldListContainerClassName(e.length),content:this.prepareFieldsDecl(e)};t.fulfill(BX.decl(i))}.bind(this);if(BX.type.isNotEmptyObject(this.getParam("LAZY_LOAD")["CONTROLLER"])){var a=this.getParam("LAZY_LOAD")["CONTROLLER"]["componentName"];var r=this.getParam("LAZY_LOAD")["CONTROLLER"]["signedParameters"];BX.ajax.runAction(this.getParam("LAZY_LOAD")["CONTROLLER"]["getList"],{data:{filterId:this.getParam("FILTER_ID"),componentName:BX.type.isNotEmptyString(a)?a:"",signedParameters:BX.type.isNotEmptyString(r)?r:""}}).then(function(e){n(e.data)}.bind(this),function(e){})}else{this.getLazyLoadFields().then(n)}return t}var l={block:this.settings.classPopupFieldList,mix:this.getFieldListContainerClassName(s),content:this.prepareFieldsDecl(i)};t.fulfill(BX.decl(l));return t},getFieldLoader:function e(){if(!this.fieldLoader){this.fieldLoader=new BX.Loader({mode:"custom",size:18,offset:{left:"5px",top:"5px"}})}return this.fieldLoader},_clickOnFieldListItem:function e(t){var i=t.target;var s;if(!BX.hasClass(i,this.settings.classFieldListItem)){i=BX.findParent(i,{className:this.settings.classFieldListItem},true,false)}if(BX.type.isDomNode(i)){try{s=JSON.parse(BX.data(i,"item"))}catch(e){}var n=new BX.Promise;if(this.getParam("LAZY_LOAD")){this.getFieldLoader().show(i);var a=i.querySelector(".main-ui-select-inner-label");if(a){a.classList.add("main-ui-no-before")}var r=function(e){n.fulfill(e);this.getFieldLoader().hide();if(a){a.classList.remove("main-ui-no-before")}}.bind(this);if(BX.type.isNotEmptyObject(this.getParam("LAZY_LOAD")["CONTROLLER"])){var l=this.getParam("LAZY_LOAD")["CONTROLLER"]["componentName"];var o=this.getParam("LAZY_LOAD")["CONTROLLER"]["signedParameters"];BX.ajax.runAction(this.getParam("LAZY_LOAD")["CONTROLLER"]["getField"],{data:{filterId:this.getParam("FILTER_ID"),id:s.NAME,componentName:BX.type.isNotEmptyString(l)?l:"",signedParameters:BX.type.isNotEmptyString(o)?o:""}}).then(function(e){r(e.data)}.bind(this),function(e){})}else{this.getLazyLoadField(s.NAME).then(r)}}else{n.fulfill(s)}n.then(function(e){this.params.FIELDS.push(e);if(BX.hasClass(i,this.settings.classMenuItemChecked)){BX.removeClass(i,this.settings.classMenuItemChecked);this.getPreset().removeField(e)}else{if(BX.type.isPlainObject(e)){this.getPreset().addField(e);BX.addClass(i,this.settings.classMenuItemChecked);if(BX.type.isString(e.HTML)){var t=BX.create("div");this.getHiddenElement().appendChild(t);BX.html(t,e.HTML)}}}this.syncFields()}.bind(this))}},getHiddenElement:function e(){if(!this.hiddenElement){this.hiddenElement=BX.create("div");document.body.appendChild(this.hiddenElement)}return this.hiddenElement},getLazyLoadField:function e(t){var i=new BX.Promise;BX.ajax({method:"get",url:BX.util.add_url_param(this.getParam("LAZY_LOAD")["GET_FIELD"],{id:t}),dataType:"json",onsuccess:function e(t){i.fulfill(t)}});return i},showFieldsPopup:function e(){var t=this.getFieldsPopup();this.adjustFieldListPopupPosition();t.show()},closeFieldListPopup:function e(){var t=this.getFieldsPopup();t.close()},adjustFieldListPopupPosition:function e(){var t=this.getFieldsPopup();var i=BX.pos(this.getAddField());i.forceBindPosition=true;t.adjustPosition(i)},getFieldsPopup:function e(){var t=this.getAddField();if(!this.fieldsPopup){this.fieldsPopup=new BX.PopupWindow(this.getParam("FILTER_ID")+"_fields_popup",t,{autoHide:true,offsetTop:4,offsetLeft:0,lightShadow:true,closeIcon:false,closeByEsc:false,noAllPaddings:true,zIndex:13});this.fieldsPopupLoader=new BX.Loader({target:this.fieldsPopup.contentContainer});this.fieldsPopupLoader.show();this.fieldsPopup.contentContainer.style.width="630px";this.fieldsPopup.contentContainer.style.height="330px";this.getFieldsListPopupContent().then(function(e){this.fieldsPopup.contentContainer.removeAttribute("style");this.fieldsPopupLoader.hide();this.fieldsPopup.setContent(e);this.syncFields({cache:false})}.bind(this))}return this.fieldsPopup},_onAddPresetClick:function e(){this.enableAddPreset()},enableWaitSate:function e(t){!!t&&BX.addClass(t,this.settings.classWaitButtonClass)},disableWaitState:function e(t){!!t&&BX.removeClass(t,this.settings.classWaitButtonClass)},_onSaveButtonClick:function e(){var t=!!this.getSaveForAllCheckbox()&&this.getSaveForAllCheckbox().checked;var i=this.getPreset().getAddPresetFieldInput();var s=i.parentNode.querySelector(".main-ui-filter-edit-mask");var n;function a(e){if(e.animationName==="fieldError"){e.currentTarget.removeEventListener("animationend",a);e.currentTarget.removeEventListener("oAnimationEnd",a);e.currentTarget.removeEventListener("webkitAnimationEnd",a);e.currentTarget.classList.remove("main-ui-filter-error")}}function r(e){e.addEventListener("animationend",a);e.addEventListener("oAnimationEnd",a);e.addEventListener("webkitAnimationEnd",a);e.classList.add("main-ui-filter-error");var t=new BX.Promise;t.fulfill(true);return t}this.enableWaitSate(this.getFindButton());if(this.isAddPresetEnabled()&&!t){n=i.value;if(n.length){this.savePreset();this.disableAddPreset()}else{r(s).then(function(){i.focus()})}}if(this.isEditEnabled()){var l=this.getPreset();var o=l.getPresetNodeById(l.getCurrentPresetId());var u=l.getPresetInput(o);if(u.value.length){l.updateEditablePreset(l.getCurrentPresetId());this.saveUserSettings(t);!t&&this.disableEdit()}else{var c=o.querySelector(".main-ui-filter-edit-mask");r(c).then(function(){u.focus()})}}},_onCancelButtonClick:function e(){this.disableAddPreset();this.getPreset().clearAddPresetFieldInput();this.disableEdit();!!this.getSaveForAllCheckbox()&&(this.getSaveForAllCheckbox().checked=null)},_onGridReady:function e(t){if(!this.grid&&t.getContainerId()===this.getParam("GRID_ID")){this.grid=t}},_onFilterMousedown:function e(t){var i=t.target;if(this.getFields().isDragButton(i)){var s=BX.Filter.Utils.getByTag(i.parentNode,"input",true);(s||[]).forEach(function(e){BX.fireEvent(e,"blur")});BX.fireEvent(this.getFilter(),"click")}},_onFilterClick:function e(t){var i=this.getFields();var s=this.getPreset();var n;if(i.isFieldDelete(t.target)){n=i.getField(t.target);s.removeField(n)}if(i.isFieldValueDelete(t.target)){n=i.getField(t.target);i.clearFieldValue(n)}},getButtonsContainer:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classButtonsContainer)},getSaveButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classSaveButton)},getCancelButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classCancelButton)},getFindButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classFindButton)},getResetButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classResetButton)},getAddPresetButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classAddPresetButton)},isAddPresetEnabled:function e(){return this.isAddPresetModeState},enableAddPreset:function e(){var t=this.getPreset();var i=t.getAddPresetField();var s=t.getAddPresetFieldInput();var n=this.getButtonsContainer();BX.show(i);BX.show(n);BX.hide(this.getPresetButtonsContainer());this.hideForAllCheckbox();if(BX.type.isDomNode(s)){s.focus()}BX.addClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.isAddPresetModeState=true},disableAddPreset:function e(){var t=this.getPreset();var i=t.getAddPresetField();var s=this.getButtonsContainer();BX.hide(i);BX.hide(s);BX.show(this.getPresetButtonsContainer());this.showForAllCheckbox();t.getAddPresetFieldInput().value="";BX.removeClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.isAddPresetModeState=false},getControls:function e(){var t=this.getFieldListContainer();var i=null;if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getByClass(t,this.settings.classControl,true)}return i},getFilterFields:function e(){var t=this.getFieldListContainer();var i=[];var s=[];if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getByClass(t,this.settings.classField,true);s=BX.Filter.Utils.getByClass(t,this.settings.classFieldGroup,true);if(!BX.type.isArray(i)){i=[]}if(BX.type.isArray(s)){s.forEach(function(e){i.push(e)})}}return i},getFilterFieldsValues:function e(){var t=this.getPreset().getFields();var i=this.getSearch();var s={};var n,a;s["FIND"]=i.getInput().value;if(BX.type.isArray(t)&&t.length){t.forEach(function(e){n=BX.data(e,"type");a=BX.data(e,"name");switch(n){case this.types.STRING:{this.prepareControlStringValue(s,e);break}case this.types.TEXTAREA:{this.prepareControlTextareaValue(s,e);break}case this.types.NUMBER:{this.prepareControlNumberValue(s,a,e);break}case this.types.DATE:{this.prepareControlDateValue(s,a,e);break}case this.types.CUSTOM_DATE:{this.prepareControlCustomDateValue(s,a,e);break}case this.types.SELECT:{this.prepareControlSelectValue(s,a,e);break}case this.types.MULTI_SELECT:{this.prepareControlMultiselectValue(s,a,e);break}case this.types.DEST_SELECTOR:case this.types.CUSTOM_ENTITY:case this.types.ENTITY_SELECTOR:{this.prepareControlCustomEntityValue(s,a,e);break}case this.types.CUSTOM:{this.prepareControlCustomValue(s,a,e);break}default:{break}}},this)}return s},prepareControlCustomEntityValue:function e(t,i,s){var n=this.fetchSquares(s);var a=this.fetchSquaresData(n);var r=BX.Main.ui.CustomEntity.isMultiple(s);t[i]="";t[i+"_label"]="";if(r){t[i]=[];t[i+"_label"]=[];!!a&&a.forEach(function(e){t[i].push(e._value.toString());t[i+"_label"].push(e._label.toString())})}else{if(a.length){t[i]=a[0]._value.toString();t[i+"_label"]=a[0]._label.toString()}}},fetchSquares:function e(t){return!!t?BX.Filter.Utils.getByClass(t,this.settings.classSquare,true):[]},fetchSquaresData:function e(t){return t.map(function(e){return JSON.parse(BX.data(e,"item"))},this)},prepareControlCustomValue:function e(t,i,s){var n=BX.Filter.Utils.getByTag(s,"input",true);t[i]="";if(BX.type.isArray(n)){n.forEach(function(e){if(BX.type.isNotEmptyString(e.name)){t[e.name]=e.value}})}},prepareControlMultiselectValue:function e(t,i,s){var n=BX.Filter.Utils.getByClass(s,this.settings.classMultiSelect);var a=JSON.parse(BX.data(n,"value"));t[i]="";if(BX.type.isArray(a)&&a.length){t[i]={};a.forEach(function(e,s){t[i][s]=e.VALUE})}},prepareControlSelectValue:function e(t,i,s){var n=BX.Filter.Utils.getByClass(s,this.settings.classSelect);var a=JSON.parse(BX.data(n,"value"));t[i]=a.VALUE},prepareControlCustomDateValue:function e(t,i,s){var n=s.querySelector('[data-name="'+i+"_days"+'"]');if(n){var a=JSON.parse(n.dataset.value);t[i+"_days"]=a.map(function(e){return e.VALUE})}var r=s.querySelector('[data-name="'+i+"_months"+'"]');if(r){var l=JSON.parse(r.dataset.value);t[i+"_months"]=l.map(function(e){return e.VALUE})}var o=s.querySelector('[data-name="'+i+"_years"+'"]');if(o){var u=JSON.parse(o.dataset.value);t[i+"_years"]=u.map(function(e){return e.VALUE})}},prepareControlDateValue:function e(t,i,s,n){var a=s.querySelector(".main-ui-filter-additional-fields-container");if(a&&!n){BX.remove(a)}var r=BX.Filter.Utils.getByClass(s,this.settings.classSelect);var l=s.querySelector('.main-ui-select[data-name*="_allow_year"]');var o=i+this.settings.datePostfix;var u=i+this.settings.fromPostfix;var c=i+this.settings.toPostfix;var h=i+this.settings.daysPostfix;var d=i+this.settings.monthPostfix;var p=i+this.settings.quarterPostfix;var f=i+this.settings.yearPostfix;var m=i+"_allow_year";var E,g,y,B,v;t[o]="";t[u]="";t[c]="";t[h]="";t[d]="";t[p]="";t[f]="";var A=s.querySelector(".main-ui-date-input");if(A&&A.dataset.isValid==="false"){return}E=JSON.parse(BX.data(r,"value"));t[o]=E.VALUE;if(l){v=JSON.parse(BX.data(l,"value"));t[m]=v.VALUE}switch(E.VALUE){case this.dateTypes.EXACT:{g=BX.Filter.Utils.getByClass(s,this.settings.classDateInput);t[u]=g.value;t[c]=g.value;break}case this.dateTypes.QUARTER:{y=BX.Filter.Utils.getByClass(s,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach(function(e){B=BX.data(e,"name");if(B&&B.indexOf("_quarter")!==-1){t[p]=JSON.parse(BX.data(e,"value")).VALUE}if(B&&B.endsWith("_year")&&!B.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}},this)}break}case this.dateTypes.YEAR:{y=BX.Filter.Utils.getByClass(s,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach(function(e){B=BX.data(e,"name");if(B&&B.endsWith("_year")&&!B.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}},this)}break}case this.dateTypes.MONTH:{y=BX.Filter.Utils.getByClass(s,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach(function(e){B=BX.data(e,"name");if(B&&B.indexOf("_month")!==-1){t[d]=JSON.parse(BX.data(e,"value")).VALUE}if(B&&B.endsWith("_year")&&!B.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}},this)}break}case this.additionalDateTypes.PREV_DAY:case this.additionalDateTypes.NEXT_DAY:case this.additionalDateTypes.MORE_THAN_DAYS_AGO:case this.additionalDateTypes.AFTER_DAYS:case this.dateTypes.NEXT_DAYS:case this.dateTypes.PREV_DAYS:{var P=BX.Filter.Utils.getByClass(s,this.settings.classNumberInput);if(!!P&&P.name===h){t[h]=P.value}break}case this.dateTypes.RANGE:{g=BX.Filter.Utils.getByClass(s,this.settings.classDateInput,true);g.forEach(function(e){if(e.name===u){t[u]=e.value}else if(e.name===c){t[c]=e.value}},this);break}case"CUSTOM_DATE":{var S={};this.prepareControlCustomDateValue(S,i,s);t[i+"_days"]=S[i+"_days"];t[d]=S[i+"_months"];t[f]=S[i+"_years"];break}default:{break}}if(a&&!n){BX.append(a,s)}var _=Array.from(s.querySelectorAll('.main-ui-filter-additional-fields-container > [data-type="DATE"]'));if(_){_.forEach(function(e){var i=e.dataset.name;this.prepareControlDateValue(t,i,e,true)},this)}},prepareControlNumberValue:function e(t,i,s){var n=BX.Filter.Utils.getByClass(s,this.settings.classNumberInput,true);var a=BX.Filter.Utils.getByClass(s,this.settings.classSelect);var r=i+this.settings.numberPostfix;var l=i+this.settings.fromPostfix;var o=i+this.settings.toPostfix;var u;t[l]="";t[o]="";u=JSON.parse(BX.data(a,"value"));t[r]=u.VALUE;n.forEach(function(e){if(e.name.indexOf(this.settings.fromPostfix)!==-1){t[l]=e.value||"";if(t[r]==="exact"){t[o]=e.value||""}}else if(e.name.indexOf(this.settings.toPostfix)!==-1){t[o]=e.value||""}},this)},prepareControlStringValue:function e(t,i){var s=BX.Filter.Utils.getByClass(i,this.settings.classStringInput);var n;if(BX.type.isDomNode(s)){n=s.name;t[n]=s.value}},prepareControlTextareaValue:function e(t,i){var s=BX.Filter.Utils.getByClass(i,this.settings.classStringInput);var n;if(BX.type.isDomNode(s)){n=s.name;t[n]=s.value}},showGridAnimation:function e(){this.grid&&this.grid.tableFade()},hideGridAnimation:function e(){this.grid&&this.grid.tableUnfade()},getPresetId:function e(t,i){var s=this.getPreset().getCurrentPresetId();if(!this.isEditEnabled()&&!this.isAddPresetEnabled()&&!i||s==="default_filter"&&!t){s="tmp_filter"}return s},isAppliedUserFilter:function e(){var t=this;var i=this.getPreset().getCurrentPresetData();if(BX.Type.isPlainObject(i)){var s=BX.Type.isArrayFilled(i.FIELDS)&&i.FIELDS.some(function(e){return!t.getPreset().isEmptyField(e)});var n=BX.Type.isArrayFilled(i.ADDITIONAL)&&i.ADDITIONAL.some(function(e){return!t.getPreset().isEmptyField(e)});return!i.IS_PINNED&&(s||n)||i.IS_PINNED&&BX.Type.isArrayFilled(i.ADDITIONAL)||BX.Type.isStringFilled(this.getSearch().getSearchString())}return false},applyFilter:function e(t,i){var s=this.getPresetId(t,i);var n=this.getParam("FILTER_ID");var a=new BX.Promise(null,this);var r=this.getPreset();var l=this.getSearch();var o={autoResolve:!this.grid};var u=this;if(this.isAppliedUserFilter()){BX.Dom.addClass(this.getSearch().container,"main-ui-filter-search--active")}else{BX.Dom.removeClass(this.getSearch().container,"main-ui-filter-search--active")}this.clearGet();this.showGridAnimation();var c=t?"clear":"apply";BX.onCustomEvent(window,"BX.Main.Filter:beforeApply",[n,{action:c},this,a]);this.updatePreset(s,null,t,null).then(function(){l.updatePreset(r.getPreset(s));if(u.getParam("VALUE_REQUIRED")){if(!l.getSquares().length){u.lastPromise=r.applyPinnedPreset()}}}).then(function(){var e={apply_filter:"Y",clear_nav:"Y"};var t=BX.delegate(a.fulfill,a);var i=BX.delegate(a.reject,a);u.grid&&u.grid.reloadTable("POST",e,t,i);BX.onCustomEvent(window,"BX.Main.Filter:apply",[n,{action:c},u,a,o]);o.autoResolve&&a.fulfill()});return a},getAddField:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classAddField)},getFieldListContainer:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classFileldControlList)},getFields:function e(){if(!(this.fields instanceof BX.Filter.Fields)){this.fields=new BX.Filter.Fields(this)}return this.fields},getPreset:function e(){if(!(this.presets instanceof BX.Filter.Presets)){this.presets=new BX.Filter.Presets(this)}return this.presets},resetControlData:function e(t){if(BX.type.isPlainObject(t)){switch(t.TYPE){case this.types.MULTI_SELECT:{t.VALUE=[];break}case this.types.SELECT:{t.VALUE=t.ITEMS[0];break}case this.types.DATE:{t.SUB_TYPE=t.SUB_TYPES[0];t.VALUES={_from:"",_to:"",_days:"",_quarter:"",_year:""};break}case this.types.CUSTOM_DATE:{t.VALUES={days:[],months:[],years:[]};break}case this.types.NUMBER:{t.SUB_TYPE=t.SUB_TYPES[0];t.VALUES={_from:"",_to:""};break}case this.types.DEST_SELECTOR:case this.types.ENTITY_SELECTOR:case this.types.CUSTOM_ENTITY:{t.VALUES={_label:"",_value:""};break}case this.types.CUSTOM:{t._VALUE="";break}default:{t.VALUE=""}}}return t},clearControl:function e(t){var i=this.getPreset().getField({NAME:t});var s,n;if(BX.type.isDomNode(i)){s=this.getFieldByName(t);s=this.resetControlData(s);n=this.getPreset().createControl(s);BX.insertAfter(n,i);BX.remove(i)}},clearControls:function e(t){if(BX.type.isArray(t)){t.forEach(function(e){"name"in e&&this.clearControl(e.name)},this)}else if(BX.type.isPlainObject(t)&&"name"in t){this.clearControl(t.name)}},getTemplate:function e(){return BX.html(BX(this.settings.generalTemplateId))},isIe:function e(){if(!BX.type.isBoolean(this.ie)){this.ie=BX.hasClass(document.documentElement,"bx-ie")}return this.ie},closePopup:function e(){var t=this.getPopup();var i=t.popupContainer;var s=this.settings.get("FILTER_CLOSE_DELAY");var n;BX.Dom.removeClass(this.getSearch().container,"main-ui-filter-search--showed");setTimeout(BX.delegate(function(){if(!this.isIe()){BX.removeClass(i,this.settings.classAnimationShow);BX.addClass(i,this.settings.classAnimationClose);n=parseFloat(BX.style(i,"animation-duration"));if(BX.type.isNumber(n)){n=n*1e3}setTimeout(function(){t.close()},n)}else{t.close()}},this),s);if(this.getParam("LIMITS_ENABLED")){BX.removeClass(this.getFilter(),this.settings.classLimitsAnimation)}this.closeFieldListPopup();this.adjustFocus()},showPopup:function e(){var t=this.getPopup();var i;if(!t.isShown()){BX.Dom.addClass(this.getSearch().container,"main-ui-filter-search--showed");this.isOpened=true;var s=this.settings.get("FILTER_SHOW_DELAY");if(this.getParam("LIMITS_ENABLED")===true){this.limitAnalyticsSend()}setTimeout(BX.delegate(function(){t.show();if(!this.isIe()){i=t.popupContainer;BX.removeClass(i,this.settings.classAnimationClose);BX.addClass(i,this.settings.classAnimationShow);BX.onCustomEvent(window,"BX.Main.Filter:show",[this])}var e=[].slice.call(this.getFieldListContainer().querySelectorAll("textarea"));e.forEach(function(e){BX.style(e,"height",e.scrollHeight+"px")})},this),s)}},getSaveForAllCheckbox:function e(){if(!this.saveForAllCheckbox&&!!this.getSaveForAllCheckboxContainer()){this.saveForAllCheckbox=BX.Filter.Utils.getBySelector(this.getSaveForAllCheckboxContainer(),'input[type="checkbox"]')}return this.saveForAllCheckbox},getSaveForAllCheckboxContainer:function e(){if(!this.saveForAllCheckboxContainer){this.saveForAllCheckboxContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classForAllCheckbox)}return this.saveForAllCheckboxContainer},showForAllCheckbox:function e(){!!this.getSaveForAllCheckboxContainer()&&BX.removeClass(this.getSaveForAllCheckboxContainer(),this.settings.classHide)},hideForAllCheckbox:function e(){!!this.getSaveForAllCheckboxContainer()&&BX.addClass(this.getSaveForAllCheckboxContainer(),this.settings.classHide)},getPopupBindElement:function e(){if(!this.popupBindElement){var t=this.settings.get("POPUP_BIND_ELEMENT_SELECTOR");var i=null;if(BX.type.isNotEmptyString(t)){i=BX.Filter.Utils.getBySelector(document,t)}this.popupBindElement=!!i?i:this.getSearch().getContainer()}return this.popupBindElement},getPopup:function e(){if(!(this.popup instanceof BX.PopupWindow)){this.popup=new BX.PopupWindow(this.getParam("FILTER_ID")+this.settings.searchContainerPostfix,this.getPopupBindElement(),{autoHide:false,offsetTop:parseInt(this.settings.get("POPUP_OFFSET_TOP")),offsetLeft:parseInt(this.settings.get("POPUP_OFFSET_LEFT")),lightShadow:true,closeIcon:false,closeByEsc:false,noAllPaddings:true,zIndex:12});this.popup.setContent(this.getTemplate());BX.bind(this.getFieldListContainer(),"keydown",BX.delegate(this._onFieldsContainerKeydown,this));BX.bind(this.getFilter(),"click",BX.delegate(this._onFilterClick,this));BX.bind(this.getAddPresetButton(),"click",BX.delegate(this._onAddPresetClick,this));BX.bind(this.getPreset().getAddPresetFieldInput(),"keydown",BX.delegate(this._onAddPresetKeydown,this));BX.bind(this.getPreset().getContainer(),"keydown",BX.delegate(this._onPresetInputKeydown,this));BX.bind(this.getSaveButton(),"click",BX.delegate(this._onSaveButtonClick,this));BX.bind(this.getCancelButton(),"click",BX.delegate(this._onCancelButtonClick,this));BX.bind(this.getFindButton(),"click",BX.delegate(this._onFindButtonClick,this));BX.bind(this.getResetButton(),"click",BX.delegate(this._onResetButtonClick,this));BX.bind(this.getAddField(),"click",BX.delegate(this._onAddFieldClick,this));BX.bind(this.getEditButton(),"click",BX.delegate(this._onEditButtonClick,this));BX.bind(this.getRestoreButton(),"click",BX.delegate(this._onRestoreButtonClick,this));BX.bind(this.getRestoreFieldsButton(),"click",BX.delegate(this._onRestoreFieldsButtonClick,this));this.getFilter().addEventListener("mousedown",BX.delegate(this._onFilterMousedown,this),true);this.getPreset().showCurrentPresetFields();this.getPreset().bindOnPresetClick()}return this.popup},_onRestoreFieldsButtonClick:function e(){this.restoreDefaultFields()},restoreDefaultFields:function e(){var t=this.getPreset().getPreset("default_filter",true);var i=this.getParam("PRESETS");var s=this.getPreset().getCurrentPresetId();var n={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var a=t.FIELDS.map(function(e){return e.NAME});var r=a.join(",");i.forEach(function(e,s){if(e.ID==="default_filter"){i[s]=BX.clone(t)}},this);if(BX.type.isArray(this.editablePresets)){this.editablePresets.forEach(function(e,i){if(e.ID==="default_filter"){this.editablePresets[i]=BX.clone(t)}},this)}this.getPreset().applyPreset(s);this.updatePreset(s);this.saveOptions({preset_id:"default_filter",rows:r,save:"Y",apply_filter:"N"},n)},getRestoreFieldsButton:function e(){if(!this.restoreFieldsButton){this.restoreFieldsButton=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classRestoreFieldsButton)}return this.restoreFieldsButton},restoreFilter:function e(){var t=this.getParam("DEFAULT_PRESETS");var i=this.getParam("PRESETS");var s=false;var n,a,r;if(BX.type.isArray(t)){t.sort(function(e,t){return e.SORT<t.SORT});t.forEach(function(e){s=i.some(function(t,i){if(t.ID===e.ID){n=i;return true}});if(s){i[n]=BX.clone(e)}else{i.push(BX.clone(e))}if(e.ID!=="default_filter"){this.addSidebarItem(e.ID,e.TITLE,e.IS_PINNED);if(e.IS_PINNED){a=e.ID}}},this)}this.saveRestoreFilter();this.disableAddPreset();this.disableEdit();if(!a){a="default_filter"}r=this.getPreset().getPresetNodeById(a);if(r){BX.fireEvent(r,"click")}},saveRestoreFilter:function e(){var t={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"RESTORE_FILTER"};var i=this.getParam("PRESETS");var s={};var n;if(BX.type.isArray(i)){i.forEach(function(e){n=e.FIELDS.map(function(e){return e.NAME});n=n.join(",");s[e.ID]={name:e.TITLE||null,sort:e.SORT,preset_id:e.ID,fields:this.prepareFields(e.FIELDS),rows:n,for_all:e.FOR_ALL}},this);this.saveOptions(s,t)}},prepareFields:function e(t){var i={};var s;if(BX.type.isArray(t)){t.forEach(function(e){if(e.TYPE===this.types.SELECT){i[e.NAME]="VALUE"in e.VALUE?e.VALUE.VALUE:""}if(e.TYPE===this.types.MULTI_SELECT){e.VALUE.forEach(function(t,s){i[e.NAME]=i[e.NAME]||{};i[e.NAME][s]=t.VALUE});i[e.NAME]=i[e.NAME]||""}if(e.TYPE===this.types.DATE||e.TYPE===this.types.NUMBER){s=Object.keys(e.VALUES);s.forEach(function(t){i[e.NAME+t]=e.VALUES[t]});if(e.TYPE===this.types.DATE){i[e.NAME+"_datesel"]="VALUE"in e.SUB_TYPE?e.SUB_TYPE.VALUE:e.SUB_TYPES[0].VALUE}if(e.TYPE===this.types.NUMBER){i[e.NAME+"_numsel"]="VALUE"in e.SUB_TYPE?e.SUB_TYPE.VALUE:e.SUB_TYPES[0].VALUE}}if(e.TYPE===this.types.DEST_SELECTOR||e.TYPE===this.types.ENTITY_SELECTOR||e.TYPE===this.types.CUSTOM_ENTITY){i[e.NAME+"_label"]=e.VALUES._label;i[e.NAME+"_value"]=e.VALUES._value}},this)}return i},getRestoreButton:function e(){if(!BX.type.isDomNode(this.restoreButton)){this.restoreButton=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classRestoreButton)}return this.restoreButton},_onPresetInputKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")&&t.target.tagName==="INPUT"){BX.fireEvent(this.getSaveButton(),"click")}},_onFieldsContainerKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")&&t.target.tagName==="INPUT"){BX.fireEvent(this.getFindButton(),"click")}},_onFindButtonClick:function e(){var t=this.getPreset();var i=t.getCurrentPresetId();var s;if(i!=="tmp_filter"&&i!=="default_filter"&&!t.isPresetValuesModified(i)){var n=t.getPreset(i);var a=t.getAdditionalValues(i);var r=t.getFields().map(function(e){return BX.data(e,"name")});n.ADDITIONAL=this.preparePresetFields(a,r);n.ADDITIONAL=n.ADDITIONAL.filter(function(e){return!this.getPreset().isEmptyField(e)},this);s=this.applyFilter(false,i);this.closePopup()}else{t.deactivateAllPresets();s=this.applyFilter();this.closePopup()}return s},_onResetButtonClick:function e(){if(this.getParam("VALUE_REQUIRED")){var t=this.getPreset().getCurrentPresetData();if(t.ADDITIONAL.length){this.closePopup()}BX.fireEvent(this.getSearch().getClearButton(),"click")}else{if(this.getParam("RESET_TO_DEFAULT_MODE")){this.getSearch().clearInput();this.getPreset().applyPinnedPreset()}else{this.resetFilter()}this.closePopup()}},resetFilter:function e(t){var i=this.getSearch();var s=this.getPreset();if(!t){i.clearInput()}i.removePreset();s.deactivateAllPresets();s.resetPreset(true);i.hideClearButton();i.adjustPlaceholder();return this.applyFilter(true,true)},_onEditButtonClick:function e(){if(!this.isEditEnabled()){this.enableEdit()}else{this.disableEdit()}},enableFieldsDragAndDrop:function e(){var t=this.getPreset().getFields();this.fieldsList=[];if(BX.type.isArray(t)){this.fieldsList=t.map(this.registerDragItem,this)}},registerDragItem:function e(t){var i=this.getDragButton(t);if(i){i.onbxdragstart=BX.delegate(this._onFieldDragStart,this);i.onbxdragstop=BX.delegate(this._onFieldDragStop,this);i.onbxdrag=BX.delegate(this._onFieldDrag,this);jsDD.registerObject(i);jsDD.registerDest(i)}return t},unregisterDragItem:function e(t){var i=this.getDragButton(t);if(i){jsDD.unregisterObject(i);jsDD.unregisterDest(i)}},_onFieldDragStart:function e(){this.dragItem=this.getFields().getField(jsDD.current_node);this.dragIndex=BX.Filter.Utils.getIndex(this.fieldsList,this.dragItem);this.dragRect=this.dragItem.getBoundingClientRect();this.offset=this.dragRect.height;this.dragStartOffset=jsDD.start_y-(this.dragRect.top+BX.scrollTop(window));BX.Filter.Utils.styleForEach(this.fieldsList,{transition:"100ms"});BX.addClass(this.dragItem,this.settings.classPresetOndrag);BX.bind(document,"mousemove",BX.delegate(this._onMouseMove,this))},_onFieldDragStop:function e(){BX.unbind(document,"mousemove",BX.delegate(this._onMouseMove,this));BX.removeClass(this.dragItem,this.settings.classPresetOndrag);BX.Filter.Utils.styleForEach(this.fieldsList,{transition:"",transform:""});BX.Filter.Utils.collectionSort(this.dragItem,this.targetItem);this.fieldsList=this.getPreset().getFields();this.saveFieldsSort()},_onFieldDrag:function e(){var t=this;var i,s;this.dragOffset=this.realY-this.dragRect.top-this.dragStartOffset;this.sortOffset=t.realY+BX.scrollTop(window);BX.Filter.Utils.styleForEach([this.dragItem],{transition:"0ms",transform:"translate3d(0px, "+this.dragOffset+"px, 0px)"});this.fieldsList.forEach(function(e,n){if(e){i=e.getBoundingClientRect();s=i.top+BX.scrollTop(window)+i.height/2;if(n>t.dragIndex&&t.sortOffset>s&&e.style.transform!=="translate3d(0px, "+-t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+-t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if(n<t.dragIndex&&t.sortOffset<s&&e.style.transform!=="translate3d(0px, "+t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if((n<t.dragIndex&&t.sortOffset>s||n>t.dragIndex&&t.sortOffset<s)&&e.style.transform!=="translate3d(0px, 0px, 0px)"){if(e.style.transform!==""){t.targetItem=e}BX.style(e,"transform","translate3d(0px, 0px, 0px)");BX.style(e,"transition","300ms")}}})},disableFieldsDragAndDrop:function e(){if(BX.type.isArray(this.fieldsList)&&this.fieldsList.length){this.fieldsList.map(this.unregisterDragItem,this)}},enablePresetsDragAndDrop:function e(){var t,i,s,n;t=this.getPreset();i=t.getPresets();this.presetsList=[];if(BX.type.isArray(i)&&i.length){i.forEach(function(e){n=t.getPresetId(e);if(!BX.hasClass(e,this.settings.classAddPresetField)&&n!=="default_filter"&&!BX.hasClass(e,this.settings.classDefaultFilter)){s=this.getDragButton(e);s.onbxdragstart=BX.delegate(this._onDragStart,this);s.onbxdragstop=BX.delegate(this._onDragStop,this);s.onbxdrag=BX.delegate(this._onDrag,this);jsDD.registerObject(s);jsDD.registerDest(s);this.presetsList.push(e)}},this)}},getDragButton:function e(t){return BX.Filter.Utils.getByClass(t,this.settings.classPresetDragButton)},disablePresetsDragAndDrop:function e(){if(BX.type.isArray(this.presetsList)&&this.presetsList.length){this.presetsList.forEach(function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)){jsDD.unregisterObject(e);jsDD.unregisterDest(e)}},this)}},_onDragStart:function e(){this.dragItem=this.getPreset().normalizePreset(jsDD.current_node);this.dragIndex=BX.Filter.Utils.getIndex(this.presetsList,this.dragItem);this.dragRect=this.dragItem.getBoundingClientRect();this.offset=this.dragRect.height;this.dragStartOffset=jsDD.start_y-(this.dragRect.top+BX.scrollTop(window));BX.Filter.Utils.styleForEach(this.list,{transition:"100ms"});BX.addClass(this.dragItem,this.settings.classPresetOndrag);BX.bind(document,"mousemove",BX.delegate(this._onMouseMove,this))},_onMouseMove:function e(t){this.realX=t.clientX;this.realY=t.clientY},getDragOffset:function e(){return jsDD.x-this.startDragOffset-this.dragRect.left},_onDragStop:function e(){var t,i;BX.unbind(document,"mousemove",BX.delegate(this._onMouseMove,this));BX.removeClass(this.dragItem,this.settings.classPresetOndrag);BX.Filter.Utils.styleForEach(this.presetsList,{transition:"",transform:""});BX.Filter.Utils.collectionSort(this.dragItem,this.targetItem);t=this.getPreset();i=t.getPresets();this.presetsList=[];if(BX.type.isArray(i)&&i.length){i.forEach(function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)&&!BX.hasClass(e,this.settings.classDefaultFilter)){this.presetsList.push(e)}},this)}},_onDrag:function e(){var t=this;var i,s;this.dragOffset=this.realY-this.dragRect.top-this.dragStartOffset;this.sortOffset=t.realY+BX.scrollTop(window);BX.Filter.Utils.styleForEach([this.dragItem],{transition:"0ms",transform:"translate3d(0px, "+this.dragOffset+"px, 0px)"});this.presetsList.forEach(function(e,n){if(e){i=e.getBoundingClientRect();s=i.top+BX.scrollTop(window)+i.height/2;if(n>t.dragIndex&&t.sortOffset>s&&e.style.transform!=="translate3d(0px, "+-t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+-t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if(n<t.dragIndex&&t.sortOffset<s&&e.style.transform!=="translate3d(0px, "+t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if((n<t.dragIndex&&t.sortOffset>s||n>t.dragIndex&&t.sortOffset<s)&&e.style.transform!=="translate3d(0px, 0px, 0px)"){if(e.style.transform!==""){t.targetItem=e}BX.style(e,"transform","translate3d(0px, 0px, 0px)");BX.style(e,"transition","300ms")}}})},getSidebarControlsContainer:function e(){if(!BX.type.isDomNode(this.sidebarControlsContainer)){this.sidebarControlsContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classSidebarControlsContainer)}return this.sidebarControlsContainer},enableEdit:function e(){var t=this.getPreset();var i=t.getPresets();var s;if(BX.type.isArray(i)&&i.length){i.forEach(function(e){s=t.getPresetId(e);if(!BX.hasClass(e,this.settings.classAddPresetField)&&s!=="default_filter"){BX.addClass(e,this.settings.classPresetEdit)}},this)}this.enablePresetsDragAndDrop();BX.show(this.getButtonsContainer());BX.hide(this.getPresetButtonsContainer());BX.addClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.editablePresets=BX.clone(this.getParam("PRESETS"));this.isEditEnabledState=true},disableEdit:function e(){var t=this.getPreset();var i=t.getPresets();if(BX.type.isArray(i)&&i.length){i.forEach(function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)){BX.removeClass(e,this.settings.classPresetEdit);this.getPreset().disableEditPresetName(e)}},this)}this.disablePresetsDragAndDrop();if(!this.isAddPresetEnabled()){BX.style(this.getButtonsContainer(),"display","")}BX.show(this.getPresetButtonsContainer());BX.removeClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.editablePresets=null;this.isEditEnabledState=false;this.applyFilter(null,true)},getPresetButtonsContainer:function e(){if(!BX.type.isDomNode(this.presetButtonsContainer)){this.presetButtonsContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classPresetButtonsContainer)}return this.presetButtonsContainer},isEditEnabled:function e(){return this.isEditEnabledState},getEditButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classEditButton)},getParam:function e(t,i){return t in this.params?this.params[t]:i},getFilter:function e(){return BX.Filter.Utils.getByClass(this.getPopup().contentContainer,this.settings.classFilterContainer)},getSearch:function e(){if(!(this.search instanceof BX.Filter.Search)){this.search=new BX.Filter.Search(this)}return this.search},_onRestoreButtonClick:function e(){var t={CONFIRM:true,CONFIRM_MESSAGE:this.getParam("CONFIRM_MESSAGE"),CONFIRM_APPLY_BUTTON:this.getParam("CONFIRM_APPLY"),CONFIRM_CANCEL_BUTTON:this.getParam("CONFIRM_CANCEL")};this.confirmDialog(t,BX.delegate(this.restoreFilter,this))},confirmDialog:function e(t,i,s){if("CONFIRM"in t&&t.CONFIRM){var n=this.getParam("FILTER_ID")+"-confirm-dialog";var a='<div class="main-ui-filter-confirm-content">'+t.CONFIRM_MESSAGE+"</div>";var r="CONFIRM_TITLE"in t?t.CONFIRM_TITLE:"";var l=new BX.PopupWindowButton({text:t.CONFIRM_APPLY_BUTTON,events:{click:function e(){BX.type.isFunction(i)?i():null;this.popupWindow.close();this.popupWindow.destroy()}}});var o=new BX.PopupWindowButtonLink({text:t.CONFIRM_CANCEL_BUTTON,events:{click:function e(){BX.type.isFunction(s)?s():null;this.popupWindow.close();this.popupWindow.destroy()}}});var u=new BX.PopupWindow(n,null,{content:a,titleBar:r,autoHide:false,zIndex:9999,overlay:.4,offsetTop:-100,closeIcon:true,closeByEsc:true,buttons:[l,o]});BX.addCustomEvent(u,"onPopupClose",BX.delegate(function(){!!this.getSaveForAllCheckbox()&&(this.getSaveForAllCheckbox().checked=null)},this));if(!u.isShown()){u.show();var c=u.popupContainer;BX.removeClass(c,this.settings.classAnimationShow);BX.addClass(c,this.settings.classAnimationShow)}}else{BX.type.isFunction(i)?i():null}},getInitialValue:function e(t){if(BX.type.isString(t)){var i=this.params.INITIAL_FILTER;if(BX.type.isPlainObject(i)){var s=Object.entries(i).reduce(function(e,i){if(i[0].startsWith(t)){e.push(i)}return e},[]);if(s.length===1){return s[0][1]}if(s.length>1){return s.reduce(function(e,i){e[i[0].replace(t,"")]=i[1];return e},{})}}}return""},getField:function e(t){var i=this.getFieldListContainer().querySelector('[data-name="'+t+'"]');return BX.Filter.Field.instances.get(i)}}})();(function(){BX.Main.filterManager={data:{},push:function e(t,i){if(BX.type.isNotEmptyString(t)&&i){this.data[t]=i}},getById:function e(t){var i=null;if(t in this.data){i=this.data[t]}return i}}})();function r(){var e=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="main-ui-filter-additional-fields-container"></div>\n\t\t\t']);r=function t(){return e};return e}var l=Symbol("onValueChange");var o=function(e){babelHelpers.inherits(t,e);function t(e){var i;babelHelpers.classCallCheck(this,t);i=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).call(this,e));i.setEventNamespace("BX.Filter.Field");i.id=e.options.NAME;i.parent=e.parent;i.node=e.node;i.options=babelHelpers.objectSpread({},e.options);i.cache=new s.Cache.MemoryCache;i[l]=i[l].bind(babelHelpers.assertThisInitialized(i));s.Event.bind(i.node,"input",i[l]);s.Event.bind(i.node,"change",i[l]);var n=babelHelpers.toConsumableArray(i.node.querySelectorAll(".main-ui-control-value-delete"));n.forEach(function(e){e.addEventListener("click",function(){setTimeout(function(){i[l]()})})});var a=new MutationObserver(function(){i[l]()});var r=babelHelpers.toConsumableArray(i.node.querySelectorAll(".main-ui-select"));r.forEach(function(e){a.observe(e,{attributes:true,attributeFilter:["data-value"]})});t.instances.set(i.node,babelHelpers.assertThisInitialized(i));return i}babelHelpers.createClass(t,[{key:"subscribe",value:function e(t,i){s.Event.EventEmitter.subscribe(this,t.replace("BX.Filter.Field:",""),i)}},{key:l,value:function e(){this.emit("change",{field:this,value:this.getValue()})}},{key:"getAdditionalFieldContainer",value:function e(){return this.cache.remember("additionalFieldsContainer",function(){return s.Tag.render(r())})}},{key:"hasAdditional",value:function e(){return s.Dom.hasClass(this.node,"main-ui-filter-field-with-additional-fields")}},{key:"addAdditionalField",value:function e(i){if(!this.hasAdditional()){s.Dom.addClass(this.node,"main-ui-filter-field-with-additional-fields");s.Dom.append(this.getAdditionalFieldContainer(),this.node)}var n=this.parent.getPreset();var a=this.prepareFieldOptions(i);var r=n.createControl(a);this.appendRenderedField(r);return t.instances.get(r)}},{key:"prepareListItems",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(s.Type.isPlainObject(t)){return Object.entries(t).map(function(e){var t=babelHelpers.slicedToArray(e,2),i=t[0],s=t[1];return{NAME:s,VALUE:i}})}return{}}},{key:"prepareFieldOptions",value:function e(t){var i=this;if(s.Type.isPlainObject(t)){var n=this.parent.params.FIELDS_STUBS;var a=t.type,r=a===void 0?"string":a;var l=n.find(function(e){return e.NAME===r});if(s.Type.isPlainObject(l)){var o=babelHelpers.objectSpread({},l,{NAME:t.id,LABEL:t.name,TYPE:r==="checkbox"?"SELECT":l.TYPE,VALUE_REQUIRED:t.valueRequired===true});if(r==="list"){return babelHelpers.objectSpread({},o,{ITEMS:[].concat(babelHelpers.toConsumableArray(o.ITEMS),[this.prepareListItems(t.items)]),params:{isMulti:function(){if(s.Type.isPlainObject(t.params)){return t.params===true}return false}()}})}if(r==="date"){var u=function(){if(s.Type.isPlainObject(t.value)&&Reflect.has(t.value,"_datesel")){return t.value._datesel}return i.parent.dateTypes.NONE}();return babelHelpers.objectSpread({},o,{SUB_TYPES:function(){if(s.Type.isArray(t.exclude)){return o.SUB_TYPES.filter(function(e){return!t.exclude.includes(e.VALUE)})}return o.SUB_TYPES}(),SUB_TYPE:function(){return o.SUB_TYPES.find(function(e){return e.VALUE===u})}(),VALUES:function(){if(s.Type.isPlainObject(t.value)){return babelHelpers.objectSpread({},t.value)}return o.VALUES}()})}if(r==="string"||r==="custom_date"||r==="number"||r==="checkbox"||r==="custom_entity"){return o}}}return t}},{key:"appendRenderedField",value:function e(t){if(s.Type.isDomNode(t)){var i=this.getAdditionalFieldContainer();s.Dom.append(t,i)}}},{key:"getValue",value:function e(){var t=this.parent.getFilterFieldsValues();var i=this.options,s=i.TYPE,n=i.NAME;if(s==="DATE"||s==="NUMBER"){return Object.entries(t).reduce(function(e,t){var i=babelHelpers.slicedToArray(t,2),s=i[0],a=i[1];if(s.startsWith(n)){e[s.replace(n,"")]=a}return e},{})}if(n in t){return t[n]}return""}},{key:"setValue",value:function e(t){var i=this;var n=this.options.TYPE;if(n==="DATE"||n==="NUMBER"){if(s.Type.isPlainObject(t)){var a=this.parent.getFieldListContainer();Object.entries(t).forEach(function(e){var t=babelHelpers.slicedToArray(e,2),n=t[0],r=t[1];var l=a.querySelector('[data-name="'.concat(i.id,'"] [data-name="').concat(i.id).concat(n,'"], [data-name="').concat(i.id,'"] [name="').concat(i.id).concat(n,'"]'));if(l){if(s.Dom.hasClass(l,"main-ui-select")){var o=s.Dom.attr(l,"data-items");if(s.Type.isArray(o)){var u=o.find(function(e){return e.VALUE===r});if(s.Type.isPlainObject(u)){s.Dom.attr(l,"data-value",u);var c=l.querySelector(".main-ui-select-name");if(c){c.innerText=u.NAME}var h=BX.Main.ui.Factory.get(l);if(!h){h={node:l,instance:new BX.Main.ui.select(l)};BX.Main.ui.Factory.data.push(h)}if(s.Type.isPlainObject(h)){BX.onCustomEvent(window,"UI::Select::Change",[h.instance,u])}}}}else if(l.tagName==="INPUT"){l.value=r}}})}}}}]);return t}(s.Event.EventEmitter);babelHelpers.defineProperty(o,"instances",new WeakMap);var u=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=t}babelHelpers.createClass(e,[{key:"setFields",value:function e(t){if(s.Type.isPlainObject(t)){this.parent.getPopup();var i=this.parent.getPreset();i.deactivateAllPresets();var n={preset_id:"tmp_filter",fields:t};this.parent.updateParams(n);i.applyPreset("tmp_filter")}}},{key:"setFilter",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;this.setAnalyticsLabel(i);if(s.Type.isObject(t)){this.parent.updateParams(t);this.parent.getPreset().deactivateAllPresets();this.parent.getPreset().activatePreset(t.preset_id);this.parent.getPreset().applyPreset(t.preset_id);if(!t.checkFields||!this.parent.getPreset().isPresetValuesModified(t.preset_id)){this.parent.applyFilter(false,t.preset_id)}else{var n={};if(s.Type.isPlainObject(t.fields)){n=Object.assign({},t.fields)}if(s.Type.isPlainObject(t.additional)){n=Object.assign({},t.additional)}this.parent.getPreset().deactivateAllPresets();this.setFields(n);this.apply()}}}},{key:"extendFilter",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;this.setAnalyticsLabel(n);if(s.Type.isObject(t)){Object.keys(t).forEach(function(e){if(s.Type.isNumber(t[e])){t[e]=String(t[e])}});var a=this.parent.getPreset().getCurrentPresetId();if(i||a==="tmp_filter"||a==="default_filter"){var r=Object.assign({},this.parent.getFilterFieldsValues(),t);this.setFields(r);this.apply();return}var l=this.parent.getPreset().getAdditionalValues(a);if(s.Type.isPlainObject(l)&&Object.keys(l).length){t=Object.assign({},l,t)}this.setFilter({preset_id:a,additional:t,checkFields:true})}}},{key:"apply",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.setAnalyticsLabel(t);if(!this.parent.isEditEnabled()){if(!this.parent.isEditEnabled()){this.parent.applyFilter()}this.parent.closePopup();if(this.parent.isAddPresetEnabled()){this.parent.disableAddPreset()}}}},{key:"getEmitter",value:function e(){return this.parent.emitter}},{key:"setAnalyticsLabel",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(s.Type.isObject(t)){this.parent.analyticsLabel=t}}}]);return e}();function c(e){return{block:"main-ui-control-field",type:e.type,dragButton:false,content:{block:"main-ui-date",mix:["filter-type-single"],calendarButton:true,valueDelete:true,placeholder:e.placeholder,name:e.name,tabindex:e.tabindex,value:e.value,enableTime:e.enableTime}}}function h(e){return{block:"main-ui-control-field",type:e.type,dragButton:false,content:{block:"main-ui-number",mix:["filter-type-single"],valueDelete:true,placeholder:e.placeholder,name:e.name,tabindex:e.tabindex,value:e.value}}}function d(){return{block:"main-ui-filter-field-line",content:{block:"main-ui-filter-field-line-item",tag:"span"}}}function p(e){return{block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:e.tabindex,value:e.value,items:e.items,name:e.name,valueDelete:false}}}function f(){var e=babelHelpers.taggedTemplateLiteral(['\n\t\t\t<div \n\t\t\t\tclass="main-ui-filter-error-message" \n\t\t\t\ttitle="','">\n\t\t\t\t',"\n\t\t\t</div>\n\t\t"]);f=function t(){return e};return e}var m=new WeakMap;var E=new WeakMap;var g=new WeakMap;var y=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=null;this.init(t)}babelHelpers.createClass(e,[{key:"init",value:function e(t){this.parent=t;BX.addCustomEvent(window,"UI::Select::change",this._onDateTypeChange.bind(this))}},{key:"deleteField",value:function e(t){s.Dom.remove(t)}},{key:"isFieldDelete",value:function e(t){return s.Dom.hasClass(t,this.parent.settings.classFieldDelete)}},{key:"isFieldValueDelete",value:function e(t){return s.Dom.hasClass(t,this.parent.settings.classValueDelete)||s.Dom.hasClass(t.parentNode,this.parent.settings.classValueDelete)}},{key:"isDragButton",value:function e(t){return t&&s.Dom.hasClass(t,this.parent.settings.classPresetDragButton)}},{key:"clearFieldValue",value:function e(t){if(t){var i=babelHelpers.toConsumableArray(t.querySelectorAll(".main-ui-control"));var n=babelHelpers.toConsumableArray(t.querySelectorAll(".main-ui-square"));n.forEach(function(e){return s.Dom.remove(e)});i.forEach(function(e){if(Reflect.has(e,"value")){e.value=""}})}}},{key:"getField",value:function e(t){if(s.Type.isDomNode(t)){return t.closest(".main-ui-control-field, .main-ui-control-field-group")}return null}},{key:"render",value:function e(t,i){if(s.Type.isString(t)&&s.Type.isPlainObject(i)){var n=Object.entries(i).reduce(function(e,t){var i=babelHelpers.slicedToArray(t,2),s=i[0],n=i[1];return e.replace(new RegExp("{{".concat(s,"}}"),"g"),n)},t);var a=s.Dom.create("div",{html:n});var r=a.querySelector(".main-ui-control-field-group");if(r){return r}var l=a.querySelector(".main-ui-control-field");if(l){return l}var o=a.querySelector(".main-ui-filter-field-line");if(o){return o}}return null}},{key:"createInputText",value:function e(t){var i={block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:[{block:"main-ui-control-string",name:t.NAME,placeholder:t.PLACEHOLDER||"",value:s.Type.isString(t.VALUE)||s.Type.isNumber(t.VALUE)?t.VALUE:"",tabindex:t.TABINDEX}]};var n=BX.decl(i);this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:n})});return n}},{key:"createTextarea",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:[{block:"main-ui-control-textarea",name:t.NAME,placeholder:t.PLACEHOLDER||"",value:s.Type.isString(t.VALUE)||s.Type.isNumber(t.VALUE)?t.VALUE:"",tabindex:t.TABINDEX}]});var n=i.querySelector("textarea");var a=function e(){s.Dom.style(n,"height","1px");s.Dom.style(n,"height","".concat(n.scrollHeight,"px"))};s.Event.bind(n,"input",a);s.Event.bind(n,"change",a);s.Event.bind(n,"keyup",a);s.Event.bind(n,"cut",a);s.Event.bind(n,"paste",a);this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createCustomEntityFieldLayout",value:function e(t){var i={block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-control-entity",mix:"main-ui-control",attrs:{"data-multiple":JSON.stringify(t.MULTIPLE)},content:[]}};if("_label"in t.VALUES&&!!t.VALUES._label){if(t.MULTIPLE){var n=t.VALUES._label?t.VALUES._label:[];if(s.Type.isPlainObject(n)){n=Object.keys(n).map(function(e){return n[e]})}if(!s.Type.isArray(n)){n=[n]}var a=t.VALUES._value?t.VALUES._value:[];if(s.Type.isPlainObject(a)){a=Object.keys(a).map(function(e){return a[e]})}if(!s.Type.isArray(a)){a=[a]}n.forEach(function(e,t){i.content.content.push({block:"main-ui-square",tag:"span",name:e,item:{_label:e,_value:a[t]}})})}else{i.content.content.push({block:"main-ui-square",tag:"span",name:"_label"in t.VALUES?t.VALUES._label:"",item:t.VALUES})}}i.content.content.push({block:"main-ui-square-search",tag:"span",content:{block:"main-ui-control-string",name:"".concat(t.NAME,"_label"),tabindex:t.TABINDEX,type:"text",placeholder:t.PLACEHOLDER||""}},{block:"main-ui-control-string",name:t.NAME,type:"hidden",placeholder:t.PLACEHOLDER||"",value:"_value"in t.VALUES?t.VALUES._value:"",tabindex:t.TABINDEX});i=BX.decl(i);var r=BX.Filter.Utils.getBySelector(i,'.main-ui-control-string[type="text"]');BX.addClass(r,"main-ui-square-search-item");r.autocomplete="off";s.Event.bind(r,"focus",BX.proxy(this._onCustomEntityInputFocus,this));s.Event.bind(r,"click",BX.proxy(this._onCustomEntityInputClick,this));if(!this.bindDocument){s.Event.bind(document,"click",BX.proxy(this._onCustomEntityBlur,this));document.addEventListener("focus",BX.proxy(this._onDocumentFocus,this),true);this.bindDocument=true}s.Event.bind(r,"keydown",BX.proxy(this._onCustomEntityKeydown,this));s.Event.bind(i,"click",BX.proxy(this._onCustomEntityFieldClick,this));return i}},{key:"createDestSelector",value:function e(t){var i=this.createCustomEntityFieldLayout(t);BX.ready(BX.proxy(function(){BX.Filter.DestinationSelector.create(t.NAME,{filterId:this.parent.getParam("FILTER_ID"),fieldId:t.NAME})},this));this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createEntitySelector",value:function e(t){var i=this.createCustomEntityFieldLayout(t);BX.Filter.EntitySelector.create(t.NAME,{filter:this.parent,isMultiple:t.MULTIPLE,addEntityIdToResult:t.ADD_ENTITY_ID_TO_RESULT,dialogOptions:t.DIALOG_OPTIONS});this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createCustomEntity",value:function e(t){var i=this.createCustomEntityFieldLayout(t);this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"_onCustomEntityInputFocus",value:function e(t){BX.fireEvent(t.currentTarget,"click")}},{key:"_onCustomEntityInputClick",value:function e(t){t.preventDefault();t.stopPropagation();if(t.isTrusted){this.trustTimestamp=t.timeStamp;this.notTrustTimestamp=this.notTrustTimestamp||t.timeStamp}else{this.notTrustTimestamp=t.timeStamp}var i=new Date(this.trustTimestamp);var s=new Date(this.notTrustTimestamp);var n="".concat(i.getMinutes(),":").concat(i.getSeconds());var a="".concat(s.getMinutes(),":").concat(s.getSeconds());if(n!==a){this._onCustomEntityFocus(t)}}},{key:"_onDocumentFocus",value:function e(t){var i=this.getCustomEntityInstance();var s=i.getPopupContainer();var n=i.getLabelNode()===t.target;var a=!!s&&s.contains(t.target);if(!n&&!a){this._onCustomEntityBlur(t)}}},{key:"_onCustomEntityKeydown",value:function e(t){var i=t.target,n=t.currentTarget;var a=i.parentNode.parentNode;var r=a.querySelectorAll(".main-ui-square");var l=r[r.length-1];if(!s.Type.isDomNode(l)){return}if(BX.Filter.Utils.isKey(t,"backspace")&&n.selectionStart===0){if(s.Dom.hasClass(l,"main-ui-square-selected")){var o=a.querySelector('input[type="hidden"]');if(s.Type.isDomNode(o)){o.value="";BX.fireEvent(o,"input")}s.Dom.remove(l);return}s.Dom.addClass(l,"main-ui-square-selected");return}s.Dom.removeClass(l,"main-ui-square-selected")}},{key:"_onCustomEntityFieldClick",value:function e(t){var i=t.target;if(s.Dom.hasClass(i,"main-ui-square-delete")){var n=i.closest(".main-ui-square");if(s.Type.isDomNode(n)){var a=this.getCustomEntityInstance();BX.onCustomEvent(window,"BX.Main.Filter:customEntityRemove",[a]);s.Dom.remove(n)}return}var r=i.querySelector('input[type="text"]');if(s.Type.isDomNode(r)){BX.fireEvent(r,"focus")}}},{key:"_onCustomEntityBlur",value:function e(t){var i={stopBlur:false};BX.onCustomEvent(window,"BX.Main.Filter:onGetStopBlur",[t,i]);if(typeof i.stopBlur==="undefined"||!i.stopBlur){var n=this.getCustomEntityInstance();BX.onCustomEvent(window,"BX.Main.Filter:customEntityBlur",[n]);s.Event.unbind(n.getPopupContainer(),"click",this._stopPropagation);s.Dom.removeClass(n.getField(),"main-ui-focus")}}},{key:"_stopPropagation",value:function e(t){t.stopPropagation()}},{key:"getCustomEntityInstance",value:function e(){if(!(this.customEntityInstance instanceof BX.Main.ui.CustomEntity)){this.customEntityInstance=new BX.Main.ui.CustomEntity}return this.customEntityInstance}},{key:"_onCustomEntityFocus",value:function e(t){t.stopPropagation();var i=t.currentTarget;var n=i.closest(".main-ui-control-entity");var a=this.getCustomEntityInstance();a.setField(n);BX.onCustomEvent("BX.Main.Filter:customEntityFocus",[a]);var r=a.getPopupContainer();if(s.Type.isElementNode(r)){s.Event.bind(r,"click",this._stopPropagation)}s.Dom.addClass(n,"main-ui-focus")}},{key:"createCustom",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-custom",mix:["main-ui-control","main-ui-custom-style"],attrs:{"data-name":t.NAME},content:""}});if(s.Type.isString(t.VALUE)){var n=function(){if(Reflect.has(t,"_VALUE")){return t._VALUE}return""}();var a=s.Text.decode(t.VALUE).replace('name="'.concat(t.NAME,'"'),'name="'.concat(t.NAME,'" value="').concat(n,'"'));var r=i.querySelector(".main-ui-custom");s.Runtime.html(r,a)}this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createSelect",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:this.parent.settings.classSelect,name:t.NAME,items:t.ITEMS,value:"VALUE"in t?t.VALUE:t.ITEMS[0],params:t.PARAMS,tabindex:t.TABINDEX,valueDelete:false}});this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createMultiSelect",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-multi-select",name:t.NAME,tabindex:"TABINDEX"in t?t.TABINDEX:"",placeholder:!this.parent.getParam("ENABLE_LABEL")&&"PLACEHOLDER"in t?t.PLACEHOLDER:"",items:"ITEMS"in t?t.ITEMS:[],value:"VALUE"in t?t.VALUE:[],params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true}});this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:i})});return i}},{key:"createCustomDate",value:function e(t){var i={block:"main-ui-control-field-group",type:t.TYPE,mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel,"main-ui-filter-date-group"]:["main-ui-filter-date-group"],label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:"TABINDEX"in t?t.TABINDEX:"",name:"NAME"in t?t.NAME:"",deleteButton:true,content:[]};if(s.Type.isPlainObject(t.VALUE.days)){t.VALUE.days=Object.keys(t.VALUE.days).map(function(e){return t.VALUE.days[e]})}var n=t.DAYS.filter(function(e){return t.VALUE.days.some(function(t){return t===e.VALUE})});var a={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],placeholder:t.DAYS_PLACEHOLDER,dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_days"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.DAYS,value:n,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.DAYS_PLACEHOLDER}}};if(s.Type.isPlainObject(t.VALUE.months)){t.VALUE.months=Object.keys(t.VALUE.months).map(function(e){return t.VALUE.months[e]})}var r=t.MONTHS.filter(function(e){return t.VALUE.months.some(function(t){return t===e.VALUE})});var l={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_months"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.MONTHS,value:r,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.MONTHS_PLACEHOLDER}}};if(s.Type.isPlainObject(t.VALUE.years)){t.VALUE.years=Object.keys(t.VALUE.years).map(function(e){return t.VALUE.years[e]})}var u=t.YEARS.filter(function(e){return t.VALUE.years.some(function(t){return t===e.VALUE})});var c={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_years"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.YEARS,value:u,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.YEARS_PLACEHOLDER}}};i.content.push(a);i.content.push(l);i.content.push(c);var h=BX.decl(i);this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:h})});return h}},{key:"_onDateTypeChange",value:function e(t,i){var n=this;if(this.parent.getPopup().contentContainer.contains(t.node)){var a={};var r=null;var l;var o;var u;if(s.Type.isPlainObject(i)&&Reflect.has(i,"VALUE")){var c=t.getNode();var h=t.getParams();var d=c.dataset.name;if(!s.Type.isPlainObject(h)&&(d.endsWith("_datesel")||d.endsWith("_numsel"))){var p=c.parentNode.parentNode;a.TABINDEX=t.getInput().getAttribute("tabindex");a.SUB_TYPES=t.getItems();a.SUB_TYPE=i;a.NAME=p.dataset.name;a.TYPE=p.dataset.type;a.VALUE_REQUIRED=p.dataset.valueRequired==="true";var f=this.parent.getPreset().getCurrentPresetData();if(s.Type.isArray(f.FIELDS)){var m=f.FIELDS.find(function(e){return e.NAME===a.NAME});if(s.Type.isNil(m)){m=this.parent.params.FIELDS_STUBS.find(function(e){return e.TYPE===a.TYPE})}if(!s.Type.isNil(m)){if(d.endsWith("_datesel")){a.MONTHS=m.MONTHS;a.MONTH=m.MONTH;a.YEARS=m.YEARS;a.YEAR=m.YEAR;a.QUARTERS=m.QUARTERS;a.QUARTER=m.QUARTER;a.ENABLE_TIME=m.ENABLE_TIME;a.YEARS_SWITCHER=m.YEARS_SWITCHER}a.VALUES=m.VALUES;a.REQUIRED=m.REQUIRED}}if(this.parent.getParam("ENABLE_LABEL")){l=p.querySelector(".main-ui-control-field-label");a.LABEL=l.innerText}if(d.endsWith("_datesel")){r=this.createDate(a)}else{r=this.createNumber(a)}if(s.Type.isArray(this.parent.fieldsList)){u=this.parent.fieldsList.indexOf(p);if(u!==-1){this.parent.fieldsList[u]=r;this.parent.registerDragItem(r)}}this.parent.unregisterDragItem(p);o=babelHelpers.toConsumableArray(r.querySelectorAll(".main-ui-control-field"));if(s.Type.isArray(o)&&o.length){o.forEach(function(e){e.FieldController=new BX.Filter.FieldController(e,n.parent)})}s.Dom.insertAfter(r,p);s.Dom.remove(p)}}}}},{key:"createNumber",value:function e(t){var i=this.parent.numberTypes;var s=this.parent.params.ENABLE_LABEL;var n=t.SUB_TYPE,a=n===void 0?{}:n,r=t.SUB_TYPES,l=r===void 0?[]:r,u=t.TABINDEX,c=u===void 0?"":u,h=t.VALUES,d=h===void 0?{_from:"",_to:""}:h,p=t.LABEL,f=p===void 0?"":p,m=t.TYPE;var E=a.VALUE||i.SINGLE;var g=a.PLACEHOLDER||"";var y=t.NAME.replace("_numsel","");var B=function(){if(s){return["main-ui-filter-wield-with-label","main-ui-filter-number-group"]}return["main-ui-filter-number-group"]}();var v={block:"number-group",type:m,mix:B,label:s?f:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:c,value:a,items:l,name:y,deleteButton:true,content:[]};if(E!==i.LESS){var A={block:"main-ui-control-field",type:m,dragButton:false,content:{block:"main-ui-number",mix:["filter-type-single"],calendarButton:true,valueDelete:true,placeholder:g,name:"".concat(y,"_from"),tabindex:c,value:d._from||""}};v.content.push(A)}if(E===i.RANGE){var P={block:"main-ui-filter-field-line",content:{block:"main-ui-filter-field-line-item",tag:"span"}};v.content.push(P)}if(E===i.RANGE||E===i.LESS){var S={block:"main-ui-control-field",type:m,dragButton:false,content:{block:"main-ui-number",calendarButton:true,valueDelete:true,name:"".concat(y,"_to"),tabindex:c,value:d._to||""}};v.content.push(S)}var _=BX.decl(v);this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t),node:_})});return _}},{key:"createDate",value:function e(t){var i=this;var n=this.parent,a=n.dateTypes,r=n.additionalDateTypes;var l=t.SUB_TYPE,u=l===void 0?{}:l,f=t.SUB_TYPES,m=f===void 0?[]:f,E=t.PLACEHOLDER,g=E===void 0?"":E,y=t.VALUES,B=y===void 0?{_from:"",_to:"",_quarter:"",_days:"",_month:"",_year:"",_allow_year:""}:y,v=t.TABINDEX,A=v===void 0?"":v,P=t.ENABLE_TIME,S=P===void 0?false:P,_=t.LABEL,L=_===void 0?"":_,b=t.TYPE,I=t.VALUE_REQUIRED,T=I===void 0?false:I,X=t.REQUIRED,F=X===void 0?false:X;var D=this.parent.params.ENABLE_LABEL;var C=u.VALUE||a.NONE;var N=t.NAME.replace("_datesel","");var U=function(){if(D){return["main-ui-filter-wield-with-label","main-ui-filter-date-group"]}return["main-ui-filter-date-group"]}();var R={block:"date-group",type:b,mix:U,label:D?L:"",dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:A,value:u,items:m,name:N,enableTime:S,deleteButton:true,content:[]};if(C===a.EXACT){var k=c({type:b,name:"".concat(N.NAME,"_from"),placeholder:g,tabindex:A,value:B._from||"",enableTime:S});R.content.push(k)}if(C===a.NEXT_DAYS||C===a.PREV_DAYS||C===r.PREV_DAY||C===r.NEXT_DAY||C===r.MORE_THAN_DAYS_AGO||C===r.AFTER_DAYS){var O=h({type:b,name:"".concat(N,"_days"),tabindex:A,value:B._days||"",placeholder:g});R.content.push(O)}if(C===a.RANGE){var M={block:"main-ui-filter-range-group",content:[c({type:b,name:"".concat(N,"_from"),placeholder:g,tabindex:A,value:B._from||"",enableTime:S}),d(),c({type:b,name:"".concat(N,"_to"),placeholder:g,tabindex:A,value:B._to||"",enableTime:S})]};R.content.push(M)}if(C===a.MONTH){var V=t.MONTHS,x=t.MONTH,w=t.YEARS,q=t.YEAR;var j=V.find(function(e){return e.VALUE===B._month})||x||V[0];var Y=w.find(function(e){return e.VALUE===B._year})||q||w[0];R.content.push(p({name:"".concat(N,"_month"),value:j,items:V,tabindex:A}),p({name:"".concat(N,"_year"),value:Y,items:w,tabindex:A}))}if(C===a.QUARTER){var H=t.YEARS,G=t.YEAR,W=t.QUARTERS,Q=t.QUARTER,K=t.PARAMS;var J=H.find(function(e){return e.VALUE===B._year})||G||H[0];var z=W.find(function(e){return e.VALUE===B._quarter})||Q||W[0];R.content.push(p({name:"".concat(N,"_year"),value:J,items:H,tabindex:A}),p({name:"".concat(N,"_quarter"),value:z,items:W,tabindex:A,params:K}))}if(C===a.YEAR){var Z=t.YEARS,$=t.YEAR;var ee=Z.find(function(e){return e.VALUE===B._year})||$||Z[0];R.content.push(p({name:"".concat(N,"_year"),value:ee,items:Z,tabindex:A}))}if(C==="CUSTOM_DATE"){var te=m.find(function(e){return e.VALUE==="CUSTOM_DATE"});if(te){var ie=s.Runtime.clone(te.DECL);if(s.Type.isArray(B._days)){ie.VALUE.days=B._days}if(s.Type.isArray(B._month)){ie.VALUE.months=B._month}if(s.Type.isArray(B._year)){ie.VALUE.years=B._year}ie.mix=ie.filter(function(e){return e!=="main-ui-filter-wield-with-label"});var se=this.createCustomDate(ie);var ne=babelHelpers.toConsumableArray(se.querySelectorAll(".main-ui-item-icon-container, .main-ui-filter-icon-grab"));ne.forEach(function(e){return s.Dom.remove(e)});R.content.push(se);R.push("main-ui-filter-custom-date-group")}}if(C!==a.NONE&&C!==r.CUSTOM_DATE&&t.YEARS_SWITCHER){var ae=s.Runtime.clone(t.YEARS_SWITCHER);var re=ae.ITEMS;ae.VALUE=re.reduce(function(e,t){return t.VALUE===B._allow_year?t:e});var le=this.createSelect(ae);s.Dom.addClass(le,["main-ui-filter-year-switcher","main-ui-filter-with-padding"]);s.Dom.removeClass(le,"main-ui-filter-wield-with-label");var oe=babelHelpers.toConsumableArray(le.querySelectorAll(".main-ui-item-icon-container, .main-ui-filter-icon-grab"));oe.forEach(function(e){return s.Dom.remove(e)});var ue=R.content.length-1;var ce=R.content[ue];if(s.Type.isPlainObject(ce)){if(!s.Type.isArray(ce.mix)){ce.mix=[]}ce.mix.push("main-ui-filter-remove-margin-right")}if(s.Type.isDomNode(ce)){s.Dom.addClass(ce,"main-ui-filter-remove-margin-right")}requestAnimationFrame(function(){s.Dom.addClass(le.previousElementSibling,"main-ui-filter-remove-margin-right")});R.content.push(le);R.mix.push("main-ui-filter-date-with-years-switcher")}var he=BX.decl(R);var de=s.Runtime.debounce(this.onDateChange,500,this);var pe=babelHelpers.toConsumableArray(he.querySelectorAll(".main-ui-date-input"));pe.forEach(function(e){e.addEventListener("change",de);e.addEventListener("input",de);var t=e.parentNode;var s=t.querySelector(".main-ui-control-value-delete");if(s){s.addEventListener("click",function(){setTimeout(function(){i.onDateChange({target:e})})})}});if(T){he.dataset.valueRequired=true;var fe=[].concat(babelHelpers.toConsumableArray(pe),babelHelpers.toConsumableArray(he.querySelectorAll(".main-ui-number-input")));fe.forEach(function(e){e.addEventListener("change",i.checkRequiredDateValue.bind(i));e.addEventListener("input",i.checkRequiredDateValue.bind(i));var t=e.parentNode;var n=t.querySelector(".main-ui-control-value-delete");if(n){n.addEventListener("click",function(){setTimeout(function(){i.checkRequiredDateValue({target:e})})})}s.Event.bindOnce(e,"mouseout",function(){i.checkRequiredDateValue({target:e})})})}if(F){var me=he.querySelector(".main-ui-filter-field-delete");if(me){BX.remove(me)}}var Ee={};this.parent.prepareControlDateValue(Ee,N,he);Object.entries(Ee).forEach(function(e){var t=babelHelpers.slicedToArray(e,2),i=t[0],s=t[1];Ee[i.replace(N,"")]=s;delete Ee[i]});this.parent.getEmitter().emit("init",{field:new o({parent:this.parent,options:babelHelpers.objectSpread({},t,{VALUES:Ee}),node:he})});return he}},{key:"checkRequiredDateValue",value:function e(t){if(t.target.value===""){this.showError({id:"valueError",target:t.target,text:this.parent.params.MAIN_UI_FILTER__VALUE_REQUIRED});return}this.hideError({id:"valueError",target:t.target})}},{key:"onDateChange",value:function e(t){var i=this;if(g.get(t.target)===t.target.value){return}g.set(t.target,t.target.value);if(t.target.value===""){this.hideError({id:"formatError",target:t.target});return}BX.ajax.runComponentAction("bitrix:main.ui.filter","checkDateFormat",{mode:"ajax",data:{value:t.target.value,format:BX.message("FORMAT_DATETIME")}}).then(function(e){if(!e.data.result){i.showError({id:"formatError",target:t.target});return}i.hideError({id:"formatError",target:t.target})})}},{key:"showError",value:function e(t){var i=t.id,n=t.target,a=t.text,r=a===void 0?null:a;s.Dom.style(n,"border-color","#FF5752");if(m.has(n)&&E.get(n)===i){s.Dom.remove(m.get(n))}var l=this.parent.params,o=l.MAIN_UI_FILTER__DATE_ERROR_TITLE,u=l.MAIN_UI_FILTER__DATE_ERROR_LABEL;var c=r||"".concat(u," ").concat(s.Loc.getMessage("FORMAT_DATE"));var h=s.Tag.render(f(),o,c);m.set(n,h);E.set(n,i);s.Dom.insertAfter(h,n);s.Dom.attr(n,"is-valid","false")}},{key:"hideError",value:function e(t){var i=t.id,n=t.target;s.Dom.style(n,"border-color",null);if(m.has(n)&&E.get(n)===i){s.Dom.remove(m.get(n))}s.Dom.attr(n,"is-valid","true")}}]);return e}();var B=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=null;this.presets=null;this.container=null;this.init(t)}babelHelpers.createClass(e,[{key:"init",value:function e(t){this.parent=t}},{key:"bindOnPresetClick",value:function e(){var t=this;(this.getPresets()||[]).forEach(function(e){s.Event.bind(e,"click",BX.delegate(t._onPresetClick,t))})}},{key:"getAddPresetField",value:function e(){return this.getContainer().querySelector(".main-ui-filter-new-filter")}},{key:"getAddPresetFieldInput",value:function e(){return this.getAddPresetField().querySelector(".main-ui-filter-sidebar-edit-control")}},{key:"clearAddPresetFieldInput",value:function e(){var t=this.getAddPresetFieldInput();if(s.Type.isDomNode(t)){t.value=""}}},{key:"normalizePreset",value:function e(t){return t.closest(".main-ui-filter-sidebar-item")}},{key:"deactivateAllPresets",value:function e(){this.getPresets().forEach(function(e){s.Dom.removeClass(e,"main-ui-filter-current-item")})}},{key:"createSidebarItem",value:function e(t,i,n){return BX.decl({block:"sidebar-item",text:s.Text.decode(i),id:t,pinned:n,noEditPinTitle:this.parent.getParam("MAIN_UI_FILTER__IS_SET_AS_DEFAULT_PRESET"),editNameTitle:this.parent.getParam("MAIN_UI_FILTER__EDIT_PRESET_TITLE"),removeTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_PRESET"),editPinTitle:this.parent.getParam("MAIN_UI_FILTER__SET_AS_DEFAULT_PRESET"),dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_TITLE")})}},{key:"activatePreset",value:function e(t){var i=this;this.deactivateAllPresets();var n=function(){if(s.Type.isString(t)){return i.getPresetNodeById(t)}return t}();if(s.Type.isDomNode(n)){s.Dom.addClass(n,"main-ui-filter-current-item")}}},{key:"getPresetNodeById",value:function e(t){return this.getPresets().find(function(e){return s.Dom.attr(e,"data-id")===t})}},{key:"getPresetId",value:function e(t){return s.Dom.attr(t,"data-id")}},{key:"updatePresetName",value:function e(t,i){if(s.Type.isDomNode(t)&&s.Type.isString(i)&&i!==""){var n=this.getPresetNameNode(t);if(s.Type.isDomNode(n)){s.Runtime.html(n,i)}}}},{key:"removePreset",value:function e(t,i,s){var n=this.getCurrentPresetId();var a=[];var r={preset_id:i,is_default:s};var l={FILTER_ID:this.parent.getParam("FILTER_ID"),action:"REMOVE_FILTER"};this.parent.saveOptions(r,l);BX.remove(t);if(BX.type.isArray(this.parent.params.PRESETS)){a=this.parent.params.PRESETS.filter(function(e){return e.ID!==i},this);this.parent.params.PRESETS=a}if(BX.type.isArray(this.parent.editablePresets)){a=this.parent.editablePresets.filter(function(e){return e.ID!==i},this);this.parent.editablePresets=a}if(i===n){this.parent.getSearch().removePreset();this.resetPreset()}}},{key:"pinPreset",value:function e(t){if(!BX.type.isNotEmptyString(t)){t="default_filter"}var i=this.getPresetNodeById(t);if(this.parent.getParam("VALUE_REQUIRED_MODE")){if(t==="default_filter"){return}}var n={FILTER_ID:this.parent.getParam("FILTER_ID"),GRID_ID:this.parent.getParam("GRID_ID"),action:"PIN_PRESET"};var a={preset_id:t};this.getPresets().forEach(function(e){s.Dom.removeClass(e,this.parent.settings.classPinnedPreset)},this);BX.addClass(i,this.parent.settings.classPinnedPreset);this.parent.saveOptions(a,n)}},{key:"_onPresetClick",value:function e(t){var i;var n;var a;var r;var l;var o;var u;t.preventDefault();u=this.parent;o=u.settings;l=t.target;i=t.currentTarget;n=this.getPresetId(i);a=this.getPreset(n);if(s.Dom.hasClass(l,o.classPinButton)){if(this.parent.isEditEnabled()){if(s.Dom.hasClass(i,o.classPinnedPreset)){this.pinPreset("default_filter")}else{this.pinPreset(n)}}}if(s.Dom.hasClass(l,o.classPresetEditButton)){this.enableEditPresetName(i)}if(s.Dom.hasClass(l,o.classPresetDeleteButton)){r="IS_DEFAULT"in a?a.IS_DEFAULT:false;this.removePreset(i,n,r);return false}if(!s.Dom.hasClass(l,o.classPresetDragButton)&&!s.Dom.hasClass(l,o.classAddPresetFieldInput)){if(this.parent.isEditEnabled()){this.updateEditablePreset(this.getCurrentPresetId())}var c=this.getPreset(this.getCurrentPresetId());var h=this.getPreset(n);c.ADDITIONAL=[];h.ADDITIONAL=[];this.activatePreset(i);this.applyPreset(n);if(!this.parent.isEditEnabled()){u.applyFilter(null,true);if(t.isTrusted){u.closePopup()}if(u.isAddPresetEnabled()){u.disableAddPreset()}}}}},{key:"applyPinnedPreset",value:function e(){var t=this.parent;var i=this.isPinned(this.getCurrentPresetId());var s;if(this.parent.getParam("VALUE_REQUIRED")&&this.getPinnedPresetId()==="default_filter"){this.applyPreset("default_filter");this.deactivateAllPresets();s=this.parent.applyFilter()}else if(!i){var n=this.getPinnedPresetId();var a=this.getPinnedPresetNode();var r=false;var l=true;this.deactivateAllPresets();this.activatePreset(a);this.applyPreset(n);s=t.applyFilter(r,l);t.closePopup()}else{s=t.resetFilter()}return s}},{key:"updateEditablePreset",value:function e(t){var i=this.parent.getFilterFieldsValues();var s=this.getFields().map(function(e){return BX.data(e,"name")});var n=this.parent.preparePresetFields(i,s);var a=this.getPreset(t);a.FIELDS=n;a.TITLE=this.getPresetInput(this.getPresetNodeById(t)).value;a.ROWS=s}},{key:"getPresetInput",value:function e(t){return BX.Filter.Utils.getByClass(t,this.parent.settings.classPresetEditInput)}},{key:"enableEditPresetName",value:function e(t){var i=this.getPresetInput(t);BX.addClass(t,this.parent.settings.classPresetNameEdit);i.focus();i.value=BX.util.htmlspecialcharsback(i.value);s.Event.bind(i,"input",BX.delegate(this._onPresetNameInput,this))}},{key:"_onPresetNameInput",value:function e(t){var i=this.parent.getSearch();var s=t.currentTarget.value;var n=BX.findParent(t.currentTarget,{className:this.parent.settings.classPreset},true,false);var a=this.getPresetId(n);var r=this.getCurrentPresetId();var l={ID:a,TITLE:s};if(a===r){i.updatePreset(l)}}},{key:"getPresetNameNode",value:function e(t){return BX.Filter.Utils.getByClass(t,this.parent.settings.classPresetName)}},{key:"disableEditPresetName",value:function e(t){var i=this.getPresetInput(t);s.Dom.removeClass(t,this.parent.settings.classPresetNameEdit);if(BX.type.isDomNode(i)){i.blur();BX.unbind(i,"input",BX.delegate(this._onPresetNameInput,this))}}},{key:"getPreset",value:function e(t,i){var s=this.parent.getParam(i?"DEFAULT_PRESETS":"PRESETS",[]);if(this.parent.isEditEnabled()&&!i){s=this.parent.editablePresets}var n=s.filter(function(e){return e.ID===t});if(t==="tmp_filter"&&!n.length){var a=BX.clone(this.getPreset("default_filter"));a.ID="tmp_filter";s.push(a);n.push(a)}return n.length!==0?n[0]:null}},{key:"getPresetField",value:function e(t,i){var s=this.getPreset(t);var n=null;if(BX.type.isPlainObject(s)&&"FIELDS"in s&&BX.type.isArray(s.FIELDS)){n=s.FIELDS.filter(function(e){return e.NAME===i});n=n.length?n[0]:null}return n}},{key:"applyPreset",value:function e(t,i){t=i?"default_filter":t||"default_filter";var s=this.getPreset(t);if(t!=="default_preset"){s=this.extendPreset(s)}this.parent.getSearch().updatePreset(s);this.updatePresetFields(s,i)}},{key:"extendPreset",value:function e(t){var i=BX.clone(this.getPreset("default_filter"));if(BX.type.isPlainObject(t)){t=BX.clone(t);t.FIELDS.forEach(function(e){var t;var s=i.FIELDS.some(function(i,s){var n=false;if(i.NAME===e.NAME){t=s;n=true}return n},this);if(s&&t||s&&t===0){i.FIELDS[t]=e}else if(!this.isEmptyField(e)){i.FIELDS.push(e)}},this);t.FIELDS=i.FIELDS}return t}},{key:"isEmptyField",value:function e(t){var i=true;if(t.TYPE===this.parent.types.STRING){if(t.VALUE&&t.VALUE.length){i=false}}if(t.TYPE===this.parent.types.SELECT){if(BX.type.isPlainObject(t.VALUE)&&"VALUE"in t.VALUE&&t.VALUE.VALUE){i=false}}if(t.TYPE===this.parent.types.MULTI_SELECT){if(BX.type.isArray(t.VALUE)&&t.VALUE.length){i=false}}if(t.TYPE===this.parent.types.CUSTOM_DATE){if(BX.type.isArray(t.VALUE.days)&&t.VALUE.days.length||BX.type.isArray(t.VALUE.months)&&t.VALUE.months.length||BX.type.isArray(t.VALUE.years)&&t.VALUE.years.length){i=false}}if(t.TYPE===this.parent.types.CUSTOM_ENTITY||t.TYPE===this.parent.types.DEST_SELECTOR||t.TYPE===this.parent.types.ENTITY_SELECTOR){if(BX.type.isPlainObject(t.VALUES)){if(BX.type.isNotEmptyString(t.VALUES._label)&&BX.type.isNotEmptyString(t.VALUES._value)){i=false}if(BX.type.isPlainObject(t.VALUES._label)&&BX.type.isPlainObject(t.VALUES._value)&&Object.keys(t.VALUES._label).length&&Object.keys(t.VALUES._value).length){i=false}if(BX.type.isArray(t.VALUES._label)&&BX.type.isArray(t.VALUES._value)&&t.VALUES._label.length&&t.VALUES._value.length){i=false}if((BX.type.isArray(t.VALUES._label)&&t.VALUES._label.length||BX.type.isPlainObject(t.VALUES._label)&&Object.keys(t.VALUES._label).length)&&(BX.type.isArray(t.VALUES._value)&&t.VALUES._value.length||BX.type.isPlainObject(t.VALUES._value)&&Object.keys(t.VALUES._value).length)){i=false}}}if(t.TYPE===this.parent.types.DATE){var s="_datesel"in t.VALUES?t.VALUES._datesel:t.SUB_TYPE.VALUE;if(BX.type.isPlainObject(t.VALUES)&&(t.VALUES._from||t.VALUES._to||t.VALUES._quarter||t.VALUES._month&&!BX.type.isArray(t.VALUES._month)||t.VALUES._year&&!BX.type.isArray(t.VALUES._year)||t.VALUES._days&&!BX.type.isArray(t.VALUES._days))||BX.type.isArray(t.VALUES._days)&&t.VALUES._days.length||BX.type.isArray(t.VALUES._month)&&t.VALUES._month.length||BX.type.isArray(t.VALUES._year)&&t.VALUES._year.length||s===this.parent.dateTypes.CURRENT_DAY||s===this.parent.dateTypes.CURRENT_WEEK||s===this.parent.dateTypes.CURRENT_MONTH||s===this.parent.dateTypes.CURRENT_QUARTER||s===this.parent.dateTypes.LAST_7_DAYS||s===this.parent.dateTypes.LAST_30_DAYS||s===this.parent.dateTypes.LAST_60_DAYS||s===this.parent.dateTypes.LAST_90_DAYS||s===this.parent.dateTypes.LAST_WEEK||s===this.parent.dateTypes.LAST_MONTH||s===this.parent.dateTypes.TOMORROW||s===this.parent.dateTypes.YESTERDAY||s===this.parent.dateTypes.NEXT_WEEK||s===this.parent.dateTypes.NEXT_MONTH){i=false}}if(t.TYPE===this.parent.types.NUMBER){if(BX.type.isPlainObject(t.VALUES)&&(t.VALUES._from||t.VALUES._to)){i=false}}if(t.TYPE===this.parent.types.CHECKBOX){if(BX.type.isPlainObject(t.VALUE)&&t.VALUE.VALUE){i=false}}return i}},{key:"resetPreset",value:function e(t){this.applyPreset("",t)}},{key:"getFields",value:function e(){var t=this.parent.getFieldListContainer();var i=null;if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getBySelector(t.parentNode,".".concat(this.parent.settings.classFileldControlList," > div"),true)}return i}},{key:"getField",value:function e(t){var i=this.getFields();var s=null;var n;var a;if(BX.type.isArray(i)&&i.length){a=i.filter(function(e){if(BX.type.isDomNode(e)){n=BX.data(e,"name")}return n===t.NAME},this);s=a.length>0?a[0]:null}return s}},{key:"removeField",value:function e(t,i){var s;var n;i=i||false;if(BX.type.isPlainObject(t)){n=t.NAME;t=this.getField(t);if(BX.type.isArray(this.parent.fieldsList)){s=this.parent.fieldsList.indexOf(t);if(s!==-1){delete this.parent.fieldsList[s]}}this.parent.unregisterDragItem(t)}if(BX.type.isDomNode(t)){n=BX.data(t,"name");this.parent.getFields().deleteField(t)}if(!this.parent.isEditEnabled()&&!this.parent.isAddPresetEnabled()){var a=this.getCurrentPresetId();var r=this.getPresetField(a,n);if(r&&!this.isEmptyField(r)){this.deactivateAllPresets();this.parent.applyFilter()}}if(!i){this.parent.saveFieldsSort()}}},{key:"removeFields",value:function e(t){t.forEach(function(e){this.removeField(e,true)},this);this.parent.saveFieldsSort()}},{key:"addField",value:function e(t){var i;var s;var n;if(BX.type.isPlainObject(t)){i=this.parent.getFieldListContainer();n=this.parent.getControls();s=BX.type.isArray(n)?n[n.length-1]:null;if(BX.type.isDomNode(s)){if(s.nodeName!=="INPUT"){s=BX.Filter.Utils.getByTag(s,"input")}if(BX.type.isDomNode(s)){t.TABINDEX=parseInt(s.getAttribute("tabindex"))+1}}else{t.TABINDEX=2}if(BX.type.isDomNode(i)){s=this.createControl(t);if(BX.type.isDomNode(s)){BX.append(s,i);if(BX.type.isArray(this.parent.fieldsList)){this.parent.fieldsList.push(s)}this.parent.registerDragItem(s)}}}if(!this.parent.isEditEnabled()&&!this.parent.isAddPresetEnabled()){var a=this.getCurrentPresetId();var r=this.getPresetField(a,t.NAME);if(r&&!this.isEmptyField(r)){this.parent.updatePreset("tmp_filter");this.deactivateAllPresets();this.parent.getSearch().updatePreset(this.getPreset("tmp_filter"))}}this.parent.saveFieldsSort()}},{key:"createControl",value:function e(t){var i;switch(t.TYPE){case this.parent.types.STRING:{i=this.parent.getFields().createInputText(t);break}case this.parent.types.TEXTAREA:{i=this.parent.getFields().createTextarea(t);break}case this.parent.types.SELECT:{i=this.parent.getFields().createSelect(t);break}case this.parent.types.MULTI_SELECT:{i=this.parent.getFields().createMultiSelect(t);break}case this.parent.types.NUMBER:{i=this.parent.getFields().createNumber(t);break}case this.parent.types.DATE:{i=this.parent.getFields().createDate(t);break}case this.parent.types.CUSTOM_DATE:{i=this.parent.getFields().createCustomDate(t);break}case this.parent.types.DEST_SELECTOR:{i=this.parent.getFields().createDestSelector(t);break}case this.parent.types.ENTITY_SELECTOR:{i=this.parent.getFields().createEntitySelector(t);break}case this.parent.types.CUSTOM:{i=this.parent.getFields().createCustom(t);break}case this.parent.types.CUSTOM_ENTITY:{i=this.parent.getFields().createCustomEntity(t);break}default:{break}}if(BX.type.isDomNode(i)){i.dataset.name=t.NAME;i.FieldController=new BX.Filter.FieldController(i,this.parent);if(t.REQUIRED){var s=i.querySelector(".main-ui-filter-field-delete");if(s){BX.remove(s)}}}return i}},{key:"removeNotCompareVariables",value:function e(t,i){if(BX.type.isPlainObject(t)){var s=this.parent.dateTypes;var n=this.parent.additionalDateTypes;if("FIND"in t){delete t.FIND}if(!i){Object.keys(t).forEach(function(e){if(e.indexOf("_numsel")!==-1){delete t[e]}if(e.indexOf("_datesel")!==-1){var i=t[e];if(i===s.EXACT||i===s.RANGE||i===n.PREV_DAY||i===n.NEXT_DAY||i===n.MORE_THAN_DAYS_AGO||i===n.AFTER_DAYS||i===s.PREV_DAYS||i===s.NEXT_DAYS||i===s.YEAR||i===s.MONTH||i===s.QUARTER||i===s.NONE||i===s.CUSTOM_DATE){delete t[e]}}var a=this.parent.getFieldByName(e);if(t[e]===""&&(!a||!a.STRICT)){delete t[e]}},this)}}}},{key:"isPresetValuesModified",value:function e(t){var i=this.getPreset(t);var s=this.parent.preparePresetSettingsFields(i.FIELDS);var n=this.parent.getFilterFieldsValues();this.removeNotCompareVariables(s);this.removeNotCompareVariables(n);var a=BX.Filter.Utils.sortObject(s);var r=BX.Filter.Utils.sortObject(n);return!Object.keys(a).every(function(e){return a[e]===r[e]||(BX.type.isPlainObject(a[e])||BX.type.isArray(a[e]))&&BX.Filter.Utils.objectsIsEquals(a[e],r[e])})}},{key:"getAdditionalValues",value:function e(t){var i=this.getPreset(t);var s=i.FIELDS.filter(function(e){return!this.isEmptyField(e)},this);var n=this.parent.preparePresetSettingsFields(s);var a=this.parent.getFilterFieldsValues();this.removeNotCompareVariables(n,true);this.removeNotCompareVariables(a,true);this.removeSameProperties(a,n);return a}},{key:"removeSameProperties",value:function e(t,i){if(BX.type.isPlainObject(t)&&BX.type.isPlainObject(i)){Object.keys(i).forEach(function(e){if(e in t){delete t[e]}})}}},{key:"removeAdditionalField",value:function e(t){var i=this.getPreset(this.getCurrentPresetId());if(BX.type.isArray(i.ADDITIONAL)){i.ADDITIONAL=i.ADDITIONAL.filter(function(e){return e.NAME!==t})}}},{key:"updatePresetFields",value:function e(t,i){var s=this;var n;var a;var r=[];if(BX.type.isPlainObject(t)&&"FIELDS"in t){n=t.FIELDS;if(BX.type.isArray(t.ADDITIONAL)){t.ADDITIONAL.filter(function(e){return s.parent.params.FIELDS.some(function(t){return e.NAME===t.NAME})}).forEach(function(e){var t=false;e.IS_PRESET_FIELD=true;n.forEach(function(i,s){if(e.NAME===i.NAME){n[s]=e;t=true}});if(!t){n.push(e)}})}(n||[]).filter(function(e){return s.parent.params.FIELDS.some(function(t){return e.NAME===t.NAME})}).forEach(function(e,t){e.TABINDEX=t+1;if(i){switch(e.TYPE){case this.parent.types.SELECT:{e.VALUE=e.ITEMS[0];break}case this.parent.types.MULTI_SELECT:{e.VALUE=[];break}case this.parent.types.DATE:{e.SUB_TYPE=e.SUB_TYPES[0];e.VALUES={_from:"",_to:"",_days:""};break}case this.parent.types.CUSTOM_DATE:{e.VALUE={days:[],months:[],years:[]};break}case this.parent.types.NUMBER:{e.SUB_TYPE=e.SUB_TYPES[0];e.VALUES={_from:"",_to:""};break}case this.parent.types.CUSTOM_ENTITY:{e.VALUES={_label:"",_value:""};break}case this.parent.types.CUSTOM:{e._VALUE="";break}default:{if("VALUE"in e){if(BX.type.isArray(e.VALUE)){e.VALUE=[]}else{e.VALUE=""}}break}}}r.push(this.createControl(e))},this);this.parent.disableFieldsDragAndDrop();a=this.parent.getFieldListContainer();BX.cleanNode(a);if(r.length){r.forEach(function(e,i){if(BX.type.isDomNode(e)){if(t.ID!=="tmp_filter"&&t.ID!=="default_filter"&&!("IS_PRESET_FIELD"in n[i])&&!this.isEmptyField(n[i])){BX.addClass(e,this.parent.settings.classPresetField)}BX.append(e,a);if(BX.type.isString(n[i].HTML)){var s=BX.create("div");this.parent.getHiddenElement().appendChild(s);BX.html(s,n[i].HTML)}}},this);this.parent.enableFieldsDragAndDrop()}}}},{key:"showCurrentPresetFields",value:function e(){var t=this.getCurrentPresetData();this.updatePresetFields(t)}},{key:"getCurrentPreset",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPresetCurrent)}},{key:"getCurrentPresetId",value:function e(){var t=this.getCurrentPreset();var i=null;if(BX.type.isDomNode(t)){i=this.getPresetId(t)}else{i="tmp_filter"}return i}},{key:"getCurrentPresetData",value:function e(){var t=this.getCurrentPresetId();var i=null;if(BX.type.isNotEmptyString(t)){i=this.getPreset(t);i=this.extendPreset(i)}return i}},{key:"getContainer",value:function e(){return BX.Filter.Utils.getByClass(this.parent.getFilter(),this.parent.settings.classPresetsContainer)}},{key:"getPresets",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPreset,true)}},{key:"getDefaultPresets",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classDefaultFilter,true)}},{key:"getPinnedPresetNode",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPinnedPreset)}},{key:"isPinned",value:function e(t){return this.getPinnedPresetId()===t}},{key:"getPinnedPresetId",value:function e(){var t=this.getPinnedPresetNode();var i="default_filter";if(t){var s=BX.data(t,"id");i=s||i}return i}}]);return e}();e.Field=o;e.Api=u;e.Fields=y;e.Presets=B})(this.BX.Filter=this.BX.Filter||{},BX.UI.EntitySelector,BX.Event,BX);
/* End */
;; /* /bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js?16548424637131*/
; /* /bitrix/components/bitrix/crm.company.menu/templates/.default/script.js?1654841755484*/
; /* /bitrix/components/bitrix/crm.interface.toolbar/templates/slider/script.min.js?165484177015450*/
; /* /bitrix/components/bitrix/intranet.binding.menu/templates/.default/script.min.js?16548420241622*/
; /* /bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js?165484176525930*/
; /* /bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js?1654841765707975*/
; /* /bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js?165484154145567*/
; /* /bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js?1654841541575*/
; /* /bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js?165484184530971*/
; /* /local/templates/.default/components/bitrix/crm.timeline/.default/script.js?1654759818490818*/
; /* /local/js/im/lib/localstorage/dist/localstorage.bundle.min.js?16547598172914*/
; /* /local/js/im/lib/logger/dist/logger.bundle.min.js?16547598174491*/
; /* /local/js/im/const/dist/registry.bundle.min.js?16547598176519*/
; /* /local/js/im/lib/utils/dist/utils.bundle.min.js?165475981718118*/
; /* /local/js/im/model/dist/registry.bundle.min.js?165475981797207*/
; /* /local/js/im/provider/pull/dist/registry.bundle.min.js?165475981718727*/
; /* /local/js/im/provider/rest/dist/registry.bundle.min.js?16547598175400*/
; /* /local/js/im/lib/timer/dist/timer.bundle.min.js?16547598172172*/
; /* /local/js/im/controller/dist/controller.bundle.min.js?165475981720247*/
; /* /local/js/im/application/launch/dist/launch.bundle.min.js?16547598171204*/
; /* /local/js/im/application/core/dist/core.bundle.min.js?1654759817436*/
; /* /local/js/im/lib/animation/dist/animation.bundle.min.js?16547598171109*/
; /* /local/js/im/view/element/attach/dist/attach.bundle.min.js?165475981717056*/
; /* /local/js/im/view/element/keyboard/dist/keyboard.bundle.min.js?16547598173415*/
; /* /local/js/im/view/popup/dist/popup.bundle.min.js?16547598189787*/
; /* /local/js/im/component/notifications/dist/notifications.bundle.min.js?165475981747876*/
; /* /local/js/im/application/notifications/dist/notifications.bundle.min.js?16547598173079*/
; /* /bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js?1654841546154696*/

//# sourceMappingURL=page_ed07331d39e259f719da7c06b971787c.map.js